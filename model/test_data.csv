when position is greater than or equal to 2 you have the choice to find until position is at least x|a is an approach where you do run if position x , or do run if no other options are possible|when position is smaller than y you have the option to jump until inventory is at least 2|b is a tactic where it is advantageous to do find if iron is not equal to y otherwise, if b do use , or do use if no other options are possible|once position is not the same as y you have the option to jump until finally a is exactly the same as x|b means that it would be good to do build if b is equal to x , or do use if no other options are possible|a is a strategy where you do build if position is larger than 0 otherwise, if b do jump , or do find otherwise|if inventory is less than or equal to 0 you have the option to run until inventory is less than x|a is a good strategy where you should do run if a is smaller than 0 otherwise, if position do use , or do run if no other options are possible|b is an approach where it would be good to do find if b otherwise, if position do find , or do run as a last resort|b is a tactic where it is good to do use if iron is equal to y otherwise, if iron do jump , or do jump otherwise|b states that you should do run if position is not equal to x otherwise, if position do use , or do jump otherwise|a is a good strategy where you should do jump if position is not the same as 0 otherwise, if b do find , or do use otherwise|whenever a is larger than 1 you have the choice to jump until inventory is not equal to y|b entails that you do jump if a is not the same as 1 otherwise, if position do jump , or do jump if not|a entails that you do jump if position x otherwise, if position do use , or do find if no other options are possible|once y you have the option to run until b is greater than or equal to 0|as soon as inventory is greater than or equal to y you have the option to build until finally a is greater than 2|once position is smaller than 0 you can jump until b is not equal to 0|a is an approach where you do find if a is not equal to y otherwise, if position do use , or do jump if no other options are possible|b means that it would be good to do jump if iron y otherwise, if position do jump , or do find as a last resort|b entails that you do find if position y otherwise, if position do run , or do find otherwise|if inventory is not equal to y you have the option to find until finally b is at least 1|a is an approach where it would be good to do jump if position is equal to 0 otherwise, if iron do jump , or do jump if not|when a is smaller than 2 you can build until finally inventory is not the same as y|as soon as b is greater than or equal to 1 you have the option to run until b is exactly the same as 0|a is a good strategy where you should do build if b is smaller than x otherwise, if iron do find , or do jump if not|once a is smaller than 2 you have the choice to use until finally position is greater than or equal to x|a entails that you do run if iron is not the same as 1 otherwise, if position do use , or do run otherwise|as soon as a is greater than or equal to 2 you have the option to jump until finally a is larger than 0|when b is not the same as 0 you are able to find until finally inventory is not equal to x|b is a strategy where you do jump if iron is smaller than x otherwise, if a do use , or do use if not|b is an approach where it would be good to do use if a is less than 1 , or do run otherwise|once inventory is larger than x you are able to use until inventory is not equal to 0|a states that you should do use if position is not equal to 1 otherwise, if position do build , or do jump if not|a is an approach where you do jump if iron is exactly the same as x otherwise, if iron do use , or do use if no other options are possible|whenever a is larger than x you have the choice to use until inventory is exactly the same as 2|as soon as a is exactly the same as y you can run until inventory|as soon as a is at least 1 you can jump until a is not equal to 1|b is a good strategy where you should do run if a is less than 1 otherwise, if position do run , or do use as a last resort|a is a good strategy where you should do jump if a is less than 0 otherwise, if a do build , or do jump if not|a is an approach where you do find if b is less than 2 otherwise, if iron do find , or do build if not|b is an approach where you do run if position y otherwise, if a do build , or do build otherwise|when inventory is at least y you have the choice to run until finally a is not the same as 0|if inventory is not the same as 0 you are able to build until position is greater than or equal to 2|b is an approach where it would be good to do use if iron is smaller than y otherwise, if position do use , or do jump as a last resort|once a is exactly the same as 1 you have the option to build until finally a is greater than x|a is an approach where it would be good to do find if b 2 otherwise, if position do build , or do run if no other options are possible|a is an approach where you do build if a is larger than y otherwise, if position do jump , or do jump as a last resort|b states that you should do run if iron is not the same as x otherwise, if a do run , or do build if no other options are possible|a is a good strategy where you should do use if a is equal to y otherwise, if iron do build , or do find if not|a means that it would be good to do use if position y otherwise, if iron do find , or do jump if no other options are possible|a is a tactic where it is good to do build if a is greater than y otherwise, if iron do find , or do jump if not|if a is equal to 0 you have the option to jump until inventory is greater than 1|a means that it would be good to do find if iron is equal to 0 otherwise, if iron do use , or do use as a last resort|when position is not equal to 1 you have the option to jump until position is less than 1|a means that it would be good to do jump if position 1 otherwise, if a do jump , or do build if no other options are possible|if inventory you have the option to run until position is not equal to 0|b is an approach where you do jump if position is smaller than x otherwise, if position do find , or do build otherwise|once a is smaller than x you can run until finally inventory is larger than x|a suggests that it would be advantageous to do build if b is not equal to x otherwise, if b do run , or do build otherwise|when b is equal to y you are able to run until finally inventory is at most 2|a suggests that it would be advantageous to do use if iron 1 otherwise, if b do find , or do use if no other options are possible|b is an approach where you do build if a is exactly the same as 2 otherwise, if b do build , or do use as a last resort|whenever inventory is larger than y you have the option to jump until finally position is equal to 1|whenever b is greater than x you can run until finally a is larger than 1|when a is less than or equal to 2 you have the choice to run until finally inventory is at most 0|a is a strategy where you do run if position is not equal to 2 otherwise, if position do run , or do run otherwise|a states that you should do run if b y otherwise, if position do find , or do find if not|b is an approach where you do build if b is exactly the same as x otherwise, if position do run , or do build if not|as soon as a is equal to y you are able to build until finally a|whenever position is larger than 2 you are able to use until b is at least 2|b suggests that it would be advantageous to do jump if position is greater than y otherwise, if a do build , or do use otherwise|if position is at most 0 you have the option to jump until finally b is not the same as 0|b is a tactic where it is good to do run if iron is less than x otherwise, if iron do find , or do build if not|if b is equal to 2 you are able to use until finally inventory is greater than 1|once b is not equal to y you can find until b is equal to y|if inventory is greater than or equal to 2 you are able to run until finally a is greater than x|when a is greater than x you have the choice to use until a is at most 1|whenever a is smaller than 0 you can find until x|if a is greater than y you can run until inventory is not equal to 0|a is a tactic where it is good to do find if b is larger than 1 otherwise, if position do run , or do find if no other options are possible|a means that it would be good to do use if b x otherwise, if iron do jump , or do jump if not|when a is at least 0 you can find until a is greater than or equal to x|if position is not the same as y you have the choice to jump until a is exactly the same as 0|b is a tactic where it is advantageous to do jump if a is less than 1 otherwise, if iron do find , or do run otherwise|a means that it would be good to do build if a is exactly the same as y otherwise, if a do build , or do build if no other options are possible|whenever inventory is at least x you have the choice to find until b is smaller than 0|a is a tactic where it is advantageous to do build if b 1 otherwise, if b do find , or do build as a last resort|a suggests that it would be advantageous to do find if position is smaller than 2 otherwise, if position do use , or do build otherwise|when inventory is less than y you are able to use until y|b means that it would be good to do find if iron y otherwise, if position do find , or do run if not|a suggests that it would be advantageous to do find if a is greater than y otherwise, if position do use , or do jump as a last resort|a means that it would be good to do build if a x , or do find as a last resort|a means that it would be good to do build if b is not equal to x otherwise, if position do jump , or do use as a last resort|b suggests that it would be advantageous to do jump if position is larger than x otherwise, if iron do jump , or do jump as a last resort|whenever inventory is equal to 1 you have the choice to run until finally a is not the same as y|a is a strategy where you do jump if b x otherwise, if a do find , or do build if no other options are possible|if b is at most x you have the choice to jump until finally position|once b is not equal to x you are able to build until position is smaller than 0|b is a good strategy where you should do jump if a is smaller than 2 otherwise, if iron do jump , or do use otherwise|a is a tactic where it is good to do run if a is not equal to 1 otherwise, if position do run , or do find if not|a states that you should do run if position is smaller than 2 otherwise, if b do run , or do find as a last resort|whenever b is equal to 0 you have the choice to build until finally a is less than 2|b is a tactic where it is advantageous to do jump if position is exactly the same as x otherwise, if b do find , or do find otherwise|b is a good strategy where you should do jump if a is equal to x otherwise, if b do build , or do use if not|a is a good strategy where you should do use if iron is smaller than 0 otherwise, if b do use , or do use as a last resort|a is a tactic where it is good to do build if position is smaller than x otherwise, if iron do jump , or do jump if not|once a is at most 1 you have the choice to run until inventory is at least 0|once inventory is exactly the same as 2 you have the option to use until inventory is smaller than y|once b is equal to x you are able to build until position is greater than 0|b is a strategy where you do run if b is less than y otherwise, if iron do find , or do run as a last resort|once a is smaller than 0 you have the choice to build until finally a is less than 2|a is a strategy where you do run if a 0 otherwise, if position do run , or do find as a last resort|as soon as position is larger than 0 you are able to jump until finally b is less than y|a is a good strategy where you should do jump if position is equal to x otherwise, if iron do use , or do run as a last resort|b suggests that it would be advantageous to do find if a is not equal to x otherwise, if iron do build , or do use otherwise|b is an approach where you do find if iron is equal to y otherwise, if position do run , or do jump as a last resort|b is a tactic where it is good to do build if b x otherwise, if iron do run , or do use as a last resort|once a is not the same as 1 you are able to use until finally inventory|a is a tactic where it is advantageous to do build if b is exactly the same as 1 otherwise, if b do jump , or do find if no other options are possible|whenever b is greater than y you are able to jump until finally a is greater than or equal to y|as soon as position is at least 1 you can run until finally position is at least 1|when b is at least 2 you have the option to jump until finally position is greater than y|whenever position is equal to y you have the option to run until finally position is larger than x|b is a good strategy where you should do find if iron is greater than x otherwise, if iron do use , or do run as a last resort|a is a strategy where you do run if a is not equal to y otherwise, if a do build , or do find if not|whenever position is greater than or equal to 1 you have the option to run until position is less than x|as soon as position is larger than 1 you have the choice to run until finally a is equal to 0|once inventory is at most y you have the option to run until a is greater than or equal to y|once position is less than 1 you have the option to run until finally b is greater than 1|as soon as inventory is not the same as x you can use until position is not equal to 1|if position is less than 0 you are able to jump until finally b is not equal to 2|a is a tactic where it is advantageous to do find if a is larger than 0 otherwise, if b do find , or do run if no other options are possible|whenever position is not the same as 0 you can find until finally b is at most 1|a is a tactic where it is advantageous to do run if a 1 otherwise, if a do use , or do jump otherwise|a is an approach where it would be good to do jump if a is greater than 1 otherwise, if b do use , or do run as a last resort|whenever b is equal to x you have the choice to jump until finally a is not the same as 1|b entails that you do use if a x otherwise, if iron do run , or do use otherwise|once inventory is greater than or equal to 2 you have the choice to find until inventory is greater than or equal to 2|when inventory is equal to 1 you have the option to jump until finally a is not the same as 0|once inventory you have the option to run until finally b is equal to y|when b is greater than 1 you have the option to build until inventory is smaller than 2|a is an approach where you do use if position is larger than y otherwise, if iron do run , or do build if not|if position is exactly the same as 1 you can jump until finally position is smaller than y|b entails that you do use if iron is not equal to y otherwise, if a do jump , or do build if not|if a is larger than x you have the option to jump until finally a is not equal to 0|when b is equal to 0 you have the choice to use until finally a is less than or equal to 2|a is a strategy where you do build if position y otherwise, if b do run , or do use otherwise|when inventory is at least 0 you have the option to find until position is equal to x|when position is greater than or equal to 1 you can build until b is greater than or equal to 2|a is a tactic where it is good to do build if a otherwise, if iron do find , or do use if not|when b is larger than 2 you are able to run until inventory is larger than y|a means that it would be good to do find if b is exactly the same as y otherwise, if a do find , or do use if not|when a is at most 1 you have the option to find until b is not the same as 0|b states that you should do use if iron is not equal to y otherwise, if iron do use , or do run as a last resort|a is a good strategy where you should do run if b 2 otherwise, if iron do jump , or do jump as a last resort|a states that you should do run if a is less than x otherwise, if iron do jump , or do run if not|a is a strategy where you do use if position is not the same as 2 otherwise, if b do jump , or do find if not|when a is not the same as 1 you are able to use until inventory is less than or equal to 1|once position is not the same as 0 you are able to run until position is greater than or equal to 0|b is a good strategy where you should do run if a is less than 2 otherwise, if position do use , or do build as a last resort|when b is greater than or equal to x you are able to build until finally position is smaller than 1|when b is exactly the same as 1 you are able to build until finally b is not equal to 1|a is a tactic where it is good to do jump if iron is not the same as x otherwise, if a do find , or do build otherwise|if position is greater than 0 you have the choice to jump until position|a is a good strategy where you should do build if b is exactly the same as x otherwise, if iron do find , or do jump as a last resort|as soon as inventory is less than x you have the choice to use until inventory is less than 1|a suggests that it would be advantageous to do use if a is greater than 2 otherwise, if a do jump , or do use if not|b suggests that it would be advantageous to do build if iron is not equal to y otherwise, if b do use , or do use if not|b suggests that it would be advantageous to do use if iron is equal to y otherwise, if a do jump , or do find if no other options are possible|a is an approach where you do run if iron is not the same as y otherwise, if iron do use , or do run if no other options are possible|as soon as a is greater than x you are able to use until b is less than or equal to 0|once a is at most y you have the option to find until inventory is less than or equal to x|b is a good strategy where you should do build if position is smaller than x otherwise, if iron do find , or do jump otherwise|a is a tactic where it is advantageous to do use if a is equal to 0 otherwise, if a do find , or do build otherwise|a entails that you do build if iron is less than x , or do use otherwise|b suggests that it would be advantageous to do find if b is exactly the same as x otherwise, if b do use , or do build if no other options are possible|a suggests that it would be advantageous to do build if a is equal to x otherwise, if position do run , or do run as a last resort|a is an approach where it would be good to do build if a is smaller than x otherwise, if a do use , or do run otherwise|once inventory is greater than or equal to 2 you are able to find until inventory is smaller than 1|once position is smaller than x you are able to use until finally a is less than x|b suggests that it would be advantageous to do use if iron x otherwise, if iron do run , or do find as a last resort|b is an approach where it would be good to do find if b otherwise, if iron do run , or do find as a last resort|a means that it would be good to do run if b is exactly the same as 1 otherwise, if a do use , or do jump if no other options are possible|once position is equal to 0 you can use until a is larger than 1|a is a strategy where you do use if iron is less than 0 otherwise, if position do build , or do run as a last resort|a is an approach where you do jump if b 0 , or do build if no other options are possible|whenever a is at most 1 you have the option to run until finally a is less than or equal to 2|if position is greater than or equal to 1 you have the choice to find until finally inventory is at least x|as soon as position is not equal to 2 you are able to find until a is not equal to 0|if x you have the choice to find until finally inventory is at least 2|if position is not the same as 2 you have the choice to jump until finally b is exactly the same as 2|b is a tactic where it is good to do jump if b is greater than y otherwise, if iron do use , or do run as a last resort|if inventory is at most 0 you can use until finally a is less than or equal to x|whenever inventory is not equal to 0 you are able to jump until position is not the same as 0|b is an approach where it would be good to do jump if position y otherwise, if a do find , or do build if not|if b is smaller than y you are able to find until position is less than or equal to 0|when position is larger than 2 you can run until b is exactly the same as 2|whenever a is larger than x you have the option to find until finally position is not the same as y|a entails that you do run if position is not equal to 1 otherwise, if b do build , or do run if no other options are possible|once inventory is equal to x you are able to find until finally position is less than 0|a is an approach where it would be good to do use if iron x otherwise, if position do use , or do build if no other options are possible|a is an approach where you do use if a y otherwise, if b do jump , or do run if no other options are possible|when position is exactly the same as 1 you have the choice to find until a is not equal to y|a is a tactic where it is good to do use if a is smaller than 2 otherwise, if b do build , or do find otherwise|a is a strategy where you do find if b is exactly the same as x otherwise, if b do use , or do find if no other options are possible|b is a tactic where it is good to do find if b x otherwise, if a do jump , or do run otherwise|once a is greater than 1 you are able to use until finally inventory is not equal to y|when b is at most 0 you have the option to run until finally b is at most 1|b is a tactic where it is advantageous to do find if a is less than 2 otherwise, if a do use , or do jump if no other options are possible|a is a strategy where you do run if a is exactly the same as y otherwise, if a do run , or do jump as a last resort|a is a strategy where you do find if iron is greater than y otherwise, if b do use , or do run otherwise|b states that you should do jump if a is not the same as y otherwise, if iron do build , or do find if not|whenever inventory is not the same as x you have the choice to find until a is not the same as 1|once b is less than y you can build until b is less than or equal to x|a is a tactic where it is good to do run if a is exactly the same as 2 otherwise, if iron do build , or do run if no other options are possible|b states that you should do jump if iron y otherwise, if position do find , or do find otherwise|a suggests that it would be advantageous to do run if b 2 otherwise, if position do find , or do find if no other options are possible|when b is at least y you have the choice to build until a is greater than y|whenever inventory is not equal to 0 you are able to build until position is not the same as y|b is an approach where it would be good to do jump if a is exactly the same as 0 otherwise, if a do find , or do run as a last resort|b is an approach where you do find if iron is equal to x otherwise, if position do use , or do find if not|a suggests that it would be advantageous to do build if a is exactly the same as 2 otherwise, if b do use , or do find otherwise|b is a strategy where you do build if position is equal to x otherwise, if b do run , or do build as a last resort|b states that you should do find if position is larger than 0 , or do jump otherwise|a is an approach where you do build if position 1 otherwise, if position do run , or do find if not|as soon as inventory is less than or equal to y you can use until b|b suggests that it would be advantageous to do use if b x otherwise, if position do jump , or do build if no other options are possible|once position is greater than or equal to x you can use until finally a is at least y|a is a good strategy where you should do find if b is exactly the same as 2 , or do jump if no other options are possible|once b is not the same as y you have the choice to find until finally position is smaller than 0|once b is equal to 1 you have the choice to build until finally b is greater than or equal to 2|whenever position is at least y you have the option to use until b is equal to 1|as soon as b is greater than or equal to 0 you are able to find until finally a is at most x|b entails that you do find if a is not the same as x otherwise, if a do run , or do find if no other options are possible|as soon as a is not equal to x you have the choice to find until finally b is at least 0|a is a tactic where it is advantageous to do jump if iron is less than 1 otherwise, if position do use , or do jump otherwise|a states that you should do find if iron is less than 1 otherwise, if a do run , or do jump if not|whenever position is not equal to 0 you are able to find until a is smaller than 0|a entails that you do find if a 2 otherwise, if a do use , or do jump if not|b is an approach where you do use if position is larger than 1|as soon as a is at most y you are able to build until finally a is greater than or equal to y|whenever inventory is less than or equal to 2 you have the option to run until finally b is equal to y|a is a tactic where it is good to do jump if position is greater than 0 otherwise, if iron do run , or do find as a last resort|b is an approach where you do use if a x otherwise, if position do jump , or do run otherwise|a entails that you do find if iron 0 otherwise, if b do jump , or do use as a last resort|a is an approach where it would be good to do use if b is smaller than y otherwise, if iron do find , or do build otherwise|a is a tactic where it is good to do jump if iron y otherwise, if a do run , or do jump if not|if position is larger than 2 you can run until finally b is greater than x|as soon as b is smaller than 0 you have the choice to build until b is less than x|a entails that you do build if b x otherwise, if b do build , or do find if no other options are possible|b is a strategy where you do run if a x otherwise, if a do run , or do run if no other options are possible|if position is at least y you have the choice to use until inventory is exactly the same as y|a is a tactic where it is good to do jump if position is larger than 2 otherwise, if position do use , or do find if not|a entails that you do use if position is equal to x|a is a tactic where it is good to do build if position is greater than 1 otherwise, if position do run , or do use if not|when position is not the same as 1 you can find until finally position is greater than 1|whenever a is not the same as y you have the option to build until b is not the same as x|b is an approach where you do run if position x otherwise, if b do run , or do build otherwise|if b is at most 2 you have the option to use until finally b is at least 1|a entails that you do jump if b 0 otherwise, if a do build , or do build otherwise|a is an approach where it would be good to do use if b is less than y otherwise, if a do run , or do run if not|when inventory is less than or equal to y you have the option to jump until position is at most x|if position you have the option to run until position is equal to 1|a means that it would be good to do jump if b is smaller than y otherwise, if a do jump , or do find if no other options are possible|b is an approach where you do use if a x otherwise, if a do jump , or do build as a last resort|when a is larger than 1 you are able to build until finally b is not equal to 1|a is a tactic where it is good to do jump if b 2 otherwise, if iron do jump , or do run if not|once b is not equal to 2 you have the choice to use until finally y|a is an approach where you do run if position 2 otherwise, if a do use , or do run if no other options are possible|a entails that you do build if a otherwise, if iron do find , or do run otherwise|once a is not the same as y you have the option to find until a is equal to 1|whenever a is at least x you have the option to jump until a is less than or equal to 2|when inventory is not equal to 1 you can build until b is larger than y|if b is not the same as 0 you can build until finally position is smaller than 2|when inventory is equal to 1 you are able to use until a is greater than 1|once b is at least x you have the option to run until inventory is greater than x|if a is not equal to 2 you have the choice to find until finally b is not the same as 0|if inventory is not equal to 1 you can use until finally position is not equal to x|b is a good strategy where you should do find if b is equal to 2|whenever position is smaller than 2 you are able to run until b is exactly the same as y|if a is at least 1 you have the choice to find until b is less than y|if inventory is not equal to 1 you can use until finally y|if position you have the choice to use until finally b is exactly the same as y|a means that it would be good to do jump if iron is greater than 2 otherwise, if b do use , or do use otherwise|as soon as a is less than 1 you have the option to use until finally a is equal to 0|b states that you should do use if position y otherwise, if iron do build , or do find as a last resort|once b is larger than 0 you can jump until finally position is at least x|b means that it would be good to do use if a y otherwise, if a do find , or do use as a last resort|once position is exactly the same as 2 you are able to find until a is at most y|a states that you should do run if a 0 otherwise, if a do find , or do find if not|when a is less than 2 you are able to use until finally position is greater than or equal to y|when position is less than y you can jump until finally a is at most 0|a states that you should do use if b is larger than 2 otherwise, if b do find , or do build if no other options are possible|b is a tactic where it is advantageous to do find if a is exactly the same as 1 otherwise, if iron do build , or do use if not|a entails that you do build if position 1 otherwise, if position do jump , or do use if not|a is a good strategy where you should do find if position 1 otherwise, if position do jump , or do use if not|as soon as b is greater than x you have the choice to jump until a is less than or equal to 0|once inventory is equal to x you can build until finally a is less than 0|when inventory is equal to 0 you have the choice to build until finally b is exactly the same as 2|if inventory is greater than 2 you have the choice to find until position is smaller than 0|if a is not the same as y you have the choice to jump until finally inventory is at most y|b entails that you do build if position is exactly the same as x otherwise, if a do use , or do run if no other options are possible|a is an approach where it would be good to do jump if b y otherwise, if b do build , or do build as a last resort|a is a tactic where it is good to do jump if iron is exactly the same as y otherwise, if a do run , or do run if no other options are possible|once a is less than x you can build until b is not the same as 1|a is an approach where it would be good to do find if a 1 otherwise, if position do find , or do build as a last resort|once inventory is at least y you can use until finally inventory is less than or equal to x|as soon as x you can run until finally b is smaller than 0|whenever a is greater than 0 you are able to find until b is less than 0|a is an approach where it would be good to do build if a 2 otherwise, if iron do find , or do find otherwise|b is a good strategy where you should do run if position y otherwise, if iron do use , or do find if no other options are possible|a is a tactic where it is good to do build if b x otherwise, if iron do build , or do use as a last resort|b is a strategy where you do run if a is equal to x otherwise, if a do use , or do jump as a last resort|a states that you should do build if position is exactly the same as y otherwise, if a do build , or do run if not|as soon as inventory is not equal to y you have the choice to build until finally inventory is smaller than 0|a entails that you do use if position is equal to 0 otherwise, if a do jump , or do run if not|whenever b is greater than or equal to x you have the choice to run until a is at most x|a is an approach where it would be good to do build if iron is not equal to 0 otherwise, if a do jump , or do jump as a last resort|a is an approach where it would be good to do jump if a 1 otherwise, if a do build , or do use otherwise|if inventory is larger than y you are able to jump until inventory is not equal to x|b is an approach where it would be good to do find if a x otherwise, if position do build , or do use otherwise|whenever position is greater than or equal to x you are able to find until finally a is exactly the same as 2|once inventory is larger than y you can find until b is greater than 1|a is an approach where it would be good to do run if a y , or do jump as a last resort|whenever a is greater than 0 you can build until b is not the same as y|b is an approach where it would be good to do run if b is less than x otherwise, if a do run , or do jump otherwise|when position is greater than or equal to 2 you can build until finally b is exactly the same as 2|a entails that you do jump if iron is exactly the same as x otherwise, if b do use , or do use otherwise|a is an approach where it would be good to do use if b is not the same as 2 otherwise, if b do build , or do use if no other options are possible|as soon as position is at most 0 you have the option to jump until finally b is not the same as y|when a is greater than or equal to x you can use until b is greater than 2|whenever position is larger than 1 you are able to build until a is less than 2|a is a strategy where you do find if position is greater than 2 , or do find otherwise|as soon as a is smaller than x you can use until finally b|a suggests that it would be advantageous to do use if a is exactly the same as y otherwise, if iron do jump , or do find if not|once a is equal to 1 you can find until finally b is greater than 0|a is an approach where you do run if position is not the same as 1 otherwise, if a do jump , or do use if not|a is a tactic where it is good to do use if position is not the same as 0 otherwise, if position do use , or do run otherwise|whenever inventory is smaller than 2 you are able to build until finally position is at least y|b suggests that it would be advantageous to do jump if b is less than x otherwise, if position do run , or do use if no other options are possible|a is an approach where you do jump if b is less than 0 otherwise, if a do find , or do find as a last resort|b entails that you do build if position 0 , or do jump if no other options are possible|a means that it would be good to do build if iron x otherwise, if a do jump , or do build as a last resort|a is a tactic where it is good to do run if position is not the same as 2 otherwise, if position do run , or do build otherwise|when a is less than or equal to y you have the option to use until finally a is larger than 1|a means that it would be good to do use if iron is greater than 2 otherwise, if a do find , or do build if no other options are possible|as soon as b is larger than 2 you can find until finally inventory is at least 2|a means that it would be good to do build if position is equal to 1 otherwise, if a do jump , or do build if not|a is an approach where you do find if position 1 otherwise, if a do use , or do use as a last resort|a is a strategy where you do jump if a is larger than 1 otherwise, if b do find , or do build as a last resort|once inventory is greater than x you have the choice to jump until finally position is larger than 2|whenever inventory is at most x you have the choice to run until position is not the same as 0|a is an approach where it would be good to do find if a y otherwise, if position do run , or do jump if no other options are possible|whenever inventory is at most 0 you have the choice to run until finally position|a is a good strategy where you should do use if b x otherwise, if iron do find , or do jump if no other options are possible|a is a good strategy where you should do find if b y otherwise, if a do use , or do run if not|b suggests that it would be advantageous to do build if iron is smaller than y otherwise, if b do jump , or do jump otherwise|a is a tactic where it is advantageous to do jump if position 2 otherwise, if b do run , or do find if not|as soon as inventory is smaller than 2 you are able to run until finally b is not the same as x|a entails that you do find if iron is exactly the same as y otherwise, if a do build , or do use as a last resort|when inventory is at most x you have the option to build until position|b is a tactic where it is advantageous to do jump if position is not the same as y otherwise, if iron do build , or do use as a last resort|b is a tactic where it is good to do find if a is equal to y otherwise, if iron do use , or do build as a last resort|a is a strategy where you do build if position is less than 2 otherwise, if a do find , or do build if no other options are possible|once inventory is greater than or equal to 1 you have the option to find until inventory is larger than y|a suggests that it would be advantageous to do run if a is less than x otherwise, if a do run , or do find otherwise|b is an approach where it would be good to do use if a is smaller than y otherwise, if position do find , or do build if not|as soon as inventory is at most y you have the option to find until finally inventory is less than or equal to 2|as soon as a is greater than or equal to 1 you have the choice to run until finally position is equal to y|if inventory is at most 1 you have the choice to run until a is greater than 2|a is an approach where you do jump if b is less than 1|a is an approach where it would be good to do run if a 1 otherwise, if a do build , or do use if no other options are possible|a suggests that it would be advantageous to do jump if position is larger than 0 otherwise, if iron do find , or do build if no other options are possible|if inventory is at most 1 you can build until b is greater than or equal to 1|if b is exactly the same as 0 you can build until b is less than x|b is an approach where you do run if iron is smaller than x otherwise, if a do build , or do build otherwise|a is a tactic where it is advantageous to do use if b is equal to y otherwise, if b do build , or do find if no other options are possible|once position is not equal to 2 you are able to build until finally inventory is less than or equal to y|a is a tactic where it is good to do use if a is greater than 0 otherwise, if position do jump , or do jump as a last resort|b is a strategy where you do find if a is not equal to 0 otherwise, if position do find , or do use if no other options are possible|a suggests that it would be advantageous to do run if a is larger than x otherwise, if b do use , or do build as a last resort|a is a tactic where it is advantageous to do use if b 2 otherwise, if position do run , or do jump otherwise|b is a tactic where it is advantageous to do use if iron is equal to x otherwise, if position do find , or do jump if no other options are possible|a states that you should do use if a is equal to x otherwise, if b do use , or do jump as a last resort|b is a good strategy where you should do find if b is larger than y otherwise, if iron do build , or do run if no other options are possible|if position is at least x you have the option to find until finally a is at most x|when b is exactly the same as x you have the option to build until finally position is exactly the same as y|a is an approach where you do build if b is exactly the same as x otherwise, if a do run , or do jump otherwise|when inventory is equal to 2 you are able to build until finally position is not the same as 2|a means that it would be good to do run if b is exactly the same as 1 otherwise, if a do find , or do find as a last resort|a entails that you do find if b is not equal to 0 otherwise, if iron do build , or do build as a last resort|a is a strategy where you do run if b 2 , or do use if not|b is an approach where it would be good to do run if position is not the same as y otherwise, if iron do find , or do jump if not|if position is smaller than 0 you have the option to find until finally inventory is at most 1|whenever b is equal to 2 you have the option to run until finally a is greater than y|a states that you should do run if iron is larger than y otherwise, if b do jump , or do find if no other options are possible|a is a strategy where you do use if a 1 otherwise, if iron do run , or do build otherwise|a is a strategy where you do use if iron is larger than 0 otherwise, if b do jump , or do use if no other options are possible|as soon as position is equal to 2 you are able to run until finally inventory is at least 0|a entails that you do find if a 2 otherwise, if position do jump , or do find as a last resort|if position is greater than or equal to y you can find until finally inventory is larger than 1|once a is at most 1 you have the choice to use until finally position is not the same as y|once b is at most 1 you are able to build until b is larger than 2|whenever inventory is less than or equal to x you have the choice to use until a is at least y|if a is greater than or equal to 2 you have the option to jump until finally b is smaller than 1|b is a good strategy where you should do build if a is not equal to y otherwise, if position do jump , or do find as a last resort|a states that you should do find if iron is smaller than x otherwise, if b do build , or do jump if not|if inventory is exactly the same as 0 you have the choice to run until finally a is not the same as 1|b entails that you do build if a is less than 2 otherwise, if b do use , or do jump if no other options are possible|if b is at least 2 you can use until finally a is at most x|whenever a is exactly the same as 0 you have the choice to jump until position is smaller than 1|a is a tactic where it is good to do use if position is larger than 0 otherwise, if iron do jump , or do run otherwise|a is an approach where it would be good to do find if a is not equal to 2 , or do build if not|when a is smaller than y you can run until finally a is not the same as 1|once y you are able to jump until finally a is greater than y|a suggests that it would be advantageous to do jump if iron 0 otherwise, if b do find , or do use if not|whenever b is greater than or equal to x you have the option to use until finally inventory is greater than or equal to 1|as soon as inventory is equal to y you are able to build until finally inventory is smaller than y|if inventory is less than x you have the choice to run until b is larger than 2|a is a strategy where you do build if b is less than 0 otherwise, if position do use , or do run otherwise|when inventory is not the same as x you can use until position is equal to 1|when a is greater than y you can jump until b is greater than or equal to x|as soon as b is not the same as 0 you are able to run until finally inventory is larger than 1|b entails that you do find if position is not the same as x otherwise, if iron do use , or do jump if no other options are possible|whenever a is greater than 1 you can build until finally inventory is larger than 0|a suggests that it would be advantageous to do build if position 0 otherwise, if position do jump , or do build otherwise|when position is less than or equal to 2 you have the option to build until finally position is at least y|a is a strategy where you do use if iron y otherwise, if a do build , or do find if not|b is an approach where you do use if iron x otherwise, if b do find , or do run as a last resort|when a is equal to 0 you are able to jump until finally a is greater than 0|a is a tactic where it is advantageous to do jump if position is equal to 1 otherwise, if position do find , or do use if no other options are possible|when position is at most 1 you have the option to find until finally inventory is smaller than x|if inventory is not equal to 2 you have the option to jump until a is greater than y|once position is at least 1 you are able to run until a|whenever inventory is not equal to y you are able to build until a is at least y|if b is not the same as 1 you have the option to run until position is greater than or equal to 1|whenever position is greater than or equal to y you have the option to run until y|a is a tactic where it is good to do jump if iron is smaller than 0 otherwise, if position do find , or do use if no other options are possible|a suggests that it would be advantageous to do find if b x otherwise, if a do jump , or do run if no other options are possible|if b is smaller than y you have the choice to run until finally inventory is equal to 0|when position is equal to y you can use until b is equal to y|a is an approach where it would be good to do find if position 0 otherwise, if b do use , or do find if not|a is a tactic where it is good to do find if a is not the same as 1 , or do build if not|when position is equal to x you have the option to jump until b is not equal to 1|a entails that you do jump if position is smaller than 2 otherwise, if a do use , or do find as a last resort|when a is at most 1 you have the option to use until finally a is greater than x|when a is equal to 1 you have the option to run until finally b is less than x|a is an approach where it would be good to do use if b is exactly the same as 2 otherwise, if position do find , or do run otherwise|when a is at most x you are able to use until inventory is larger than y|b is a tactic where it is advantageous to do build if iron is equal to x otherwise, if b do find , or do run otherwise|once a is not equal to x you have the choice to find until a is equal to y|b entails that you do jump if iron is not the same as x otherwise, if iron do jump , or do find otherwise|if position is less than or equal to 2 you can build until position is exactly the same as 2|when inventory is at most y you are able to find until b is greater than 0|b means that it would be good to do build if iron is not the same as x otherwise, if iron do run , or do run if not|b means that it would be good to do run if a x otherwise, if position do use , or do jump otherwise|when inventory is not the same as y you are able to use until a is less than or equal to y|as soon as a is at most 2 you have the option to jump until a is smaller than 2|a entails that you do build if position is not the same as y otherwise, if b do find , or do find if no other options are possible|a entails that you do run if position y otherwise, if a do run , or do use as a last resort|a is a strategy where you do run if position is less than y otherwise, if b do run , or do jump if not|when a is exactly the same as x you have the option to jump until a is at most 1|b is a good strategy where you should do run if iron x otherwise, if iron do run , or do build if not|if a is larger than 0 you have the choice to jump until position is smaller than 1|as soon as inventory is not equal to 0 you have the choice to build until b is at least y|b is a tactic where it is good to do run if a is not the same as y otherwise, if position do run , or do jump if not|a is a good strategy where you should do use if iron is less than 0 otherwise, if b do run , or do build otherwise|a entails that you do build if iron is greater than 2 otherwise, if b do build , or do run if not|a suggests that it would be advantageous to do build if b is smaller than y otherwise, if position do find , or do jump otherwise|when inventory you can find until b|b is a tactic where it is good to do build if a is larger than x otherwise, if position do find , or do jump if not|b is a tactic where it is good to do build if position otherwise, if iron do find , or do use as a last resort|as soon as a is at most 2 you are able to use until inventory is greater than 1|b entails that you do jump if a is less than 2 otherwise, if a do use , or do use otherwise|whenever position is less than 2 you have the option to run until finally a is at most 1|a is a tactic where it is advantageous to do jump if iron is smaller than x otherwise, if iron do build , or do build as a last resort|whenever b is not the same as y you are able to jump until finally b is greater than 1|a means that it would be good to do build if position is exactly the same as 2 otherwise, if b do jump , or do use if not|when b is equal to 2 you have the option to find until inventory is exactly the same as y|when a is equal to 1 you have the choice to run until finally a is at least 1|if position you are able to use until x|a is an approach where it would be good to do run if b x otherwise, if a do build , or do run if no other options are possible|a is a tactic where it is advantageous to do run if b y|whenever b is less than or equal to y you have the option to find until finally inventory is less than x|as soon as b is equal to 0 you have the choice to build until position is greater than or equal to 1|a is a strategy where you do build if a is equal to y otherwise, if iron do run , or do run otherwise|whenever a is less than or equal to y you are able to use until position is smaller than y|once b is equal to x you are able to find until finally b|whenever position is not the same as 1 you are able to jump until finally position is smaller than 2|when a is greater than or equal to 0 you can find until finally b is less than or equal to y|a means that it would be good to do run if b is equal to 1 otherwise, if a do find , or do jump if no other options are possible|when position is not equal to 1 you can find until position is greater than 0|a means that it would be good to do run if a 1 otherwise, if position do use , or do build otherwise|a is an approach where it would be good to do jump if b is less than 2 otherwise, if a do run , or do jump otherwise|whenever position is exactly the same as 1 you have the choice to run until inventory is less than or equal to 0|a is a tactic where it is advantageous to do build if b is not equal to x otherwise, if iron do build , or do use if not|once a is not equal to 0 you have the option to find until finally b is greater than or equal to 0|a means that it would be good to do use if a is less than x otherwise, if a do jump , or do find otherwise|b is an approach where you do run if b is less than x otherwise, if a do run , or do find otherwise|b means that it would be good to do find if a is not equal to 2 otherwise, if a do run , or do find if no other options are possible|b is a tactic where it is advantageous to do build if position otherwise, if b do use , or do jump otherwise|a is an approach where you do find if b is equal to 1 otherwise, if position do jump , or do build as a last resort|when inventory is smaller than 0 you have the option to jump until finally b is exactly the same as y|b is a good strategy where you should do jump if b is larger than y otherwise, if iron do find , or do find if no other options are possible|when a is at most 1 you can run until finally a is equal to 1|whenever position is greater than x you can find until position is exactly the same as 2|whenever b is at most 2 you are able to use until finally a is less than 0|a is a tactic where it is good to do jump if a is exactly the same as 2 otherwise, if iron do use , or do use as a last resort|as soon as a is not equal to 0 you can use until a is exactly the same as 2|a means that it would be good to do run if b is exactly the same as 0 otherwise, if a do jump , or do find if no other options are possible|a suggests that it would be advantageous to do run if a is not the same as y otherwise, if position do use , or do use otherwise|a is an approach where it would be good to do jump if b 1 otherwise, if a do use , or do jump as a last resort|when b is less than or equal to 1 you have the choice to find until finally inventory is smaller than 1|b suggests that it would be advantageous to do run if a is not the same as y otherwise, if a do jump , or do run as a last resort|a is an approach where you do find if iron is not the same as 0 otherwise, if a do find , or do jump as a last resort|when inventory is less than 0 you are able to run until a is at least y|whenever a is at least x you have the choice to find until inventory is exactly the same as 2|b states that you should do find if position is exactly the same as y otherwise, if position do find , or do jump otherwise|whenever a is exactly the same as y you have the option to jump until b|b is an approach where you do build if iron y otherwise, if iron do run , or do build otherwise|a is a tactic where it is good to do run if b is larger than 0 otherwise, if b do find , or do find if not|when position is not equal to 0 you can use until b is greater than or equal to 1|b is a strategy where you do build if iron is smaller than x otherwise, if position do use , or do find if not|b is a tactic where it is good to do find if position is not equal to 1 , or do find otherwise|as soon as position is exactly the same as y you have the option to run until inventory is equal to 2|a means that it would be good to do use if b is equal to 0 otherwise, if b do use , or do build as a last resort|a is a tactic where it is good to do jump if a is larger than 1 otherwise, if position do build , or do use otherwise|when position is not the same as 2 you can use until position is greater than or equal to x|a is a tactic where it is advantageous to do build if position x otherwise, if position do jump , or do use if not|whenever b is at least 2 you have the option to build until finally a is smaller than 0|b is a tactic where it is advantageous to do build if a is not the same as x otherwise, if iron do jump , or do find if not|if position is at least y you have the choice to find until finally y|whenever a is at least x you are able to find until finally position is less than or equal to 1|b entails that you do jump if b is smaller than x otherwise, if a do build , or do find as a last resort|b suggests that it would be advantageous to do build if b x otherwise, if b do build , or do use if no other options are possible|a is an approach where it would be good to do run if a is exactly the same as 1 otherwise, if b do build , or do find if not|a is a good strategy where you should do find if iron is larger than x otherwise, if b do build , or do run as a last resort|a means that it would be good to do run if iron is smaller than 1 otherwise, if b do find , or do use if no other options are possible|a is a tactic where it is advantageous to do run if iron is not the same as 2 otherwise, if position do find , or do find if not|if inventory is less than or equal to x you have the option to find until inventory is at most 1|b suggests that it would be advantageous to do build if b is not equal to y otherwise, if position do use , or do build if not|if position is less than or equal to x you have the choice to build until finally a is larger than x|b states that you should do build if a is not equal to 0 , or do build as a last resort|a is a good strategy where you should do jump if iron otherwise, if iron do find , or do jump otherwise|a is a strategy where you do run if b is smaller than 0 otherwise, if iron do jump , or do run if not|a is an approach where it would be good to do jump if a is equal to 0 otherwise, if position do use , or do build if no other options are possible|b suggests that it would be advantageous to do jump if position otherwise, if a do find , or do build if no other options are possible|once b is equal to 0 you are able to find until finally inventory is at least 1|a is a tactic where it is good to do build if position 0 otherwise, if a do find , or do find as a last resort|once position is greater than y you are able to build until finally b is at most 0|if position is smaller than x you have the choice to run until a is not the same as 2|a is an approach where you do find if b y otherwise, if a do jump , or do find as a last resort|a is a tactic where it is advantageous to do find if a is smaller than 1 otherwise, if iron do jump , or do jump as a last resort|a entails that you do find if a is larger than x otherwise, if b do find , or do jump otherwise|a states that you should do find if iron is greater than y otherwise, if b do run , or do jump as a last resort|a is a strategy where you do use if position x otherwise, if position do run , or do jump otherwise|a entails that you do find if iron 2 otherwise, if position do use , or do run otherwise|once a is greater than or equal to 1 you can jump until finally b|when a is not the same as 0 you can build until finally a is less than 0|a entails that you do build if iron is not equal to y otherwise, if b do jump , or do use if no other options are possible|once b is less than or equal to 1 you are able to build until finally inventory is less than x|a is a strategy where you do find if a 1 , or do find if no other options are possible|a is a tactic where it is advantageous to do find if a 1 otherwise, if iron do find , or do use otherwise|once position is less than or equal to y you are able to use until inventory is less than or equal to 2|b states that you should do build if a is less than y otherwise, if position do jump , or do find if no other options are possible|a is a tactic where it is advantageous to do build if iron is equal to 0 otherwise, if position do build , or do run as a last resort|a suggests that it would be advantageous to do run if b is not equal to 2 otherwise, if iron do find , or do run as a last resort|a is a tactic where it is good to do jump if a is equal to x otherwise, if b do find , or do build otherwise|a is a tactic where it is advantageous to do run if a is less than y otherwise, if position do jump , or do run as a last resort|if a you are able to find until a is equal to 0|as soon as position is at least x you can find until b is equal to y|a entails that you do find if position is larger than x otherwise, if position do jump , or do build as a last resort|whenever inventory is greater than 1 you have the choice to find until position is less than or equal to 0|a entails that you do jump if b is not equal to y otherwise, if b do use , or do find if no other options are possible|b suggests that it would be advantageous to do find if position y otherwise, if b do jump , or do jump if no other options are possible|a suggests that it would be advantageous to do use if iron is greater than y otherwise, if position do find , or do jump if no other options are possible|a entails that you do use if a is exactly the same as 2 otherwise, if iron do run , or do jump if not|as soon as b is larger than x you can use until a is smaller than y|whenever position is less than or equal to 2 you have the option to find until b is at least 1|a is a tactic where it is good to do use if b x otherwise, if a do find , or do find if no other options are possible|a is a strategy where you do run if position y otherwise, if a do find , or do find otherwise|b suggests that it would be advantageous to do run if a y otherwise, if b do build , or do build if no other options are possible|once a is equal to x you have the option to build until inventory is greater than 1|a is a strategy where you do find if position is larger than y otherwise, if iron do run , or do find if not|as soon as b is exactly the same as 2 you have the choice to run until position is exactly the same as y|a is an approach where it would be good to do build if b is not the same as 2 , or do jump if no other options are possible|as soon as inventory is at least y you have the choice to jump until a is greater than x|a is an approach where you do find if b is equal to 2 , or do find otherwise|a suggests that it would be advantageous to do jump if iron 1 otherwise, if a do jump , or do find as a last resort|a means that it would be good to do find if b is not the same as 2 otherwise, if iron do build , or do jump otherwise|if a is equal to x you have the choice to find until finally b is at least 1|b is a tactic where it is good to do use if a is exactly the same as y otherwise, if iron do find , or do find if no other options are possible|a is an approach where you do use if b is not the same as 1 otherwise, if b do jump , or do run as a last resort|when a is exactly the same as 0 you have the option to build until finally inventory is not the same as 1|a entails that you do run if b is larger than x otherwise, if b do run , or do jump as a last resort|b entails that you do jump if position x otherwise, if iron do build , or do run if not|as soon as b is less than 1 you are able to run until finally inventory|a is a strategy where you do build if a is greater than 2 otherwise, if iron do use , or do find otherwise|whenever b is not the same as x you can use until finally a is exactly the same as x|whenever b is not equal to 2 you can use until finally a is larger than y|a means that it would be good to do run if b is smaller than 1 otherwise, if iron do jump , or do build otherwise|a entails that you do jump if iron is exactly the same as 1 otherwise, if a do use , or do find if not|if b is smaller than 1 you have the choice to build until inventory is exactly the same as x|a is an approach where you do build if position is not equal to y otherwise, if iron do use , or do find otherwise|whenever a is larger than 1 you have the option to use until b is greater than or equal to x|if a is less than or equal to x you can find until finally a is at most 0|if position is not the same as y you can build until finally inventory is smaller than 1|a is a good strategy where you should do build if iron is exactly the same as 1 otherwise, if b do find , or do find as a last resort|a is an approach where you do jump if iron 2 otherwise, if b do run , or do find if no other options are possible|b suggests that it would be advantageous to do find if a is not equal to x otherwise, if a do use , or do run if not|b means that it would be good to do jump if b x otherwise, if iron do build , or do jump if not|a is a strategy where you do run if iron is less than y otherwise, if position do use , or do use if no other options are possible|a suggests that it would be advantageous to do build if b is exactly the same as x otherwise, if position do run , or do find if not|whenever inventory is equal to y you have the option to find until finally b is greater than y|a entails that you do use if a is exactly the same as 0 otherwise, if iron do jump , or do jump if no other options are possible|as soon as inventory is at least 0 you can build until a is at most 0|b is a tactic where it is advantageous to do use if iron is exactly the same as y otherwise, if iron do find , or do use otherwise|a is a good strategy where you should do build if position is not the same as 2 otherwise, if a do find , or do use as a last resort|when position is smaller than y you are able to find until x|b is an approach where you do build if a is not equal to 0 otherwise, if a do find , or do build otherwise|a means that it would be good to do find if position x otherwise, if iron do build , or do find if not|once a is smaller than 1 you can jump until finally inventory is at most 1|a is an approach where you do find if a is larger than x otherwise, if a do build , or do use if not|a is a good strategy where you should do jump if a is smaller than y otherwise, if b do build , or do find if not|once a is at least 1 you have the option to run until a is at most 2|b entails that you do find if b x otherwise, if iron do use , or do find otherwise|a entails that you do find if iron y otherwise, if iron do jump , or do use if no other options are possible|whenever inventory is greater than y you can use until inventory is less than 0|as soon as inventory is less than y you are able to build until finally b is greater than or equal to 1|b is a strategy where you do build if position x otherwise, if position do build , or do jump otherwise|a is an approach where it would be good to do jump if position is smaller than x otherwise, if position do build , or do run if no other options are possible|a is a tactic where it is good to do run if iron x otherwise, if position do jump , or do run if not|b suggests that it would be advantageous to do jump if b y otherwise, if iron do use , or do find if not|if position is not the same as x you have the choice to build until finally inventory is less than or equal to 1|as soon as a is less than or equal to 1 you are able to jump until finally inventory is less than or equal to 1|a is an approach where you do build if iron is exactly the same as 1 otherwise, if b do run , or do build as a last resort|once position is less than 0 you can find until a|as soon as b is smaller than 2 you have the choice to run until finally position is greater than or equal to 2|b entails that you do use if position is larger than y otherwise, if position do find , or do run as a last resort|a is a strategy where you do build if position 2 otherwise, if iron do use , or do find as a last resort|if a is at least y you are able to build until inventory is larger than x|when b is exactly the same as 0 you can build until a is at most 0|b is a tactic where it is advantageous to do build if position is smaller than x otherwise, if position do build , or do find otherwise|once inventory is equal to 0 you have the choice to build until finally b is not the same as x|whenever position is greater than or equal to 1 you have the choice to run until finally inventory is not equal to x|b suggests that it would be advantageous to do use if position is exactly the same as 1 , or do find if no other options are possible|when position you have the option to run until a is exactly the same as 1|a is a tactic where it is good to do jump if a is not equal to 2 otherwise, if b do build , or do build if not|a is an approach where it would be good to do find if b is greater than 1 otherwise, if b do build , or do use if not|a is a strategy where you do use if b is exactly the same as 0 otherwise, if position do run , or do find if not|a is a tactic where it is good to do jump if b is less than 0 otherwise, if a do build , or do find as a last resort|a is a tactic where it is good to do build if iron y otherwise, if a do find , or do jump otherwise|a is a tactic where it is advantageous to do run if b is greater than 1 otherwise, if b do build , or do build as a last resort|b is an approach where you do find if position x otherwise, if position do find , or do jump if no other options are possible|whenever position is at least y you can find until finally a is at least y|whenever b is smaller than y you can jump until finally a is greater than 1|a states that you should do use if b y otherwise, if position do find , or do build otherwise|as soon as position is not equal to y you can build until b is greater than 1|as soon as a is equal to x you have the choice to jump until finally a is greater than or equal to x|b suggests that it would be advantageous to do use if iron is not equal to y otherwise, if b do build , or do run if not|once b is greater than or equal to y you have the choice to jump until finally position is smaller than x|as soon as position is equal to y you have the option to use until b is less than 0|a is an approach where it would be good to do use if b 2 otherwise, if position do build , or do jump if not|once position is greater than 0 you can find until finally inventory is at least x|a means that it would be good to do find if iron is smaller than 1 otherwise, if position do run , or do build as a last resort|a is a tactic where it is good to do jump if iron is less than x otherwise, if b do use , or do run if not|a means that it would be good to do use if iron is not the same as y otherwise, if a do jump , or do use otherwise|b is a good strategy where you should do build if a is equal to y otherwise, if a do run , or do run if not|b means that it would be good to do run if a is exactly the same as y otherwise, if a do find , or do use as a last resort|when position is larger than y you can find until a is less than or equal to 2|when b is not equal to 0 you have the choice to run until inventory is larger than 2|a means that it would be good to do use if position y , or do build if not|whenever a is not the same as 1 you have the choice to jump until position is greater than x|as soon as inventory is larger than 1 you have the choice to build until position is exactly the same as 0|b is a strategy where you do find if iron is not the same as y otherwise, if iron do use , or do jump if not|a is an approach where it would be good to do run if position 1 otherwise, if position do jump , or do find if no other options are possible|if position is larger than 2 you can use until a is equal to 2|a is an approach where it would be good to do find if iron is not the same as 0 otherwise, if b do use , or do build if no other options are possible|as soon as inventory is at most 2 you are able to find until b is exactly the same as 1|once x you are able to use until finally position is at most y|b states that you should do build if iron otherwise, if a do find , or do run otherwise|b is an approach where you do find if b is not the same as x otherwise, if position do build , or do run as a last resort|as soon as b is equal to x you are able to build until finally inventory is exactly the same as 1|when inventory is larger than x you have the option to use until finally inventory is smaller than 0|as soon as inventory is larger than x you are able to jump until a is less than or equal to y|a states that you should do jump if b is exactly the same as 1 otherwise, if iron do jump , or do use as a last resort|whenever position is exactly the same as y you are able to use until finally inventory is at most y|a is a tactic where it is advantageous to do use if a 1 otherwise, if position do build , or do find if no other options are possible|whenever position is smaller than y you are able to find until position is at most 1|a states that you should do find if iron is not the same as 0 otherwise, if iron do run , or do jump otherwise|whenever position is not equal to 1 you can build until finally position is not equal to 0|a means that it would be good to do find if a is exactly the same as x otherwise, if position do run , or do find if not|as soon as position is greater than 2 you can find until finally a is less than or equal to y|a is a tactic where it is advantageous to do jump if b is greater than x otherwise, if iron do jump , or do run if not|if a is less than or equal to x you are able to use until a is greater than or equal to 0|as soon as inventory is less than or equal to y you are able to find until position is not the same as y|as soon as position is less than x you can build until b is equal to x|a states that you should do build if b 1 otherwise, if b do jump , or do run otherwise|a entails that you do run if iron is not equal to y otherwise, if b do use , or do run if not|as soon as position is equal to 1 you have the choice to use until a is exactly the same as 1|a is an approach where it would be good to do run if b is less than y otherwise, if iron do find , or do jump as a last resort|a is an approach where it would be good to do run if iron is not equal to 0 , or do build otherwise|whenever a is equal to 2 you have the option to find until position is not equal to 1|a states that you should do find if b is less than x otherwise, if position do build , or do find if not|when position is less than 1 you have the choice to jump until finally position is not the same as x|whenever a is not equal to 2 you can use until finally position is at most 1|a suggests that it would be advantageous to do find if b is not equal to 0 otherwise, if b do use , or do build if no other options are possible|when b is smaller than 1 you have the choice to find until a is larger than 2|when position is at most 2 you have the choice to jump until a|once b is at most 1 you have the choice to jump until position is at most 1|a means that it would be good to do build if b is not the same as 0 otherwise, if position do find , or do find otherwise|a states that you should do build if iron is not the same as 1 otherwise, if position do run , or do jump as a last resort|as soon as a is exactly the same as x you are able to run until position is equal to y|as soon as a is at most x you have the choice to jump until a is exactly the same as 2|b means that it would be good to do use if position is smaller than x otherwise, if iron do jump , or do find if no other options are possible|b means that it would be good to do use if iron otherwise, if position do jump , or do find if no other options are possible|a is a strategy where you do run if position is not equal to 0 otherwise, if iron do use , or do jump if not|a states that you should do build if iron 2 otherwise, if a do use , or do build if not|as soon as position is at most 0 you are able to use until finally b is not the same as 1|a is a tactic where it is advantageous to do run if position is equal to 2 otherwise, if b do find , or do use if no other options are possible|a is a tactic where it is good to do build if iron is exactly the same as 1 otherwise, if iron do find , or do build otherwise|b entails that you do jump if position is smaller than x otherwise, if a do build , or do use if no other options are possible|when b is smaller than x you have the option to use until position is at most x|when b is not the same as 0 you have the option to jump until finally a is less than 2|if b is smaller than x you can build until position is less than 2|once b is less than x you have the option to use until finally a is less than 1|whenever inventory is equal to 2 you are able to use until b is larger than 2|b suggests that it would be advantageous to do use if a x otherwise, if a do find , or do build if not|if a is greater than or equal to 1 you have the option to build until inventory is greater than or equal to 0|a is an approach where it would be good to do jump if position is less than 0 otherwise, if a do run , or do find if no other options are possible|as soon as position is not the same as y you have the option to use until position is greater than 0|a states that you should do build if iron is less than x otherwise, if b do use , or do build as a last resort|a is a good strategy where you should do run if position is smaller than y , or do build if not|b means that it would be good to do use if iron is larger than x otherwise, if iron do use , or do find otherwise|as soon as b is larger than 1 you have the option to use until a is not the same as 1|whenever inventory is exactly the same as x you are able to jump until position is less than or equal to y|a means that it would be good to do run if iron x otherwise, if a do jump , or do run as a last resort|a suggests that it would be advantageous to do use if position 1 otherwise, if a do build , or do build if no other options are possible|as soon as b is larger than 2 you have the choice to build until finally position is not the same as 0|a means that it would be good to do run if b 1 otherwise, if a do build , or do find as a last resort|a states that you should do find if position 1 otherwise, if iron do run , or do use if not|b is an approach where it would be good to do build if b is not equal to 1 , or do use if not|as soon as y you can jump until finally a is smaller than 1|b means that it would be good to do run if position is greater than x otherwise, if position do run , or do use if not|if a is at least x you have the choice to find until finally inventory is less than 1|as soon as a is less than 0 you can use until finally inventory is larger than 2|when position is less than 0 you can jump until a is greater than 1|b is a tactic where it is good to do use if b is smaller than y otherwise, if iron do jump , or do use as a last resort|once position is larger than 0 you can use until position is not the same as 1|once position is not the same as y you have the option to use until finally a is at least 2|if inventory is greater than or equal to 1 you are able to find until inventory is exactly the same as 1|when b is not the same as y you have the choice to run until position is equal to x|as soon as a is larger than x you have the option to build until a is at most 1|as soon as x you are able to find until finally inventory is greater than or equal to y|if position is less than x you are able to build until a is less than or equal to 2|a means that it would be good to do find if b is equal to y otherwise, if a do find , or do jump if no other options are possible|as soon as b is not the same as y you are able to jump until finally a is exactly the same as x|a is an approach where it would be good to do run if iron y otherwise, if b do find , or do find as a last resort|as soon as inventory you have the option to build until finally a is equal to 1|a entails that you do find if iron is exactly the same as 1 otherwise, if b do build , or do find as a last resort|a is a strategy where you do build if position is not equal to 1 otherwise, if a do find , or do use if not|a entails that you do run if a is less than x otherwise, if b do find , or do find if no other options are possible|a is a good strategy where you should do run if a 0 otherwise, if b do build , or do jump if not|b means that it would be good to do use if b is smaller than y otherwise, if iron do find , or do build otherwise|a is a good strategy where you should do build if b is not equal to y , or do use as a last resort|a is a tactic where it is advantageous to do run if position 2 otherwise, if a do jump , or do jump if not|b is a tactic where it is good to do use if b y otherwise, if iron do find , or do find as a last resort|whenever b is larger than 1 you are able to build until a is not the same as 1|b is a strategy where you do find if iron is smaller than y otherwise, if a do find , or do use if not|b is an approach where you do build if a is less than y otherwise, if b do find , or do run otherwise|a entails that you do run if b is less than 1 otherwise, if position do build , or do build as a last resort|b is a tactic where it is good to do use if b otherwise, if a do use , or do use otherwise|once a is greater than 1 you are able to build until finally position is smaller than 0|a is an approach where it would be good to do jump if iron 2 otherwise, if position do use , or do jump if no other options are possible|once inventory you are able to build until inventory is exactly the same as x|once inventory is less than or equal to y you have the option to build until b is not the same as y|a is a good strategy where you should do use if position is not the same as x otherwise, if iron do find , or do find as a last resort|if inventory is larger than 1 you have the choice to find until finally inventory is exactly the same as 2|b is a good strategy where you should do build if position is less than y , or do jump as a last resort|when a is less than x you have the option to run until b is at most 2|b means that it would be good to do find if iron y otherwise, if position do build , or do jump as a last resort|b is a tactic where it is advantageous to do build if iron otherwise, if b do find , or do build if no other options are possible|whenever position is exactly the same as 0 you have the option to use until b is less than or equal to x|b is an approach where it would be good to do run if a is not equal to 2 otherwise, if b do use , or do jump otherwise|when inventory is greater than x you have the option to use until finally position is less than or equal to y|a suggests that it would be advantageous to do run if b y otherwise, if position do jump , or do run if no other options are possible|if a is equal to 2 you are able to jump until finally a is not the same as x|a suggests that it would be advantageous to do use if position is less than 2 otherwise, if iron do run , or do build otherwise|whenever a is exactly the same as 1 you are able to run until finally position is greater than 0|a states that you should do jump if position is not the same as 0 otherwise, if iron do run , or do build if not|a is a tactic where it is good to do find if a y otherwise, if iron do jump , or do find if not|as soon as a is equal to y you are able to find until a is less than 0|b is a tactic where it is advantageous to do find if b x otherwise, if iron do run , or do use otherwise|when b is at least x you are able to jump until finally a is at most 2|once b is exactly the same as x you have the option to run until finally a is less than 0|when b is larger than y you have the option to run until finally position is smaller than 0|b is a tactic where it is good to do use if position is smaller than y otherwise, if b do find , or do jump if not|a is a tactic where it is good to do use if a is greater than 0 otherwise, if a do run , or do find otherwise|a entails that you do use if b is equal to y otherwise, if position do find , or do use if not|b is a tactic where it is good to do run if b is larger than x otherwise, if a do run , or do find as a last resort|a is an approach where it would be good to do jump if b is greater than 2 otherwise, if a do use , or do run if not|when a is equal to 0 you have the option to run until inventory is less than 0|a is a tactic where it is advantageous to do use if position 0 otherwise, if b do jump , or do use otherwise|as soon as position is larger than 0 you are able to find until inventory is at least y|if inventory is greater than x you are able to run until finally inventory is not the same as 2|once position is at most 2 you are able to find until position is not equal to 2|a means that it would be good to do find if b is smaller than 2 otherwise, if a do find , or do build otherwise|a is a tactic where it is good to do build if position 1 otherwise, if position do find , or do find otherwise|a entails that you do find if iron is exactly the same as 1 otherwise, if b do use , or do find if not|once a is greater than 2 you have the option to jump until finally b is larger than x|b is an approach where you do find if b is exactly the same as y otherwise, if iron do find , or do jump if not|whenever a is equal to x you are able to run until finally b is greater than x|if a is equal to 2 you have the choice to run until b is equal to 1|whenever position is greater than y you can jump until inventory is smaller than 2|as soon as inventory is less than y you can run until a is equal to x|a is an approach where you do build if b is equal to y otherwise, if b do find , or do find as a last resort|once position is not the same as 2 you have the option to use until b is less than or equal to y|b states that you should do find if position is equal to x otherwise, if a do use , or do build if no other options are possible|b entails that you do build if b x otherwise, if a do jump , or do use as a last resort|b is an approach where you do build if a is not equal to y otherwise, if position do run , or do find if no other options are possible|a states that you should do run if position is greater than 2 otherwise, if b do find , or do find otherwise|whenever inventory is greater than or equal to 2 you are able to jump until inventory is equal to 0|a means that it would be good to do find if a is exactly the same as 0 otherwise, if a do find , or do use if not|a suggests that it would be advantageous to do run if position 1 otherwise, if a do find , or do build as a last resort|once position is equal to 1 you have the choice to run until position is smaller than x|a is a strategy where you do find if b is exactly the same as 0 otherwise, if iron do find , or do use otherwise|whenever inventory is less than or equal to 1 you have the option to jump until finally a is at least 1|a is a tactic where it is advantageous to do find if a x otherwise, if a do jump , or do use if no other options are possible|as soon as b is smaller than 1 you can build until inventory is less than or equal to 2|a is an approach where you do use if position is smaller than 0 otherwise, if a do use , or do use otherwise|a is a good strategy where you should do find if position 2 otherwise, if position do jump , or do use if not|a is a tactic where it is advantageous to do run if position is smaller than x otherwise, if a do build , or do jump if no other options are possible|a means that it would be good to do find if position is greater than 2 otherwise, if position do find , or do find as a last resort|a is a strategy where you do build if b is exactly the same as y otherwise, if a do build , or do jump if not|whenever inventory is less than 1 you have the option to use until inventory is not the same as 1|b entails that you do build if a x otherwise, if iron do jump , or do build as a last resort|a states that you should do run if a is not the same as y otherwise, if b do jump , or do run if not|a entails that you do use if position 1 otherwise, if b do use , or do find as a last resort|once inventory is greater than or equal to y you have the choice to jump until b is not the same as 0|a is a strategy where you do build if position is smaller than 0 otherwise, if iron do jump , or do build as a last resort|once inventory is not the same as x you have the choice to build until b is greater than y|b entails that you do find if b y otherwise, if iron do jump , or do use if no other options are possible|a means that it would be good to do run if iron is exactly the same as x otherwise, if b do find , or do build if no other options are possible|whenever inventory is at least 0 you have the choice to find until finally position is less than x|b is an approach where it would be good to do use if a is less than 2 otherwise, if iron do build , or do run if no other options are possible|b is a tactic where it is advantageous to do find if a is smaller than 1 otherwise, if b do build , or do run as a last resort|as soon as position is greater than or equal to 1 you have the choice to run until finally position is larger than 2|when b is exactly the same as 2 you have the option to find until inventory is less than or equal to 0|a is a strategy where you do find if a is less than x otherwise, if position do run , or do find as a last resort|as soon as b is smaller than 0 you have the option to build until finally position is not equal to 0|b is an approach where it would be good to do jump if iron is smaller than y otherwise, if a do find , or do find otherwise|a means that it would be good to do find if iron is not equal to 1 otherwise, if b do jump , or do use as a last resort|a entails that you do build if iron is greater than 2 otherwise, if position do use , or do build if no other options are possible|once a is not the same as 1 you have the choice to run until b is larger than 0|once b is greater than x you are able to use until position is not equal to 1|a is an approach where it would be good to do run if a is smaller than 2 otherwise, if position do run , or do run as a last resort|a is a strategy where you do run if iron y otherwise, if a do use , or do run if no other options are possible|a suggests that it would be advantageous to do jump if position is not equal to x otherwise, if position do use , or do jump if no other options are possible|whenever position is not equal to 1 you can find until finally position is less than or equal to x|as soon as inventory is not equal to 2 you have the option to run until position is at least 1|whenever inventory is exactly the same as 0 you have the option to build until b is larger than x|whenever a is less than x you can build until finally position is less than 1|if inventory is greater than or equal to 2 you have the choice to find until position is equal to 1|as soon as b is less than or equal to 1 you are able to use until finally position is less than 1|whenever position is at least y you are able to use until position is at most y|whenever position is at least y you are able to find until inventory is not the same as 1|when a is equal to x you are able to build until finally b is greater than or equal to 0|a is a good strategy where you should do jump if b is less than 1 , or do jump as a last resort|whenever b is not equal to y you have the option to use until position is greater than or equal to y|if position is at most x you are able to run until finally position is exactly the same as 0|once position is exactly the same as 2 you have the choice to find until finally b is not equal to x|whenever inventory is exactly the same as 0 you are able to build until finally inventory is less than 0|once position is not equal to 0 you have the option to jump until finally position is equal to 2|b is a good strategy where you should do find if iron is less than 1 , or do jump if not|a entails that you do use if b is less than y otherwise, if iron do run , or do build as a last resort|b suggests that it would be advantageous to do build if b x otherwise, if a do find , or do jump otherwise|whenever b is greater than or equal to 2 you have the choice to build until inventory is smaller than y|when a is not equal to 0 you have the option to jump until finally position is greater than or equal to 0|whenever position is greater than or equal to x you are able to build until finally b is exactly the same as 0|as soon as position is at most 0 you are able to find until finally position is less than y|whenever a is at least 2 you are able to use until inventory is smaller than 1|b is a tactic where it is advantageous to do jump if a 0 , or do jump otherwise|whenever position is greater than or equal to 2 you are able to jump until finally position is smaller than y|a means that it would be good to do build if b is smaller than x , or do find if no other options are possible|if b is at least 0 you have the option to find until a|a is an approach where it would be good to do use if b is not equal to x otherwise, if position do find , or do build otherwise|if b is at least 2 you have the option to jump until finally position is not equal to y|a states that you should do run if iron is not the same as 0 otherwise, if position do run , or do jump if not|if x you have the choice to find until finally b is equal to y|b is an approach where it would be good to do find if iron x otherwise, if b do jump , or do use otherwise|b is an approach where you do run if b is less than y otherwise, if b do find , or do use otherwise|if b is smaller than 1 you can find until finally b is less than or equal to x|if inventory is greater than 1 you can build until finally inventory is less than 0|a entails that you do use if position is larger than y otherwise, if iron do use , or do use as a last resort|a is a good strategy where you should do build if b is not equal to 2 otherwise, if b do jump , or do jump if no other options are possible|a is an approach where it would be good to do jump if iron is less than 2 otherwise, if a do jump , or do use as a last resort|a is an approach where you do jump if iron is larger than y otherwise, if a do run , or do find if not|if position is at most 1 you have the option to find until finally inventory is exactly the same as 1|b is a strategy where you do build if position is not the same as 2 , or do use if not|a is an approach where it would be good to do jump if b x otherwise, if position do use , or do use if no other options are possible|b is a strategy where you do build if iron 0 , or do use if not|a entails that you do use if position is not equal to 0 otherwise, if a do find , or do use as a last resort|b states that you should do jump if a is smaller than 2 otherwise, if iron do run , or do run if not|a is a tactic where it is good to do use if iron is less than x otherwise, if iron do find , or do find as a last resort|if inventory is greater than 2 you have the option to use until finally position is less than or equal to x|b means that it would be good to do find if a is larger than y otherwise, if a do run , or do build if no other options are possible|a is a strategy where you do find if iron is not the same as y otherwise, if b do build , or do run otherwise|if inventory is greater than 2 you are able to jump until a is larger than 1|b is a tactic where it is advantageous to do run if a is equal to 2 otherwise, if position do build , or do find as a last resort|once position is larger than y you have the option to find until finally a is greater than 2|once a is exactly the same as 1 you can run until a is at most 0|b is a strategy where you do find if iron is not the same as x otherwise, if a do run , or do use otherwise|a means that it would be good to do find if a 2 otherwise, if position do jump , or do jump if not|as soon as inventory is less than 1 you have the option to find until finally inventory is larger than y|a entails that you do jump if position y otherwise, if position do build , or do use if not|b is an approach where you do find if position is exactly the same as x otherwise, if iron do find , or do jump if no other options are possible|b is a strategy where you do jump if position is not equal to x otherwise, if a do find , or do run as a last resort|as soon as b is at most x you have the choice to jump until finally a is exactly the same as x|a is a good strategy where you should do run if a is less than 1 otherwise, if position do use , or do use otherwise|a is a good strategy where you should do find if iron is greater than 1 otherwise, if iron do use , or do jump otherwise|a is a tactic where it is advantageous to do use if position is smaller than 2 otherwise, if b do use , or do run if no other options are possible|whenever inventory is larger than y you have the choice to build until position is not the same as 2|a entails that you do build if a is not the same as y otherwise, if position do use , or do find otherwise|when position is less than or equal to 2 you have the option to run until b is greater than or equal to 2|when inventory is at most x you can build until b is larger than 1|if inventory is greater than or equal to x you have the choice to find until finally position is less than y|b states that you should do find if b otherwise, if position do build , or do run otherwise|b entails that you do use if position x otherwise, if position do jump , or do build otherwise|as soon as b is not the same as x you have the choice to find until finally b is smaller than 2|whenever inventory is at most 2 you are able to build until a is greater than 2|whenever b is not the same as y you have the choice to jump until finally a is less than y|a means that it would be good to do run if b is greater than x otherwise, if a do jump , or do use as a last resort|when b is not the same as 1 you have the choice to use until finally b is smaller than 0|once b is less than x you have the choice to jump until a is not equal to 2|a is an approach where it would be good to do build if iron is less than 0 otherwise, if a do use , or do find otherwise|a suggests that it would be advantageous to do jump if position is exactly the same as y otherwise, if iron do use , or do run as a last resort|b suggests that it would be advantageous to do jump if b is larger than x otherwise, if iron do build , or do jump if no other options are possible|a is a tactic where it is good to do use if position is less than 2 otherwise, if a do build , or do jump if not|b suggests that it would be advantageous to do run if a y otherwise, if position do build , or do run otherwise|b states that you should do jump if iron is equal to y otherwise, if position do build , or do run otherwise|b is a good strategy where you should do jump if position is smaller than x otherwise, if a do jump , or do jump otherwise|as soon as inventory is smaller than 1 you can build until finally x|a is a tactic where it is good to do jump if a 2 otherwise, if position do use , or do use as a last resort|a is an approach where it would be good to do build if a is smaller than 0 otherwise, if position do build , or do use if not|b is a good strategy where you should do jump if a y , or do find otherwise|a is a good strategy where you should do use if b 2 otherwise, if a do jump , or do use as a last resort|b is a good strategy where you should do find if b y otherwise, if position do run , or do run otherwise|a states that you should do build if a 2 otherwise, if b do jump , or do build if no other options are possible|a states that you should do find if iron is equal to y otherwise, if b do run , or do run if not|as soon as a is not the same as x you have the choice to build until b is exactly the same as y|a is a good strategy where you should do build if b is exactly the same as x otherwise, if iron do jump , or do jump if no other options are possible|a is an approach where it would be good to do jump if b is larger than x otherwise, if b do jump , or do run otherwise|if position is less than or equal to y you can run until finally b is greater than 2|when inventory is larger than 2 you are able to build until finally position is less than x|whenever a is less than 1 you have the option to jump until position is at least x|a means that it would be good to do build if iron is equal to 2 otherwise, if position do run , or do find otherwise|as soon as position is at least x you have the choice to jump until a is at least y|a is an approach where you do jump if iron 2 otherwise, if iron do run , or do jump if not|a entails that you do jump if position 0 otherwise, if position do run , or do jump if not|b is a tactic where it is good to do use if iron is exactly the same as 2 , or do jump if not|a is a good strategy where you should do jump if iron is greater than x otherwise, if b do run , or do find if no other options are possible|a is a tactic where it is advantageous to do use if position is smaller than 0 otherwise, if position do run , or do jump if no other options are possible|a suggests that it would be advantageous to do find if iron is less than 1 otherwise, if iron do build , or do jump as a last resort|if b is greater than or equal to 1 you are able to jump until inventory is less than or equal to 1|as soon as a is not equal to y you can build until inventory is exactly the same as x|a states that you should do use if b 1 otherwise, if position do find , or do use as a last resort|b is an approach where you do run if a 0|when position is larger than 1 you can use until b is smaller than 2|when position is not equal to y you have the choice to build until finally position is at most x|b entails that you do use if iron is exactly the same as y otherwise, if b do find , or do find otherwise|a is a tactic where it is advantageous to do build if position is smaller than 2 otherwise, if position do use , or do find as a last resort|a suggests that it would be advantageous to do build if b is greater than x otherwise, if iron do build , or do find otherwise|a is a strategy where you do use if a y otherwise, if a do jump , or do jump if not|as soon as position is not equal to 1 you are able to find until finally position is at least 1|when a is equal to x you have the option to find until position is not the same as 1|b is a tactic where it is advantageous to do run if iron x otherwise, if iron do run , or do use as a last resort|whenever y you are able to build until position is not the same as y|if b is less than or equal to x you can build until position is greater than y|a is a tactic where it is advantageous to do jump if b x otherwise, if b do build , or do jump if not|a is a tactic where it is good to do jump if a 2 otherwise, if iron do use , or do build as a last resort|b is a tactic where it is good to do jump if a is less than 1 otherwise, if iron do find , or do find as a last resort|whenever position is exactly the same as y you have the choice to use until finally a is less than y|a is an approach where it would be good to do find if b is larger than 0 otherwise, if b do jump , or do find if no other options are possible|b means that it would be good to do build if a is not equal to 0 , or do find as a last resort|a is an approach where it would be good to do use if a 2 otherwise, if b do build , or do find if not|b is a good strategy where you should do use if b x otherwise, if iron do run , or do run as a last resort|as soon as a is equal to 1 you have the option to run until finally b is equal to 2|a is a good strategy where you should do build if b 2 otherwise, if iron do jump , or do build as a last resort|if position is less than or equal to y you have the option to jump until finally a is exactly the same as y|when a is larger than x you have the choice to jump until finally b is at most 2|a entails that you do build if iron y otherwise, if iron do find , or do find if no other options are possible|a is a tactic where it is advantageous to do find if position is smaller than 0 otherwise, if b do use , or do run otherwise|b means that it would be good to do jump if position is larger than x otherwise, if b do find , or do jump if no other options are possible|as soon as a is at least x you have the option to use until position is greater than or equal to 0|a is a strategy where you do jump if b is greater than 2 otherwise, if iron do run , or do jump if not|when position is greater than 2 you have the choice to find until finally position is equal to 0|a is a tactic where it is advantageous to do build if a is greater than x , or do jump if not|a entails that you do use if iron is exactly the same as 0 otherwise, if iron do jump , or do run otherwise|once a is less than or equal to y you have the option to run until finally position is greater than y|if b is greater than or equal to y you have the choice to build until finally inventory is less than 2|a is an approach where it would be good to do find if a is exactly the same as 0 otherwise, if a do build , or do run if no other options are possible|a is a tactic where it is good to do build if position is less than x otherwise, if b do use , or do run otherwise|once inventory is at least 2 you are able to use until finally inventory is exactly the same as 1|once a is at most x you can find until finally position is smaller than 0|b states that you should do find if iron 1 , or do jump if no other options are possible|b is an approach where it would be good to do use if a is exactly the same as x otherwise, if position do use , or do build if no other options are possible|when position is larger than 1 you can jump until y|as soon as inventory is not equal to y you are able to jump until position is less than y|a entails that you do build if position is not equal to 1 otherwise, if position do run , or do use if not|if position is not the same as 0 you are able to use until finally b is not equal to 2|if b is larger than 2 you have the option to build until position is greater than or equal to 1|b is a strategy where you do run if position is less than x otherwise, if a do build , or do jump as a last resort|if b is greater than or equal to 1 you have the option to jump until inventory is smaller than 2|b is an approach where you do build if a is greater than x otherwise, if b do jump , or do use if no other options are possible|once inventory is not the same as 2 you have the option to run until b is exactly the same as 2|a entails that you do find if a is less than y otherwise, if iron do jump , or do use as a last resort|whenever position is larger than x you can build until finally a is not equal to 2|a is an approach where it would be good to do build if position is greater than x otherwise, if iron do find , or do run if no other options are possible|b is a good strategy where you should do build if a is equal to y otherwise, if a do build , or do build otherwise|when a is equal to y you have the choice to use until finally inventory is at least 2|b is a good strategy where you should do build if iron is smaller than x otherwise, if iron do build , or do build if not|a is a strategy where you do run if position is not the same as 0 otherwise, if a do find , or do use if no other options are possible|whenever a is greater than or equal to 0 you have the option to build until a is equal to x|once inventory is larger than y you have the option to use until finally position is not the same as 2|a means that it would be good to do run if a is larger than 0 otherwise, if a do find , or do jump otherwise|a is a tactic where it is good to do use if iron is exactly the same as 2 otherwise, if iron do find , or do build otherwise|a is an approach where it would be good to do run if iron is larger than x otherwise, if b do use , or do build if no other options are possible|b is a good strategy where you should do build if b is greater than y otherwise, if iron do build , or do find if no other options are possible|if inventory is at most x you can find until finally a is less than 0|a entails that you do run if a x otherwise, if iron do jump , or do find if no other options are possible|when inventory you have the choice to build until finally inventory is smaller than 0|a suggests that it would be advantageous to do jump if a y otherwise, if iron do use , or do jump if no other options are possible|a entails that you do find if iron is larger than 1 otherwise, if iron do find , or do use if not|a is an approach where you do jump if iron x otherwise, if iron do find , or do find if not|once inventory is equal to x you have the option to run until finally b is greater than 2|as soon as inventory is not the same as 1 you have the option to find until finally position is exactly the same as y|once inventory is at most 2 you are able to run until finally inventory is larger than 0|as soon as position is larger than 1 you can jump until finally a is less than or equal to x|a means that it would be good to do find if b is not the same as 2 otherwise, if b do run , or do find if no other options are possible|when a is larger than x you can jump until b is smaller than x|once b is greater than or equal to 2 you have the choice to run until finally position|a is a tactic where it is good to do run if a 2 otherwise, if iron do jump , or do build as a last resort|once position is at most x you are able to run until finally b is at least 0|as soon as b is less than 0 you can find until a is not the same as y|when a is less than or equal to 0 you can find until finally position is greater than 2|if inventory is not equal to 2 you have the option to jump until finally a is at least x|a means that it would be good to do build if a y otherwise, if position do jump , or do use otherwise|a is a tactic where it is good to do run if position otherwise, if b do use , or do build otherwise|if inventory is at least 2 you have the option to build until a is exactly the same as 2|as soon as inventory is greater than or equal to y you have the option to jump until finally inventory is at most x|if inventory is greater than x you have the choice to jump until finally a is less than y|a means that it would be good to do find if position is not the same as 0 otherwise, if a do run , or do find otherwise|a means that it would be good to do run if iron is larger than 0 otherwise, if iron do jump , or do jump as a last resort|b means that it would be good to do run if b is smaller than y otherwise, if b do run , or do run if not|a means that it would be good to do build if position 2 otherwise, if iron do find , or do jump if not|when a is smaller than 1 you have the choice to build until inventory is at least 1|b is an approach where it would be good to do use if a is smaller than x otherwise, if iron do run , or do jump as a last resort|b is a tactic where it is advantageous to do find if position otherwise, if position do jump , or do jump as a last resort|a means that it would be good to do jump if a is not the same as 2 otherwise, if position do build , or do use otherwise|a is a strategy where you do build if a is less than 0 otherwise, if position do find , or do use if not|b entails that you do find if b otherwise, if b do build , or do find otherwise|a is a tactic where it is advantageous to do find if a 1 otherwise, if b do jump , or do use as a last resort|a states that you should do jump if a is equal to 0 otherwise, if a do run , or do use if no other options are possible|once b is less than or equal to y you can jump until finally position is greater than or equal to 2|a is a good strategy where you should do use if a 0 otherwise, if a do run , or do find as a last resort|a is an approach where you do use if b 0 otherwise, if b do find , or do jump otherwise|when a is less than 0 you have the option to find until inventory is less than or equal to 1|a is a strategy where you do find if a y otherwise, if a do build , or do build if not|a is a good strategy where you should do jump if iron 0 otherwise, if b do use , or do use as a last resort|b is a strategy where you do use if iron is less than x otherwise, if b do jump , or do find if no other options are possible|when inventory is greater than or equal to 0 you are able to run until finally inventory is smaller than 0|once a is greater than y you have the option to use until b is not equal to 1|if inventory is not the same as 1 you have the option to run until b is less than or equal to 0|a is a tactic where it is good to do run if position is exactly the same as x otherwise, if iron do jump , or do build if not|b is a good strategy where you should do use if a is larger than x otherwise, if a do find , or do find if no other options are possible|a suggests that it would be advantageous to do build if a otherwise, if b do build , or do find as a last resort|if a is at most x you have the option to use until finally b is less than 2|a is a tactic where it is good to do run if iron is less than y otherwise, if iron do use , or do find as a last resort|b is a good strategy where you should do run if position y , or do find if not|if b is smaller than 2 you have the choice to run until inventory is less than or equal to 2|b is an approach where it would be good to do find if b is greater than y otherwise, if b do jump , or do run if not|whenever b is less than or equal to 1 you can find until b is at least 2|b suggests that it would be advantageous to do find if a y otherwise, if iron do use , or do run otherwise|b suggests that it would be advantageous to do find if b otherwise, if position do build , or do jump if no other options are possible|if inventory is not the same as 1 you have the choice to find until position is exactly the same as x|as soon as inventory is not the same as 1 you have the choice to build until finally position is greater than or equal to y|b suggests that it would be advantageous to do find if position x otherwise, if b do build , or do find if no other options are possible|a is a tactic where it is advantageous to do find if iron y otherwise, if position do build , or do run otherwise|b is a tactic where it is good to do build if position x otherwise, if a do run , or do build if no other options are possible|a means that it would be good to do jump if iron is not the same as 1 otherwise, if position do jump , or do jump otherwise|a is a strategy where you do use if position y otherwise, if iron do build , or do find as a last resort|once a is less than 2 you are able to jump until finally inventory is greater than or equal to 1|b is a tactic where it is good to do build if a is less than 0 otherwise, if position do build , or do jump otherwise|b is a strategy where you do jump if a y otherwise, if b do run , or do find as a last resort|if a is larger than 0 you can use until a is at least x|b is a tactic where it is advantageous to do find if iron otherwise, if iron do find , or do find otherwise|when position is less than y you have the choice to find until position is not the same as x|b is a tactic where it is advantageous to do use if b is exactly the same as y otherwise, if iron do run , or do run otherwise|b suggests that it would be advantageous to do run if b y otherwise, if position do build , or do use as a last resort|a states that you should do build if b is greater than y otherwise, if position do find , or do use if no other options are possible|a is an approach where it would be good to do build if a is not equal to 0 otherwise, if position do find , or do jump if not|a entails that you do find if position 2 otherwise, if a do build , or do find if not|b is a tactic where it is good to do find if iron y otherwise, if iron do use , or do run otherwise|a is a strategy where you do build if position 2 otherwise, if position do use , or do run if not|once position is exactly the same as y you have the choice to jump until finally a is greater than or equal to 0|whenever a is greater than y you are able to use until finally b is not equal to x|once inventory is exactly the same as x you have the choice to build until inventory is at most y|if a is smaller than 1 you are able to jump until position is not the same as x|as soon as position is larger than 2 you are able to jump until position is not equal to 2|once inventory is larger than 1 you have the option to jump until a is at least 0|a suggests that it would be advantageous to do use if iron is exactly the same as 1 otherwise, if a do use , or do find otherwise|b is an approach where you do run if b otherwise, if position do build , or do build if not|whenever b is not equal to 1 you can jump until inventory is exactly the same as 1|a entails that you do build if a x otherwise, if a do use , or do run as a last resort|a suggests that it would be advantageous to do run if a is not the same as 1 otherwise, if a do build , or do find otherwise|a entails that you do build if iron is less than 2 otherwise, if a do find , or do run if no other options are possible|a is a tactic where it is good to do use if iron is greater than 1 otherwise, if position do run , or do build if not|b suggests that it would be advantageous to do build if b y otherwise, if position do jump , or do use otherwise|b suggests that it would be advantageous to do use if a is greater than 0 otherwise, if b do find , or do use as a last resort|a suggests that it would be advantageous to do run if b 1 otherwise, if b do find , or do jump otherwise|b is an approach where you do use if iron 1 , or do build if no other options are possible|as soon as position is larger than x you can use until b is less than or equal to y|b is a tactic where it is advantageous to do use if b is larger than y otherwise, if b do find , or do use if no other options are possible|if position is not the same as 0 you can jump until finally inventory is greater than 0|b is a good strategy where you should do jump if a x , or do find otherwise|a is a tactic where it is advantageous to do run if a is smaller than 2 otherwise, if b do find , or do find if no other options are possible|when position is equal to 0 you have the option to build until finally x|a means that it would be good to do find if b is less than 0 otherwise, if iron do use , or do find if no other options are possible|as soon as a is less than y you can find until finally y|a is a tactic where it is good to do find if iron is not equal to 1 otherwise, if a do build , or do jump otherwise|once b is exactly the same as x you have the option to run until finally inventory is not equal to y|a is a good strategy where you should do build if iron is exactly the same as 1 otherwise, if position do run , or do build if not|b is a tactic where it is good to do build if a x otherwise, if b do use , or do run otherwise|b entails that you do jump if position otherwise, if iron do build , or do jump as a last resort|as soon as a is equal to 0 you have the option to run until finally position is not equal to y|whenever b is at least 2 you have the choice to use until position is less than or equal to 2|if inventory is at most 1 you have the option to jump until inventory is at most 2|b entails that you do use if a y otherwise, if a do find , or do build if not|a states that you should do run if iron y otherwise, if position do find , or do build otherwise|b entails that you do run if iron y otherwise, if a do jump , or do find otherwise|a is an approach where it would be good to do run if b 2 otherwise, if iron do find , or do run if no other options are possible|a is a tactic where it is good to do jump if position is not equal to 1 otherwise, if iron do find , or do jump if not|a is an approach where you do use if b x otherwise, if position do jump , or do find if no other options are possible|whenever inventory is greater than or equal to y you are able to find until position is smaller than 0|if inventory is less than 0 you can jump until finally b is at most y|a is a strategy where you do run if iron is greater than 1 otherwise, if b do jump , or do jump otherwise|once inventory is larger than 2 you have the option to use until position is not the same as 1|a is a strategy where you do use if position is smaller than 2 otherwise, if position do use , or do find as a last resort|when inventory is greater than or equal to 2 you have the option to run until inventory is at most 1|b is an approach where it would be good to do run if a is exactly the same as 2 otherwise, if iron do build , or do use if not|once position is at most y you are able to find until inventory is at least 1|a suggests that it would be advantageous to do build if a is less than y otherwise, if iron do jump , or do run as a last resort|b states that you should do build if iron otherwise, if b do build , or do jump if not|when position is smaller than x you have the choice to jump until a is less than or equal to 2|if position you have the option to jump until finally b is smaller than x|as soon as b is not the same as 1 you have the option to run until inventory is less than or equal to 1|if position is larger than 0 you have the choice to jump until a is not the same as 0|once position is not the same as 2 you are able to jump until finally b is less than 0|if a is greater than or equal to 2 you have the choice to build until finally position is smaller than y|a suggests that it would be advantageous to do use if iron is exactly the same as 1 otherwise, if position do jump , or do run as a last resort|if b is larger than y you are able to find until finally position is smaller than 2|whenever inventory you are able to run until finally a is at least 1|once a is less than or equal to y you are able to jump until finally position is exactly the same as 1|a is a tactic where it is advantageous to do find if b is larger than 0 otherwise, if a do jump , or do use otherwise|whenever position is greater than y you are able to jump until a is greater than or equal to 1|b states that you should do jump if a is greater than x otherwise, if b do jump , or do find as a last resort|when b is equal to 0 you have the option to use until a is at least 1|a is an approach where it would be good to do jump if iron is greater than 1 otherwise, if b do build , or do build if not|a is an approach where it would be good to do find if iron 0 otherwise, if position do jump , or do use if no other options are possible|a is a good strategy where you should do use if position 0 otherwise, if position do use , or do build otherwise|b is a tactic where it is good to do build if iron is greater than x otherwise, if a do use , or do build if no other options are possible|a is an approach where it would be good to do build if a is larger than 0 otherwise, if a do use , or do jump otherwise|a is a tactic where it is advantageous to do build if iron is smaller than 0 otherwise, if b do build , or do use otherwise|when inventory is less than or equal to x you can run until finally inventory is smaller than y|b is a tactic where it is good to do build if a is not the same as y otherwise, if iron do run , or do run if not|whenever inventory is at most x you have the option to run until finally inventory is greater than 1|a states that you should do jump if b is less than 2 otherwise, if iron do jump , or do build if no other options are possible|once b is at most 2 you have the option to find until finally inventory is equal to y|if inventory is equal to 2 you can run until a is not equal to 2|a states that you should do jump if b is exactly the same as y otherwise, if a do build , or do build if no other options are possible|once b is not equal to 1 you are able to use until finally inventory is not equal to 0|once b you have the choice to find until b is greater than 2|a suggests that it would be advantageous to do build if position is equal to 0 otherwise, if position do run , or do jump if no other options are possible|a is a tactic where it is advantageous to do build if iron is exactly the same as 0 otherwise, if b do find , or do find if no other options are possible|b is a strategy where you do build if position is less than x otherwise, if position do find , or do find if not|a is a good strategy where you should do find if b is less than 2 otherwise, if a do jump , or do find as a last resort|as soon as inventory is at most 1 you have the choice to jump until finally inventory is exactly the same as 1|a entails that you do find if b is exactly the same as 2 otherwise, if position do find , or do jump otherwise|a is a good strategy where you should do find if iron is smaller than x otherwise, if iron do find , or do build if no other options are possible|a states that you should do find if b x otherwise, if position do build , or do run if no other options are possible|a states that you should do build if a is smaller than 2 otherwise, if iron do jump , or do find if no other options are possible|whenever a is smaller than y you can run until finally a is greater than 2|when b is less than y you have the choice to build until inventory is less than y|a is a tactic where it is good to do jump if position otherwise, if iron do find , or do run otherwise|a is a tactic where it is good to do jump if position 2 otherwise, if a do build , or do build if no other options are possible|once inventory is less than 1 you have the choice to build until b|a is a tactic where it is advantageous to do use if position is equal to 1 otherwise, if b do build , or do use if no other options are possible|a is a strategy where you do jump if b is smaller than 0 , or do use if no other options are possible|b suggests that it would be advantageous to do use if b is not the same as y otherwise, if a do use , or do run if not|a suggests that it would be advantageous to do run if iron 2 otherwise, if b do find , or do jump if not|when b is larger than x you can jump until inventory is less than or equal to x|b states that you should do use if iron is smaller than y , or do jump otherwise|once position is smaller than y you have the option to find until position is at most y|a means that it would be good to do find if position is equal to 1 otherwise, if position do run , or do build if no other options are possible|when position is equal to x you have the option to find until a is less than or equal to 0|b is a good strategy where you should do build if a is exactly the same as 2 otherwise, if iron do use , or do run if no other options are possible|whenever position is not equal to 1 you can find until inventory is larger than x|when position you are able to run until a is less than x|as soon as position is greater than or equal to 0 you have the choice to build until inventory is not equal to 1|as soon as a is equal to x you have the option to run until position is not equal to x|b means that it would be good to do use if b y otherwise, if b do jump , or do run if no other options are possible|a is a tactic where it is advantageous to do build if position is less than 1 otherwise, if a do find , or do find as a last resort|b suggests that it would be advantageous to do build if iron otherwise, if a do find , or do build as a last resort|whenever position is not equal to 0 you are able to build until b is larger than 0|a means that it would be good to do jump if a otherwise, if iron do jump , or do use as a last resort|a is a tactic where it is good to do use if a 0 otherwise, if iron do run , or do jump as a last resort|a is an approach where it would be good to do use if iron is not the same as 0 otherwise, if position do run , or do run if no other options are possible|a is a good strategy where you should do run if position is smaller than 2 otherwise, if b do use , or do use if no other options are possible|b is an approach where it would be good to do build if iron x otherwise, if position do find , or do find otherwise|b is a tactic where it is good to do jump if position is not the same as y otherwise, if a do run , or do jump if not|as soon as inventory is at least 2 you have the option to build until finally a is larger than 2|whenever inventory is less than or equal to 0 you have the option to build until position is larger than y|whenever inventory is exactly the same as 1 you can use until a is at most x|b states that you should do use if iron is larger than x otherwise, if position do use , or do use otherwise|a is a tactic where it is good to do find if a is smaller than 2 otherwise, if position do jump , or do use as a last resort|when inventory is at most y you have the choice to use until a is equal to 0|when position is larger than 1 you are able to run until finally position is equal to 0|a is an approach where you do run if a is less than y otherwise, if a do run , or do use if no other options are possible|once inventory is smaller than 2 you have the option to find until finally position is less than 1|a entails that you do run if position is not equal to x otherwise, if b do run , or do run if not|once a is greater than x you are able to build until a is smaller than y|a is a tactic where it is advantageous to do jump if position is smaller than x otherwise, if b do find , or do build as a last resort|a states that you should do use if iron is not the same as x otherwise, if position do find , or do jump if no other options are possible|b is a strategy where you do use if b is equal to 1 , or do find as a last resort|a is a tactic where it is advantageous to do jump if iron 1 otherwise, if a do jump , or do run as a last resort|b suggests that it would be advantageous to do jump if a is larger than x , or do use as a last resort|if b is smaller than 1 you are able to jump until b is at most 0|when inventory is less than 2 you have the option to find until finally a is larger than 1|b is a tactic where it is advantageous to do build if position is greater than y otherwise, if a do jump , or do build as a last resort|b is a tactic where it is good to do build if iron is equal to y otherwise, if position do use , or do run otherwise|once position is equal to 0 you have the option to jump until finally inventory is less than x|b means that it would be good to do jump if b is equal to y otherwise, if position do find , or do jump if no other options are possible|if position is less than or equal to 1 you can jump until b is greater than x|as soon as position is smaller than 2 you are able to run until finally position is smaller than 0|as soon as b is smaller than y you have the option to build until finally inventory is smaller than 0|a is an approach where you do build if iron is exactly the same as 0 otherwise, if b do build , or do jump if not|once position is greater than y you can jump until finally b is at most 0|when a is exactly the same as 0 you are able to find until b is at most 0|as soon as a is not the same as 1 you have the option to find until a is greater than or equal to y|if a is at least 2 you are able to build until position is greater than y|a is a tactic where it is good to do use if b 2 otherwise, if iron do find , or do find as a last resort|a entails that you do use if position y otherwise, if b do build , or do find if no other options are possible|b is a strategy where you do run if b is less than x otherwise, if b do use , or do use if no other options are possible|if b is larger than 0 you can run until finally a is less than or equal to 1|if a is larger than x you have the choice to find until finally inventory is at least 2|a means that it would be good to do find if iron 0 otherwise, if b do run , or do build if no other options are possible|if inventory is greater than 1 you can find until inventory is less than 0|as soon as b is larger than 0 you have the option to build until finally inventory is greater than or equal to 0|once a is smaller than y you have the choice to find until finally b is at least x|a is a tactic where it is good to do build if a is equal to y otherwise, if a do jump , or do jump otherwise|a suggests that it would be advantageous to do run if iron is less than 2 otherwise, if b do run , or do jump otherwise|b suggests that it would be advantageous to do build if b is less than y otherwise, if position do build , or do find otherwise|if a is not equal to 1 you can run until b is greater than 2|a states that you should do use if b is smaller than y otherwise, if position do build , or do use if not|a is a tactic where it is advantageous to do jump if a is greater than x otherwise, if a do run , or do jump as a last resort|a entails that you do use if iron y otherwise, if b do run , or do jump if not|when b is not equal to 1 you have the choice to run until finally b is smaller than 1|a is a tactic where it is advantageous to do run if b 0 otherwise, if position do jump , or do jump otherwise|if b is larger than 2 you can jump until a is greater than y|if a is not equal to 0 you have the choice to run until finally position is greater than x|a is a strategy where you do use if b x otherwise, if a do build , or do build if not|b states that you should do build if position is equal to x otherwise, if position do build , or do find if no other options are possible|when a is greater than y you can jump until finally inventory is not the same as 0|whenever position is less than 2 you can run until position is at least 0|as soon as b is not equal to 2 you have the option to run until finally b is larger than 1|a is a tactic where it is good to do find if b is not the same as 2 otherwise, if iron do run , or do find if no other options are possible|once a you have the choice to use until finally b is smaller than y|b suggests that it would be advantageous to do use if b is smaller than y otherwise, if a do run , or do run if no other options are possible|b suggests that it would be advantageous to do use if a is greater than x otherwise, if position do use , or do use if no other options are possible|b is a tactic where it is advantageous to do use if position is greater than x otherwise, if position do jump , or do build if no other options are possible|if inventory is at least x you have the option to build until finally position is not equal to x|a is a tactic where it is advantageous to do use if position is less than 0 otherwise, if iron do run , or do use otherwise|as soon as b is exactly the same as x you have the choice to jump until inventory|b is a strategy where you do jump if position x otherwise, if position do jump , or do build as a last resort|a is an approach where you do jump if iron is less than 2 otherwise, if b do build , or do build if not|b is an approach where it would be good to do build if a otherwise, if iron do jump , or do find as a last resort|a is an approach where it would be good to do use if position otherwise, if b do build , or do jump as a last resort|a is a good strategy where you should do run if position is not equal to 2 otherwise, if iron do build , or do run if no other options are possible|b is a tactic where it is advantageous to do find if a x otherwise, if iron do jump , or do find if not|a is an approach where you do use if a is not the same as 1 otherwise, if b do build , or do find otherwise|if a is equal to 1 you are able to find until finally inventory is not the same as x|if position is smaller than y you have the option to jump until finally b is not the same as 0|whenever inventory is larger than 1 you have the option to build until finally inventory is equal to 1|a is an approach where it would be good to do find if position 1 otherwise, if iron do build , or do find if not|a is an approach where it would be good to do run if iron is greater than 0 otherwise, if a do use , or do jump as a last resort|if inventory is greater than 0 you have the choice to build until inventory is greater than x|a is a strategy where you do jump if position 1 otherwise, if iron do jump , or do build if not|whenever position is smaller than x you have the choice to run until a is larger than x|if b is less than y you are able to use until finally a is not equal to x|a entails that you do use if iron is exactly the same as 1 otherwise, if a do use , or do build as a last resort|as soon as position is exactly the same as x you have the option to run until finally b is equal to 1|when b is less than or equal to 2 you can jump until finally position is greater than or equal to y|as soon as b is at least 1 you are able to find until position is smaller than y|when b is not the same as 0 you have the option to run until finally inventory is less than or equal to y|when b is exactly the same as y you are able to run until finally inventory is not equal to 0|when inventory is equal to x you can jump until a is smaller than y|a suggests that it would be advantageous to do build if position y otherwise, if iron do run , or do jump if not|once inventory is less than x you have the choice to use until position is less than or equal to 2|as soon as inventory is smaller than 0 you can use until finally a is equal to x|b is an approach where you do build if iron is exactly the same as y otherwise, if b do find , or do run if not|whenever b is equal to x you can run until finally position is greater than 2|as soon as inventory is larger than x you have the choice to find until finally position is equal to 1|b is an approach where it would be good to do run if a otherwise, if b do build , or do find otherwise|a is a strategy where you do use if a is smaller than x , or do use otherwise|once a is exactly the same as 2 you are able to use until finally a is greater than or equal to 2|a is a tactic where it is advantageous to do jump if position 2 otherwise, if a do use , or do find if no other options are possible|a is an approach where you do jump if a is less than x otherwise, if position do build , or do run as a last resort|a is an approach where you do use if iron is not the same as x otherwise, if position do jump , or do build as a last resort|whenever b is at most 2 you can jump until finally position is smaller than y|b is a tactic where it is good to do run if position is less than x otherwise, if b do use , or do run if not|a means that it would be good to do jump if b x otherwise, if a do use , or do run if not|once a you have the choice to jump until finally b is greater than or equal to y|a is a tactic where it is good to do use if position is greater than y otherwise, if b do build , or do build if no other options are possible|once position is at most 0 you can jump until b is at most 2|whenever b is less than or equal to 1 you are able to build until a is greater than or equal to x|a entails that you do jump if position is not the same as 1 otherwise, if iron do build , or do build if no other options are possible|b is a tactic where it is advantageous to do use if a is equal to 1 otherwise, if b do use , or do build as a last resort|when b is greater than or equal to 1 you are able to find until b is at most y|a is a good strategy where you should do build if a is larger than 1 otherwise, if position do run , or do jump otherwise|whenever a is smaller than x you are able to find until finally inventory is less than or equal to x|as soon as position is equal to 0 you have the choice to run until finally a is not equal to 0|once b is smaller than y you can find until finally inventory is not equal to x|once b is less than or equal to 1 you are able to build until a is not the same as 1|a is a strategy where you do jump if iron 1 otherwise, if b do build , or do use otherwise|a means that it would be good to do use if position is exactly the same as y otherwise, if position do use , or do jump as a last resort|a states that you should do find if iron x otherwise, if b do use , or do find if no other options are possible|once position is not the same as 2 you are able to jump until a is exactly the same as 0|as soon as inventory you can run until a is less than x|a states that you should do jump if a is greater than x otherwise, if b do run , or do find as a last resort|a is a tactic where it is good to do use if iron is greater than y otherwise, if iron do jump , or do jump as a last resort|b is an approach where you do jump if a is exactly the same as 2 otherwise, if a do build , or do use if no other options are possible|a suggests that it would be advantageous to do jump if a is not the same as 0 otherwise, if iron do use , or do build if not|a is an approach where you do run if iron is greater than y otherwise, if b do build , or do jump as a last resort|whenever b is less than y you can use until inventory is larger than y|a suggests that it would be advantageous to do find if a is exactly the same as x otherwise, if b do jump , or do run if not|a is a good strategy where you should do run if a x otherwise, if position do use , or do build if no other options are possible|a is an approach where it would be good to do jump if position is equal to 0 otherwise, if position do run , or do use otherwise|a is a tactic where it is good to do jump if b 1 otherwise, if a do find , or do use as a last resort|whenever position is not equal to 0 you have the choice to find until position|a is an approach where it would be good to do find if position is exactly the same as x otherwise, if position do use , or do use otherwise|a entails that you do find if a is larger than 2 otherwise, if position do run , or do find if not|a is a strategy where you do build if a x , or do jump if no other options are possible|once b is not the same as 2 you can build until finally inventory is not the same as 0|b is an approach where you do use if iron is exactly the same as x otherwise, if position do build , or do find otherwise|when inventory is not the same as 1 you are able to jump until finally inventory is equal to 1|a is a good strategy where you should do run if position x otherwise, if b do build , or do run if no other options are possible|if inventory is smaller than y you are able to use until a is greater than or equal to 1|b is a tactic where it is advantageous to do run if position 0 , or do use as a last resort|as soon as inventory is greater than 0 you have the choice to jump until finally inventory is not equal to 0|a is a tactic where it is good to do use if b is not equal to x otherwise, if iron do jump , or do jump as a last resort|as soon as position is equal to 1 you are able to use until finally a is less than or equal to x|once inventory is at least x you are able to use until a is not equal to y|once inventory is smaller than 2 you are able to jump until finally position is equal to x|when b is at least 0 you have the choice to find until finally a is not the same as 1|a is a good strategy where you should do build if b is not the same as x otherwise, if b do find , or do use if no other options are possible|a is an approach where it would be good to do find if position is not the same as x otherwise, if b do run , or do find if not|a entails that you do run if position is not the same as x otherwise, if b do use , or do find otherwise|b is a tactic where it is good to do use if a is less than x otherwise, if position do build , or do run if no other options are possible|as soon as position is at least 2 you are able to jump until finally inventory is larger than 2|a is a tactic where it is good to do use if b is greater than y otherwise, if b do find , or do jump otherwise|a is a tactic where it is advantageous to do use if b is smaller than 0 otherwise, if position do find , or do jump otherwise|if a is not the same as 0 you have the option to jump until b is less than 2|as soon as position is larger than 0 you can use until a is equal to 1|whenever position is greater than 2 you are able to find until finally position is equal to 1|as soon as a is less than or equal to 0 you have the option to use until finally position is less than 1|b suggests that it would be advantageous to do run if iron x otherwise, if b do use , or do find as a last resort|a suggests that it would be advantageous to do use if b is less than 1 otherwise, if b do find , or do use if not|a states that you should do build if iron is exactly the same as 0 otherwise, if b do use , or do build otherwise|a suggests that it would be advantageous to do jump if a is larger than y otherwise, if b do run , or do run as a last resort|a means that it would be good to do jump if b x otherwise, if iron do find , or do use as a last resort|whenever inventory is exactly the same as x you can run until finally a is not the same as 0|a states that you should do use if a 2 otherwise, if b do find , or do find as a last resort|as soon as inventory is less than or equal to 0 you have the option to run until finally inventory is at most 1|if position is larger than 0 you have the choice to use until b is greater than 1|a is a tactic where it is good to do run if iron 1 otherwise, if position do find , or do jump as a last resort|once a is at least x you have the option to build until finally b is at most 0|a states that you should do jump if b is exactly the same as 2 otherwise, if b do find , or do jump otherwise|whenever b is not the same as 1 you have the option to find until position is less than or equal to 0|b means that it would be good to do run if a is less than 0 otherwise, if iron do use , or do run as a last resort|b is a tactic where it is advantageous to do use if position is smaller than x otherwise, if a do run , or do use if no other options are possible|as soon as position is less than or equal to y you have the option to jump until position|once b is greater than 2 you have the choice to find until finally inventory is at least 0|if inventory is greater than or equal to 2 you have the choice to run until finally position is greater than 2|if a is less than or equal to x you are able to run until b is at most y|a is a good strategy where you should do use if a is not the same as 2 otherwise, if position do run , or do jump if no other options are possible|a is a good strategy where you should do jump if b is smaller than 1 otherwise, if b do run , or do find otherwise|once a is equal to 0 you have the option to use until b is smaller than x|a means that it would be good to do find if iron is less than x otherwise, if b do use , or do use if no other options are possible|if position is less than or equal to y you can find until finally b is exactly the same as y|as soon as b is less than or equal to 0 you have the choice to jump until finally position is equal to 2|as soon as b is smaller than x you have the option to jump until b is greater than or equal to 0|a suggests that it would be advantageous to do run if b is less than 1 otherwise, if iron do build , or do use as a last resort|a suggests that it would be advantageous to do jump if iron is greater than y otherwise, if a do find , or do jump as a last resort|b suggests that it would be advantageous to do find if iron is smaller than x otherwise, if b do build , or do jump otherwise|b is a good strategy where you should do jump if a is not equal to y otherwise, if a do use , or do run as a last resort|as soon as inventory is less than y you have the option to jump until finally b is not the same as x|b entails that you do use if a is equal to 1 otherwise, if a do jump , or do find if not|as soon as inventory you can run until finally position is equal to y|a is a tactic where it is good to do run if iron y otherwise, if position do build , or do run if not|once b is less than or equal to x you have the choice to build until inventory is smaller than 1|a is an approach where it would be good to do use if b y otherwise, if a do build , or do run if no other options are possible|b is a good strategy where you should do build if position is exactly the same as x otherwise, if position do run , or do run otherwise|once a is not equal to 1 you have the choice to use until a is larger than x|b is a good strategy where you should do find if a is exactly the same as 2 otherwise, if position do use , or do use as a last resort|a is a tactic where it is good to do build if iron is exactly the same as 2 otherwise, if iron do run , or do run otherwise|whenever b is at most x you have the choice to build until finally position is larger than 1|a is a strategy where you do jump if position is exactly the same as 1 otherwise, if position do use , or do jump if no other options are possible|a is a tactic where it is good to do run if position 1 otherwise, if b do run , or do run if not|a is a strategy where you do run if a is exactly the same as x otherwise, if position do use , or do run if no other options are possible|a means that it would be good to do build if position is not equal to 0 otherwise, if iron do build , or do find otherwise|as soon as position is equal to 0 you can run until finally b is not equal to 1|a is a tactic where it is advantageous to do find if b is not equal to y otherwise, if a do build , or do jump if not|b states that you should do build if position is smaller than y otherwise, if a do jump , or do find if no other options are possible|whenever b is greater than or equal to 2 you can run until finally position is less than or equal to 2|a is a tactic where it is advantageous to do find if iron 1 otherwise, if iron do build , or do jump otherwise|b is a tactic where it is advantageous to do build if b is not equal to x otherwise, if b do use , or do use if not|a is a tactic where it is good to do find if position is larger than 0 otherwise, if iron do find , or do build as a last resort|as soon as inventory is greater than 2 you have the option to build until inventory is larger than x|a is an approach where it would be good to do build if b otherwise, if iron do use , or do run if not|b is a tactic where it is advantageous to do find if iron is smaller than y otherwise, if iron do run , or do run otherwise|once a is less than or equal to 0 you have the choice to build until finally position is equal to 0|b is a strategy where you do use if iron x otherwise, if a do use , or do jump if not|a is a tactic where it is good to do use if b is less than 0 otherwise, if b do find , or do find if no other options are possible|when b is larger than x you are able to jump until b is less than or equal to 1|a is an approach where you do find if iron is less than x otherwise, if iron do run , or do find if not|whenever b is less than or equal to x you can jump until finally position is larger than x|when position is exactly the same as 0 you can run until finally a is at most 0|when a is at most x you are able to find until b is greater than or equal to 2|whenever inventory you have the choice to run until finally inventory is greater than 2|a entails that you do find if b 0 otherwise, if b do build , or do run if not|b suggests that it would be advantageous to do build if a is less than 2 otherwise, if iron do find , or do build otherwise|whenever a is less than or equal to 1 you have the option to use until finally b is larger than x|b is a strategy where you do build if iron y otherwise, if iron do build , or do run if not|a means that it would be good to do find if a is smaller than y otherwise, if b do find , or do jump as a last resort|a is an approach where you do build if b is not the same as y otherwise, if b do find , or do use as a last resort|a is a tactic where it is good to do use if b is larger than 0 otherwise, if position do find , or do use if not|a is a good strategy where you should do use if position 0 otherwise, if position do run , or do jump as a last resort|if b is smaller than 2 you are able to find until finally b is at least 2|b means that it would be good to do use if position is not equal to y otherwise, if b do run , or do build if not|b entails that you do find if a is less than 0 otherwise, if a do use , or do jump if not|a entails that you do use if iron is exactly the same as 0 otherwise, if iron do run , or do use if not|as soon as a is not equal to 0 you have the option to build until b is less than or equal to 0|a means that it would be good to do run if position is greater than x otherwise, if a do use , or do find as a last resort|a is a good strategy where you should do find if b is exactly the same as 2 otherwise, if a do build , or do run as a last resort|b states that you should do find if iron is not equal to y otherwise, if a do jump , or do jump if no other options are possible|a means that it would be good to do build if b is not equal to 2 otherwise, if a do jump , or do find if no other options are possible|once position is at least y you are able to build until inventory is not the same as y|once b is at least 0 you can run until finally position is at most x|when position is greater than y you have the option to find until finally a is equal to 2|b entails that you do run if b y otherwise, if b do run , or do jump if no other options are possible|b is a tactic where it is good to do build if b is greater than y otherwise, if b do find , or do run if not|b means that it would be good to do run if iron is less than y otherwise, if position do run , or do build if no other options are possible|whenever b is equal to x you have the choice to find until finally a is greater than 1|if inventory is at least 2 you have the choice to build until b is equal to 2|once inventory is not equal to 2 you have the option to jump until finally b is smaller than y|b is an approach where it would be good to do use if iron is equal to x otherwise, if a do jump , or do run if no other options are possible|a is a good strategy where you should do run if iron is exactly the same as 0 otherwise, if iron do run , or do run otherwise|b is a good strategy where you should do build if position is exactly the same as y otherwise, if b do use , or do run if not|a is an approach where it would be good to do use if b y otherwise, if a do jump , or do find otherwise|b entails that you do find if iron is not the same as 1|a states that you should do build if iron 0 otherwise, if b do use , or do run as a last resort|a is a good strategy where you should do jump if b is not the same as x otherwise, if position do build , or do build if no other options are possible|as soon as position is larger than 0 you are able to run until position is smaller than x|a means that it would be good to do use if b is greater than x , or do jump as a last resort|b is a tactic where it is advantageous to do find if iron is larger than x otherwise, if iron do build , or do find if not|once position you are able to build until finally a is not the same as 0|a is a strategy where you do run if iron is exactly the same as x otherwise, if a do use , or do find as a last resort|a means that it would be good to do run if position is greater than x otherwise, if a do use , or do build as a last resort|when position is not equal to x you have the option to jump until finally inventory is smaller than x|a states that you should do jump if position is greater than 1 otherwise, if b do find , or do jump as a last resort|a states that you should do find if position is not equal to 1 otherwise, if b do build , or do use if no other options are possible|a is a strategy where you do use if b is equal to 1 otherwise, if position do jump , or do find as a last resort|when a is not the same as y you can jump until a is at most 0|as soon as position is greater than or equal to y you can jump until finally position is at most 2|when inventory is equal to x you have the choice to jump until inventory is not equal to 1|a is a tactic where it is advantageous to do build if b is equal to 2 otherwise, if a do use , or do build if not|a entails that you do build if b x otherwise, if position do build , or do jump if no other options are possible|a is a tactic where it is advantageous to do run if iron 2 otherwise, if position do run , or do use if not|when position is not the same as 0 you can run until b is not the same as 1|a entails that you do use if position is greater than y otherwise, if b do jump , or do use if no other options are possible|a is an approach where you do jump if position otherwise, if a do jump , or do find otherwise|b is a good strategy where you should do build if a is exactly the same as 0 , or do find if not|whenever b is larger than x you have the choice to use until finally inventory is larger than 2|a means that it would be good to do use if iron is exactly the same as x otherwise, if a do jump , or do jump if no other options are possible|whenever position is greater than 0 you have the option to jump until finally b is greater than or equal to 2|once position is smaller than 0 you can use until finally position is not the same as y|a is a tactic where it is good to do run if b is smaller than 1 otherwise, if a do find , or do find as a last resort|once b is less than or equal to y you are able to find until finally b is less than or equal to 1|a is a tactic where it is advantageous to do jump if position is larger than y otherwise, if iron do jump , or do run if no other options are possible|a suggests that it would be advantageous to do jump if iron is smaller than 0 , or do build if no other options are possible|if b is larger than 1 you have the option to run until b is not the same as 2|if position is larger than x you can find until finally a is not the same as 1|a entails that you do build if iron is exactly the same as x otherwise, if b do build , or do build if no other options are possible|when position is not equal to x you have the choice to use until inventory is larger than 1|when inventory is not the same as 2 you have the option to run until finally b is greater than 2|once a is greater than 1 you are able to run until finally b is not equal to 0|a means that it would be good to do build if b is less than y otherwise, if b do use , or do run otherwise|a suggests that it would be advantageous to do build if a 1 otherwise, if b do find , or do use otherwise|a states that you should do find if b is less than 1 otherwise, if a do build , or do build otherwise|a is a strategy where you do find if b 2 otherwise, if b do use , or do build otherwise|a entails that you do jump if b 2 otherwise, if position do use , or do build otherwise|a is an approach where you do find if iron y otherwise, if a do jump , or do build otherwise|if a is greater than or equal to x you are able to build until finally a is not equal to 0|whenever position is larger than 1 you are able to jump until finally a is at most 1|a is a good strategy where you should do run if position 1 otherwise, if b do find , or do build as a last resort|a is a good strategy where you should do use if b 0 otherwise, if iron do jump , or do run as a last resort|if a is not equal to y you have the choice to find until a is less than or equal to x|a is a good strategy where you should do build if a is exactly the same as 1 otherwise, if iron do run , or do jump as a last resort|if inventory is at least y you have the choice to use until position is less than y|as soon as b is equal to 1 you are able to build until position is exactly the same as 0|a is an approach where you do jump if position is not equal to y otherwise, if iron do use , or do run if not|b is a strategy where you do build if position is smaller than x otherwise, if b do find , or do use if not|a is an approach where you do use if position y otherwise, if a do use , or do find as a last resort|once position is larger than x you are able to jump until finally b is smaller than 0|when a is less than or equal to y you can use until finally a is less than or equal to 2|a is an approach where it would be good to do run if iron y otherwise, if b do use , or do jump otherwise|a is a tactic where it is good to do run if a is exactly the same as 1 otherwise, if b do jump , or do find if no other options are possible|a states that you should do jump if a 0 otherwise, if position do use , or do jump otherwise|as soon as a is greater than or equal to 0 you are able to run until finally position is larger than 1|once position is at most 2 you are able to jump until finally inventory is greater than 1|a is a tactic where it is advantageous to do jump if b y otherwise, if b do build , or do use if not|b is a good strategy where you should do build if a is not the same as y otherwise, if position do use , or do jump if no other options are possible|whenever x you are able to build until inventory is greater than or equal to x|a is a good strategy where you should do use if position 2 otherwise, if a do find , or do jump otherwise|a suggests that it would be advantageous to do build if iron is equal to x otherwise, if iron do build , or do run as a last resort|b states that you should do run if position 1 , or do use if not|when position is greater than or equal to 0 you have the choice to jump until finally inventory is at most y|whenever inventory is not the same as 2 you are able to build until finally inventory is smaller than 2|a is a tactic where it is good to do build if b x otherwise, if a do jump , or do jump otherwise|as soon as inventory is less than 0 you have the option to find until finally b is smaller than y|if position is at most x you have the option to build until finally position is smaller than 2|a is a good strategy where you should do run if position is not the same as 1 otherwise, if b do run , or do jump if not|a is a tactic where it is good to do build if a is not equal to 0 otherwise, if iron do jump , or do find if no other options are possible|when a is not equal to 1 you have the choice to build until finally b is less than or equal to x|as soon as position is exactly the same as 2 you are able to build until inventory is smaller than x|once inventory is not the same as y you can run until finally b is smaller than y|when a is smaller than 2 you have the choice to find until finally inventory is smaller than x|whenever position is equal to y you are able to jump until finally a is exactly the same as 2|as soon as position is less than or equal to 1 you have the choice to jump until finally b is equal to 2|b is a strategy where you do run if position is equal to x otherwise, if position do find , or do run otherwise|when position is not equal to x you can use until finally position is larger than x|a means that it would be good to do use if b is smaller than y otherwise, if iron do jump , or do run if not|when position is at least y you can jump until position is not the same as x|b means that it would be good to do use if a y otherwise, if position do find , or do run as a last resort|b states that you should do find if a is not the same as y otherwise, if b do find , or do build if no other options are possible|a entails that you do run if position is not the same as x otherwise, if a do build , or do run as a last resort|a states that you should do build if iron is not the same as 2 otherwise, if b do build , or do run if no other options are possible|a is a strategy where you do find if b 0 otherwise, if iron do jump , or do use if not|as soon as inventory is at least 1 you can use until finally inventory is equal to y|b is a tactic where it is good to do find if iron is not the same as x otherwise, if a do build , or do use if no other options are possible|when inventory is equal to 2 you can build until inventory is equal to y|b is a tactic where it is advantageous to do run if b otherwise, if iron do run , or do build if not|if position is greater than 0 you have the option to find until finally inventory is smaller than y|b states that you should do build if b 0 , or do jump if not|b suggests that it would be advantageous to do find if a is not equal to x otherwise, if b do run , or do use as a last resort|a entails that you do run if a x otherwise, if b do build , or do find otherwise|once b is smaller than 1 you have the option to use until finally position is greater than 2|b entails that you do find if a is smaller than y otherwise, if iron do jump , or do find if no other options are possible|b states that you should do find if a is not the same as 0 otherwise, if position do use , or do run otherwise|when position is at least y you can run until position is less than x|once inventory is not the same as 1 you have the choice to jump until inventory is exactly the same as 2|as soon as a is greater than or equal to 2 you can find until position is larger than 1|as soon as position is greater than y you have the option to use until position is at most y|as soon as inventory is exactly the same as x you have the option to jump until inventory is smaller than x|if position is larger than 1 you can run until finally a is not equal to 2|if b is not the same as x you have the choice to build until b is exactly the same as 2|if position is at least 0 you can jump until finally a is greater than y|b suggests that it would be advantageous to do use if a is not the same as 2 otherwise, if b do run , or do jump as a last resort|b is a tactic where it is advantageous to do build if position is not equal to x otherwise, if a do use , or do find if not|if position is at least x you have the choice to build until finally b is exactly the same as x|b is an approach where you do find if b is greater than y otherwise, if iron do use , or do use otherwise|once inventory is smaller than 2 you have the option to find until position is exactly the same as 0|once position is not the same as 1 you can build until finally inventory is exactly the same as x|b entails that you do find if position is not equal to y otherwise, if iron do run , or do run as a last resort|once a is exactly the same as 1 you are able to find until finally a is at most 2|a is a good strategy where you should do find if position is not equal to 0 otherwise, if a do run , or do jump as a last resort|b is a good strategy where you should do use if a is equal to 1 otherwise, if iron do use , or do run if not|whenever inventory is smaller than 2 you can find until finally position is greater than 1|b is an approach where you do run if a x otherwise, if position do build , or do jump if not|once a is not equal to 0 you can find until finally inventory is at least 1|whenever inventory is at most 0 you have the option to find until a is not the same as 2|a means that it would be good to do run if iron 0 otherwise, if iron do find , or do find otherwise|b is a tactic where it is good to do run if b is not the same as 0 , or do use otherwise|once inventory is larger than x you have the option to build until b is at most 0|a means that it would be good to do build if position is not equal to 1 otherwise, if b do use , or do run if no other options are possible|when a is less than or equal to 0 you are able to find until finally inventory is at most 2|when position is exactly the same as x you are able to use until b is equal to 2|b is a strategy where you do jump if iron is larger than x otherwise, if b do run , or do jump as a last resort|a is a good strategy where you should do jump if b x otherwise, if a do run , or do use if not|a is a tactic where it is advantageous to do find if iron 2 otherwise, if iron do run , or do jump as a last resort|whenever position is smaller than y you have the option to use until b is at least 1|if position is greater than or equal to x you are able to use until position is equal to y|a is a tactic where it is good to do jump if position is smaller than y otherwise, if position do jump , or do use if no other options are possible|a is a good strategy where you should do use if b is less than y otherwise, if position do use , or do run if no other options are possible|once a is greater than or equal to 2 you are able to build until inventory is greater than y|a states that you should do jump if b is exactly the same as 1 otherwise, if position do find , or do jump otherwise|a is an approach where you do find if position is smaller than 0 otherwise, if b do run , or do find otherwise|b is a tactic where it is good to do use if a is not the same as x otherwise, if b do use , or do build if no other options are possible|as soon as position is not the same as y you are able to build until finally position is less than x|a is a strategy where you do use if position otherwise, if a do jump , or do find otherwise|a states that you should do run if iron is less than x otherwise, if a do build , or do find if no other options are possible|once b is greater than or equal to 0 you are able to build until b is larger than x|when a is greater than or equal to 0 you can use until finally b is not the same as 0|when inventory is greater than 0 you are able to build until finally a is larger than y|when a is smaller than x you have the option to find until finally b is greater than or equal to 0|once b is less than or equal to y you have the option to run until finally position is at most 0|a entails that you do jump if iron is equal to y otherwise, if a do build , or do find as a last resort|a is an approach where it would be good to do find if position 0 otherwise, if b do run , or do jump if no other options are possible|when a is not the same as x you can find until finally position is equal to y|b is an approach where it would be good to do use if iron is greater than 0 , or do jump otherwise|b is a good strategy where you should do find if a y otherwise, if iron do use , or do use otherwise|a is a tactic where it is advantageous to do run if a is not equal to 0 otherwise, if position do jump , or do build otherwise|a means that it would be good to do find if b otherwise, if a do jump , or do use as a last resort|b is a tactic where it is good to do find if iron is greater than y otherwise, if b do find , or do use as a last resort|a is a tactic where it is advantageous to do run if iron is greater than 2 otherwise, if b do run , or do find as a last resort|b is a tactic where it is advantageous to do run if a x otherwise, if a do build , or do use if not|a entails that you do jump if position is larger than y otherwise, if position do use , or do jump as a last resort|once b is greater than or equal to 1 you are able to find until finally inventory is less than 2|b is an approach where you do find if position is smaller than y otherwise, if b do build , or do find if not|as soon as a is less than y you have the option to jump until finally inventory is greater than or equal to 0|a is a good strategy where you should do jump if iron is not the same as 0|b is a strategy where you do find if iron x otherwise, if position do jump , or do build as a last resort|b is an approach where it would be good to do jump if position is exactly the same as x otherwise, if a do build , or do run if no other options are possible|a states that you should do use if iron is less than 2 otherwise, if b do jump , or do use otherwise|b is a good strategy where you should do jump if b 0|once b is less than or equal to 1 you have the option to find until b is greater than or equal to y|as soon as position is greater than 2 you have the choice to build until a is smaller than 2|once b is not equal to x you have the option to jump until a is smaller than y|b is an approach where you do use if iron is less than x , or do jump otherwise|a suggests that it would be advantageous to do use if position is less than 2 otherwise, if b do run , or do run otherwise|b is a good strategy where you should do build if position is greater than x otherwise, if iron do use , or do jump as a last resort|a is a strategy where you do use if b is larger than x otherwise, if a do build , or do find if not|a suggests that it would be advantageous to do run if a 1 otherwise, if iron do find , or do jump if not|a means that it would be good to do find if position y otherwise, if iron do run , or do run otherwise|a suggests that it would be advantageous to do jump if iron y otherwise, if b do jump , or do run if not|a entails that you do jump if position 1 otherwise, if b do build , or do find if not|a entails that you do use if b is larger than 2 otherwise, if b do jump , or do find if no other options are possible|b is an approach where you do use if iron is greater than x otherwise, if position do find , or do build otherwise|a is a good strategy where you should do find if a is greater than x otherwise, if iron do build , or do use if no other options are possible|whenever b is less than or equal to 0 you can run until inventory is less than or equal to 1|if a is less than or equal to x you are able to build until finally b is at most 2|whenever position is exactly the same as 1 you have the option to use until position is less than or equal to 2|as soon as position is less than or equal to 0 you have the option to build until finally a is larger than y|b is an approach where you do use if a is smaller than x otherwise, if iron do jump , or do build if not|whenever inventory is larger than 1 you are able to jump until a is not equal to y|a is a tactic where it is advantageous to do use if iron 0 otherwise, if iron do jump , or do jump otherwise|b is a good strategy where you should do run if position is not the same as y otherwise, if position do use , or do run if not|b is a tactic where it is good to do find if iron x otherwise, if position do find , or do jump otherwise|a entails that you do run if position is not equal to 0 otherwise, if position do use , or do find if no other options are possible|whenever inventory is greater than or equal to x you are able to jump until b is greater than or equal to x|a is an approach where you do find if a is exactly the same as 2 otherwise, if iron do run , or do find if no other options are possible|whenever b is at most y you are able to run until finally inventory is larger than 0|b is an approach where you do build if b y otherwise, if iron do jump , or do run if no other options are possible|once a is greater than or equal to 1 you can build until finally b is larger than 2|a is a tactic where it is good to do jump if a is greater than 1 otherwise, if iron do build , or do use if not|b is an approach where it would be good to do build if iron y otherwise, if position do build , or do find if not|if position is exactly the same as 2 you are able to find until finally position is not equal to 0|if a is not equal to y you have the choice to find until finally a is larger than x|a is an approach where you do use if b x otherwise, if a do build , or do find if no other options are possible|whenever inventory is smaller than 2 you are able to build until b is not the same as x|whenever a is at most 2 you have the choice to build until finally b is smaller than 1|as soon as a is at least x you can use until finally b is smaller than 0|once b is equal to 1 you have the choice to build until position is greater than or equal to 2|a is an approach where you do jump if a is not the same as x otherwise, if b do find , or do run as a last resort|if a is greater than 2 you have the option to build until b is less than x|b is an approach where it would be good to do use if iron x otherwise, if position do jump , or do build as a last resort|b is an approach where it would be good to do run if position is exactly the same as 0|a states that you should do use if a is larger than y otherwise, if iron do jump , or do run if not|b entails that you do run if position y otherwise, if a do jump , or do run as a last resort|if b is not equal to y you have the option to find until b is not equal to 1|a is a tactic where it is good to do run if a is larger than y , or do jump if no other options are possible|a states that you should do jump if iron is not equal to 2 otherwise, if a do find , or do run if not|if b is smaller than 0 you are able to run until b is less than or equal to 2|once a is equal to 2 you have the option to build until inventory is greater than or equal to 1|when a is equal to y you can use until finally inventory is at least 0|b is an approach where it would be good to do run if a is equal to 1 otherwise, if a do jump , or do run otherwise|b states that you should do build if a is smaller than 2 otherwise, if position do jump , or do use if not|when a is less than or equal to 0 you have the option to jump until finally a is at least x|b is a strategy where you do jump if position x otherwise, if b do build , or do find otherwise|once inventory is larger than 0 you can use until finally position is less than or equal to 2|b entails that you do use if position is greater than y otherwise, if b do use , or do jump as a last resort|b suggests that it would be advantageous to do use if position is larger than y otherwise, if a do use , or do use if not|once a is greater than or equal to 2 you can jump until b is exactly the same as x|b is an approach where it would be good to do use if position is smaller than x otherwise, if a do run , or do jump if no other options are possible|whenever inventory is less than 2 you are able to jump until finally position is greater than x|a entails that you do build if iron is greater than 1 otherwise, if position do build , or do use otherwise|as soon as b is exactly the same as 0 you can run until b is greater than y|a suggests that it would be advantageous to do jump if b is greater than y otherwise, if b do use , or do use if no other options are possible|a is an approach where it would be good to do find if iron 0 otherwise, if a do use , or do jump as a last resort|once a is not the same as 0 you have the choice to find until finally b is less than 2|if position is exactly the same as 1 you have the choice to find until finally position is greater than 2|if a is not equal to 1 you have the option to run until finally a is equal to 1|whenever inventory is at least 2 you have the option to run until b is greater than 2|b means that it would be good to do use if position is greater than x otherwise, if b do build , or do find if not|a is a tactic where it is advantageous to do jump if iron is smaller than 0 otherwise, if position do find , or do jump if not|a is a tactic where it is good to do use if position 2 otherwise, if position do find , or do find otherwise|as soon as x you have the option to use until position is larger than x|as soon as a is smaller than 2 you can find until finally b is larger than y|a states that you should do run if b is smaller than x otherwise, if position do find , or do run otherwise|b is an approach where you do find if iron is greater than x otherwise, if a do jump , or do jump as a last resort|whenever inventory is less than y you have the choice to run until finally a is not equal to 2|when b is exactly the same as y you have the option to use until inventory is larger than x|a is a good strategy where you should do use if a is not equal to 2 otherwise, if position do run , or do build if not|as soon as position is exactly the same as 1 you have the option to use until inventory is less than y|b is a good strategy where you should do use if iron is larger than y otherwise, if iron do build , or do find as a last resort|once position is less than or equal to 2 you have the option to run until inventory is at least 0|whenever inventory is not equal to x you are able to build until finally position is larger than 1|a is a good strategy where you should do find if b is equal to 0 otherwise, if iron do run , or do run if no other options are possible|once b is not the same as 1 you have the option to run until position is at least 0|whenever b is at most x you have the choice to find until finally inventory is greater than y|as soon as position is not the same as 2 you are able to use until finally b is equal to 1|when position is exactly the same as y you have the option to find until finally position is greater than x|a is a good strategy where you should do run if b otherwise, if a do jump , or do use otherwise|b suggests that it would be advantageous to do build if a x otherwise, if b do jump , or do jump otherwise|a is a tactic where it is advantageous to do run if a is not equal to y otherwise, if b do jump , or do use as a last resort|a is an approach where you do find if a is exactly the same as 1 otherwise, if position do use , or do use as a last resort|when a is at least 2 you have the option to run until a is not equal to x|when inventory is equal to x you can use until position is less than y|a is a strategy where you do find if b 2 otherwise, if iron do build , or do jump if no other options are possible|a is a good strategy where you should do find if b is not the same as y otherwise, if a do jump , or do use as a last resort|a states that you should do build if a 0 otherwise, if iron do use , or do run as a last resort|once a is at least y you are able to build until inventory is less than or equal to x|b is an approach where you do use if iron is larger than y otherwise, if a do use , or do build if no other options are possible|whenever b is less than or equal to 0 you have the choice to find until finally a is greater than or equal to 1|as soon as inventory is at most x you have the option to build until inventory is not equal to 2|when position is equal to y you have the choice to jump until inventory is less than x|a is a good strategy where you should do use if iron 2 otherwise, if iron do use , or do build as a last resort|a is a tactic where it is good to do run if b 0 , or do use if no other options are possible|a is an approach where it would be good to do run if a is equal to x otherwise, if b do run , or do build if not|b is an approach where it would be good to do use if b x otherwise, if b do use , or do find as a last resort|b is an approach where it would be good to do use if position is less than y otherwise, if a do use , or do find if no other options are possible|if position is not the same as y you can run until inventory is less than 2|b is a tactic where it is advantageous to do run if a x otherwise, if iron do run , or do run if not|a states that you should do find if position is greater than 0 otherwise, if position do run , or do jump if not|when inventory is at most y you have the option to jump until inventory is at most 1|when a is not the same as y you are able to use until inventory is not the same as y|a suggests that it would be advantageous to do jump if a is exactly the same as 2 otherwise, if b do build , or do find if no other options are possible|if b is larger than 0 you have the choice to find until position is less than or equal to y|a suggests that it would be advantageous to do use if a is larger than y otherwise, if iron do find , or do run if no other options are possible|b states that you should do run if position is not the same as y otherwise, if position do jump , or do jump as a last resort|a is a good strategy where you should do run if position is not the same as 2 otherwise, if b do jump , or do build otherwise|b is a good strategy where you should do run if b is equal to 1 , or do jump otherwise|a is a tactic where it is advantageous to do use if b is smaller than 1 otherwise, if position do build , or do build if no other options are possible|a is an approach where you do find if position 1 otherwise, if b do run , or do find if not|a is a strategy where you do use if iron is exactly the same as y otherwise, if b do build , or do find otherwise|b is a good strategy where you should do use if iron is exactly the same as y otherwise, if a do run , or do find if no other options are possible|a is a tactic where it is advantageous to do run if a is greater than y , or do use if no other options are possible|a is a tactic where it is good to do use if a is not the same as 1 otherwise, if iron do run , or do jump if not|b is a good strategy where you should do find if iron otherwise, if b do use , or do use if not|a is an approach where it would be good to do run if iron is equal to x otherwise, if a do find , or do use if no other options are possible|when b is larger than x you have the option to jump until a is at most y|whenever position is less than 0 you are able to jump until finally a is less than or equal to y|as soon as inventory is equal to 2 you can run until finally b is exactly the same as 1|a is a tactic where it is advantageous to do jump if iron 0 otherwise, if position do build , or do use as a last resort|a is a strategy where you do use if position is not the same as 0 otherwise, if iron do build , or do run if no other options are possible|if inventory is greater than 2 you can use until position is smaller than 0|b suggests that it would be advantageous to do find if iron x otherwise, if b do run , or do jump otherwise|once a is at most 2 you can find until finally a is larger than 1|b is an approach where you do use if b y , or do use if not|a means that it would be good to do build if a is not equal to 2 otherwise, if b do build , or do run if no other options are possible|b is an approach where you do build if position is larger than x otherwise, if b do run , or do find otherwise|a is a strategy where you do run if position is not equal to 1 otherwise, if a do use , or do use as a last resort|b entails that you do build if b is less than x , or do run as a last resort|as soon as inventory is exactly the same as 1 you have the choice to find until finally position is smaller than x|b is an approach where it would be good to do build if a is less than 0 otherwise, if position do use , or do use as a last resort|once position is greater than or equal to y you have the choice to build until finally b is greater than 1|a is an approach where it would be good to do build if position 2 otherwise, if iron do jump , or do build if no other options are possible|a is a tactic where it is advantageous to do use if b x otherwise, if b do run , or do find as a last resort|a is a tactic where it is advantageous to do build if position y otherwise, if b do jump , or do find otherwise|when b is greater than or equal to 0 you have the option to use until a is larger than 0|as soon as inventory is exactly the same as x you have the choice to find until a|whenever a is not equal to 2 you are able to run until finally inventory is less than or equal to x|as soon as b is smaller than y you have the option to build until finally inventory|if inventory is exactly the same as x you are able to run until a is exactly the same as 0|when a is not the same as x you are able to find until finally inventory is greater than or equal to 0|a is a strategy where you do find if iron is less than x otherwise, if iron do use , or do use otherwise|if b is greater than or equal to 0 you can run until finally b is not equal to 2|when a is larger than y you have the choice to jump until inventory is greater than 1|if b is at most 1 you have the option to use until a is equal to x|as soon as inventory is smaller than 2 you can use until inventory is greater than x|once inventory is greater than 1 you have the choice to run until finally inventory is at most 1|a is a good strategy where you should do build if b is larger than 0 otherwise, if iron do jump , or do jump if not|b entails that you do find if b is exactly the same as x otherwise, if a do run , or do jump as a last resort|whenever a is at least x you are able to run until a is less than or equal to 0|when inventory is equal to 0 you have the option to find until position is smaller than 2|whenever b is equal to 0 you have the option to run until a is greater than or equal to 0|b is an approach where it would be good to do find if iron is not equal to x otherwise, if iron do build , or do use as a last resort|as soon as inventory is not equal to 0 you are able to build until finally b is less than or equal to 0|a entails that you do use if position is not equal to 1 otherwise, if a do use , or do build otherwise|when position is exactly the same as y you are able to build until b is at most 0|a is a good strategy where you should do jump if position is smaller than x otherwise, if position do find , or do run as a last resort|b is a good strategy where you should do build if a is not the same as 2 otherwise, if a do use , or do build if no other options are possible|a is a tactic where it is advantageous to do run if position is smaller than y otherwise, if position do run , or do run as a last resort|a is a tactic where it is good to do run if b 2 otherwise, if iron do find , or do find if no other options are possible|b entails that you do find if b is smaller than x otherwise, if iron do build , or do run if not|as soon as inventory is smaller than 2 you have the choice to build until finally a is exactly the same as x|when inventory is less than or equal to y you are able to use until inventory is larger than 0|b is a strategy where you do build if iron x otherwise, if position do find , or do find otherwise|if position is at least 1 you can find until b is exactly the same as 1|whenever position is not equal to 1 you have the option to use until finally position is not the same as 1|whenever a is greater than x you have the option to use until finally a is less than or equal to 0|a is a good strategy where you should do find if b 1 otherwise, if iron do run , or do build as a last resort|a entails that you do find if position 2 otherwise, if b do find , or do find as a last resort|b is a tactic where it is advantageous to do build if iron is smaller than y otherwise, if a do use , or do build if not|a is an approach where you do run if a is smaller than x otherwise, if position do run , or do find otherwise|when inventory is less than or equal to 0 you have the choice to jump until finally inventory is equal to x|a is a tactic where it is good to do run if position is equal to x otherwise, if a do run , or do jump as a last resort|b entails that you do build if a is equal to 1 otherwise, if b do use , or do use otherwise|whenever a is not equal to 1 you have the choice to use until b is greater than or equal to y|as soon as b is exactly the same as 1 you are able to jump until finally inventory is at least y|whenever inventory is at least 1 you have the choice to find until a is not the same as 0|a is an approach where it would be good to do build if iron is equal to 0 otherwise, if a do jump , or do find if not|if inventory is equal to 0 you are able to run until finally a is smaller than x|if b is at most x you are able to jump until finally inventory is equal to x|a is a tactic where it is advantageous to do find if iron x otherwise, if a do build , or do find if not|a is a strategy where you do jump if b is not equal to 0 otherwise, if iron do run , or do find as a last resort|once position is larger than 1 you have the choice to run until finally inventory is greater than y|b is an approach where you do use if a is smaller than 0 otherwise, if position do build , or do run if not|a is an approach where you do find if iron 0 otherwise, if a do find , or do jump if not|when inventory is not the same as 0 you have the choice to find until finally inventory is less than 2|once a is greater than 2 you have the option to run until finally b is less than or equal to y|whenever inventory is exactly the same as 0 you are able to build until finally a is not the same as 2|a is an approach where you do run if iron is not the same as x otherwise, if a do run , or do use if not|when inventory is equal to 1 you are able to find until b is equal to y|a is a tactic where it is advantageous to do run if iron y otherwise, if iron do find , or do run if no other options are possible|a states that you should do run if position 1 , or do build otherwise|a means that it would be good to do jump if iron is equal to x otherwise, if b do build , or do use as a last resort|whenever position is at least x you are able to build until b is not the same as 0|b is an approach where you do build if position is not the same as y otherwise, if b do find , or do jump if not|a states that you should do run if position is smaller than 2 otherwise, if b do use , or do run if not|b states that you should do run if a x otherwise, if position do build , or do run if not|when a is not equal to 0 you have the option to use until inventory is exactly the same as x|if a is equal to 2 you have the choice to use until finally a is less than 0|as soon as a is smaller than 1 you have the choice to jump until inventory is less than y|when inventory is at least 1 you have the option to build until finally inventory is larger than 1|b is an approach where it would be good to do find if a x otherwise, if position do find , or do use if no other options are possible|b is a good strategy where you should do build if a y otherwise, if position do use , or do jump as a last resort|if b you have the choice to jump until inventory is not the same as x|a is an approach where it would be good to do build if position is larger than 1 otherwise, if b do find , or do build if not|as soon as b is larger than 0 you are able to find until b is larger than y|a means that it would be good to do build if a is smaller than 2 otherwise, if b do jump , or do run if not|a means that it would be good to do find if position is not the same as 2 otherwise, if b do find , or do use otherwise|b means that it would be good to do jump if b is exactly the same as x otherwise, if b do run , or do run otherwise|a is a tactic where it is advantageous to do run if b is exactly the same as 1 otherwise, if b do use , or do run if not|b is a tactic where it is good to do run if a is equal to y otherwise, if position do use , or do use if not|b is a tactic where it is advantageous to do find if iron otherwise, if iron do find , or do run otherwise|when inventory is at least 1 you have the option to run until finally inventory is larger than 0|b entails that you do jump if iron otherwise, if a do build , or do jump if not|b is a good strategy where you should do find if position is less than y otherwise, if b do jump , or do use if not|a states that you should do use if a is larger than x otherwise, if b do find , or do use otherwise|a is a good strategy where you should do use if iron is not the same as 2 otherwise, if a do find , or do build otherwise|b suggests that it would be advantageous to do use if a is not the same as y , or do build otherwise|b is a tactic where it is good to do run if b is exactly the same as x otherwise, if a do find , or do find if no other options are possible|b is a tactic where it is advantageous to do use if a is smaller than y otherwise, if b do use , or do run if no other options are possible|once position is smaller than 0 you are able to use until b is smaller than 1|once position is not the same as 2 you are able to use until a is exactly the same as 1|a is an approach where you do build if a x otherwise, if position do use , or do run otherwise|b suggests that it would be advantageous to do use if b x otherwise, if iron do run , or do run if not|once a is smaller than y you have the choice to find until finally inventory is smaller than x|b entails that you do use if a x otherwise, if b do build , or do find if no other options are possible|once inventory is at least y you have the option to run until finally inventory|b states that you should do run if b x otherwise, if a do use , or do jump if no other options are possible|b means that it would be good to do use if a is not equal to 1 otherwise, if iron do run , or do find if no other options are possible|a is an approach where it would be good to do jump if b is larger than x otherwise, if iron do run , or do jump if not|a means that it would be good to do find if iron is not equal to 0 otherwise, if iron do use , or do find as a last resort|a is an approach where it would be good to do find if a x otherwise, if iron do build , or do run if not|a is a good strategy where you should do use if b 1 otherwise, if iron do use , or do use otherwise|a entails that you do find if position y otherwise, if iron do build , or do build as a last resort|b is a good strategy where you should do find if position is not the same as y otherwise, if position do use , or do use as a last resort|whenever inventory is larger than 0 you have the option to run until finally a is not equal to 0|b is a strategy where you do run if a is less than y otherwise, if iron do use , or do use as a last resort|whenever b you are able to find until b is at most x|whenever b is smaller than 0 you have the choice to find until finally position is at least x|a is a tactic where it is advantageous to do build if position is equal to 2 otherwise, if b do use , or do find as a last resort|a is a strategy where you do find if iron is less than 2 otherwise, if position do use , or do run if not|if inventory is greater than or equal to y you have the option to jump until finally inventory is equal to y|once position is equal to y you have the choice to run until inventory is larger than 2|once b is greater than x you have the choice to find until a is at most 0|as soon as a is not equal to 2 you are able to find until finally b is at most 0|as soon as b is greater than 2 you have the option to use until finally b is smaller than 2|as soon as a is not equal to x you can find until inventory is greater than y|a is a good strategy where you should do run if b is less than y otherwise, if a do run , or do run if no other options are possible|as soon as a is less than or equal to 0 you have the option to find until inventory is not equal to 1|a is a good strategy where you should do build if a is larger than 2 otherwise, if a do run , or do find if no other options are possible|a is an approach where it would be good to do run if iron is greater than 0 otherwise, if position do run , or do build otherwise|a is a tactic where it is good to do jump if b is exactly the same as 1 otherwise, if iron do find , or do find if not|a is an approach where you do run if b 0 otherwise, if a do use , or do run as a last resort|a means that it would be good to do use if iron x otherwise, if iron do build , or do find if not|if a is not equal to y you have the choice to build until finally inventory is greater than 2|as soon as a is not the same as 1 you are able to run until b is smaller than 1|b is an approach where it would be good to do use if a is not equal to 1 , or do find as a last resort|when position is equal to 1 you have the option to find until finally inventory is equal to 2|a is a strategy where you do find if position 0 otherwise, if position do jump , or do run if no other options are possible|when b is smaller than 1 you have the option to use until inventory is greater than 2|a is an approach where you do run if b is greater than 2 otherwise, if b do use , or do use as a last resort|if a is not the same as 1 you are able to run until position is at least x|b is an approach where it would be good to do jump if position is equal to y otherwise, if a do run , or do build otherwise|a means that it would be good to do jump if position is greater than y otherwise, if a do use , or do build if no other options are possible|if inventory is greater than 0 you have the option to run until inventory is less than y|once a is greater than or equal to 2 you are able to find until finally position is not equal to 2|a is an approach where you do find if a is less than 2 otherwise, if position do find , or do run if no other options are possible|a entails that you do run if b y otherwise, if position do run , or do run otherwise|a suggests that it would be advantageous to do use if iron is less than 2 otherwise, if position do run , or do find as a last resort|once inventory is smaller than 1 you have the option to build until b is greater than or equal to x|as soon as b is exactly the same as 2 you have the option to jump until finally inventory is less than x|if a is less than 1 you have the choice to jump until finally position is greater than 2|whenever a is less than or equal to x you have the choice to build until finally inventory is less than 0|b is a tactic where it is good to do build if a x otherwise, if position do jump , or do build if not|as soon as b is exactly the same as 1 you can run until finally a is at most 2|a is a tactic where it is advantageous to do run if position is less than y otherwise, if iron do use , or do build otherwise|a is a tactic where it is good to do build if b is not the same as 0 otherwise, if a do find , or do use otherwise|if inventory you can jump until finally a is less than 0|b is a tactic where it is advantageous to do build if a x otherwise, if iron do use , or do jump otherwise|as soon as inventory is greater than x you have the choice to build until b is less than or equal to x|once a is greater than or equal to x you are able to use until b is at most 1|when inventory is at most y you have the option to run until a is not the same as y|a states that you should do build if position is equal to 1 otherwise, if iron do jump , or do use as a last resort|if b is at most 1 you can find until finally a is exactly the same as 0|a means that it would be good to do use if position is not the same as 2 otherwise, if a do find , or do run if no other options are possible|as soon as inventory is less than y you have the option to use until finally a is smaller than 0|once position is equal to 1 you can run until inventory is not the same as 1|a is a good strategy where you should do jump if iron is not equal to y otherwise, if position do use , or do jump otherwise|a is an approach where it would be good to do run if b is exactly the same as y otherwise, if b do run , or do use if no other options are possible|as soon as inventory is greater than or equal to 1 you have the option to find until finally b is less than or equal to x|as soon as a is less than or equal to 1 you have the choice to use until finally inventory is greater than or equal to 0|whenever inventory is less than or equal to y you are able to find until x|when position is less than or equal to 2 you have the choice to run until finally position is greater than or equal to y|a means that it would be good to do jump if position is greater than 1 otherwise, if position do jump , or do jump if not|whenever b is exactly the same as 2 you have the choice to jump until a|whenever inventory is equal to 2 you can jump until b is at least 1|if b is exactly the same as x you have the choice to build until finally a is larger than 0|a is a good strategy where you should do find if b 2 otherwise, if position do build , or do find otherwise|a entails that you do jump if b is exactly the same as 1 otherwise, if iron do jump , or do jump if no other options are possible|as soon as a is less than or equal to 2 you are able to find until finally b is exactly the same as 0|when inventory is at most y you can build until finally position is smaller than y|as soon as inventory is at most 1 you have the option to build until finally inventory is not equal to y|b means that it would be good to do build if iron y otherwise, if b do build , or do jump as a last resort|b is a good strategy where you should do use if a is equal to y otherwise, if iron do jump , or do run if not|a is a tactic where it is advantageous to do run if b y otherwise, if b do run , or do find if not|a entails that you do use if iron is larger than 2|if a is equal to 2 you have the option to use until b is at least 1|b is a good strategy where you should do find if position is greater than y otherwise, if a do find , or do build as a last resort|a suggests that it would be advantageous to do run if b is greater than 0 otherwise, if b do build , or do find if not|a means that it would be good to do use if b is less than y otherwise, if position do run , or do find if no other options are possible|a means that it would be good to do find if b is exactly the same as 2 otherwise, if a do use , or do jump otherwise|b states that you should do use if iron otherwise, if iron do use , or do use if not|whenever position is exactly the same as x you can run until position is greater than 1|b means that it would be good to do run if a otherwise, if b do use , or do find if no other options are possible|b is a tactic where it is good to do build if a is not equal to y otherwise, if a do build , or do jump otherwise|a is a strategy where you do use if b y otherwise, if iron do run , or do find if no other options are possible|if a is equal to 0 you are able to jump until inventory is greater than or equal to y|once position is equal to 2 you are able to jump until a is greater than 1|a means that it would be good to do jump if a is larger than 2 otherwise, if b do use , or do build as a last resort|a means that it would be good to do use if position is not equal to 1|as soon as b is at most 2 you are able to find until finally inventory is greater than 1|a is a strategy where you do use if a 1 otherwise, if b do jump , or do jump as a last resort|a is a tactic where it is good to do jump if a is equal to 2 otherwise, if b do find , or do find if not|a is a strategy where you do use if position is larger than y otherwise, if b do find , or do use if not|a means that it would be good to do find if a x otherwise, if iron do jump , or do find if no other options are possible|if inventory is at least y you are able to build until finally a is greater than x|a suggests that it would be advantageous to do find if iron is not the same as 1 otherwise, if b do run , or do use if not|b is a good strategy where you should do build if a is not equal to 0 otherwise, if a do jump , or do use if not|a is a strategy where you do jump if position is larger than y otherwise, if a do find , or do use if not|if position is less than 2 you are able to build until finally b is less than or equal to y|a is a good strategy where you should do jump if position is equal to 1 otherwise, if b do run , or do jump as a last resort|a states that you should do find if b is not equal to 2 otherwise, if a do run , or do run if not|if b is not the same as y you can jump until finally position is at most y|a is a tactic where it is good to do use if iron is not equal to 0 otherwise, if b do build , or do jump if not|as soon as a is larger than 0 you have the choice to use until a is exactly the same as 0|when position is equal to 1 you are able to build until finally inventory is less than 1|if a is not equal to x you have the option to jump until b is greater than 0|a is an approach where it would be good to do find if b is smaller than x otherwise, if a do build , or do use otherwise|when a is larger than 1 you have the option to jump until finally inventory is greater than 2|when a is less than 1 you have the option to run until finally position is exactly the same as y|b is an approach where you do run if position y otherwise, if b do jump , or do find if not|when a is greater than or equal to y you can use until b is at least 0|a is a strategy where you do build if b 1 otherwise, if a do find , or do build if no other options are possible|a is a strategy where you do use if a is larger than y , or do use if no other options are possible|a entails that you do use if a is exactly the same as y otherwise, if a do find , or do build otherwise|whenever b is less than or equal to 1 you are able to run until finally b is less than or equal to y|when a is at most 1 you have the choice to build until b is at least 2|whenever position is less than or equal to x you are able to use until finally inventory is not equal to 0|a is an approach where it would be good to do find if b is greater than 0 otherwise, if a do jump , or do find if no other options are possible|if inventory is greater than or equal to y you can use until finally b is at most x|a entails that you do build if b 1 otherwise, if b do run , or do find otherwise|if inventory is greater than or equal to 1 you have the option to run until position is greater than or equal to x|a means that it would be good to do run if position is smaller than x otherwise, if a do run , or do run as a last resort|b is a tactic where it is advantageous to do use if position is not equal to y otherwise, if position do run , or do run otherwise|a entails that you do run if position is not the same as 0 otherwise, if iron do use , or do use if no other options are possible|when position is not the same as 0 you have the option to find until a is equal to 1|a entails that you do use if b is greater than 2 otherwise, if a do build , or do find otherwise|a states that you should do jump if iron is less than 1 otherwise, if position do build , or do jump if not|once a is less than 1 you are able to build until a is less than or equal to y|once position is exactly the same as y you are able to use until finally inventory is not equal to 0|when a is at most 0 you have the choice to jump until finally position is exactly the same as 1|once inventory is larger than x you have the option to find until a|if b is at least 2 you can jump until finally inventory is smaller than x|a is a good strategy where you should do find if b is exactly the same as 0 otherwise, if iron do jump , or do find as a last resort|when inventory is exactly the same as 0 you have the choice to build until finally position is at least y|a suggests that it would be advantageous to do find if position is greater than 2 otherwise, if iron do find , or do use as a last resort|as soon as position is greater than or equal to 2 you have the choice to find until finally b is at most x|a is an approach where you do jump if iron 1 otherwise, if position do find , or do find as a last resort|a is an approach where it would be good to do run if b is larger than x otherwise, if b do run , or do build otherwise|whenever position is at most y you are able to build until inventory is less than or equal to 0|when inventory is equal to 0 you are able to use until finally position is not equal to y|a suggests that it would be advantageous to do run if a x otherwise, if position do jump , or do use as a last resort|a entails that you do build if a is not equal to x otherwise, if a do find , or do run otherwise|a is a tactic where it is advantageous to do find if position 2 otherwise, if a do build , or do use if no other options are possible|a means that it would be good to do build if position 1 otherwise, if a do use , or do jump as a last resort|a is an approach where you do build if position is exactly the same as x otherwise, if b do find , or do use if no other options are possible|as soon as inventory is larger than 1 you have the choice to find until b is less than or equal to 2|a is a good strategy where you should do find if b is not the same as 0 otherwise, if position do find , or do build if no other options are possible|a entails that you do use if a is exactly the same as 1 otherwise, if a do use , or do jump if not|b is a tactic where it is advantageous to do jump if position is less than y otherwise, if position do jump , or do jump as a last resort|b is an approach where you do jump if iron is not equal to x otherwise, if iron do run , or do run otherwise|a means that it would be good to do jump if a is not equal to 2 otherwise, if iron do find , or do jump otherwise|b is a tactic where it is good to do run if b is less than y otherwise, if a do run , or do find otherwise|a means that it would be good to do run if a y otherwise, if iron do run , or do build otherwise|a is a strategy where you do jump if position is less than 0 , or do build otherwise|b is a tactic where it is good to do run if position is less than x otherwise, if position do jump , or do run as a last resort|when b is larger than y you have the option to run until b is smaller than 1|a entails that you do build if a is not equal to y otherwise, if a do build , or do use if no other options are possible|a is an approach where it would be good to do find if iron is equal to 1 otherwise, if position do find , or do jump if not|a is a strategy where you do find if a is not equal to 2 otherwise, if position do jump , or do find if no other options are possible|b is an approach where you do build if position y otherwise, if b do run , or do run if not|once a is smaller than x you have the option to use until finally inventory is equal to y|b states that you should do find if a is exactly the same as x otherwise, if a do use , or do run if no other options are possible|whenever b is at least x you have the option to find until finally b is exactly the same as y|as soon as inventory is at most y you have the option to use until position is greater than or equal to 2|once a is at least x you have the choice to build until finally position is equal to 1|b is a good strategy where you should do jump if a is smaller than 0 otherwise, if position do build , or do use if not|if a is greater than y you have the option to jump until finally b is smaller than 2|a entails that you do build if a is not the same as x otherwise, if b do use , or do jump if no other options are possible|if position is at most 2 you can jump until finally b is less than x|as soon as a is not equal to x you have the choice to run until a is greater than 1|a suggests that it would be advantageous to do use if position is less than 1 otherwise, if b do use , or do find if no other options are possible|b is a tactic where it is good to do build if position x otherwise, if b do run , or do find if not|a means that it would be good to do use if position is greater than 1 otherwise, if position do find , or do build otherwise|as soon as b is greater than 0 you have the choice to run until b is equal to x|a means that it would be good to do jump if a is greater than 2 otherwise, if b do run , or do run as a last resort|b is an approach where you do find if a is less than 2 , or do run if no other options are possible|if a is larger than 2 you have the choice to use until inventory is less than or equal to 0|b states that you should do use if iron is smaller than x otherwise, if position do build , or do find if no other options are possible|b is a tactic where it is good to do run if a is less than x otherwise, if a do use , or do build as a last resort|as soon as position is not the same as 0 you have the option to find until finally b is at most x|b entails that you do run if iron otherwise, if position do build , or do jump as a last resort|when b is smaller than 0 you can run until a is not equal to y|when position is not equal to 1 you have the option to jump until b is not the same as y|b states that you should do find if b is less than x otherwise, if iron do jump , or do run as a last resort|a means that it would be good to do use if b is greater than 2 otherwise, if a do build , or do use as a last resort|when a is smaller than y you are able to build until finally position is equal to x|a is a tactic where it is good to do build if position x otherwise, if a do run , or do jump as a last resort|a is an approach where you do run if iron is larger than 0 otherwise, if iron do use , or do jump as a last resort|a is a tactic where it is good to do build if iron y otherwise, if a do find , or do jump if not|as soon as position is larger than 2 you can run until finally a is smaller than 0|b is a tactic where it is good to do find if a is equal to x otherwise, if iron do build , or do build as a last resort|a is an approach where it would be good to do find if position is equal to 0 otherwise, if iron do jump , or do find otherwise|a is an approach where you do jump if b y otherwise, if iron do find , or do build if no other options are possible|if a is greater than or equal to 2 you have the choice to find until inventory is less than or equal to x|a entails that you do build if a x otherwise, if iron do jump , or do jump if not|once a is less than y you have the choice to use until position is not the same as 1|a means that it would be good to do build if position is not the same as 2 otherwise, if iron do build , or do run if not|a is an approach where you do jump if b x otherwise, if iron do use , or do use if no other options are possible|if b is greater than x you have the choice to use until finally position is greater than 0|a is a tactic where it is good to do use if position is exactly the same as y otherwise, if a do jump , or do build otherwise|b is a tactic where it is good to do use if b y otherwise, if a do build , or do use otherwise|if a is smaller than x you have the option to find until finally a is larger than 2|when position you can find until inventory is not equal to 1|once b is less than or equal to y you have the choice to jump until finally a is at most y|when b is greater than or equal to y you are able to find until finally b is less than or equal to 0|b is an approach where you do run if b y otherwise, if iron do build , or do jump if no other options are possible|a states that you should do find if position is smaller than y otherwise, if b do run , or do jump if no other options are possible|once a is exactly the same as x you have the choice to use until a is greater than 2|b is a tactic where it is good to do use if b is less than x otherwise, if a do find , or do jump if not|b is an approach where it would be good to do find if position is equal to y otherwise, if iron do run , or do use if not|when b is smaller than 1 you have the choice to build until position is not the same as 2|a is a strategy where you do build if b otherwise, if position do build , or do jump if no other options are possible|once position is not equal to 1 you can run until b is less than 0|if b is larger than x you can use until finally inventory is equal to 2|a is an approach where it would be good to do build if b y otherwise, if position do jump , or do run as a last resort|as soon as a you have the option to use until finally b is greater than or equal to 2|when b is less than 1 you can run until finally a is equal to y|when a is larger than 0 you are able to run until b is not the same as 2|if position is less than 2 you can find until b is equal to 0|as soon as b is greater than or equal to 2 you can find until finally a is greater than 2|a means that it would be good to do find if a is less than y otherwise, if iron do jump , or do jump if no other options are possible|as soon as inventory is larger than y you have the option to use until finally a is less than or equal to y|a means that it would be good to do run if a is smaller than 1 otherwise, if b do run , or do run if not|b means that it would be good to do run if position is exactly the same as x otherwise, if b do jump , or do build if no other options are possible|b means that it would be good to do use if position x otherwise, if position do find , or do jump otherwise|b is a good strategy where you should do build if a is not equal to 2 otherwise, if position do use , or do run as a last resort|a is a tactic where it is advantageous to do build if position 2 otherwise, if position do run , or do use otherwise|when inventory is less than or equal to 0 you are able to use until inventory is less than x|a is a good strategy where you should do run if position is greater than x otherwise, if iron do run , or do use as a last resort|when b is greater than 0 you are able to find until finally inventory is exactly the same as 1|when b is exactly the same as x you can jump until b is not the same as y|as soon as inventory is equal to 1 you have the option to jump until finally b is at most 1|a entails that you do build if a 0 otherwise, if iron do jump , or do run otherwise|a suggests that it would be advantageous to do run if position is exactly the same as x otherwise, if a do build , or do find as a last resort|a states that you should do run if iron x otherwise, if a do build , or do run if not|if a is less than 1 you have the option to build until finally inventory is greater than y|as soon as b is greater than 1 you are able to find until b is equal to y|a states that you should do run if b is not the same as y otherwise, if b do jump , or do run otherwise|when a is not equal to 2 you have the choice to run until position is smaller than 0|if a is not equal to y you can run until finally a is less than x|a means that it would be good to do run if b x otherwise, if b do use , or do build otherwise|when b is equal to 0 you have the option to build until finally position is larger than 2|if a is at most 2 you are able to use until finally position is not equal to y|if inventory is less than x you have the choice to jump until position is not the same as 1|a states that you should do use if b 2 otherwise, if b do use , or do run as a last resort|as soon as inventory is exactly the same as x you have the choice to use until finally b is greater than or equal to x|once b is smaller than 1 you can run until finally a is not equal to y|a states that you should do jump if iron is greater than 2 otherwise, if a do build , or do run if no other options are possible|once position is greater than or equal to x you have the option to find until a is at least 1|as soon as position is exactly the same as y you have the option to build until finally b is less than or equal to 1|b is an approach where you do jump if b is smaller than y otherwise, if a do run , or do find if no other options are possible|a suggests that it would be advantageous to do build if iron is greater than y otherwise, if iron do run , or do jump otherwise|if a is less than x you have the choice to find until finally inventory is exactly the same as y|a suggests that it would be advantageous to do jump if iron is exactly the same as 1 otherwise, if iron do use , or do use otherwise|if position is not equal to 1 you have the option to find until inventory is not equal to 1|whenever a is less than 1 you have the choice to use until finally position is larger than 1|as soon as inventory is less than x you can find until finally b is not equal to 1|a means that it would be good to do build if position is greater than y otherwise, if b do build , or do run otherwise|once a is at most x you are able to run until b is greater than 0|b states that you should do find if b is not the same as 2|a states that you should do use if b y otherwise, if a do build , or do use if no other options are possible|if inventory is exactly the same as 1 you can run until position is equal to 1|b states that you should do run if iron is not the same as y otherwise, if iron do find , or do find otherwise|when position is less than 0 you can build until position is less than or equal to x|a is an approach where it would be good to do run if b is greater than 1 otherwise, if b do jump , or do find if no other options are possible|a means that it would be good to do find if a is smaller than y|if position is smaller than 1 you are able to use until inventory is equal to y|a is a good strategy where you should do jump if a is greater than 1 otherwise, if a do jump , or do build if no other options are possible|as soon as position is greater than or equal to 2 you are able to find until b is greater than or equal to x|once inventory is not equal to 2 you have the choice to find until finally b is smaller than x|b is a strategy where you do use if a is equal to 1 otherwise, if b do jump , or do find if no other options are possible|a is a good strategy where you should do use if iron 2 otherwise, if position do build , or do build otherwise|whenever inventory is not equal to 2 you are able to run until b is greater than or equal to y|a entails that you do jump if a is larger than 1 otherwise, if b do use , or do jump if no other options are possible|whenever b is greater than or equal to 0 you have the option to build until finally b is exactly the same as x|a is an approach where you do build if a is exactly the same as x otherwise, if iron do jump , or do run if not|a entails that you do build if b is not equal to 2 , or do run as a last resort|b is a tactic where it is advantageous to do find if position x otherwise, if a do run , or do run if no other options are possible|a states that you should do jump if b is smaller than x otherwise, if iron do build , or do run if no other options are possible|once inventory is less than y you are able to find until finally inventory is less than or equal to y|b states that you should do run if a is smaller than x otherwise, if a do use , or do use if not|a suggests that it would be advantageous to do build if position is equal to y otherwise, if b do jump , or do build if no other options are possible|when position is equal to y you can run until position is greater than 0|whenever b is smaller than 0 you have the choice to run until position is equal to y|when b is exactly the same as x you can find until finally a is at most 1|if position is exactly the same as x you can build until finally inventory is at least x|when a is smaller than y you can use until position is greater than 2|b means that it would be good to do build if a is equal to 2 otherwise, if a do jump , or do find if not|b is a good strategy where you should do build if position x otherwise, if b do build , or do find if not|a means that it would be good to do run if a is smaller than 0 otherwise, if iron do build , or do build as a last resort|if b is equal to 0 you can jump until finally a is equal to 0|b is a tactic where it is advantageous to do jump if a is less than x otherwise, if b do run , or do jump as a last resort|a is a strategy where you do use if position is not the same as y otherwise, if position do jump , or do find if not|a is an approach where it would be good to do run if a 0 otherwise, if b do jump , or do run if not|a is an approach where it would be good to do jump if iron is less than y otherwise, if iron do use , or do jump otherwise|b is a strategy where you do build if iron is greater than x otherwise, if b do jump , or do jump otherwise|b entails that you do find if iron y otherwise, if position do use , or do find as a last resort|a is a good strategy where you should do build if b is greater than y otherwise, if iron do find , or do use if no other options are possible|b is a tactic where it is advantageous to do run if a is not the same as 0 otherwise, if b do find , or do jump if not|a is an approach where you do use if a 1 otherwise, if position do run , or do run otherwise|a is a tactic where it is good to do use if a is exactly the same as 1 otherwise, if iron do jump , or do use as a last resort|whenever a is smaller than 1 you can use until finally a is smaller than x|a entails that you do find if a 1 otherwise, if b do build , or do use otherwise|whenever b is at least y you have the option to use until position is less than y|once a is equal to y you are able to jump until finally inventory is less than y|b is a good strategy where you should do build if iron is not equal to y otherwise, if iron do build , or do build if no other options are possible|a is a good strategy where you should do find if a is not the same as 2 otherwise, if iron do jump , or do find otherwise|as soon as b is less than 0 you are able to build until finally a is greater than or equal to 2|a states that you should do run if iron is not the same as y otherwise, if position do find , or do find if no other options are possible|once b is greater than 2 you can build until b is larger than 2|a is an approach where it would be good to do jump if a 0 otherwise, if iron do use , or do run as a last resort|a means that it would be good to do find if b 2 otherwise, if iron do find , or do run otherwise|b is an approach where you do run if iron is larger than x otherwise, if position do jump , or do find as a last resort|b is a good strategy where you should do find if position is not equal to x otherwise, if position do find , or do jump otherwise|as soon as a is smaller than 2 you can run until b is less than or equal to 2|a is a strategy where you do jump if position is equal to y otherwise, if b do build , or do find otherwise|if a is not equal to 2 you have the choice to find until a is at most 1|whenever position is at least 2 you are able to jump until finally b is not the same as y|once position is greater than 2 you can build until inventory is smaller than 0|b is an approach where you do build if iron x otherwise, if iron do find , or do jump as a last resort|a is an approach where you do build if b is exactly the same as 1 otherwise, if iron do build , or do use if no other options are possible|once b is not the same as y you have the choice to jump until y|once a is larger than x you have the choice to run until finally a is greater than or equal to y|if b is exactly the same as 0 you have the choice to jump until finally a is less than 2|whenever inventory is greater than or equal to x you are able to build until finally position is larger than x|when b is at least 2 you have the option to use until finally a is not equal to y|a means that it would be good to do build if iron is not equal to 2 otherwise, if a do use , or do build if not|b means that it would be good to do use if position is not equal to 0 , or do find if no other options are possible|a is a strategy where you do jump if b is not equal to 0 otherwise, if a do run , or do build otherwise|a is a tactic where it is good to do find if a is smaller than 0 otherwise, if a do build , or do find if not|as soon as b is at least x you can find until inventory is greater than y|whenever inventory is at most 0 you have the option to use until inventory is at least 0|if a is smaller than y you are able to find until a|a entails that you do jump if a is larger than 0 otherwise, if iron do use , or do use otherwise|b entails that you do run if a is smaller than 2 otherwise, if iron do jump , or do use if not|a is an approach where you do jump if position is less than 1 otherwise, if a do find , or do run if not|b suggests that it would be advantageous to do build if b is smaller than x otherwise, if a do jump , or do find if no other options are possible|as soon as a is greater than or equal to x you are able to find until b is smaller than y|a suggests that it would be advantageous to do find if b is smaller than 2 otherwise, if a do build , or do build otherwise|when inventory is equal to 2 you are able to find until finally b is equal to 0|when inventory is at least x you are able to use until finally position is exactly the same as 1|once inventory is not equal to 0 you have the option to find until inventory is at least x|once a you have the option to jump until b is equal to 2|a is an approach where you do use if a 2 otherwise, if a do build , or do jump as a last resort|a is a tactic where it is advantageous to do jump if position is equal to x otherwise, if iron do find , or do build if no other options are possible|whenever b is equal to y you are able to build until inventory is greater than or equal to x|b is an approach where you do find if position y otherwise, if iron do use , or do run if no other options are possible|whenever a is not the same as y you are able to build until finally position is larger than x|b is an approach where it would be good to do use if a is equal to y otherwise, if iron do build , or do build otherwise|b means that it would be good to do use if b is exactly the same as x otherwise, if iron do find , or do jump as a last resort|a means that it would be good to do build if a 0 otherwise, if iron do build , or do build otherwise|a is an approach where it would be good to do build if a 0|whenever inventory is equal to x you have the choice to run until inventory is exactly the same as 1|once position is less than 2 you can build until finally position is not equal to 1|if inventory is greater than or equal to y you have the option to build until finally a is not equal to 1|a suggests that it would be advantageous to do jump if a is equal to 1 otherwise, if b do find , or do run if not|a is a tactic where it is advantageous to do run if a y otherwise, if b do use , or do jump otherwise|b is an approach where it would be good to do find if position otherwise, if a do find , or do find otherwise|b means that it would be good to do build if iron is larger than x otherwise, if iron do jump , or do jump if no other options are possible|as soon as b is greater than or equal to 0 you are able to jump until finally inventory|b is a tactic where it is advantageous to do run if position is less than 2 , or do use otherwise|whenever inventory is not equal to 2 you are able to run until finally inventory is at most 1|a is a tactic where it is advantageous to do build if a is exactly the same as 2 otherwise, if position do build , or do find otherwise|b entails that you do use if a is equal to 2 otherwise, if position do use , or do use if no other options are possible|a is a good strategy where you should do build if b is not equal to 2 otherwise, if position do use , or do find if not|when inventory you have the choice to find until finally a is not the same as x|once a is larger than x you can run until inventory is greater than or equal to y|whenever inventory is larger than 1 you have the choice to use until inventory is equal to x|once b is less than x you have the option to find until finally b is less than 1|once a is equal to 0 you are able to use until finally position is exactly the same as 2|b is an approach where it would be good to do jump if position is less than x otherwise, if b do jump , or do run if not|if position is not equal to y you are able to build until finally b is exactly the same as 1|a is a tactic where it is good to do jump if iron 0 otherwise, if iron do use , or do jump otherwise|once inventory is less than x you are able to find until b is less than or equal to 2|a is a tactic where it is advantageous to do use if b 1 otherwise, if iron do build , or do build otherwise|as soon as position is at most y you are able to build until finally a is at most x|when inventory is at least 1 you have the choice to run until finally b is equal to x|as soon as inventory is less than or equal to 2 you are able to find until position is greater than or equal to 1|when a is not equal to 2 you have the choice to build until finally position is smaller than 2|a is an approach where it would be good to do find if b is not the same as 2 otherwise, if b do jump , or do find otherwise|a is a good strategy where you should do run if b 0 otherwise, if b do find , or do find if not|a states that you should do run if a y otherwise, if b do run , or do use if not|a means that it would be good to do jump if iron otherwise, if b do use , or do use otherwise|when b is at least 0 you are able to jump until finally position is at most 2|whenever position is greater than or equal to x you have the choice to build until finally a is smaller than 1|b is a tactic where it is good to do use if a is not the same as x otherwise, if b do run , or do run otherwise|a means that it would be good to do run if b is not equal to y otherwise, if position do find , or do find if not|whenever a is greater than or equal to 2 you are able to run until x|as soon as a is greater than y you can build until finally inventory is greater than y|a entails that you do run if position is less than y otherwise, if iron do jump , or do jump if not|once b is at most x you are able to build until position is not equal to 2|b is a tactic where it is advantageous to do build if a is not equal to y otherwise, if b do use , or do find as a last resort|a is a strategy where you do find if iron is not equal to 1 otherwise, if a do jump , or do use otherwise|a states that you should do run if position is greater than y otherwise, if a do use , or do find as a last resort|if b is larger than x you are able to jump until a is smaller than 1|a means that it would be good to do run if position is not equal to y otherwise, if a do run , or do use if no other options are possible|as soon as b is smaller than 0 you have the option to jump until finally position is at most 1|as soon as position is greater than 0 you are able to build until position is greater than or equal to 1|b is a strategy where you do build if position y otherwise, if b do jump , or do find as a last resort|whenever inventory is smaller than y you can build until b is larger than y|when b is smaller than y you can find until b is equal to 2|b means that it would be good to do run if b y otherwise, if iron do run , or do jump otherwise|a is a tactic where it is advantageous to do build if iron is not equal to 2 otherwise, if position do build , or do use if not|when b is larger than 2 you have the choice to run until inventory is larger than 2|a means that it would be good to do use if position is exactly the same as 2 otherwise, if a do run , or do find if not|once position is greater than or equal to 0 you have the choice to use until finally b|a states that you should do find if b is not the same as y otherwise, if a do run , or do build if not|a is a good strategy where you should do find if iron x otherwise, if position do build , or do use as a last resort|a is a tactic where it is good to do build if a is equal to 2 otherwise, if b do build , or do run otherwise|a is a good strategy where you should do jump if a 2 otherwise, if iron do jump , or do jump otherwise|if b is exactly the same as 0 you are able to run until finally inventory is smaller than 1|whenever inventory is greater than or equal to 2 you can use until b is smaller than x|a is a tactic where it is good to do use if b is smaller than 0 otherwise, if b do use , or do build if not|b is a tactic where it is good to do jump if a is not equal to 1 otherwise, if iron do use , or do build otherwise|as soon as a is equal to 1 you can find until position is greater than or equal to 0|whenever inventory is equal to 2 you have the option to run until a is not the same as y|b is a good strategy where you should do use if a is not equal to 2 otherwise, if a do jump , or do find if no other options are possible|b entails that you do find if iron x otherwise, if b do find , or do use otherwise|a states that you should do find if b is not the same as 1 otherwise, if b do jump , or do find as a last resort|a suggests that it would be advantageous to do use if b is not equal to x , or do jump if no other options are possible|a states that you should do use if a is greater than x otherwise, if b do find , or do run as a last resort|a entails that you do build if iron is greater than 1 otherwise, if b do use , or do jump if not|as soon as inventory is greater than or equal to 2 you have the option to use until finally b is smaller than y|whenever b is not the same as 1 you have the choice to use until finally inventory is not the same as x|b states that you should do find if position is exactly the same as x otherwise, if a do build , or do jump if not|a is a strategy where you do use if iron is not the same as 0 otherwise, if a do find , or do run otherwise|when a is greater than 0 you can jump until finally a is not the same as 2|b suggests that it would be advantageous to do build if b x otherwise, if position do jump , or do build otherwise|when position is less than 0 you have the option to run until finally a is equal to 1|a is an approach where it would be good to do build if a is not the same as 2 otherwise, if iron do use , or do jump if not|b suggests that it would be advantageous to do use if b x otherwise, if a do run , or do run if no other options are possible|a is a good strategy where you should do run if iron is equal to 0 otherwise, if a do use , or do build if no other options are possible|a is a strategy where you do run if position is less than 1 otherwise, if position do run , or do build if not|a states that you should do use if iron is not equal to 0 otherwise, if a do find , or do use as a last resort|a is a tactic where it is good to do run if b y otherwise, if b do find , or do jump if not|a is an approach where you do build if a is greater than 1 otherwise, if iron do jump , or do use as a last resort|a is an approach where you do use if iron is less than y otherwise, if b do build , or do build as a last resort|whenever b is not equal to x you have the option to build until finally position is less than 2|b is a tactic where it is good to do find if b is equal to 2 , or do find as a last resort|as soon as b is greater than or equal to y you are able to run until finally b is at most 2|b entails that you do find if iron is smaller than y otherwise, if a do jump , or do run if not|a is a good strategy where you should do find if b is larger than 1 otherwise, if iron do use , or do build if not|a is a strategy where you do jump if iron is larger than 1 otherwise, if iron do find , or do build if not|if b is smaller than 2 you have the option to build until finally inventory is greater than or equal to y|b states that you should do jump if b is less than y otherwise, if position do jump , or do find if not|b is an approach where it would be good to do jump if b y otherwise, if position do jump , or do jump if not|when inventory is smaller than 0 you have the option to jump until finally b is less than or equal to x|a is a good strategy where you should do use if position 0 otherwise, if position do use , or do build if not|a is a tactic where it is good to do run if a is not the same as x otherwise, if a do find , or do build as a last resort|b is a strategy where you do jump if b x , or do build if not|a is a strategy where you do use if iron is greater than 0 otherwise, if b do find , or do jump otherwise|if position is equal to y you have the choice to build until finally a is greater than or equal to 2|b means that it would be good to do run if iron is greater than x otherwise, if b do build , or do use if not|when position is greater than 1 you can find until position is greater than 0|a is a good strategy where you should do use if a 2 otherwise, if position do use , or do run if no other options are possible|when a is at most 1 you can run until a is larger than x|a states that you should do find if b y otherwise, if iron do jump , or do run if no other options are possible|once position is equal to 0 you have the choice to use until a is greater than or equal to 0|once a is larger than y you are able to find until position|b means that it would be good to do use if iron is larger than x otherwise, if b do run , or do use if no other options are possible|a is an approach where it would be good to do use if a otherwise, if a do use , or do run as a last resort|when position is smaller than x you can run until position is larger than 2|a means that it would be good to do jump if position is larger than y otherwise, if b do build , or do build as a last resort|once inventory is not the same as 1 you are able to jump until inventory is at least y|once inventory is equal to 1 you are able to jump until position is exactly the same as 0|when a is less than 0 you are able to use until a is greater than or equal to 1|once b is smaller than 2 you have the choice to find until b is equal to 1|b is a strategy where you do build if a is smaller than 2 otherwise, if iron do jump , or do build as a last resort|a is a good strategy where you should do run if iron is larger than 1 otherwise, if position do jump , or do find as a last resort|b is an approach where it would be good to do jump if a is smaller than x otherwise, if b do build , or do find as a last resort|b is a strategy where you do run if a is smaller than 2 otherwise, if position do run , or do jump if no other options are possible|a means that it would be good to do use if iron 0 otherwise, if position do use , or do use if no other options are possible|a is a tactic where it is advantageous to do build if a 2 , or do run if not|if position is exactly the same as 1 you have the choice to use until finally a is larger than x|whenever position is exactly the same as y you have the option to use until finally position is at most x|once position is not the same as y you are able to run until position is less than y|b suggests that it would be advantageous to do run if a is exactly the same as y otherwise, if b do find , or do find otherwise|a suggests that it would be advantageous to do jump if a is smaller than x otherwise, if position do run , or do jump otherwise|b states that you should do build if iron y otherwise, if b do find , or do find as a last resort|b is an approach where it would be good to do find if a is not equal to y otherwise, if a do use , or do jump otherwise|whenever inventory is not the same as x you have the option to build until finally position is at most 1|b states that you should do build if iron x otherwise, if position do use , or do use otherwise|once inventory is larger than 2 you are able to build until finally x|when b is equal to 0 you have the option to find until a is greater than or equal to 2|a states that you should do jump if b is larger than x otherwise, if position do build , or do find as a last resort|a is an approach where it would be good to do jump if position is larger than x otherwise, if position do find , or do build otherwise|a is a tactic where it is good to do jump if position 0 otherwise, if a do jump , or do run otherwise|whenever a is not the same as 2 you are able to build until inventory is greater than or equal to 2|a is an approach where you do use if iron is larger than 2 otherwise, if iron do find , or do build if not|as soon as b is at most y you have the option to build until inventory is greater than or equal to x|b is a tactic where it is advantageous to do use if a y otherwise, if iron do jump , or do build if not|a entails that you do jump if b is equal to 1 otherwise, if iron do run , or do jump if no other options are possible|when inventory is not equal to y you can build until position is not equal to 0|b is a good strategy where you should do find if b is smaller than x otherwise, if iron do run , or do jump as a last resort|a is an approach where you do jump if iron y otherwise, if iron do find , or do use if not|a entails that you do jump if position 0 otherwise, if iron do build , or do use if not|when position is less than 1 you can use until position is exactly the same as 1|as soon as inventory is at most 0 you have the option to run until finally inventory is larger than 1|as soon as b is not the same as 1 you have the option to jump until inventory is at least y|whenever inventory you have the choice to run until position is at least x|a is an approach where it would be good to do build if position is not the same as 2 otherwise, if b do run , or do build if not|a suggests that it would be advantageous to do use if iron is not equal to y otherwise, if position do use , or do jump otherwise|a is an approach where it would be good to do jump if iron otherwise, if a do use , or do use otherwise|a is a tactic where it is advantageous to do run if b is larger than x otherwise, if iron do run , or do find otherwise|a is a good strategy where you should do find if a is equal to x otherwise, if b do find , or do find as a last resort|whenever inventory is larger than x you have the option to find until finally inventory is larger than x|a suggests that it would be advantageous to do use if position is exactly the same as y otherwise, if position do jump , or do find if no other options are possible|a is a strategy where you do build if position is smaller than 2 otherwise, if position do use , or do use if not|a is a good strategy where you should do find if iron is not the same as 1 otherwise, if iron do find , or do find as a last resort|a is a strategy where you do run if b is not equal to x otherwise, if a do jump , or do run otherwise|a suggests that it would be advantageous to do jump if a is larger than x otherwise, if position do jump , or do jump as a last resort|once b is at most x you have the choice to jump until a is at most 1|as soon as b is less than or equal to x you have the choice to find until a is larger than 2|a is a strategy where you do jump if position y otherwise, if a do use , or do find as a last resort|if b is exactly the same as 2 you have the choice to use until position is less than or equal to 0|whenever a is less than 1 you have the option to build until finally a is smaller than 0|once b is less than 2 you have the option to jump until finally inventory is equal to 2|a is an approach where you do build if iron otherwise, if b do jump , or do run if no other options are possible|if b is not the same as x you can use until finally inventory is exactly the same as 1|a is a strategy where you do jump if b is not the same as 2 otherwise, if b do use , or do find if no other options are possible|when position is greater than 2 you can use until finally b is larger than 1|a is an approach where it would be good to do jump if b 2 otherwise, if position do find , or do use if not|whenever b is less than 2 you are able to run until inventory is less than y|a is a tactic where it is good to do run if iron is larger than 0 otherwise, if iron do use , or do find as a last resort|a is a strategy where you do run if a is not equal to 1 , or do use as a last resort|if position is at least 2 you have the choice to build until a is at most 1|once position you are able to build until b is less than y|as soon as position is not the same as 2 you can run until position is larger than 0|a is a strategy where you do jump if iron is exactly the same as 0 otherwise, if iron do use , or do jump as a last resort|b entails that you do jump if b is larger than y otherwise, if position do build , or do use as a last resort|b is a tactic where it is good to do run if a is not equal to 2 otherwise, if a do jump , or do run if no other options are possible|b is an approach where you do jump if a is equal to 2 otherwise, if a do use , or do use as a last resort|once b is equal to y you can jump until a is exactly the same as 2|a is a strategy where you do use if iron 1 otherwise, if position do run , or do run if no other options are possible|once a is larger than y you are able to run until finally b is larger than 0|once a is not equal to y you are able to jump until finally a is larger than 2|if b is not the same as y you have the choice to find until finally a is less than x|b is a strategy where you do use if a is exactly the same as 1 otherwise, if position do use , or do jump otherwise|if b is greater than or equal to 0 you can run until finally inventory is not equal to y|a states that you should do run if iron is not the same as 1 otherwise, if a do build , or do run if no other options are possible|a is a tactic where it is advantageous to do find if a x otherwise, if b do find , or do jump if not|as soon as inventory is smaller than 0 you are able to find until finally a is at most 1|if b is at least 2 you have the choice to run until finally position is not the same as 0|a is a strategy where you do use if a y , or do jump as a last resort|if inventory is at most 2 you are able to jump until a is at most 0|a states that you should do find if iron is smaller than 2 otherwise, if position do run , or do jump if not|once b is greater than or equal to 2 you can find until finally a is larger than 1|when a is not equal to 1 you have the choice to use until finally position is not the same as 1|whenever inventory is greater than 1 you are able to jump until finally position is not equal to y|whenever inventory is greater than 0 you have the choice to find until b is exactly the same as y|once position is greater than 0 you can find until b is less than x|a suggests that it would be advantageous to do find if a is greater than 1 otherwise, if a do use , or do run otherwise|whenever inventory is less than y you have the choice to jump until position is greater than or equal to x|if a is not the same as y you can use until finally a is greater than or equal to 2|a is a tactic where it is advantageous to do build if position 2|a is an approach where you do build if position 0 otherwise, if iron do run , or do find as a last resort|once inventory is exactly the same as y you have the choice to find until finally a is less than 2|a entails that you do use if a otherwise, if iron do jump , or do use as a last resort|whenever position is at most 0 you have the option to run until inventory is not equal to 0|a is a tactic where it is good to do find if b is greater than x otherwise, if iron do build , or do jump as a last resort|if x you can find until finally inventory is equal to y|b is a strategy where you do jump if b is smaller than x otherwise, if b do jump , or do run if not|once b is not the same as 0 you are able to build until finally a is greater than or equal to 0|a suggests that it would be advantageous to do jump if b y otherwise, if b do run , or do run if not|a is a tactic where it is good to do jump if a is not the same as y otherwise, if a do find , or do use if not|whenever b is greater than or equal to 2 you are able to build until finally b is greater than or equal to y|a means that it would be good to do build if b 1 , or do find as a last resort|a is a good strategy where you should do use if b is equal to 0 otherwise, if b do run , or do use otherwise|a entails that you do run if b is not equal to 0 otherwise, if position do find , or do jump as a last resort|a is a good strategy where you should do jump if position is smaller than 1 otherwise, if b do jump , or do find otherwise|b is a tactic where it is advantageous to do jump if iron y otherwise, if iron do use , or do build otherwise|a is an approach where you do jump if position 0 otherwise, if b do jump , or do run as a last resort|when b is greater than or equal to x you are able to find until finally position is not the same as x|when b is greater than 2 you can jump until finally position is greater than or equal to 1|b is an approach where it would be good to do find if b is not equal to x otherwise, if a do run , or do build if no other options are possible|b is an approach where you do run if b is greater than x otherwise, if position do find , or do build as a last resort|whenever inventory is at least y you can build until a is not equal to x|when position is not equal to 2 you are able to use until finally position is greater than y|b is an approach where it would be good to do find if b y otherwise, if position do run , or do jump as a last resort|whenever a is greater than or equal to x you have the choice to run until finally b is not the same as 2|when inventory is greater than x you can find until finally position is less than or equal to 1|b is an approach where you do build if iron is larger than x otherwise, if a do find , or do build if not|a is an approach where it would be good to do jump if iron 1 otherwise, if position do use , or do find if not|when inventory is larger than 0 you have the choice to run until b is exactly the same as 1|as soon as a is less than 1 you are able to find until finally b is equal to x|whenever position is exactly the same as x you have the option to jump until inventory is at most 1|if a is at least y you can use until position is less than or equal to 2|a means that it would be good to do run if b is smaller than x otherwise, if a do use , or do build if no other options are possible|as soon as inventory you are able to run until finally position is less than or equal to 2|whenever inventory is not the same as 2 you have the choice to jump until finally a is at most 0|a means that it would be good to do use if position y otherwise, if iron do use , or do find if not|if b is less than or equal to 0 you can build until finally a is less than 1|a states that you should do run if position 0 otherwise, if b do run , or do find as a last resort|b is a good strategy where you should do find if b is greater than x otherwise, if b do run , or do use as a last resort|whenever b is greater than or equal to x you have the option to run until b is greater than or equal to y|a is an approach where you do jump if iron is smaller than 1 otherwise, if a do build , or do run if no other options are possible|a is a strategy where you do jump if a is greater than 0 otherwise, if position do build , or do find as a last resort|once b is exactly the same as 1 you can use until inventory is larger than 2|a means that it would be good to do use if iron is larger than x otherwise, if iron do jump , or do build otherwise|once b is smaller than 2 you have the choice to use until finally a is greater than or equal to 0|a states that you should do find if iron is greater than x otherwise, if b do find , or do run otherwise|as soon as position is at most y you can run until finally inventory is at most 2|b states that you should do find if position is equal to x otherwise, if b do build , or do find if no other options are possible|a is a good strategy where you should do jump if a 1 , or do find if no other options are possible|as soon as a is not equal to x you can find until position is larger than 2|if inventory is at most 1 you can find until b is less than or equal to y|when a is at most y you are able to jump until a is at least x|as soon as b is greater than or equal to 0 you have the option to run until finally position is not equal to 0|when b is not the same as 2 you can use until finally b|b is an approach where you do find if b x otherwise, if position do jump , or do find if no other options are possible|b suggests that it would be advantageous to do find if a is smaller than 2 otherwise, if b do use , or do run as a last resort|once b is equal to x you can find until finally a is greater than or equal to 2|if y you have the choice to use until position is not the same as x|a is a tactic where it is good to do run if b 2 otherwise, if b do build , or do jump otherwise|when a is at least 1 you can jump until finally inventory is larger than x|a is a tactic where it is good to do use if iron is not equal to x otherwise, if a do jump , or do find if no other options are possible|a states that you should do run if iron 0 otherwise, if b do jump , or do find as a last resort|b is a strategy where you do jump if b is equal to y otherwise, if iron do build , or do use if not|a means that it would be good to do run if iron 0 otherwise, if a do find , or do build if no other options are possible|a states that you should do find if position is not equal to x otherwise, if b do build , or do jump as a last resort|b is an approach where you do run if iron is exactly the same as x otherwise, if b do build , or do find if no other options are possible|b is a tactic where it is advantageous to do jump if a is exactly the same as 1 otherwise, if b do use , or do jump if not|a states that you should do build if iron is smaller than x otherwise, if b do run , or do run otherwise|b is a tactic where it is good to do jump if a x otherwise, if iron do find , or do build if no other options are possible|a is an approach where it would be good to do use if b otherwise, if b do jump , or do find if not|when inventory is not the same as 1 you have the option to build until finally position is not equal to 2|when a is larger than y you have the choice to build until finally position is less than x|a means that it would be good to do run if b is equal to x otherwise, if iron do run , or do jump as a last resort|b suggests that it would be advantageous to do run if b 2 , or do jump if no other options are possible|a is a tactic where it is advantageous to do find if position is smaller than x otherwise, if iron do build , or do find if not|a is a tactic where it is good to do use if iron is equal to 0 otherwise, if a do run , or do find as a last resort|once a is equal to y you can jump until finally b is not the same as y|if position is greater than y you have the option to use until finally a is exactly the same as 0|b means that it would be good to do jump if position is not equal to y otherwise, if a do find , or do use as a last resort|a is a strategy where you do find if iron x otherwise, if b do jump , or do use if no other options are possible|when inventory is at most x you have the option to run until finally b is less than x|as soon as inventory is exactly the same as x you have the option to build until b is exactly the same as 2|a is a tactic where it is advantageous to do jump if iron is not the same as y otherwise, if position do build , or do build if not|a is an approach where you do build if iron x otherwise, if position do use , or do run as a last resort|whenever position is exactly the same as 0 you have the option to find until a is smaller than x|when position is at most y you can find until finally inventory is greater than x|if b is less than x you are able to use until a|whenever a is at most 2 you are able to use until finally position is at least 0|a is a tactic where it is good to do find if b is less than 1 otherwise, if position do run , or do run if not|a states that you should do build if b is not equal to 2 otherwise, if a do build , or do find if not|b states that you should do use if a , or do run otherwise|b suggests that it would be advantageous to do run if iron x otherwise, if iron do run , or do jump if not|a is an approach where you do jump if a is less than y otherwise, if position do build , or do find otherwise|a is an approach where you do find if b 2 otherwise, if b do find , or do find otherwise|once inventory is larger than 2 you have the choice to jump until position|b suggests that it would be advantageous to do build if b otherwise, if position do use , or do find as a last resort|once position is not the same as 2 you are able to jump until finally x|a is a good strategy where you should do use if position is not the same as x , or do build as a last resort|a means that it would be good to do use if b is larger than 0 otherwise, if b do jump , or do use if not|once inventory is greater than x you can jump until position is greater than or equal to 0|a is an approach where it would be good to do jump if b is not equal to 2 otherwise, if a do build , or do find as a last resort|once position is less than or equal to x you have the choice to use until b is less than or equal to y|a is an approach where you do use if iron is not the same as y otherwise, if iron do use , or do find if not|b is a tactic where it is good to do build if a 2 , or do jump if no other options are possible|whenever position is at most 1 you are able to run until a is not equal to 1|once inventory is at most y you can build until b is greater than y|if a is greater than or equal to 2 you can build until a is exactly the same as 1|b suggests that it would be advantageous to do find if b is not equal to x otherwise, if iron do find , or do jump if not|b states that you should do jump if a is not equal to 1 otherwise, if a do jump , or do jump as a last resort|a entails that you do find if a 2 otherwise, if b do build , or do run otherwise|when b is not equal to y you have the option to find until a is larger than 1|b is a tactic where it is advantageous to do find if position is equal to y otherwise, if position do find , or do build as a last resort|if inventory is not equal to x you are able to run until a is equal to 1|b entails that you do use if b is not equal to x otherwise, if iron do find , or do run otherwise|if b is less than x you have the choice to build until finally position is not equal to 0|a states that you should do build if a 2 otherwise, if position do build , or do run otherwise|a states that you should do run if b is not equal to y otherwise, if iron do build , or do use as a last resort|a is an approach where it would be good to do build if position is equal to 2 otherwise, if position do jump , or do use as a last resort|b is an approach where you do find if a x otherwise, if a do use , or do find as a last resort|whenever a is exactly the same as 1 you have the choice to find until position is at least x|once b is smaller than 0 you have the choice to use until finally position is not equal to 1|whenever b is equal to 2 you are able to use until finally b is equal to y|when a is larger than 0 you are able to jump until inventory is at least y|a is a tactic where it is advantageous to do jump if a is not equal to 1 otherwise, if position do find , or do use otherwise|b is an approach where you do jump if b is smaller than x otherwise, if b do find , or do jump otherwise|b is a tactic where it is good to do run if a x otherwise, if iron do use , or do use if not|if position is not equal to y you have the option to find until finally position is larger than x|a means that it would be good to do build if iron 0 otherwise, if a do jump , or do find as a last resort|b is an approach where it would be good to do build if a is less than 1 otherwise, if a do find , or do find otherwise|a is a tactic where it is advantageous to do run if b otherwise, if b do jump , or do use otherwise|a is a good strategy where you should do jump if position is exactly the same as 1 otherwise, if a do build , or do run if no other options are possible|a is a tactic where it is good to do run if a is greater than y otherwise, if b do jump , or do run otherwise|a is an approach where you do build if position is not equal to 1 otherwise, if iron do jump , or do run otherwise|once inventory is not equal to 1 you can run until b is greater than or equal to x|a states that you should do build if iron is not equal to y otherwise, if b do build , or do build if not|a states that you should do jump if b is larger than x otherwise, if b do use , or do use as a last resort|a is a good strategy where you should do run if b 1 otherwise, if a do use , or do jump if no other options are possible|a states that you should do use if iron is less than 2 otherwise, if position do build , or do find if not|a is a tactic where it is advantageous to do use if a is equal to 0 otherwise, if iron do run , or do build otherwise|a is an approach where it would be good to do run if b x otherwise, if position do build , or do run as a last resort|whenever b is not equal to 2 you have the choice to build until finally position is equal to x|as soon as b is exactly the same as 2 you have the choice to build until finally inventory is at least 2|when inventory is not equal to 0 you have the option to build until inventory is not equal to 0|b means that it would be good to do jump if position is smaller than x otherwise, if iron do use , or do find as a last resort|once a is greater than or equal to x you have the choice to use until finally a is not equal to 2|as soon as a is greater than or equal to x you can find until b is equal to 2|b is an approach where it would be good to do build if position y otherwise, if position do build , or do build as a last resort|once b is at most 0 you can use until finally b is not the same as 2|a suggests that it would be advantageous to do build if b is larger than y otherwise, if iron do use , or do jump as a last resort|a states that you should do jump if b is less than 2 otherwise, if position do use , or do jump if not|b is a tactic where it is advantageous to do find if a is exactly the same as x otherwise, if b do run , or do build if no other options are possible|if inventory is at most 0 you have the choice to build until a is greater than or equal to x|once a is larger than 0 you can build until position is not equal to 2|b is a good strategy where you should do run if position is greater than y otherwise, if a do find , or do build otherwise|if b is exactly the same as 0 you are able to build until finally b is at most 1|a is an approach where you do use if a is larger than 2 otherwise, if b do use , or do run otherwise|b suggests that it would be advantageous to do use if a otherwise, if iron do jump , or do jump if not|a means that it would be good to do run if b 1 otherwise, if position do jump , or do jump as a last resort|a is a strategy where you do use if a is smaller than 1 otherwise, if iron do run , or do build if no other options are possible|when a is exactly the same as 2 you have the option to find until finally position is greater than 0|whenever inventory is larger than y you have the option to use until finally a is exactly the same as x|b is an approach where you do build if a is not equal to 0 otherwise, if position do use , or do jump otherwise|a is a strategy where you do use if iron 0 otherwise, if a do jump , or do use otherwise|when inventory is less than y you can jump until finally position is at least 1|a is a tactic where it is advantageous to do run if a 2 otherwise, if b do use , or do find if not|as soon as inventory is smaller than y you can build until a is exactly the same as 0|once b you are able to find until finally position|as soon as a is greater than or equal to 1 you are able to use until finally b is not the same as y|whenever b is not the same as x you can use until finally position is greater than 2|a is a strategy where you do run if b is smaller than 2 otherwise, if a do build , or do use if no other options are possible|b suggests that it would be advantageous to do find if a is not equal to 1 otherwise, if position do use , or do jump if no other options are possible|when inventory you are able to use until finally b is larger than 2|a entails that you do run if iron is exactly the same as y otherwise, if b do run , or do use if no other options are possible|if b is less than or equal to x you can find until inventory is at least 0|if inventory is greater than or equal to 0 you can jump until finally position is greater than 1|a is an approach where it would be good to do jump if a is equal to y otherwise, if a do jump , or do find if not|a suggests that it would be advantageous to do run if iron is smaller than 2 otherwise, if a do use , or do use as a last resort|as soon as b is at most y you have the choice to find until finally x|b is a tactic where it is good to do use if iron is greater than y otherwise, if a do build , or do use if not|if inventory is not the same as y you can find until finally position is at most 2|b means that it would be good to do jump if b is not the same as x otherwise, if position do find , or do jump if no other options are possible|a is a tactic where it is good to do run if position is less than y otherwise, if iron do use , or do find otherwise|whenever b is greater than or equal to x you have the choice to find until a is at most 1|a is a tactic where it is good to do find if iron is equal to 0 otherwise, if position do build , or do use otherwise|when a is not equal to 1 you have the option to run until finally a is smaller than 0|a is a tactic where it is good to do build if a is smaller than 2 otherwise, if iron do build , or do use otherwise|a is a good strategy where you should do find if iron 2 otherwise, if iron do jump , or do find if no other options are possible|a is a good strategy where you should do use if b 2|when b is greater than or equal to y you are able to build until position is at most 1|b states that you should do find if iron x otherwise, if a do find , or do run if no other options are possible|a is a tactic where it is advantageous to do find if b 1 otherwise, if a do use , or do use if not|when a is at least 0 you have the choice to build until position is smaller than 0|a is an approach where it would be good to do jump if iron is larger than 2 otherwise, if a do use , or do run if no other options are possible|a means that it would be good to do jump if b 2 otherwise, if iron do find , or do jump if not|when position is greater than 0 you have the option to find until finally position is greater than 2|if b is at least 2 you are able to build until inventory is greater than 0|whenever inventory you have the choice to run until b is less than y|when inventory is exactly the same as 1 you have the choice to run until a is greater than or equal to 2|b is a good strategy where you should do run if position is not the same as y otherwise, if position do run , or do use as a last resort|a is an approach where you do jump if iron is exactly the same as x otherwise, if iron do find , or do find if no other options are possible|a is a strategy where you do find if b is less than 0 otherwise, if iron do build , or do find as a last resort|whenever a is equal to 0 you have the choice to find until position is not equal to 2|a is a tactic where it is good to do run if b 1 otherwise, if iron do find , or do find otherwise|a states that you should do run if b is not equal to x otherwise, if b do find , or do build otherwise|b is an approach where you do jump if iron y otherwise, if position do find , or do jump as a last resort|a suggests that it would be advantageous to do run if iron 2 otherwise, if position do build , or do jump if no other options are possible|a is an approach where you do build if a 2 otherwise, if b do use , or do use as a last resort|a means that it would be good to do build if iron is less than 0 otherwise, if b do build , or do jump if no other options are possible|once a is larger than 0 you have the choice to run until finally b is greater than or equal to 0|a is an approach where you do build if position is not equal to 1 otherwise, if iron do use , or do run if not|a states that you should do use if iron is not the same as 2 otherwise, if b do use , or do use as a last resort|when a is less than 2 you have the choice to run until finally position is less than 1|if y you can run until finally b is equal to y|if inventory is larger than y you have the choice to use until a is smaller than y|whenever b is larger than 1 you have the choice to find until a is less than or equal to x|b is a tactic where it is good to do use if position y , or do find if no other options are possible|when b is not equal to 2 you have the choice to build until a is equal to 0|when a is smaller than y you have the option to build until position is greater than or equal to y|a is a good strategy where you should do use if position is greater than 1 otherwise, if position do jump , or do use otherwise|when a is less than y you have the option to find until finally a is less than or equal to 2|once b is greater than or equal to 0 you have the choice to find until finally b is not the same as 1|a entails that you do find if position is less than y otherwise, if a do build , or do use otherwise|when inventory is larger than 0 you have the option to run until finally b is equal to 2|a is a tactic where it is advantageous to do run if iron is not equal to y otherwise, if b do run , or do use if not|a is a tactic where it is good to do find if a y otherwise, if a do run , or do run if not|b entails that you do run if iron is larger than x otherwise, if b do build , or do jump if no other options are possible|b is a tactic where it is good to do use if position y otherwise, if iron do jump , or do run if not|a is an approach where it would be good to do jump if b is less than y otherwise, if a do build , or do jump if not|when position is less than y you can build until position is larger than 2|if position you can use until finally a is greater than or equal to 1|a is a tactic where it is advantageous to do build if b is not equal to 0 otherwise, if position do build , or do run as a last resort|whenever inventory you can find until finally inventory is not equal to x|when b is at most y you are able to jump until finally inventory is greater than 1|once b is exactly the same as 0 you can run until a|b entails that you do run if iron y otherwise, if iron do run , or do jump as a last resort|a is a good strategy where you should do use if a otherwise, if b do use , or do jump otherwise|whenever position is at least y you have the choice to find until finally a is exactly the same as x|once a is greater than 0 you have the choice to find until finally b is smaller than 2|a is a tactic where it is advantageous to do jump if b is not equal to 2 otherwise, if a do jump , or do use if not|if position is greater than 2 you can find until b|a is a tactic where it is advantageous to do run if position is larger than y otherwise, if a do jump , or do use if no other options are possible|b is a good strategy where you should do use if a x otherwise, if b do build , or do use if not|a is a tactic where it is good to do jump if a 1 otherwise, if position do build , or do run if no other options are possible|a means that it would be good to do use if b is equal to y otherwise, if iron do jump , or do use otherwise|once inventory is greater than or equal to 1 you have the option to build until finally position is less than or equal to x|a entails that you do build if a 1 otherwise, if position do run , or do build otherwise|a is a strategy where you do run if iron 1 otherwise, if b do jump , or do jump otherwise|whenever a is greater than or equal to y you can use until inventory is not the same as 0|b entails that you do use if position is less than y|a entails that you do use if a is smaller than y otherwise, if a do run , or do build if not|b is an approach where you do find if iron is not equal to y otherwise, if b do find , or do jump if no other options are possible|when inventory is not equal to 0 you can find until b is exactly the same as 1|a is a tactic where it is good to do jump if b is greater than 0 otherwise, if a do jump , or do jump otherwise|once a is greater than y you can build until inventory is equal to 1|b entails that you do use if b is smaller than y otherwise, if b do jump , or do jump as a last resort|if inventory you can use until finally inventory is at least 2|if b you can build until b is equal to 0|b is an approach where it would be good to do run if iron is smaller than y otherwise, if position do run , or do jump if not|a is a tactic where it is good to do build if b y otherwise, if a do use , or do jump if no other options are possible|as soon as position is at least y you can build until finally b is at least 2|a entails that you do build if iron is smaller than y , or do run otherwise|a is a good strategy where you should do build if a is larger than x otherwise, if iron do run , or do jump if not|a entails that you do build if b is not equal to 2 otherwise, if position do build , or do find as a last resort|b is an approach where it would be good to do run if position x otherwise, if a do use , or do build if not|when position is greater than or equal to y you have the choice to jump until finally inventory is greater than y|a is a good strategy where you should do build if a x otherwise, if a do run , or do find otherwise|b is a tactic where it is advantageous to do run if iron y otherwise, if position do use , or do use if not|a is an approach where it would be good to do run if position is smaller than 0 otherwise, if iron do jump , or do find as a last resort|a states that you should do find if iron is larger than 0 otherwise, if b do find , or do build as a last resort|a is a good strategy where you should do build if position is equal to y otherwise, if b do jump , or do jump otherwise|if position is less than 2 you have the option to jump until a is exactly the same as 2|whenever inventory is not the same as y you can jump until finally inventory is exactly the same as y|a entails that you do find if iron is not equal to 1 otherwise, if a do find , or do use otherwise|b means that it would be good to do build if a is larger than y otherwise, if position do find , or do jump if not|whenever position is smaller than x you have the choice to find until inventory is exactly the same as y|once inventory is exactly the same as x you have the choice to use until a is larger than 1|as soon as b is at most y you can build until b is not the same as 1|as soon as a is less than or equal to 1 you are able to use until inventory is at least 1|b is a strategy where you do jump if a is not equal to 0 otherwise, if iron do build , or do use if not|when inventory is larger than y you can build until inventory is at most 0|as soon as inventory is at least 1 you can use until b is greater than x|a suggests that it would be advantageous to do use if b is less than y otherwise, if iron do use , or do build if not|once position is at most 2 you have the choice to jump until finally inventory is at most 0|whenever inventory is larger than x you have the option to find until inventory is equal to 2|when b is exactly the same as 2 you have the option to run until finally a is smaller than 0|if b you have the choice to build until a is equal to 0|a is an approach where you do build if b is less than 1 otherwise, if iron do use , or do build if no other options are possible|whenever a is greater than y you have the option to find until b is greater than 0|whenever b is at most y you are able to use until finally inventory is greater than or equal to x|b means that it would be good to do use if b 1 , or do jump if no other options are possible|when b is greater than or equal to 2 you have the option to find until finally a is not the same as 0|b states that you should do use if a x otherwise, if iron do use , or do run if not|a is a tactic where it is good to do run if b 0 otherwise, if b do build , or do find if not|a is a tactic where it is advantageous to do find if a y otherwise, if iron do jump , or do find otherwise|b entails that you do run if iron y otherwise, if a do build , or do build otherwise|a is a tactic where it is good to do jump if a 1 otherwise, if position do build , or do jump if no other options are possible|a is an approach where you do find if iron is equal to 0 otherwise, if b do use , or do use otherwise|when b is less than 2 you have the option to use until position is greater than or equal to 1|a is an approach where you do use if iron is greater than x otherwise, if b do jump , or do build if no other options are possible|as soon as position is greater than or equal to y you have the choice to find until inventory is smaller than x|if inventory is equal to 0 you are able to run until finally b is larger than 0|as soon as b is at least y you are able to build until position is larger than 0|a states that you should do find if b 2 otherwise, if position do jump , or do build if no other options are possible|a is a tactic where it is good to do find if b y otherwise, if a do find , or do find if no other options are possible|b means that it would be good to do use if b is smaller than y otherwise, if iron do use , or do find otherwise|b is a tactic where it is good to do find if a is smaller than x otherwise, if iron do build , or do build if not|a is an approach where you do build if b is exactly the same as 0 otherwise, if b do jump , or do run otherwise|a is an approach where you do build if iron otherwise, if iron do run , or do run if not|if a is less than or equal to y you are able to find until finally b is at most 0|if position is not equal to 2 you have the choice to run until b is equal to 0|a states that you should do use if b is not equal to x otherwise, if iron do use , or do use if not|b is an approach where it would be good to do run if position is larger than y otherwise, if position do jump , or do jump if not|a suggests that it would be advantageous to do use if b is less than 1 otherwise, if position do run , or do jump otherwise|a is an approach where you do build if position 1 otherwise, if iron do find , or do build if not|once b is less than y you can find until finally b is greater than y|whenever inventory is not equal to y you have the option to run until a is greater than x|b is an approach where you do jump if position x otherwise, if a do build , or do find as a last resort|as soon as b is greater than x you have the choice to build until inventory is at most x|once inventory is exactly the same as y you have the choice to find until finally a|if position is exactly the same as y you can jump until finally b is less than 1|a means that it would be good to do use if b is exactly the same as x otherwise, if a do jump , or do use if no other options are possible|a entails that you do run if position is greater than x otherwise, if iron do find , or do jump if no other options are possible|b suggests that it would be advantageous to do build if iron is equal to y otherwise, if iron do find , or do build as a last resort|a states that you should do run if iron 0 otherwise, if iron do use , or do jump as a last resort|a is a good strategy where you should do jump if b is smaller than y otherwise, if b do build , or do use if not|when a is less than 1 you are able to build until finally inventory is not equal to 1|a entails that you do run if b is greater than 1 otherwise, if b do run , or do jump if no other options are possible|a entails that you do find if a is greater than y otherwise, if iron do use , or do run otherwise|if position is not equal to y you are able to jump until a is not the same as 1|a suggests that it would be advantageous to do jump if position 1 otherwise, if b do run , or do jump otherwise|if b is not equal to y you are able to jump until finally b is less than or equal to 0|a is a good strategy where you should do use if a y otherwise, if b do build , or do jump if no other options are possible|a entails that you do use if position is larger than y otherwise, if iron do build , or do jump otherwise|a is an approach where it would be good to do find if iron is exactly the same as 2 otherwise, if b do use , or do build if no other options are possible|as soon as b is greater than or equal to y you are able to build until b is larger than 2|a means that it would be good to do find if position is greater than y otherwise, if iron do build , or do build if not|when position you have the option to find until finally a is smaller than 2|as soon as position is greater than or equal to 2 you have the option to jump until finally position is at least 0|a is an approach where it would be good to do find if iron y otherwise, if position do find , or do run if not|a is a tactic where it is advantageous to do run if iron is greater than 0 otherwise, if a do find , or do find if no other options are possible|a suggests that it would be advantageous to do jump if a otherwise, if b do find , or do jump if not|whenever inventory is equal to 2 you have the option to build until position is larger than 0|b is a tactic where it is advantageous to do use if iron is less than y otherwise, if a do jump , or do jump as a last resort|when b is greater than or equal to x you are able to use until position is exactly the same as 0|whenever position is greater than 1 you can use until finally b is at most y|once inventory is larger than 2 you have the option to use until inventory is at most 2|as soon as a is not the same as 2 you have the option to find until finally position is equal to x|b is an approach where it would be good to do jump if position is not equal to y otherwise, if b do run , or do use if no other options are possible|a is a tactic where it is advantageous to do run if b 2 otherwise, if b do find , or do build if not|a is a tactic where it is good to do jump if a 0 otherwise, if b do jump , or do run if not|a is a strategy where you do run if a is less than 0 otherwise, if position do build , or do build as a last resort|b entails that you do run if a is not the same as x otherwise, if a do jump , or do jump if not|b is a strategy where you do use if b x , or do find otherwise|b is a good strategy where you should do use if a is larger than y otherwise, if position do use , or do find as a last resort|as soon as inventory is greater than or equal to 1 you have the option to build until finally inventory is at most 0|a means that it would be good to do jump if position is smaller than 1 otherwise, if position do find , or do find otherwise|once inventory is greater than y you have the option to use until b is equal to y|once a is less than x you are able to jump until finally b is equal to 1|when b is less than 1 you are able to build until position is exactly the same as x|if a is less than 0 you are able to run until finally inventory is at most x|a is a good strategy where you should do build if iron 0 otherwise, if position do find , or do use as a last resort|a states that you should do find if iron y otherwise, if a do run , or do use as a last resort|a is a tactic where it is good to do use if b x otherwise, if b do find , or do run as a last resort|once position is greater than or equal to 2 you are able to jump until inventory is less than x|b means that it would be good to do run if a otherwise, if iron do build , or do build if not|when x you are able to run until finally b is equal to 2|whenever b is less than or equal to x you can jump until finally a is greater than x|when a is less than y you are able to find until inventory is larger than 2|b is a tactic where it is advantageous to do use if a is less than 0 otherwise, if a do find , or do use as a last resort|a suggests that it would be advantageous to do find if b 0 otherwise, if b do run , or do run otherwise|a means that it would be good to do jump if b 1 otherwise, if a do jump , or do jump if not|once inventory is exactly the same as y you have the option to use until inventory is not the same as 0|a is a good strategy where you should do build if position is exactly the same as y otherwise, if position do use , or do run if not|a suggests that it would be advantageous to do find if b is greater than 1 otherwise, if b do jump , or do run if not|when a is larger than 2 you have the choice to run until position is greater than or equal to 2|b is an approach where it would be good to do build if iron is less than y otherwise, if b do jump , or do use if no other options are possible|b means that it would be good to do jump if position is greater than y otherwise, if iron do use , or do use as a last resort|if a is larger than 2 you can use until a is greater than or equal to x|when b is exactly the same as y you are able to find until finally inventory is not equal to 1|when b is equal to y you can use until finally a is greater than 1|whenever inventory you can find until b is not equal to x|when position is smaller than 0 you are able to find until b is equal to x|a entails that you do build if b is larger than 0 otherwise, if a do find , or do jump otherwise|as soon as inventory is less than or equal to 0 you are able to build until position is at least 1|once position is not the same as 2 you have the choice to find until finally y|as soon as inventory is less than or equal to 1 you can jump until finally position is at least 0|a is a strategy where you do use if position is equal to 2 otherwise, if iron do find , or do run as a last resort|a is an approach where it would be good to do run if iron is equal to x otherwise, if position do build , or do build otherwise|a means that it would be good to do use if b is exactly the same as 0 otherwise, if iron do jump , or do build as a last resort|a is a good strategy where you should do build if b is not equal to 2 otherwise, if position do find , or do run if no other options are possible|a suggests that it would be advantageous to do jump if a is equal to y otherwise, if iron do run , or do build otherwise|a suggests that it would be advantageous to do jump if position is exactly the same as 1 otherwise, if a do build , or do use otherwise|if position is greater than or equal to 2 you have the choice to find until finally position is less than or equal to y|a means that it would be good to do use if b is not the same as 0 otherwise, if b do find , or do run as a last resort|if position is less than or equal to y you have the choice to use until b is greater than or equal to x|a is an approach where it would be good to do jump if iron is not the same as 1 otherwise, if b do run , or do find if no other options are possible|b is a good strategy where you should do run if a is exactly the same as x otherwise, if iron do run , or do jump if no other options are possible|a is an approach where it would be good to do build if b is greater than 1 otherwise, if a do find , or do use otherwise|a is an approach where you do use if iron is exactly the same as 0 otherwise, if iron do use , or do build if not|whenever inventory is larger than y you have the choice to find until finally a is greater than or equal to y|when position is not the same as y you are able to run until inventory is at most y|when inventory is less than 1 you have the option to find until b is exactly the same as 0|if b is exactly the same as 0 you have the option to run until finally inventory|b means that it would be good to do jump if a is smaller than x otherwise, if iron do find , or do find if not|when a is less than or equal to 1 you are able to build until finally position is not the same as 1|when inventory is greater than or equal to 1 you can use until position is not equal to 0|as soon as inventory is smaller than 1 you are able to build until position is greater than x|once position is less than or equal to 0 you have the option to build until finally b is less than 1|once b is at least y you have the choice to find until position is at most y|a is a good strategy where you should do build if b is smaller than y otherwise, if b do build , or do build if not|a is a tactic where it is good to do run if b x otherwise, if iron do find , or do build otherwise|whenever inventory is at least y you have the option to build until finally inventory is smaller than x|b states that you should do find if position x otherwise, if position do jump , or do run otherwise|b is an approach where it would be good to do jump if a is not the same as x otherwise, if a do run , or do run if no other options are possible|a is a tactic where it is good to do find if position 0 otherwise, if iron do run , or do find if not|b is an approach where you do use if iron otherwise, if a do find , or do build otherwise|a is a good strategy where you should do jump if iron is larger than y otherwise, if position do jump , or do build as a last resort|a means that it would be good to do use if iron is equal to x otherwise, if position do build , or do find otherwise|a is a good strategy where you should do use if a y otherwise, if a do run , or do find if no other options are possible|when inventory is at least 0 you can build until b is exactly the same as y|a is an approach where you do run if b is smaller than 1 otherwise, if a do use , or do build if no other options are possible|a is a tactic where it is good to do use if a is less than x otherwise, if iron do find , or do jump if no other options are possible|a entails that you do jump if iron 2 otherwise, if position do find , or do find as a last resort|when b is greater than or equal to 1 you have the option to jump until finally b is less than or equal to 1|a is a strategy where you do jump if position is equal to x otherwise, if position do find , or do run if no other options are possible|once inventory is at most 2 you can use until finally b is at least 2|whenever inventory is not the same as 1 you have the option to jump until b|a is an approach where you do jump if a y otherwise, if position do use , or do jump if no other options are possible|if position is at least 2 you have the choice to use until finally a is larger than 0|a states that you should do find if a 0 otherwise, if a do run , or do run as a last resort|a states that you should do jump if iron is equal to 1 , or do find if not|a is an approach where it would be good to do jump if a 0 otherwise, if position do use , or do jump if not|whenever b is at most x you are able to find until finally a is at most y|if inventory is not equal to x you can run until finally inventory is not equal to 0|if inventory is less than 0 you are able to build until finally b is smaller than 2|a means that it would be good to do use if a 2 otherwise, if iron do run , or do run if no other options are possible|b suggests that it would be advantageous to do build if iron is smaller than x otherwise, if iron do build , or do find if not|if inventory is at most 0 you have the choice to use until b is greater than or equal to y|a states that you should do use if position 1 otherwise, if iron do jump , or do use if not|when position is less than x you can find until a is greater than or equal to y|b is a tactic where it is advantageous to do jump if b is not the same as y otherwise, if b do jump , or do find if not|as soon as a is not the same as 2 you have the option to jump until finally position is greater than y|whenever b is greater than 1 you have the option to run until finally a is greater than y|as soon as inventory is less than or equal to 2 you can build until finally inventory is at most y|whenever position is less than or equal to 0 you have the choice to jump until finally a is at least 0|a suggests that it would be advantageous to do run if a 2 otherwise, if b do find , or do jump otherwise|when inventory is greater than or equal to 1 you are able to jump until b is smaller than y|a means that it would be good to do build if position is not the same as x otherwise, if a do find , or do run otherwise|as soon as a is at least x you have the choice to build until inventory is less than or equal to y|when b is less than or equal to 1 you have the option to find until position is at most 0|as soon as position is equal to y you are able to use until position is not equal to y|a is a good strategy where you should do build if a is equal to 1 otherwise, if position do build , or do jump otherwise|as soon as position is equal to 1 you have the choice to find until finally b is greater than x|a is a tactic where it is good to do find if a 0 otherwise, if a do jump , or do run if no other options are possible|as soon as inventory is at most 1 you can build until b is not the same as 1|b is a tactic where it is advantageous to do run if position y otherwise, if iron do build , or do build as a last resort|whenever inventory is smaller than y you can use until finally inventory is not the same as y|b is an approach where you do find if position is greater than 1 , or do jump as a last resort|when position is exactly the same as 0 you can find until inventory is at most 1|a entails that you do build if a is not equal to 1 otherwise, if b do jump , or do use otherwise|a is a tactic where it is advantageous to do find if b 2 , or do jump otherwise|as soon as b is greater than or equal to 0 you are able to build until a is less than x|a is a tactic where it is advantageous to do use if b is larger than x otherwise, if iron do build , or do jump if not|a suggests that it would be advantageous to do use if position x otherwise, if b do find , or do build as a last resort|b states that you should do jump if b is less than x , or do jump if not|b is a tactic where it is good to do find if a is equal to 2 otherwise, if b do build , or do use if no other options are possible|a suggests that it would be advantageous to do run if a is exactly the same as 0 otherwise, if position do jump , or do jump if no other options are possible|b entails that you do run if b is larger than y otherwise, if position do jump , or do find if no other options are possible|b is a tactic where it is good to do run if a is less than 0 otherwise, if position do find , or do find as a last resort|once position is smaller than x you have the option to jump until a is exactly the same as 0|when position is equal to 0 you have the choice to jump until b is equal to 1|a is a good strategy where you should do run if position is not the same as x otherwise, if iron do find , or do build as a last resort|if a is not equal to y you are able to jump until finally inventory is equal to 0|b entails that you do run if a is greater than y otherwise, if iron do build , or do use if not|a is an approach where you do build if iron is exactly the same as 0 otherwise, if position do find , or do use if not|b entails that you do use if b is exactly the same as 2 , or do find if no other options are possible|if position is greater than 1 you can find until finally a is not the same as y|b is an approach where you do find if a is equal to 0 otherwise, if iron do find , or do run if no other options are possible|as soon as a is at least 0 you can run until finally b is larger than x|once position is equal to 0 you can run until inventory is not equal to y|a is a good strategy where you should do jump if b is equal to x otherwise, if a do run , or do use as a last resort|a is an approach where it would be good to do build if a is less than 2 otherwise, if b do build , or do use if no other options are possible|a is an approach where it would be good to do use if b is greater than y otherwise, if b do use , or do build otherwise|a is a good strategy where you should do find if b is greater than 0 otherwise, if position do jump , or do use if not|a is an approach where it would be good to do run if position is equal to 1 otherwise, if b do use , or do build as a last resort|a is a tactic where it is advantageous to do jump if b otherwise, if b do jump , or do find if not|a states that you should do use if a y otherwise, if position do run , or do use otherwise|whenever position is less than y you have the option to use until position is not the same as y|as soon as a is less than or equal to x you can use until b is at most 1|once position is greater than y you can build until inventory is larger than x|if a is equal to 2 you have the choice to jump until finally b is larger than 0|a is an approach where it would be good to do build if iron is not equal to 2 otherwise, if b do jump , or do find as a last resort|a states that you should do find if position y otherwise, if b do run , or do find otherwise|if a is not equal to 0 you can run until finally b is equal to 2|when a is less than or equal to 1 you have the choice to run until inventory is equal to y|if a is smaller than x you have the option to find until finally a is equal to 2|whenever a is not the same as 2 you can jump until position is smaller than 1|a is a strategy where you do build if a 0 otherwise, if b do build , or do run as a last resort|once inventory is at most y you have the choice to jump until b is smaller than 2|b means that it would be good to do run if iron is equal to x otherwise, if iron do find , or do jump if not|a states that you should do find if iron is smaller than 2 otherwise, if b do use , or do build otherwise|a is a tactic where it is good to do find if iron is less than y otherwise, if b do build , or do jump otherwise|a states that you should do find if b is less than 1 otherwise, if iron do use , or do jump if not|once a is exactly the same as 2 you have the option to find until finally position|a entails that you do use if a is not the same as x otherwise, if iron do find , or do build as a last resort|whenever b is larger than y you are able to jump until a is equal to x|b is a tactic where it is advantageous to do build if position y otherwise, if b do run , or do use otherwise|a entails that you do run if a is equal to 2 otherwise, if position do run , or do use if not|a means that it would be good to do build if iron 1 otherwise, if a do find , or do find as a last resort|a means that it would be good to do use if position 1 otherwise, if position do jump , or do build as a last resort|a is a strategy where you do run if iron is exactly the same as 1 otherwise, if b do find , or do use as a last resort|whenever position is not equal to 2 you have the choice to use until finally inventory is greater than 1|a entails that you do find if iron is larger than y otherwise, if b do build , or do find if not|a is a tactic where it is advantageous to do run if iron is not equal to y otherwise, if iron do use , or do jump if not|if position is at most y you have the choice to use until finally position is less than 1|once inventory is not equal to y you are able to run until finally a is less than 1|as soon as b is not equal to 0 you have the choice to use until finally inventory is at least 1|a is a strategy where you do find if position is exactly the same as 0 otherwise, if a do use , or do build otherwise|a states that you should do jump if iron 1 otherwise, if iron do jump , or do run otherwise|a is an approach where you do find if position is not equal to 1 otherwise, if a do use , or do use as a last resort|a states that you should do run if iron 0 otherwise, if iron do jump , or do use if not|whenever b is at most x you are able to use until finally b is greater than x|when a is less than or equal to x you have the option to find until finally inventory is greater than 2|a states that you should do build if a is less than 0 otherwise, if a do build , or do use if not|a states that you should do find if iron is larger than 1 otherwise, if position do use , or do build otherwise|a is a strategy where you do jump if a is greater than x otherwise, if iron do find , or do build as a last resort|a is a tactic where it is good to do run if b 2 otherwise, if iron do build , or do use as a last resort|a is a good strategy where you should do use if position is smaller than x otherwise, if position do use , or do jump as a last resort|a is a strategy where you do build if iron is equal to 1 otherwise, if position do run , or do use if not|a states that you should do use if b x otherwise, if iron do use , or do find as a last resort|a entails that you do jump if a is larger than 2 otherwise, if b do find , or do use otherwise|a means that it would be good to do run if a x otherwise, if a do jump , or do jump if no other options are possible|as soon as inventory you have the choice to run until finally inventory is not equal to y|if a is at most 2 you can jump until finally b|once b is at least 0 you are able to find until finally b is greater than or equal to x|b is a strategy where you do build if a is less than y otherwise, if b do run , or do build otherwise|if inventory is greater than 0 you have the choice to use until position is not the same as 1|once a you have the option to jump until finally b is less than or equal to x|b is an approach where you do find if a is less than 2 otherwise, if iron do jump , or do jump as a last resort|whenever position is greater than 1 you are able to run until b is smaller than 0|a suggests that it would be advantageous to do build if iron is greater than y otherwise, if b do find , or do run if no other options are possible|whenever a is greater than 0 you have the choice to build until inventory is greater than 1|a means that it would be good to do jump if b is not equal to 1 otherwise, if position do build , or do find if no other options are possible|as soon as position you can run until position is exactly the same as 0|b states that you should do find if position is greater than x otherwise, if a do build , or do find if no other options are possible|when a is not equal to y you are able to run until finally inventory is smaller than 0|b entails that you do jump if iron is equal to x otherwise, if a do use , or do find if no other options are possible|a is a strategy where you do build if b 0 otherwise, if a do run , or do find if no other options are possible|whenever b is not the same as y you have the option to build until b is not equal to 1|whenever a is smaller than 2 you are able to jump until b is less than or equal to x|as soon as a is greater than or equal to x you can jump until b is at least y|whenever a is greater than or equal to 2 you are able to run until finally a is less than or equal to x|once a you can jump until b is not equal to 0|a is a tactic where it is advantageous to do find if b 1 otherwise, if a do run , or do run if not|b is an approach where you do find if a is equal to x otherwise, if position do find , or do build if not|whenever a is not equal to x you are able to run until y|when b is larger than y you are able to run until a is greater than or equal to 0|b is a tactic where it is good to do find if a is equal to 0 otherwise, if iron do find , or do use if not|whenever inventory is less than or equal to 0 you can use until a is larger than 0|a is a strategy where you do find if b is greater than 2 otherwise, if position do find , or do find if not|whenever a is not equal to 0 you can jump until b is at most 0|a entails that you do find if position y otherwise, if a do jump , or do use if not|a suggests that it would be advantageous to do find if position is equal to 2 otherwise, if iron do build , or do use otherwise|once a is exactly the same as y you are able to run until b is smaller than 0|a is a strategy where you do find if iron 2 otherwise, if b do find , or do use if not|as soon as b is at least 1 you can jump until b is larger than 2|as soon as position is less than or equal to 1 you have the option to build until a is smaller than y|as soon as position is less than x you are able to find until b is smaller than x|when b is at least x you can use until b is not the same as y|a is a tactic where it is advantageous to do build if position is greater than 0 otherwise, if iron do use , or do jump as a last resort|a is a good strategy where you should do run if position is not the same as y otherwise, if a do use , or do build if no other options are possible|once a is larger than x you have the choice to jump until b is at most 1|b is a tactic where it is advantageous to do run if iron is less than y otherwise, if a do run , or do build otherwise|b is a strategy where you do build if iron is larger than y otherwise, if b do build , or do build as a last resort|a is an approach where you do run if a is exactly the same as y otherwise, if iron do run , or do jump if no other options are possible|a means that it would be good to do run if a is not the same as y otherwise, if b do find , or do jump otherwise|whenever inventory is not the same as 0 you are able to jump until finally inventory is at most x|if a is at least 1 you have the option to jump until position is greater than or equal to y|if a is larger than x you are able to find until finally a is less than 2|a is a strategy where you do run if iron x , or do build otherwise|a means that it would be good to do build if position is larger than y otherwise, if a do run , or do jump if no other options are possible|a entails that you do jump if a is not equal to 1 otherwise, if iron do build , or do jump otherwise|if position is less than or equal to x you can run until inventory is greater than 2|whenever a is less than 2 you have the choice to use until b is less than or equal to 1|a is a tactic where it is advantageous to do use if a is not the same as 0 otherwise, if iron do jump , or do jump if no other options are possible|if b is not the same as 1 you have the choice to jump until finally position is less than 0|a is a strategy where you do use if a is greater than y otherwise, if position do find , or do build if no other options are possible|when position is greater than or equal to y you have the choice to build until a is exactly the same as x|as soon as a is equal to 1 you can run until finally position is at least x|a entails that you do jump if iron 1 otherwise, if position do use , or do use otherwise|a is a strategy where you do jump if a is larger than y otherwise, if b do find , or do build otherwise|a is a tactic where it is good to do use if iron y otherwise, if position do run , or do find otherwise|b is a good strategy where you should do run if iron y otherwise, if b do use , or do use if no other options are possible|once a is at least 1 you have the option to use until finally b is at least x|a is a tactic where it is advantageous to do jump if a is exactly the same as 2 otherwise, if a do use , or do find if not|whenever a is exactly the same as 0 you can build until finally position is exactly the same as 0|b entails that you do find if a is exactly the same as 2 , or do use if not|if a is greater than or equal to x you are able to build until position is smaller than x|b is an approach where you do build if a is exactly the same as 2 otherwise, if iron do use , or do build if no other options are possible|b suggests that it would be advantageous to do run if iron is not the same as x otherwise, if b do find , or do use otherwise|a is a good strategy where you should do run if position is equal to 1 otherwise, if position do find , or do find otherwise|if b is at most 0 you are able to run until finally position is less than x|b entails that you do use if position is greater than x otherwise, if b do jump , or do jump if not|when b you have the option to build until finally a is at most 0|when a is smaller than 0 you are able to use until finally inventory is not the same as 1|a is an approach where you do build if iron is not the same as y otherwise, if position do run , or do build otherwise|a is a good strategy where you should do run if a is greater than 1 otherwise, if a do find , or do use if not|b is an approach where it would be good to do find if a is not equal to 0 otherwise, if a do jump , or do use as a last resort|when a is larger than 1 you have the option to find until a is at most y|whenever inventory is greater than or equal to 2 you are able to run until position is less than or equal to 0|when b is less than y you have the option to jump until a is less than x|whenever a is exactly the same as y you are able to find until finally b is larger than 1|a means that it would be good to do find if iron is less than x otherwise, if iron do build , or do jump if not|a is a strategy where you do use if a is not the same as x otherwise, if a do find , or do find otherwise|b means that it would be good to do find if iron is equal to x otherwise, if position do build , or do use otherwise|once a is not the same as 0 you have the choice to build until finally position is at least 0|a is a good strategy where you should do use if b is less than 0 otherwise, if a do build , or do use if no other options are possible|once a is greater than or equal to x you are able to use until a is exactly the same as 1|b is a tactic where it is advantageous to do jump if iron is equal to y otherwise, if position do jump , or do jump as a last resort|as soon as b is equal to 2 you have the choice to use until finally inventory is not the same as 1|whenever position is exactly the same as y you have the option to build until b is not the same as y|b is a good strategy where you should do jump if a is not equal to 2 otherwise, if b do run , or do use otherwise|as soon as inventory is not the same as x you have the option to use until finally inventory is greater than or equal to x|a is a good strategy where you should do run if iron is exactly the same as 0 otherwise, if position do jump , or do build otherwise|b states that you should do jump if b is less than x otherwise, if iron do jump , or do run if no other options are possible|when position is greater than 2 you are able to find until a is greater than or equal to 2|a is a tactic where it is advantageous to do build if a 1 otherwise, if a do jump , or do run if not|a suggests that it would be advantageous to do find if iron otherwise, if a do jump , or do jump otherwise|as soon as inventory is larger than y you have the option to run until finally b is equal to y|b is an approach where you do find if position is exactly the same as x otherwise, if b do find , or do jump otherwise|whenever a is smaller than y you have the option to build until finally b is at least x|whenever inventory is at most 0 you are able to find until position is less than or equal to 2|a means that it would be good to do use if b is larger than 2 otherwise, if position do build , or do run as a last resort|a suggests that it would be advantageous to do build if iron 2 otherwise, if iron do build , or do run if no other options are possible|a is an approach where it would be good to do run if position is exactly the same as 1 otherwise, if a do build , or do build if no other options are possible|b is an approach where you do find if iron is less than y otherwise, if position do find , or do run if not|b means that it would be good to do run if iron 1 , or do build if no other options are possible|whenever inventory is not equal to 1 you can find until b is smaller than 1|if position is equal to y you have the option to find until finally a is smaller than 1|once position is greater than x you can jump until finally a is at least 0|as soon as position is less than or equal to 0 you can find until finally a is greater than or equal to y|b suggests that it would be advantageous to do use if iron is equal to y otherwise, if position do find , or do build as a last resort|b suggests that it would be advantageous to do build if a is not equal to x otherwise, if b do jump , or do jump otherwise|if b is less than 0 you have the choice to use until finally a is less than 0|once inventory is smaller than y you have the choice to find until finally b is greater than x|whenever b is less than or equal to x you have the option to build until position is at most 0|b is an approach where you do use if a is not equal to 2 otherwise, if a do use , or do use as a last resort|if position is greater than or equal to 0 you have the choice to build until finally b is not equal to 1|when position is less than x you can find until a is exactly the same as x|a is a strategy where you do find if position is not the same as y otherwise, if a do run , or do find as a last resort|whenever b is larger than 0 you are able to jump until finally a is at least 0|as soon as position is greater than x you can run until position is greater than or equal to x|as soon as inventory is at most y you have the option to run until inventory|a entails that you do use if b is less than x otherwise, if a do use , or do find otherwise|once position you can jump until finally position is at least 0|b entails that you do jump if iron is greater than 1|a is an approach where you do use if position otherwise, if a do run , or do jump otherwise|a is an approach where you do find if position 0 otherwise, if a do find , or do run otherwise|b is an approach where it would be good to do build if b x otherwise, if position do find , or do jump otherwise|a states that you should do build if a is exactly the same as 1 otherwise, if b do run , or do use if no other options are possible|a is a strategy where you do jump if a 1 otherwise, if position do build , or do jump as a last resort|a is an approach where it would be good to do jump if b 2 otherwise, if b do run , or do jump if no other options are possible|a is a good strategy where you should do jump if position is exactly the same as 0 otherwise, if position do find , or do use if not|a entails that you do run if position x otherwise, if b do run , or do run if not|as soon as a is greater than 1 you are able to find until finally b is equal to 2|b entails that you do use if a is greater than y otherwise, if b do find , or do jump as a last resort|once inventory is smaller than x you have the option to jump until finally b|whenever b is at least 2 you have the option to use until inventory is less than or equal to y|if a is smaller than 2 you are able to build until finally a is at most y|as soon as a is exactly the same as 1 you have the choice to run until b is not the same as x|a is a tactic where it is advantageous to do find if b is not the same as y otherwise, if a do find , or do use otherwise|whenever a is not equal to y you have the choice to build until finally position is less than 1|a is a tactic where it is advantageous to do use if b 0 otherwise, if b do build , or do find otherwise|a is a tactic where it is good to do find if a 2 otherwise, if position do jump , or do use if no other options are possible|b is a tactic where it is advantageous to do use if a is exactly the same as 2 otherwise, if a do jump , or do build otherwise|as soon as inventory is larger than 1 you can use until inventory is exactly the same as 0|as soon as a is less than x you have the choice to use until a is less than 2|a means that it would be good to do jump if b is not the same as 2 otherwise, if position do run , or do jump otherwise|when a is exactly the same as x you have the option to jump until finally inventory is larger than 2|a is a tactic where it is advantageous to do find if a is larger than x otherwise, if iron do run , or do run if no other options are possible|b entails that you do find if a y otherwise, if a do jump , or do use otherwise|whenever position is at least 2 you have the choice to find until inventory is larger than 1|as soon as position is equal to 2 you have the option to jump until finally b is not the same as 0|b is a good strategy where you should do build if a is not equal to 1 , or do find as a last resort|a states that you should do run if a is larger than 0 otherwise, if position do use , or do find if not|a is a tactic where it is good to do find if iron is larger than 0 otherwise, if b do run , or do run otherwise|if position is at least x you are able to run until finally inventory is exactly the same as x|a is an approach where it would be good to do use if position is not the same as y otherwise, if a do use , or do run if no other options are possible|a is an approach where you do run if a is equal to 0 otherwise, if position do use , or do jump otherwise|b entails that you do find if iron is not equal to x otherwise, if position do use , or do build as a last resort|a is a tactic where it is good to do build if b is exactly the same as y , or do build as a last resort|a is an approach where it would be good to do jump if a 0 otherwise, if iron do jump , or do build otherwise|whenever position is at least x you have the option to jump until position is greater than 1|b is a good strategy where you should do jump if b , or do jump otherwise|b is a good strategy where you should do use if a is not the same as x otherwise, if position do build , or do run if not|a is a strategy where you do use if a , or do build as a last resort|whenever a is equal to x you can jump until position is equal to 0|once inventory is less than y you have the choice to build until finally a is larger than y|a is an approach where it would be good to do jump if a is larger than x otherwise, if a do use , or do jump if not|b is a tactic where it is advantageous to do jump if a is greater than y otherwise, if position do use , or do find if not|b suggests that it would be advantageous to do jump if a y otherwise, if b do jump , or do use otherwise|once a is greater than or equal to x you have the choice to build until finally position is larger than 0|b states that you should do find if a is not the same as 2 otherwise, if iron do find , or do use otherwise|a means that it would be good to do use if position is equal to x otherwise, if a do build , or do jump if no other options are possible|a entails that you do jump if a is not equal to 1 otherwise, if a do build , or do run as a last resort|once inventory is greater than 0 you have the choice to use until inventory is less than 0|b means that it would be good to do build if a is not the same as 2 otherwise, if position do find , or do jump if not|a is a strategy where you do use if iron y otherwise, if position do build , or do find if no other options are possible|when inventory is larger than 2 you have the choice to find until finally inventory is smaller than 2|b is a tactic where it is good to do use if position is less than x otherwise, if b do find , or do jump if no other options are possible|a is a good strategy where you should do run if a is less than 2 otherwise, if a do build , or do build if not|whenever b is exactly the same as 0 you are able to run until b is at most x|a means that it would be good to do use if iron is larger than y otherwise, if b do find , or do jump if not|a entails that you do find if position 2 otherwise, if position do use , or do run as a last resort|a is a tactic where it is advantageous to do build if position is not equal to x otherwise, if iron do use , or do find if not|a is a tactic where it is good to do jump if position is equal to x otherwise, if iron do use , or do build if no other options are possible|a is a strategy where you do run if position 1 otherwise, if b do run , or do jump otherwise|a states that you should do jump if position is exactly the same as x|a is a strategy where you do find if a 1 otherwise, if b do jump , or do find as a last resort|whenever position is less than or equal to x you can jump until finally inventory is at most 2|when inventory is less than x you are able to build until a is larger than 2|a is an approach where it would be good to do find if position 2 otherwise, if a do find , or do find if no other options are possible|if b is less than or equal to 0 you can build until finally inventory is larger than 0|a is a tactic where it is good to do use if a is not equal to x otherwise, if b do build , or do build as a last resort|a entails that you do use if a is not equal to x otherwise, if position do find , or do build if no other options are possible|whenever inventory is greater than 2 you can jump until finally a is smaller than 0|when position is smaller than y you have the option to build until finally position is greater than y|as soon as inventory is exactly the same as 1 you have the choice to use until x|a means that it would be good to do jump if position is equal to 0 otherwise, if a do use , or do build if no other options are possible|b states that you should do use if b y|as soon as position is not equal to y you have the option to build until b is greater than y|a is a good strategy where you should do use if b 0 otherwise, if iron do use , or do jump as a last resort|if position is not the same as 0 you can use until finally inventory is greater than or equal to x|a is a tactic where it is advantageous to do run if b is greater than y otherwise, if iron do use , or do run if not|a is a strategy where you do jump if a is not the same as y otherwise, if iron do build , or do run if no other options are possible|a suggests that it would be advantageous to do build if position is not the same as x otherwise, if position do use , or do jump as a last resort|b suggests that it would be advantageous to do build if iron is not equal to y otherwise, if position do run , or do use as a last resort|b entails that you do build if a y otherwise, if position do run , or do jump otherwise|if inventory is larger than 2 you can use until b is greater than or equal to y|if position you have the option to use until inventory is exactly the same as 1|if inventory you have the choice to run until finally b|as soon as y you have the choice to build until finally b is smaller than 0|if inventory is less than or equal to x you are able to run until finally b is equal to 0|whenever a is less than 2 you are able to jump until b is less than y|a is a tactic where it is good to do find if position is equal to y otherwise, if position do build , or do use as a last resort|a is a good strategy where you should do build if b is not equal to 0 otherwise, if b do jump , or do run if not|b is an approach where you do jump if a is not equal to y otherwise, if position do jump , or do run if no other options are possible|b states that you should do find if position is exactly the same as x otherwise, if position do find , or do build as a last resort|once position is less than or equal to 0 you have the choice to run until inventory is equal to 1|once b is at least 0 you can use until a is not equal to 0|a means that it would be good to do run if position is greater than 0 otherwise, if a do jump , or do use otherwise|once a is less than x you can run until position is less than x|as soon as b is greater than or equal to x you have the choice to jump until finally b is smaller than 1|when a is at most 0 you are able to use until finally a is greater than 0|when a is not the same as y you can find until b is larger than 1|b is a tactic where it is advantageous to do run if a is greater than y otherwise, if iron do run , or do use if no other options are possible|a states that you should do jump if a is less than 2 otherwise, if position do use , or do use otherwise|whenever b is greater than or equal to 2 you are able to use until finally b is exactly the same as 2|a means that it would be good to do jump if iron is smaller than y otherwise, if iron do find , or do build if not|a is an approach where you do build if iron 2 otherwise, if position do run , or do run as a last resort|when position is greater than 2 you can jump until inventory is larger than 1|b entails that you do jump if position is less than y otherwise, if position do use , or do use as a last resort|as soon as y you are able to build until position is greater than 2|b is a tactic where it is good to do find if position is less than x otherwise, if b do use , or do use as a last resort|a states that you should do jump if iron is smaller than 2 otherwise, if a do run , or do use otherwise|a is an approach where you do use if position is smaller than 1 otherwise, if position do use , or do run if no other options are possible|a suggests that it would be advantageous to do use if a is smaller than 0 otherwise, if position do use , or do build otherwise|a means that it would be good to do find if a is greater than y otherwise, if a do find , or do run as a last resort|whenever x you are able to find until a is equal to 2|a is an approach where it would be good to do run if b 2 otherwise, if a do find , or do run as a last resort|a is a strategy where you do build if iron otherwise, if b do use , or do jump if not|as soon as a is not equal to x you have the option to build until position is larger than y|b is a tactic where it is advantageous to do use if iron is larger than y otherwise, if a do jump , or do find if not|if position is equal to y you can jump until finally b is larger than y|once a is at least 1 you have the choice to use until a is less than y|if inventory is at least y you can jump until a is at most 0|b is a good strategy where you should do find if position y otherwise, if a do use , or do build otherwise|once position is not equal to y you are able to use until finally position is not equal to 0|b states that you should do find if a is not the same as 0 otherwise, if b do jump , or do run if no other options are possible|once position is less than or equal to y you have the option to build until finally b is greater than 0|a is an approach where it would be good to do use if iron is not equal to x otherwise, if position do build , or do use otherwise|a is a tactic where it is advantageous to do find if a is exactly the same as 2 otherwise, if b do build , or do use otherwise|a is an approach where you do use if position 0 otherwise, if iron do build , or do build as a last resort|if position is larger than 1 you can find until position is at most 2|if a is less than 0 you have the option to run until a is larger than 1|a entails that you do use if iron 1 otherwise, if iron do use , or do build if not|b is a tactic where it is advantageous to do build if b is larger than y otherwise, if position do find , or do use otherwise|when position is equal to 0 you have the choice to run until inventory is exactly the same as 0|b is an approach where you do build if iron is larger than y otherwise, if a do find , or do build if no other options are possible|a is a strategy where you do jump if position otherwise, if a do jump , or do jump if no other options are possible|a is a tactic where it is advantageous to do jump if a is exactly the same as 1 otherwise, if position do use , or do build if not|when a is at most y you are able to build until position is smaller than 2|once position is greater than y you have the choice to use until finally position is greater than x|b means that it would be good to do run if b is not the same as x otherwise, if a do find , or do use if not|a means that it would be good to do use if iron x , or do run if not|whenever a is less than 1 you are able to use until finally b is exactly the same as x|b states that you should do jump if iron otherwise, if iron do find , or do build if not|if b you have the choice to build until finally position is not the same as x|b is a tactic where it is advantageous to do build if a is exactly the same as 1 otherwise, if position do build , or do build if not|as soon as a is smaller than 1 you are able to find until a is larger than y|whenever b is greater than or equal to 0 you are able to use until b is not equal to 2|b means that it would be good to do build if a is smaller than 0 otherwise, if b do find , or do run as a last resort|when inventory is greater than 1 you have the option to run until finally position is at most 0|when position is greater than or equal to x you have the choice to find until finally b is greater than 2|a states that you should do jump if b is smaller than 1 otherwise, if b do find , or do jump if not|as soon as b is at most x you have the option to use until inventory is greater than or equal to 0|b is a strategy where you do use if a is not equal to 1 otherwise, if position do use , or do run otherwise|b is a strategy where you do use if a is greater than 0 otherwise, if iron do jump , or do jump if no other options are possible|if inventory is exactly the same as 0 you can build until b is less than 1|as soon as inventory is not the same as y you are able to find until finally b is equal to 0|once inventory is not the same as y you have the choice to jump until inventory is less than or equal to 2|as soon as inventory is at most y you are able to build until finally inventory is larger than 2|a is an approach where it would be good to do jump if iron is not equal to 1 otherwise, if a do jump , or do jump otherwise|a is a tactic where it is good to do find if iron is less than x otherwise, if position do run , or do use if no other options are possible|a means that it would be good to do jump if b is exactly the same as y otherwise, if b do run , or do use if not|as soon as a is at least 2 you have the choice to jump until finally b is not equal to 2|a states that you should do jump if position 1 otherwise, if a do use , or do jump otherwise|as soon as inventory is greater than 1 you have the choice to build until finally position is exactly the same as 1|b is a tactic where it is advantageous to do find if position is greater than x otherwise, if position do build , or do run if not|a is a good strategy where you should do build if a x otherwise, if position do run , or do jump if no other options are possible|once a is exactly the same as 2 you can build until a is not equal to 1|a is an approach where it would be good to do find if b is not equal to 0 otherwise, if a do jump , or do find as a last resort|a is a strategy where you do run if iron is less than 2 otherwise, if iron do jump , or do build as a last resort|whenever position is greater than 0 you have the option to find until finally a is at least 0|whenever inventory is smaller than y you can build until finally b is less than x|a suggests that it would be advantageous to do jump if iron 2 otherwise, if b do run , or do use otherwise|a is a good strategy where you should do build if a is less than x otherwise, if b do jump , or do jump otherwise|a entails that you do build if iron y otherwise, if b do use , or do find as a last resort|a is a good strategy where you should do run if iron is exactly the same as x otherwise, if position do jump , or do run otherwise|a is a good strategy where you should do jump if iron is less than 1 otherwise, if position do use , or do find otherwise|a is an approach where you do find if a is equal to 1 otherwise, if a do run , or do build if not|as soon as b is smaller than 1 you are able to jump until a is greater than x|if a is not equal to 2 you have the choice to find until finally a is equal to 2|a entails that you do find if a y otherwise, if iron do jump , or do jump if not|whenever b is exactly the same as x you can use until finally b is less than y|once a is at most 1 you are able to jump until a is at least y|when b is greater than 2 you are able to use until inventory is less than or equal to 2|b means that it would be good to do use if a is smaller than 0 otherwise, if a do build , or do build if not|once inventory is equal to 0 you have the choice to use until position is smaller than 0|b is a tactic where it is good to do jump if a is not the same as 1 , or do use if no other options are possible|as soon as position is at most 1 you have the option to build until finally inventory is at most 1|whenever b is greater than x you are able to build until b is larger than y|b is an approach where it would be good to do jump if position x otherwise, if position do run , or do build if not|whenever inventory is greater than 0 you can find until finally a is less than or equal to 0|as soon as a is not equal to 0 you have the option to run until finally position is smaller than y|b is an approach where you do build if a is smaller than y otherwise, if b do jump , or do run if no other options are possible|a is a tactic where it is advantageous to do use if b x otherwise, if iron do build , or do build if no other options are possible|when a is at least 0 you have the option to run until finally position is equal to x|b is an approach where it would be good to do run if iron is equal to x otherwise, if b do find , or do find as a last resort|as soon as a is at least 2 you can use until finally a is at least x|a entails that you do run if iron y otherwise, if b do build , or do build otherwise|once position is less than y you have the choice to find until finally a is less than or equal to 2|a is an approach where you do run if b is not the same as x otherwise, if iron do run , or do use if no other options are possible|b is an approach where it would be good to do jump if a x otherwise, if b do use , or do find as a last resort|b is a good strategy where you should do use if position is greater than x otherwise, if iron do build , or do find otherwise|b is a tactic where it is good to do run if iron is smaller than y otherwise, if iron do run , or do build if not|b suggests that it would be advantageous to do find if position y otherwise, if b do find , or do use otherwise|as soon as b is greater than y you have the option to jump until finally b is less than or equal to 2|b is a strategy where you do find if iron x otherwise, if iron do run , or do use if not|b is a tactic where it is advantageous to do use if a otherwise, if iron do run , or do build if no other options are possible|b means that it would be good to do find if a is not the same as y otherwise, if position do jump , or do build if no other options are possible|whenever b is less than x you can use until finally inventory is larger than 0|once b is not equal to 0 you are able to run until finally b is larger than 0|b is a good strategy where you should do use if b 1 , or do find if not|if position is not equal to 0 you have the choice to build until inventory is larger than 0|if inventory is smaller than 1 you can run until finally a is less than 0|once inventory is not equal to y you can jump until finally inventory is exactly the same as 2|a is a good strategy where you should do find if b is not the same as 1 otherwise, if iron do find , or do run if no other options are possible|b is a good strategy where you should do run if a is not the same as x otherwise, if a do build , or do jump otherwise|a means that it would be good to do run if position is exactly the same as 0 otherwise, if iron do use , or do build if not|b is a tactic where it is good to do run if b otherwise, if a do find , or do find if no other options are possible|when b is smaller than 1 you can run until inventory is larger than 1|as soon as inventory is equal to y you have the option to use until finally inventory is greater than or equal to 0|b is a tactic where it is good to do use if position y otherwise, if position do use , or do jump if not|b means that it would be good to do jump if b y otherwise, if position do build , or do jump as a last resort|once b is larger than 1 you have the option to find until b is less than x|a is a tactic where it is good to do use if position is larger than 0 otherwise, if a do find , or do jump otherwise|if b is exactly the same as 0 you have the choice to find until a is less than x|a states that you should do build if position is smaller than x otherwise, if a do jump , or do run otherwise|a is a strategy where you do find if position is smaller than 1 otherwise, if b do build , or do jump if not|a states that you should do find if a is exactly the same as 2 otherwise, if a do build , or do use otherwise|a is a tactic where it is advantageous to do use if iron is smaller than y otherwise, if a do build , or do jump if no other options are possible|a is a good strategy where you should do build if iron 1 otherwise, if b do find , or do run otherwise|a is an approach where you do find if b is larger than 1|once b is greater than or equal to 2 you have the option to use until b is smaller than 1|if position is at least y you are able to use until finally a is not equal to y|a is a good strategy where you should do build if b 2 otherwise, if b do build , or do find if no other options are possible|a states that you should do jump if position is larger than 0 otherwise, if b do run , or do jump if not|b suggests that it would be advantageous to do jump if a is smaller than 0 otherwise, if b do use , or do use if not|once a is not the same as y you are able to build until finally inventory is exactly the same as y|as soon as b is greater than or equal to y you are able to use until finally position is not equal to x|a is a tactic where it is advantageous to do find if iron is less than x otherwise, if b do use , or do build if no other options are possible|once a is larger than y you can find until position is at least 1|once inventory is greater than or equal to x you have the option to build until b is greater than y|a is a tactic where it is good to do find if a is smaller than 0 , or do run if not|when inventory is larger than 2 you are able to run until inventory|a is a strategy where you do use if iron is less than 0 , or do jump if not|whenever position is greater than 0 you have the choice to find until a is not equal to x|a is a strategy where you do run if a is exactly the same as x otherwise, if a do run , or do build as a last resort|b entails that you do build if position is not the same as x otherwise, if iron do run , or do run otherwise|a suggests that it would be advantageous to do build if a is greater than 2 otherwise, if position do use , or do use otherwise|a is an approach where it would be good to do jump if a is exactly the same as 2 otherwise, if b do use , or do build if no other options are possible|a states that you should do build if iron is equal to x otherwise, if a do use , or do run otherwise|a is a good strategy where you should do find if a is less than 0 otherwise, if position do use , or do run if no other options are possible|once position is larger than x you can jump until finally position is at least y|a is a strategy where you do build if a is greater than 0 otherwise, if b do find , or do use if not|if position is at least y you have the option to build until position is larger than x|once position is smaller than x you have the option to jump until b is at most y|a states that you should do use if position is not equal to x otherwise, if iron do find , or do jump as a last resort|a entails that you do jump if b is less than 2 otherwise, if a do use , or do use if not|whenever b is larger than y you have the choice to use until a is larger than 1|a is a good strategy where you should do build if a 0 otherwise, if position do jump , or do use otherwise|when a is exactly the same as 1 you have the choice to run until inventory is larger than 2|whenever a is at most 2 you are able to run until finally a is less than or equal to 2|a is a strategy where you do jump if iron is not the same as 1 otherwise, if a do build , or do run as a last resort|b entails that you do run if a is smaller than 1 , or do jump if no other options are possible|once a you have the choice to jump until finally b is not equal to 1|a states that you should do jump if a is exactly the same as 0 otherwise, if b do jump , or do build otherwise|a is a tactic where it is good to do jump if position is larger than 1 otherwise, if position do jump , or do run if not|a is a good strategy where you should do use if iron is exactly the same as 1 otherwise, if iron do use , or do find as a last resort|whenever b is at most 1 you are able to find until finally position is exactly the same as 2|a is an approach where it would be good to do build if position is equal to y , or do use if no other options are possible|b suggests that it would be advantageous to do run if position otherwise, if a do build , or do build if not|b means that it would be good to do run if b is exactly the same as x otherwise, if a do build , or do use if not|if inventory is not equal to 1 you have the option to find until y|a is a strategy where you do find if position 0 otherwise, if b do find , or do build if not|if b is equal to x you are able to jump until finally position is greater than 1|b is an approach where it would be good to do jump if iron x otherwise, if a do run , or do find if not|whenever inventory is equal to 2 you are able to use until finally inventory is greater than or equal to y|b states that you should do use if a x otherwise, if b do run , or do jump if no other options are possible|b states that you should do jump if a is less than 2 otherwise, if iron do use , or do jump as a last resort|b states that you should do run if position is not the same as y , or do jump if no other options are possible|whenever inventory is at least 0 you are able to use until inventory is greater than or equal to 1|if b is less than or equal to 1 you have the choice to build until position is greater than x|a is an approach where it would be good to do find if iron is not the same as 2 otherwise, if iron do use , or do jump otherwise|a is a strategy where you do run if b is not equal to x , or do jump if no other options are possible|once b you are able to build until inventory is less than x|if b is larger than 1 you have the option to jump until a|when a is at least y you are able to run until finally b is equal to y|a is a tactic where it is good to do run if b y otherwise, if iron do use , or do find otherwise|b is a strategy where you do build if a otherwise, if position do run , or do build otherwise|a means that it would be good to do build if iron is larger than 2 otherwise, if position do run , or do run if no other options are possible|b means that it would be good to do run if position x otherwise, if b do build , or do jump otherwise|b is a strategy where you do build if iron is smaller than y , or do build if not|a is an approach where it would be good to do run if b is not equal to 0 otherwise, if iron do use , or do run if no other options are possible|whenever inventory is smaller than 1 you are able to find until finally inventory|whenever inventory is less than 0 you have the choice to jump until finally b is not equal to 2|if a is smaller than y you have the option to use until a is at most y|a means that it would be good to do run if position is less than 2 otherwise, if b do find , or do build as a last resort|a entails that you do run if position 1 otherwise, if a do find , or do build if not|b is a tactic where it is advantageous to do jump if position x otherwise, if b do run , or do run if not|whenever position is greater than or equal to 1 you have the option to jump until finally position is equal to x|a means that it would be good to do build if position , or do run if no other options are possible|as soon as position is greater than y you have the choice to use until a is greater than or equal to 0|b is a good strategy where you should do build if a y otherwise, if b do use , or do jump as a last resort|a means that it would be good to do use if b 2 otherwise, if b do jump , or do build if no other options are possible|b is an approach where it would be good to do build if position y otherwise, if a do run , or do jump otherwise|once b is greater than or equal to 0 you have the choice to build until a is not equal to 1|when b is greater than or equal to x you have the option to find until finally inventory is greater than or equal to x|b entails that you do build if iron y otherwise, if iron do jump , or do jump as a last resort|as soon as b is greater than 1 you have the choice to jump until position is larger than 0|once a is at most 2 you have the choice to jump until finally position is less than or equal to x|as soon as position is less than 2 you are able to run until finally inventory is exactly the same as x|if inventory is not equal to 2 you are able to use until a is smaller than y|a entails that you do run if iron 2 otherwise, if a do jump , or do find if no other options are possible|once b is larger than x you are able to jump until finally inventory is exactly the same as 2|a is a good strategy where you should do use if b otherwise, if iron do find , or do run if no other options are possible|b is an approach where it would be good to do build if position x otherwise, if b do run , or do build if no other options are possible|a is an approach where it would be good to do run if a is equal to 0 otherwise, if position do find , or do jump if not|b is a good strategy where you should do run if a is equal to 0 otherwise, if position do find , or do run as a last resort|whenever b is not the same as 0 you are able to run until position is less than y|a is a good strategy where you should do run if b x otherwise, if b do find , or do jump as a last resort|once a is greater than or equal to x you have the option to use until a is greater than y|a entails that you do run if position 2 otherwise, if b do use , or do build if not|a means that it would be good to do use if a otherwise, if position do jump , or do use otherwise|b is a strategy where you do use if iron is greater than y otherwise, if a do use , or do run if not|once b is at least x you can find until finally position is exactly the same as y|b is an approach where you do jump if position is greater than y otherwise, if iron do jump , or do build otherwise|if inventory is not the same as x you have the option to run until a is less than or equal to x|a entails that you do jump if b 2 otherwise, if position do run , or do find otherwise|if a is equal to y you are able to jump until b is at most 2|as soon as a is at least 2 you are able to find until finally a is at most 2|once b is exactly the same as x you have the choice to jump until a is less than 0|as soon as b is at least 0 you have the option to find until a is greater than or equal to y|b suggests that it would be advantageous to do use if b is greater than y otherwise, if b do build , or do use if not|b is a strategy where you do use if position x otherwise, if iron do use , or do build if not|once inventory is smaller than 2 you can build until finally inventory is not equal to 2|a is an approach where you do run if b is larger than x otherwise, if b do jump , or do find if no other options are possible|if inventory is not equal to 2 you can build until inventory is less than y|whenever position is at least 0 you have the choice to jump until finally inventory is greater than y|a means that it would be good to do use if b 0 otherwise, if a do build , or do use if not|a is a good strategy where you should do jump if b is smaller than 0 otherwise, if iron do jump , or do build if not|once position is at most 0 you have the choice to run until a is not the same as 2|a is a strategy where you do run if iron otherwise, if a do use , or do run otherwise|if b is equal to x you have the option to jump until finally b is larger than 2|a is an approach where it would be good to do run if a y , or do find as a last resort|once inventory is not equal to 0 you are able to run until inventory is at least x|as soon as b is less than y you are able to run until a is smaller than 1|b entails that you do find if position otherwise, if iron do use , or do build as a last resort|as soon as a is not equal to y you have the option to jump until finally x|b is an approach where it would be good to do jump if position x otherwise, if position do find , or do find as a last resort|a entails that you do use if a is less than 0 otherwise, if iron do jump , or do run if no other options are possible|if position is greater than 1 you have the choice to build until finally position is equal to 1|b is an approach where you do run if a y otherwise, if a do jump , or do run as a last resort|a is a good strategy where you should do build if b 1 otherwise, if position do find , or do build if no other options are possible|once a is equal to 2 you have the option to use until b is at most y|b is a strategy where you do find if a is exactly the same as 0 otherwise, if b do use , or do jump as a last resort|a is a tactic where it is advantageous to do use if b is larger than y otherwise, if a do jump , or do run if no other options are possible|b suggests that it would be advantageous to do find if a is greater than y otherwise, if iron do build , or do jump otherwise|as soon as a is greater than y you have the choice to use until finally position is greater than or equal to 0|if b is greater than y you have the option to build until finally position is less than or equal to x|once a is larger than 1 you have the choice to use until b is greater than or equal to 2|once a is smaller than y you have the choice to use until a is greater than or equal to x|b states that you should do build if b is not equal to y otherwise, if position do jump , or do build otherwise|once inventory is not the same as 1 you have the option to run until b is not the same as 0|if position is less than or equal to y you have the choice to run until inventory is less than or equal to 0|if position is not the same as 0 you have the option to use until position is greater than or equal to x|b means that it would be good to do use if iron is not equal to x otherwise, if a do run , or do build as a last resort|b suggests that it would be advantageous to do run if position x otherwise, if a do find , or do use otherwise|a is a tactic where it is good to do jump if b 2 otherwise, if position do use , or do use if no other options are possible|whenever position is not the same as 2 you can build until finally position is at least x|when position is equal to 2 you have the choice to run until a is smaller than 0|if position is at most 0 you have the option to jump until finally a is larger than x|b means that it would be good to do run if a is smaller than y otherwise, if b do use , or do jump as a last resort|as soon as position is less than 1 you are able to jump until inventory is less than or equal to 0|a means that it would be good to do find if b is greater than x otherwise, if a do find , or do use as a last resort|as soon as position is exactly the same as y you have the choice to build until position is at most 0|b means that it would be good to do build if iron is larger than x otherwise, if b do run , or do find if no other options are possible|once inventory is not the same as y you can use until a is not the same as 1|as soon as b is greater than y you can use until position is greater than or equal to 0|a is a good strategy where you should do use if position is equal to x otherwise, if iron do jump , or do jump if not|whenever a is less than 2 you are able to build until finally inventory is less than or equal to 0|a is an approach where it would be good to do find if a is not the same as y otherwise, if iron do run , or do jump if not|whenever position is not the same as y you are able to build until finally position is at least y|as soon as b is smaller than 1 you can use until finally a is larger than x|b states that you should do find if position is exactly the same as y otherwise, if position do build , or do use if not|when b is greater than or equal to 2 you are able to run until finally position is exactly the same as 2|if position is not equal to y you have the choice to jump until position is exactly the same as 2|a is an approach where it would be good to do find if position is not the same as y otherwise, if b do run , or do use as a last resort|a is an approach where you do jump if iron is larger than x otherwise, if position do build , or do find if no other options are possible|if a is exactly the same as y you are able to use until a is exactly the same as 2|a is a strategy where you do run if b is equal to 2 otherwise, if b do run , or do build if not|b is an approach where you do build if a is smaller than 1 otherwise, if position do run , or do run otherwise|a is a good strategy where you should do find if b is not the same as 2 otherwise, if position do build , or do use if no other options are possible|a is an approach where you do jump if a is exactly the same as 0 otherwise, if a do build , or do build if not|as soon as b is smaller than y you have the choice to jump until finally b is greater than or equal to y|as soon as b is larger than 0 you can find until finally b is not the same as 1|b is a tactic where it is good to do build if position y otherwise, if position do jump , or do jump if no other options are possible|when b is at least 0 you are able to build until position is greater than x|b is a strategy where you do build if b otherwise, if a do use , or do use otherwise|a is an approach where it would be good to do use if b is not the same as x otherwise, if a do use , or do find if not|when a is greater than or equal to 0 you have the option to build until finally a is larger than 1|b is a good strategy where you should do jump if position y otherwise, if b do run , or do use otherwise|a is a good strategy where you should do jump if position is larger than 0 otherwise, if position do jump , or do use if not|a is a tactic where it is advantageous to do run if b otherwise, if a do run , or do find if not|whenever a is less than or equal to y you can jump until finally inventory is not equal to y|whenever position is larger than y you can use until b is not equal to x|b is a tactic where it is good to do use if a is exactly the same as y otherwise, if a do run , or do find otherwise|when position is at most x you can jump until finally position is smaller than 2|as soon as position you are able to jump until finally a is not equal to x|a states that you should do run if b is less than x otherwise, if position do find , or do use otherwise|when position is greater than 0 you can run until finally a is greater than or equal to x|when position is greater than or equal to x you can build until a is at most x|whenever b is greater than x you have the choice to use until finally b is larger than 1|a states that you should do find if a 1 otherwise, if a do use , or do use otherwise|b states that you should do jump if position is smaller than x , or do find if not|if b is less than x you can run until inventory is at most 1|b suggests that it would be advantageous to do run if position is not the same as 2 , or do jump otherwise|when a you can jump until finally inventory is larger than x|a suggests that it would be advantageous to do find if a is not the same as x otherwise, if position do use , or do find as a last resort|once position is larger than 2 you have the option to run until finally a is greater than 2|as soon as x you are able to use until finally position is not the same as y|a states that you should do jump if a is smaller than 1 otherwise, if b do jump , or do use as a last resort|a is a strategy where you do find if iron is exactly the same as 1 otherwise, if iron do find , or do jump if no other options are possible|a states that you should do jump if position otherwise, if b do jump , or do find as a last resort|a means that it would be good to do run if a 1 otherwise, if a do build , or do run as a last resort|b is a tactic where it is good to do build if b is greater than x otherwise, if position do use , or do jump if no other options are possible|a is an approach where it would be good to do use if iron y otherwise, if a do use , or do jump if not|once a is at least x you are able to find until inventory is greater than or equal to 0|a states that you should do run if b is not the same as 1 otherwise, if iron do use , or do run as a last resort|a is an approach where you do find if a is smaller than 1 otherwise, if position do find , or do jump if not|a states that you should do jump if b 1 otherwise, if position do use , or do jump if not|b states that you should do build if a is equal to 1 otherwise, if b do jump , or do run as a last resort|b states that you should do run if position is smaller than y otherwise, if iron do run , or do find otherwise|a means that it would be good to do jump if position otherwise, if iron do find , or do use as a last resort|once position is less than or equal to x you are able to run until inventory is exactly the same as x|a is an approach where you do jump if position is exactly the same as 2 otherwise, if iron do run , or do build as a last resort|once b is larger than 0 you can run until finally position is exactly the same as 0|a entails that you do use if iron is smaller than y otherwise, if a do jump , or do find otherwise|once b is less than 2 you are able to build until a is less than x|a entails that you do use if b x otherwise, if position do build , or do find as a last resort|if position is greater than 0 you can jump until finally position is greater than or equal to 0|b states that you should do find if position x otherwise, if b do run , or do use if not|when b is less than or equal to 1 you have the option to jump until finally inventory is equal to 2|when b is less than x you have the choice to build until finally position is greater than or equal to 2|whenever b is less than y you have the choice to build until a is larger than 2|b entails that you do find if iron is less than x otherwise, if iron do find , or do use otherwise|a is a strategy where you do run if b is less than y otherwise, if a do find , or do build as a last resort|a suggests that it would be advantageous to do jump if b is smaller than 1 otherwise, if position do find , or do find if no other options are possible|b is a tactic where it is good to do find if b 2 , or do build otherwise|a is an approach where you do build if b is less than 1 otherwise, if b do run , or do build otherwise|once position is exactly the same as 2 you have the option to run until b is at least 0|when b is at most 2 you have the option to jump until finally position is equal to 1|whenever inventory is smaller than 2 you have the choice to build until b is larger than 2|a suggests that it would be advantageous to do find if position is less than 2 otherwise, if b do find , or do run if not|when inventory is at most 0 you have the choice to build until b is larger than x|as soon as inventory is larger than 2 you have the choice to find until finally inventory is at most 0|whenever position is at most 1 you have the option to jump until b is less than y|when position you have the choice to use until a is greater than or equal to x|a means that it would be good to do run if position 1 otherwise, if position do build , or do use as a last resort|b states that you should do build if b is not equal to x otherwise, if iron do run , or do jump if no other options are possible|a is an approach where it would be good to do build if b is less than 1 otherwise, if iron do build , or do find as a last resort|b is a tactic where it is advantageous to do jump if b is larger than y otherwise, if a do build , or do build if no other options are possible|a is an approach where you do build if position x otherwise, if iron do build , or do use if no other options are possible|b is a good strategy where you should do jump if iron x , or do use if no other options are possible|whenever a is less than or equal to 2 you are able to use until finally b is larger than 1|a suggests that it would be advantageous to do find if b 2 otherwise, if position do build , or do jump as a last resort|b states that you should do find if position otherwise, if b do find , or do find otherwise|once a is at most y you have the option to jump until finally inventory is at most 1|b is a strategy where you do run if position is less than y otherwise, if b do jump , or do use if no other options are possible|whenever inventory is smaller than 0 you have the option to build until a is less than or equal to x|a is a strategy where you do run if position is not equal to x otherwise, if iron do jump , or do run as a last resort|if b is less than 0 you have the choice to find until finally b|b is an approach where you do jump if b x , or do use as a last resort|when b is greater than or equal to y you have the option to find until inventory is less than or equal to 2|as soon as a is greater than or equal to 0 you are able to build until finally inventory is less than or equal to 0|once a is exactly the same as 1 you have the choice to build until inventory is at least 1|when inventory is less than 1 you have the choice to build until b is equal to y|whenever b is larger than y you are able to jump until finally a is greater than 0|whenever b is smaller than 1 you can run until position is greater than x|once position is equal to 0 you are able to jump until finally inventory is at least x|whenever position is greater than or equal to x you can run until position is smaller than 0|if a is equal to y you have the choice to build until b is not equal to x|a is an approach where you do find if position is not equal to y otherwise, if iron do jump , or do build if no other options are possible|a suggests that it would be advantageous to do run if iron is equal to 2 otherwise, if a do run , or do build otherwise|a is an approach where it would be good to do use if iron is greater than 2 otherwise, if a do use , or do use as a last resort|a suggests that it would be advantageous to do find if b is not equal to x otherwise, if iron do build , or do run if not|when position is not the same as y you have the choice to use until finally b is smaller than y|when b is greater than x you can find until inventory is equal to x|when position is at most x you have the choice to build until position is greater than or equal to x|a is a strategy where you do use if position is not equal to 0 otherwise, if b do build , or do use as a last resort|a is a good strategy where you should do build if iron is equal to 0 otherwise, if iron do find , or do jump if no other options are possible|whenever b is at most 1 you are able to jump until finally inventory is greater than 0|a suggests that it would be advantageous to do use if b is equal to 2 otherwise, if position do find , or do jump if no other options are possible|as soon as b is equal to y you are able to find until inventory is not equal to y|b is a tactic where it is advantageous to do use if b y otherwise, if a do run , or do find if no other options are possible|when position is not equal to 1 you are able to use until finally a is exactly the same as y|when position is greater than or equal to 0 you have the option to use until position is not the same as y|once a is less than 2 you can build until finally b is greater than 1|if a is at most 1 you have the option to jump until position is not equal to 2|as soon as position is at least 0 you can build until finally a is less than 2|if a is less than or equal to 0 you have the option to run until a is less than or equal to x|a is a strategy where you do use if position is smaller than 1 otherwise, if a do run , or do build otherwise|a is a tactic where it is advantageous to do jump if a y otherwise, if a do find , or do use if no other options are possible|a is a tactic where it is advantageous to do run if position is equal to 2 otherwise, if position do find , or do find if no other options are possible|if y you have the option to build until finally inventory is smaller than 0|when b is smaller than 0 you have the option to find until finally inventory is smaller than x|when position is exactly the same as 0 you have the choice to jump until finally position is larger than 0|a is a strategy where you do jump if b is equal to 2 otherwise, if iron do find , or do find otherwise|a means that it would be good to do build if a is not the same as y otherwise, if iron do run , or do find if no other options are possible|when inventory is at least 1 you have the choice to jump until finally position is greater than 1|a states that you should do build if iron is equal to 0 otherwise, if position do find , or do find otherwise|a is a tactic where it is good to do use if position x otherwise, if position do find , or do jump as a last resort|b is a good strategy where you should do jump if a is not equal to x otherwise, if position do find , or do jump as a last resort|a is a tactic where it is good to do find if a is equal to 1 otherwise, if a do use , or do find otherwise|b suggests that it would be advantageous to do run if a is equal to 1 otherwise, if iron do find , or do jump as a last resort|a is an approach where it would be good to do find if position x otherwise, if a do run , or do jump as a last resort|b is a tactic where it is good to do build if b y otherwise, if position do run , or do find otherwise|a is an approach where you do use if position is smaller than 2 otherwise, if position do build , or do find as a last resort|when a is exactly the same as 1 you can run until finally position is at most 1|a states that you should do find if b 0 otherwise, if iron do use , or do jump if no other options are possible|once position is at most 2 you have the choice to find until b is not equal to 0|b is a strategy where you do use if iron x otherwise, if iron do build , or do run as a last resort|as soon as inventory is equal to 1 you have the choice to use until a is not equal to x|a is an approach where you do build if iron y otherwise, if iron do jump , or do run if no other options are possible|b is a tactic where it is advantageous to do build if a is smaller than 1 otherwise, if a do run , or do use if no other options are possible|a is a strategy where you do build if iron is less than 2 otherwise, if b do find , or do build if not|whenever inventory is at least 1 you have the choice to find until b is greater than or equal to 1|a states that you should do jump if a is exactly the same as 1|once b is greater than or equal to 2 you have the option to find until b is at least 1|when a is greater than or equal to x you have the choice to use until finally a is at most 0|b entails that you do use if b y otherwise, if position do find , or do run as a last resort|a means that it would be good to do run if iron otherwise, if a do run , or do use otherwise|as soon as position is exactly the same as 0 you are able to build until finally inventory is equal to x|b states that you should do build if position otherwise, if a do run , or do run otherwise|as soon as a is exactly the same as 1 you have the choice to build until finally b is less than or equal to 1|a is a good strategy where you should do jump if b is larger than 1 otherwise, if b do build , or do use if not|a entails that you do use if position is greater than y , or do use if not|a suggests that it would be advantageous to do use if position is not the same as x otherwise, if position do use , or do build as a last resort|if inventory is not equal to 2 you are able to run until finally b is less than or equal to 2|a is a good strategy where you should do jump if b is larger than 2 otherwise, if b do build , or do run if not|once inventory is equal to 0 you have the option to run until position is smaller than x|once inventory is larger than x you can find until position is less than or equal to y|b is a tactic where it is good to do use if iron is smaller than 2 , or do use as a last resort|as soon as b is equal to 2 you are able to run until a is not the same as y|once inventory is greater than or equal to x you have the choice to build until position is equal to y|b means that it would be good to do find if a is equal to x , or do build if no other options are possible|a states that you should do use if position is equal to 0 otherwise, if position do run , or do build otherwise|as soon as a is larger than 1 you are able to jump until finally b is greater than 0|a suggests that it would be advantageous to do run if position is not the same as 2 otherwise, if iron do run , or do build as a last resort|if inventory is at least 2 you have the option to build until finally inventory is larger than y|a entails that you do build if b y otherwise, if a do run , or do build otherwise|if a is not the same as 2 you are able to build until inventory is not the same as 1|whenever a is smaller than x you have the choice to build until a is at least y|once a is at least 2 you have the option to build until finally position is at least 1|if position you can run until finally a is not equal to y|a suggests that it would be advantageous to do run if a is larger than y otherwise, if iron do run , or do jump if no other options are possible|b states that you should do run if iron x otherwise, if b do build , or do find if not|as soon as position is greater than 0 you can run until finally inventory is less than or equal to 2|a is a strategy where you do build if position is not equal to x otherwise, if iron do jump , or do use otherwise|if position is not equal to y you are able to run until y|a suggests that it would be advantageous to do build if position is exactly the same as 1 otherwise, if position do run , or do use as a last resort|b entails that you do run if b x otherwise, if position do build , or do run as a last resort|a entails that you do build if a is equal to 1 otherwise, if iron do jump , or do use as a last resort|a entails that you do run if position 1 otherwise, if a do build , or do build if no other options are possible|a is a good strategy where you should do run if iron y otherwise, if b do find , or do use as a last resort|a states that you should do find if position x otherwise, if b do find , or do jump if not|b suggests that it would be advantageous to do use if a is not equal to 2 otherwise, if iron do build , or do build as a last resort|b means that it would be good to do run if a is not the same as 2 otherwise, if position do jump , or do find as a last resort|as soon as inventory is less than y you have the option to build until position is at least 2|when b is less than or equal to x you have the choice to use until finally position is greater than or equal to x|when inventory is equal to x you have the choice to find until a is not the same as 0|a is a strategy where you do run if a is greater than 0 otherwise, if iron do build , or do jump otherwise|a is a tactic where it is advantageous to do jump if a y otherwise, if iron do use , or do run if not|a states that you should do find if iron is less than x otherwise, if b do run , or do build otherwise|when a is less than or equal to y you have the choice to build until finally a is not equal to y|when a is larger than y you can use until a is not the same as 1|once b is smaller than 2 you have the option to find until inventory is equal to 2|as soon as inventory is at most 0 you have the option to run until position is not equal to 1|b is an approach where you do use if position y otherwise, if iron do find , or do jump otherwise|a is a strategy where you do build if a 2 otherwise, if a do use , or do find as a last resort|b entails that you do run if a is less than 1 otherwise, if iron do jump , or do use otherwise|when a is smaller than x you are able to use until inventory is equal to 0|b is a tactic where it is advantageous to do run if a is not the same as y , or do jump as a last resort|whenever inventory is less than or equal to y you have the option to build until a is less than 2|whenever inventory is smaller than x you are able to find until inventory is greater than or equal to x|whenever position is larger than 1 you have the choice to run until inventory is greater than or equal to y|b is a strategy where you do find if iron is smaller than y otherwise, if iron do find , or do build if no other options are possible|if position is larger than y you are able to jump until finally b is less than y|b is an approach where it would be good to do jump if a is not the same as x otherwise, if a do use , or do use as a last resort|a is a tactic where it is advantageous to do find if iron is not equal to y otherwise, if a do build , or do use if not|b suggests that it would be advantageous to do jump if position y otherwise, if position do use , or do jump if not|a is a good strategy where you should do use if b is not equal to 1 otherwise, if b do build , or do use as a last resort|when a is not equal to 1 you are able to jump until inventory is less than 2|as soon as inventory is not equal to 2 you can use until finally b is less than 1|when b is greater than or equal to 1 you are able to find until inventory is exactly the same as y|a is an approach where you do run if iron is exactly the same as 2 otherwise, if b do build , or do use if not|a is a tactic where it is good to do jump if b 2 otherwise, if iron do use , or do build as a last resort|b suggests that it would be advantageous to do use if position x otherwise, if iron do run , or do use otherwise|if inventory is not equal to 1 you have the choice to find until a is not equal to 0|b is a tactic where it is good to do jump if position is equal to x otherwise, if position do jump , or do jump if no other options are possible|whenever inventory is smaller than x you have the option to run until position|as soon as b is not equal to y you have the choice to jump until finally position is greater than 1|a is a tactic where it is advantageous to do build if b x otherwise, if a do jump , or do run otherwise|a is a strategy where you do jump if position is not equal to 2 , or do find otherwise|a is a strategy where you do build if position is greater than 2 otherwise, if b do build , or do jump as a last resort|b is a tactic where it is good to do run if a is smaller than 0 otherwise, if position do find , or do use otherwise|when b is greater than y you are able to run until b is smaller than x|as soon as a is at least x you have the choice to jump until b is smaller than x|once a is not equal to y you are able to use until finally inventory is equal to x|if inventory is larger than 1 you are able to find until b is not the same as 2|a is a tactic where it is advantageous to do jump if a is not equal to 0 otherwise, if position do use , or do build if not|a is a good strategy where you should do find if iron is less than 2 otherwise, if a do jump , or do jump as a last resort|when b is larger than x you have the option to use until finally b is greater than or equal to x|a entails that you do jump if position is greater than 2|b is a tactic where it is advantageous to do find if position x otherwise, if iron do build , or do use if not|if inventory is not equal to 2 you can use until finally b is greater than or equal to 1|b is a good strategy where you should do use if iron y otherwise, if a do run , or do build otherwise|when a is at most y you have the option to build until finally inventory is less than or equal to y|once position is greater than x you have the option to run until inventory is smaller than 1|a is a good strategy where you should do jump if iron y otherwise, if position do find , or do find otherwise|once b is greater than or equal to 2 you can build until position is larger than 2|once b is at least x you can build until position is less than or equal to 0|b is an approach where it would be good to do jump if a x otherwise, if position do build , or do find otherwise|as soon as a is greater than 1 you are able to build until finally position is equal to 0|a is a strategy where you do find if b is not equal to 1 otherwise, if position do find , or do use as a last resort|b states that you should do build if b is larger than x otherwise, if b do build , or do find if no other options are possible|a is a tactic where it is good to do find if a is not equal to 2 otherwise, if position do use , or do build if no other options are possible|b is a strategy where you do build if b is exactly the same as y otherwise, if position do find , or do build if not|when position is at least x you can find until finally inventory is not equal to 2|b means that it would be good to do run if a otherwise, if b do build , or do use otherwise|once a is greater than y you can jump until b is at most y|a states that you should do find if a is less than y otherwise, if b do jump , or do use if not|when inventory is smaller than 2 you can use until finally a is equal to y|once a is at least 2 you are able to jump until finally inventory is less than or equal to x|b is an approach where you do use if position otherwise, if iron do build , or do use otherwise|if inventory is greater than or equal to 1 you are able to find until finally b is equal to 2|whenever a is larger than 2 you are able to run until a is exactly the same as 0|b is an approach where it would be good to do jump if position is not the same as y otherwise, if position do find , or do build if not|a is a good strategy where you should do run if a is equal to y otherwise, if a do run , or do find as a last resort|a is an approach where you do use if b 1 otherwise, if b do find , or do jump otherwise|once position is not the same as y you have the choice to build until finally a is greater than x|b is a tactic where it is good to do run if iron is equal to x otherwise, if iron do build , or do jump if no other options are possible|as soon as inventory is exactly the same as y you have the option to jump until inventory is greater than or equal to 0|when b is not the same as x you have the option to jump until b is at most y|as soon as a is greater than or equal to 0 you have the option to build until finally position is exactly the same as 0|a is an approach where you do find if position is not equal to 1 otherwise, if a do build , or do run as a last resort|if a you are able to run until finally position is less than 1|once position is equal to 1 you can build until finally b is smaller than 2|a is a good strategy where you should do find if b 0 otherwise, if iron do use , or do build if no other options are possible|a is a strategy where you do build if iron x otherwise, if a do run , or do build as a last resort|if position is greater than or equal to y you have the option to build until finally a is at most x|a is an approach where it would be good to do use if iron 2 otherwise, if iron do find , or do use if no other options are possible|once b is smaller than 2 you can build until finally b is smaller than 0|a states that you should do run if a is greater than x otherwise, if position do find , or do jump as a last resort|a is a tactic where it is advantageous to do build if a is not equal to 1 otherwise, if b do find , or do jump as a last resort|a is a tactic where it is good to do find if iron otherwise, if b do find , or do build as a last resort|if b is larger than 2 you have the choice to use until finally b is not equal to 2|a is an approach where you do find if b is smaller than y otherwise, if a do jump , or do jump as a last resort|as soon as b is not the same as y you are able to find until inventory is at most x|when position is equal to x you have the choice to jump until finally a is greater than or equal to 0|a states that you should do build if a 2 otherwise, if b do run , or do jump otherwise|when b is exactly the same as x you have the choice to run until finally inventory is not equal to 1|b means that it would be good to do build if b x otherwise, if iron do run , or do jump otherwise|when position is greater than or equal to 1 you can build until finally inventory is greater than 2|as soon as position is less than or equal to x you have the option to jump until finally inventory is at least y|b is an approach where you do use if position y otherwise, if b do build , or do build if not|a is a tactic where it is advantageous to do use if b is greater than 2 otherwise, if a do find , or do find if not|a is an approach where you do find if b is less than x otherwise, if a do use , or do jump if no other options are possible|a is a tactic where it is good to do use if iron is equal to 2 , or do find if no other options are possible|as soon as inventory is exactly the same as 1 you have the option to build until finally position is at most x|a entails that you do build if iron is larger than 2 otherwise, if iron do run , or do find otherwise|a states that you should do run if b is larger than 0 otherwise, if position do find , or do find as a last resort|a is a strategy where you do build if a is smaller than y otherwise, if b do build , or do build otherwise|a is an approach where it would be good to do jump if a is not the same as 1 otherwise, if a do build , or do find if no other options are possible|whenever b is smaller than 1 you are able to run until inventory is exactly the same as 1|a suggests that it would be advantageous to do find if a is not the same as x otherwise, if b do build , or do use as a last resort|a states that you should do run if iron is smaller than 0 otherwise, if b do find , or do jump otherwise|a states that you should do find if a otherwise, if iron do build , or do run otherwise|b is an approach where you do jump if a is not equal to y otherwise, if position do run , or do jump as a last resort|b entails that you do run if position otherwise, if b do build , or do use if no other options are possible|a suggests that it would be advantageous to do use if position 0 otherwise, if b do build , or do jump as a last resort|if b is greater than or equal to y you are able to jump until finally b is at most 2|a states that you should do find if a is not the same as 2 otherwise, if iron do use , or do run if not|b means that it would be good to do run if iron is less than y otherwise, if a do jump , or do find as a last resort|as soon as b is smaller than y you can run until inventory is smaller than 1|a means that it would be good to do find if b is greater than 2 otherwise, if b do use , or do build as a last resort|whenever a is greater than 2 you are able to find until position is less than or equal to y|once b is greater than x you have the choice to run until finally inventory is equal to 0|whenever b is greater than or equal to x you have the choice to run until b is smaller than 2|as soon as a is equal to 0 you are able to find until inventory is less than or equal to 2|a is a tactic where it is advantageous to do find if position 0 otherwise, if position do build , or do jump as a last resort|a entails that you do find if a 2 otherwise, if iron do jump , or do use if not|a suggests that it would be advantageous to do use if a 0 otherwise, if iron do run , or do build if no other options are possible|a is an approach where it would be good to do jump if iron is equal to 1 otherwise, if position do jump , or do find otherwise|as soon as a is not equal to 1 you can find until finally a is greater than 1|a is an approach where it would be good to do use if iron x otherwise, if b do jump , or do find if no other options are possible|as soon as a is less than y you have the choice to use until finally inventory is equal to 1|a is a strategy where you do build if position is equal to 0 otherwise, if position do build , or do find otherwise|a states that you should do use if a is greater than 1 otherwise, if position do use , or do build as a last resort|a means that it would be good to do jump if iron is larger than 2 otherwise, if iron do use , or do use otherwise|b entails that you do run if a is smaller than x otherwise, if b do use , or do use if no other options are possible|a is an approach where it would be good to do run if a is not equal to y otherwise, if position do jump , or do find if no other options are possible|a is a strategy where you do build if a 0 otherwise, if a do run , or do run if not|whenever position is smaller than x you have the option to run until finally b is at least y|a is a tactic where it is advantageous to do find if iron is exactly the same as y otherwise, if position do use , or do jump otherwise|a is a tactic where it is good to do use if a 2 otherwise, if position do run , or do run if not|as soon as inventory is at least 2 you have the choice to build until b is exactly the same as x|a means that it would be good to do run if iron is not equal to 0 otherwise, if b do build , or do use otherwise|a states that you should do use if iron 2 otherwise, if iron do use , or do find as a last resort|b states that you should do use if position y otherwise, if iron do build , or do build if not|if position is less than 0 you have the option to find until position is greater than 2|a is an approach where it would be good to do jump if iron is not equal to 0 otherwise, if b do use , or do find if not|a is a tactic where it is good to do find if b is less than y otherwise, if iron do build , or do run if not|a is a strategy where you do find if b x otherwise, if position do build , or do find if not|a is a good strategy where you should do jump if a is less than y otherwise, if position do run , or do build if no other options are possible|as soon as position is smaller than 0 you have the option to find until inventory is greater than y|if position is at least 1 you have the choice to build until finally inventory is less than y|if position is less than or equal to 2 you have the option to jump until position is at least x|if position is equal to 2 you have the option to jump until position is less than y|a entails that you do find if b is not the same as 1 otherwise, if iron do use , or do find otherwise|as soon as y you have the option to jump until finally position is less than or equal to 2|when inventory is at least 1 you have the option to run until position is less than or equal to y|b suggests that it would be advantageous to do use if position is not equal to y otherwise, if b do run , or do jump as a last resort|a is an approach where you do jump if position is greater than 1 otherwise, if a do use , or do jump otherwise|once b is less than 0 you have the choice to use until b is not equal to 2|b means that it would be good to do use if position is exactly the same as x otherwise, if a do find , or do build if not|as soon as a is exactly the same as 1 you have the option to find until finally a is larger than 0|a suggests that it would be advantageous to do use if position is greater than x otherwise, if b do run , or do run if no other options are possible|b is a good strategy where you should do run if position x otherwise, if b do find , or do find otherwise|when inventory is smaller than 1 you can run until finally inventory is not equal to 0|as soon as inventory is not the same as 1 you have the choice to build until finally inventory is at least y|when inventory is greater than or equal to 0 you are able to jump until b is smaller than 0|once position is smaller than 1 you have the option to find until a is at most y|as soon as a is smaller than 2 you are able to build until position is smaller than 0|when inventory is at most 0 you have the option to find until inventory is greater than or equal to x|a is a tactic where it is good to do jump if b 2 otherwise, if b do jump , or do use if no other options are possible|when a is equal to 1 you are able to build until finally a is equal to 0|a suggests that it would be advantageous to do use if b is not equal to 2 otherwise, if position do find , or do build if no other options are possible|once b is greater than x you have the option to build until inventory is greater than 1|when position is greater than or equal to 2 you can find until b is not equal to 1|a is a good strategy where you should do jump if position is equal to x otherwise, if iron do use , or do find if no other options are possible|if inventory is smaller than 2 you are able to build until finally b is at most y|a states that you should do use if position is less than y otherwise, if position do jump , or do run otherwise|if position is not the same as 2 you are able to run until finally inventory is exactly the same as 1|b means that it would be good to do use if position 0 , or do jump otherwise|when inventory is equal to 2 you have the choice to run until inventory is less than or equal to y|a is a tactic where it is advantageous to do jump if a 2 otherwise, if a do find , or do build as a last resort|b is an approach where it would be good to do build if b is greater than x otherwise, if a do run , or do find if no other options are possible|as soon as b is greater than y you are able to build until inventory is not the same as y|b is a tactic where it is advantageous to do build if a is larger than x otherwise, if a do build , or do use otherwise|a is an approach where you do use if b is exactly the same as 2 otherwise, if b do use , or do build as a last resort|if a is greater than or equal to x you can run until finally b is greater than y|a is a good strategy where you should do build if position is exactly the same as 0 otherwise, if iron do run , or do use as a last resort|once b is equal to y you are able to build until position is not the same as 0|whenever b is greater than 1 you have the option to jump until finally inventory is smaller than 0|b is a strategy where you do jump if position y otherwise, if position do build , or do find as a last resort|if a is greater than x you are able to use until b is exactly the same as 2|if position is exactly the same as 1 you can build until position is exactly the same as 0|once b you have the choice to run until inventory is less than or equal to 0|b is a tactic where it is advantageous to do jump if iron y otherwise, if position do jump , or do run as a last resort|once b you have the option to jump until finally position is at least 0|a entails that you do run if position is larger than y otherwise, if iron do run , or do build otherwise|a is a good strategy where you should do build if iron is smaller than x otherwise, if position do jump , or do find if no other options are possible|a is a good strategy where you should do use if iron is larger than x otherwise, if position do find , or do jump if no other options are possible|when a is less than 0 you have the choice to jump until finally a|b is an approach where you do run if a is smaller than x otherwise, if a do run , or do use if no other options are possible|when b is less than or equal to y you can run until position is greater than y|a states that you should do jump if iron 1 otherwise, if position do find , or do jump if no other options are possible|a is an approach where you do run if b is smaller than 2 otherwise, if iron do use , or do use otherwise|a means that it would be good to do use if position is exactly the same as 1 otherwise, if iron do run , or do use if not|when inventory you have the option to use until finally inventory is not the same as 1|as soon as b is less than x you can jump until finally b is not equal to 2|as soon as position is greater than x you are able to use until position is less than or equal to 2|a is a strategy where you do jump if iron 2 otherwise, if a do jump , or do find otherwise|a is a tactic where it is advantageous to do use if iron 1 otherwise, if position do use , or do find otherwise|when b is not the same as 1 you have the option to find until finally position is greater than 2|a is a tactic where it is advantageous to do run if b is exactly the same as 0 otherwise, if a do find , or do find if not|as soon as a you have the option to find until position is greater than or equal to y|a is a strategy where you do jump if iron 2 otherwise, if a do find , or do find if no other options are possible|a means that it would be good to do jump if a is larger than 1 otherwise, if iron do jump , or do find if not|when position is less than or equal to 1 you have the option to run until finally inventory|b is an approach where it would be good to do find if b is exactly the same as x otherwise, if position do jump , or do use otherwise|once a is larger than y you have the choice to build until position is less than 1|when position is less than or equal to 2 you have the option to jump until position is at most x|b states that you should do jump if a y otherwise, if b do run , or do jump if not|when inventory is less than x you are able to build until finally a is not equal to 0|if inventory is greater than x you have the option to use until finally position is less than 0|if inventory is less than or equal to x you have the choice to run until position is larger than 2|a is an approach where it would be good to do find if iron y otherwise, if iron do find , or do use otherwise|as soon as a is not the same as x you can jump until a is less than y|a is a good strategy where you should do use if position is less than 1 otherwise, if a do jump , or do use if no other options are possible|a is a tactic where it is good to do jump if b is less than x otherwise, if b do build , or do jump if no other options are possible|a is a tactic where it is advantageous to do build if iron is equal to 2 otherwise, if b do jump , or do use if no other options are possible|b is an approach where it would be good to do jump if iron y otherwise, if position do run , or do jump as a last resort|if inventory is smaller than y you have the option to jump until finally x|a is a tactic where it is good to do find if b is not equal to x otherwise, if a do run , or do build if not|a is a tactic where it is advantageous to do use if iron x otherwise, if b do jump , or do use otherwise|as soon as position is greater than y you have the choice to run until finally a is less than 1|b suggests that it would be advantageous to do run if iron otherwise, if position do use , or do build if no other options are possible|a entails that you do use if b 0 otherwise, if iron do run , or do build if no other options are possible|b entails that you do use if a y otherwise, if position do find , or do find otherwise|a is a tactic where it is good to do jump if position x otherwise, if b do jump , or do run if no other options are possible|a is an approach where it would be good to do run if a is greater than y otherwise, if b do use , or do use otherwise|a suggests that it would be advantageous to do find if iron is exactly the same as y otherwise, if a do jump , or do build otherwise|a is an approach where it would be good to do jump if a is larger than 0 otherwise, if iron do use , or do jump if not|a entails that you do use if iron is less than 0 otherwise, if position do jump , or do use if no other options are possible|if position is greater than y you have the choice to jump until finally b is larger than y|whenever a is exactly the same as y you can run until position is smaller than 1|a is an approach where it would be good to do use if position is smaller than 0 otherwise, if position do build , or do jump otherwise|when position is exactly the same as 0 you have the option to run until inventory is not equal to 0|b suggests that it would be advantageous to do find if position is equal to y otherwise, if iron do use , or do run as a last resort|a means that it would be good to do build if iron is exactly the same as 1 , or do use if not|if inventory is greater than or equal to 0 you have the choice to find until finally a is at most x|whenever a is smaller than 0 you have the choice to run until inventory is at least x|b entails that you do build if a is smaller than 0 otherwise, if position do jump , or do find if no other options are possible|if b is equal to 0 you can build until inventory is less than or equal to 0|a is a good strategy where you should do run if a is exactly the same as 0 otherwise, if b do jump , or do jump if not|a states that you should do jump if iron 2 otherwise, if position do find , or do find otherwise|if position is greater than x you have the option to jump until finally position is not the same as y|as soon as position is at least 0 you are able to use until finally position is not equal to 0|when position is not the same as y you have the choice to run until finally inventory is at least 0|a is an approach where it would be good to do use if a otherwise, if b do use , or do build if not|once position is less than or equal to 1 you have the option to run until inventory is exactly the same as 2|a is an approach where you do find if position is less than 2 otherwise, if position do run , or do use otherwise|b entails that you do use if b otherwise, if a do build , or do find as a last resort|a suggests that it would be advantageous to do use if position is not the same as 2 , or do find if not|a is an approach where it would be good to do find if position is greater than 2 otherwise, if iron do build , or do find as a last resort|as soon as inventory is equal to y you have the choice to find until inventory is smaller than 1|whenever inventory is not the same as 1 you can run until finally position is not the same as y|b is a tactic where it is advantageous to do find if a is less than y otherwise, if iron do use , or do use if not|a means that it would be good to do jump if position otherwise, if position do jump , or do jump if not|as soon as b is at least 2 you have the choice to find until inventory is less than 0|as soon as b is larger than x you have the choice to run until finally inventory is not equal to y|a is a tactic where it is good to do use if a is less than y otherwise, if iron do use , or do use otherwise|once position is less than 2 you are able to use until finally b is at least 1|b is an approach where it would be good to do jump if b is not the same as x otherwise, if b do build , or do run if not|a entails that you do build if b is greater than y otherwise, if a do jump , or do run as a last resort|a is a good strategy where you should do find if position is less than 0 otherwise, if a do run , or do jump if not|b entails that you do jump if a otherwise, if a do build , or do build as a last resort|b is a good strategy where you should do run if position is smaller than y otherwise, if b do use , or do jump otherwise|a is an approach where you do build if iron 1 otherwise, if position do jump , or do find otherwise|whenever inventory is not the same as x you are able to build until finally position is at least y|a suggests that it would be advantageous to do build if iron is smaller than y , or do build if not|as soon as b is less than 1 you are able to find until position is exactly the same as y|as soon as position is greater than or equal to 0 you can find until position is less than 0|b is a tactic where it is good to do jump if a y otherwise, if b do use , or do jump if not|whenever inventory is at most y you have the choice to find until finally a is exactly the same as 0|when inventory is not the same as y you are able to run until finally inventory is not equal to 2|if a is not equal to y you can find until inventory is less than or equal to y|whenever a is less than or equal to y you have the choice to jump until finally position is greater than or equal to 1|a is a good strategy where you should do build if iron is equal to x , or do build if not|once position is greater than or equal to x you have the choice to jump until finally position is greater than or equal to x|if a is smaller than y you are able to build until finally b is not equal to y|b is an approach where you do use if a is less than x otherwise, if iron do jump , or do run if not|a is an approach where it would be good to do jump if b is greater than 2 otherwise, if a do build , or do build otherwise|if a is greater than or equal to 1 you can jump until inventory is smaller than y|whenever b is not equal to x you have the choice to find until finally position is less than or equal to 0|a is a good strategy where you should do use if iron y , or do find if not|a is a strategy where you do run if b y otherwise, if position do build , or do build if no other options are possible|once position is greater than 0 you are able to run until b is at least 1|b suggests that it would be advantageous to do run if a is less than 2 otherwise, if b do build , or do jump otherwise|whenever a is smaller than 0 you are able to use until finally inventory is not equal to y|a suggests that it would be advantageous to do build if a is larger than 2 otherwise, if iron do find , or do build if not|when position is smaller than y you have the choice to use until finally position is at least 2|whenever position is larger than x you have the option to find until finally position is larger than y|a is an approach where it would be good to do jump if iron y otherwise, if iron do run , or do use if no other options are possible|as soon as a is not the same as x you are able to use until finally b is not equal to 1|a states that you should do run if a is exactly the same as 0 otherwise, if position do build , or do run as a last resort|if a is less than 2 you have the choice to use until finally a is smaller than x|if position is at most 0 you can jump until finally a is less than or equal to y|once a is at least 1 you are able to build until inventory is equal to x|a is a strategy where you do run if b is not the same as 2 otherwise, if b do use , or do use if not|a is an approach where it would be good to do jump if b is equal to 0 otherwise, if iron do use , or do jump if no other options are possible|b states that you should do find if position is not the same as y otherwise, if iron do run , or do use if no other options are possible|a is a tactic where it is good to do run if iron is exactly the same as 2 otherwise, if a do find , or do build otherwise|a means that it would be good to do run if position is not equal to 0 otherwise, if position do run , or do use otherwise|when b is at most 1 you have the option to use until finally position is exactly the same as 2|whenever inventory is smaller than 1 you are able to use until b is smaller than x|a is a tactic where it is advantageous to do use if iron is greater than 2 otherwise, if iron do find , or do run otherwise|once b is less than 0 you are able to jump until finally b is smaller than y|b is a strategy where you do run if a is smaller than y otherwise, if a do use , or do use as a last resort|b is an approach where you do build if b y otherwise, if a do find , or do jump as a last resort|as soon as a is smaller than y you are able to run until finally inventory is less than 0|a is a tactic where it is advantageous to do run if a is smaller than x otherwise, if b do run , or do build as a last resort|if position is greater than or equal to y you have the option to build until a is not the same as x|when inventory is not equal to x you have the option to build until b is greater than or equal to 0|a is a good strategy where you should do build if a is exactly the same as 0 otherwise, if position do run , or do run if not|as soon as a is smaller than y you have the choice to use until finally b is less than 0|b is an approach where it would be good to do find if iron is exactly the same as x otherwise, if position do run , or do jump if no other options are possible|a means that it would be good to do use if position is equal to 0 otherwise, if position do run , or do use otherwise|a is a tactic where it is advantageous to do run if a 1 otherwise, if position do jump , or do run otherwise|if inventory is exactly the same as 2 you have the choice to find until finally a is smaller than 0|b is a good strategy where you should do run if position is greater than x otherwise, if iron do jump , or do use otherwise|if b is at least 2 you have the choice to find until finally a is greater than x|if b is greater than 1 you can use until inventory is at least x|once a is exactly the same as x you have the choice to find until finally b is greater than y|once a is not the same as 1 you are able to find until position is at least 0|as soon as a is at least 2 you can build until position is equal to 1|once position is less than x you are able to find until b is at most 2|when position is not equal to x you have the choice to find until finally a is greater than or equal to y|as soon as b is not equal to 0 you have the choice to jump until finally inventory is at least x|b is a tactic where it is good to do run if b is equal to x otherwise, if a do jump , or do jump if not|a means that it would be good to do run if a is not the same as y otherwise, if position do build , or do jump if not|as soon as b is not the same as 1 you have the option to jump until position is not equal to 1|a is an approach where it would be good to do use if b is equal to 0 otherwise, if position do find , or do build otherwise|a is a strategy where you do jump if position is larger than y otherwise, if b do run , or do find if not|whenever inventory is greater than 2 you can run until position is less than or equal to y|b is a tactic where it is good to do run if a is smaller than y otherwise, if a do run , or do run if no other options are possible|as soon as position is smaller than y you can run until finally position is greater than x|as soon as inventory is equal to 1 you have the option to jump until b is not equal to 2|when position is greater than or equal to x you have the option to run until position is less than y|b is a tactic where it is advantageous to do build if position is larger than y otherwise, if b do jump , or do find if not|a states that you should do run if b is not the same as y otherwise, if b do build , or do jump if not|a is an approach where it would be good to do run if iron y otherwise, if position do jump , or do use if not|a entails that you do find if iron is not equal to x otherwise, if position do run , or do use if no other options are possible|once b is equal to 2 you have the option to run until finally position is equal to 1|if a is less than or equal to 2 you are able to find until finally inventory is greater than 1|once inventory is larger than 1 you can jump until finally b is at least 1|when inventory is greater than or equal to 0 you have the choice to run until finally inventory is smaller than y|as soon as inventory is not equal to 0 you can build until inventory is at least 0|once b is not equal to 1 you are able to jump until a is larger than 0|if b is larger than 0 you are able to use until finally position is less than 2|once a is not the same as 0 you have the option to run until finally position is not the same as 1|as soon as a is not the same as 0 you can jump until finally inventory is not the same as y|a suggests that it would be advantageous to do use if a is greater than 2 otherwise, if iron do run , or do run otherwise|as soon as position is less than 0 you have the option to find until b is at least x|when inventory is not the same as 1 you can run until finally position is less than 2|whenever a is exactly the same as x you have the choice to find until finally a is at least 1|when position is less than x you are able to build until finally inventory is greater than 1|a suggests that it would be advantageous to do build if a is equal to 0 otherwise, if a do build , or do run if no other options are possible|when inventory you have the option to run until b is less than or equal to 0|if position is equal to y you are able to build until finally a is smaller than x|as soon as position is greater than 1 you have the option to use until inventory is less than x|a means that it would be good to do run if a 2 otherwise, if a do jump , or do use if not|b is a good strategy where you should do run if a is larger than y otherwise, if b do use , or do find if no other options are possible|whenever a you have the option to jump until a is at least 1|whenever position you are able to use until inventory is not equal to x|a suggests that it would be advantageous to do use if iron is greater than x otherwise, if position do use , or do use if no other options are possible|a is an approach where you do use if a 2 otherwise, if b do use , or do build if no other options are possible|if b is at most 1 you have the choice to jump until finally b is less than 1|if b is not equal to 0 you are able to build until finally b is equal to 2|as soon as inventory is at least 2 you are able to find until finally position is exactly the same as 2|a is a good strategy where you should do run if a 2 otherwise, if iron do build , or do build if no other options are possible|as soon as b is greater than or equal to 0 you are able to run until b is at most 1|a is a tactic where it is advantageous to do run if position otherwise, if a do use , or do run if not|a suggests that it would be advantageous to do build if position 1 otherwise, if a do run , or do build otherwise|a is a tactic where it is advantageous to do find if iron is exactly the same as 0 otherwise, if position do find , or do run if no other options are possible|a means that it would be good to do jump if b x otherwise, if b do find , or do run as a last resort|as soon as inventory is equal to 1 you have the option to run until finally inventory is not equal to 1|if position is exactly the same as x you can build until finally position is larger than 1|a suggests that it would be advantageous to do find if iron is exactly the same as 1 otherwise, if iron do build , or do build if not|as soon as a is at least x you have the option to find until y|b is an approach where you do jump if a is not the same as x otherwise, if position do build , or do jump if no other options are possible|a states that you should do build if a 0 , or do use otherwise|a suggests that it would be advantageous to do build if b is not the same as 0 otherwise, if iron do find , or do find as a last resort|a states that you should do find if iron is not equal to 0 otherwise, if b do build , or do run otherwise|a is a strategy where you do run if iron is equal to 2 otherwise, if b do find , or do jump as a last resort|whenever inventory is not equal to 0 you have the option to find until a is at least 0|b suggests that it would be advantageous to do find if b is equal to x otherwise, if position do jump , or do find if no other options are possible|as soon as b is at most 1 you can build until a is at least y|whenever position is at least 1 you are able to find until a is less than 2|when b is equal to 0 you are able to find until finally b is at most 1|when inventory is smaller than 2 you have the choice to run until finally inventory|when position is less than or equal to 2 you have the option to find until b is greater than or equal to y|a suggests that it would be advantageous to do use if position is exactly the same as 1 otherwise, if a do find , or do find otherwise|b means that it would be good to do jump if a is exactly the same as y otherwise, if a do jump , or do run otherwise|as soon as position is greater than y you have the option to find until a is less than or equal to 1|if inventory is less than or equal to x you can use until finally inventory is greater than or equal to 1|when b is not equal to 0 you have the option to find until a is greater than or equal to 0|a suggests that it would be advantageous to do build if iron is larger than x otherwise, if a do use , or do build if not|b is a tactic where it is advantageous to do use if iron is smaller than y otherwise, if position do build , or do build otherwise|a entails that you do run if a is not the same as 1 otherwise, if position do build , or do build if no other options are possible|b states that you should do jump if a is exactly the same as x otherwise, if a do jump , or do build as a last resort|b is a tactic where it is good to do find if b is greater than x otherwise, if b do use , or do jump if not|b means that it would be good to do jump if b x otherwise, if b do find , or do use if no other options are possible|a entails that you do build if b 0 otherwise, if a do find , or do find if no other options are possible|b is a tactic where it is advantageous to do build if b is equal to x otherwise, if position do jump , or do jump otherwise|when y you have the choice to jump until b is less than y|a is a tactic where it is good to do use if b 0 otherwise, if position do build , or do jump otherwise|a is a tactic where it is good to do jump if a is greater than x otherwise, if b do run , or do use as a last resort|a is an approach where you do run if a 2 otherwise, if b do jump , or do run otherwise|a entails that you do build if iron is smaller than 0 otherwise, if position do build , or do find if no other options are possible|as soon as b is less than 0 you have the option to build until a is equal to 2|if position is at least 1 you are able to jump until finally b is less than or equal to y|b is a strategy where you do jump if position is less than x otherwise, if iron do run , or do run otherwise|as soon as inventory is less than 0 you are able to build until finally a is less than or equal to 0|when position is less than y you have the option to use until position is at least y|b entails that you do run if b 0|if b is exactly the same as 1 you have the option to jump until finally position is larger than x|b suggests that it would be advantageous to do jump if a is not the same as y otherwise, if iron do find , or do jump otherwise|a is a tactic where it is advantageous to do find if a 2 , or do find otherwise|once b is less than or equal to 1 you have the choice to find until a is exactly the same as 2|a entails that you do build if position is not the same as x otherwise, if iron do run , or do use otherwise|b means that it would be good to do run if a is equal to 2 otherwise, if position do use , or do use if no other options are possible|if b is not equal to x you can run until finally b is at least x|a is a tactic where it is good to do run if iron y otherwise, if b do use , or do use otherwise|if a is not the same as 1 you have the choice to find until finally position is greater than 0|a means that it would be good to do use if position is greater than 2 otherwise, if b do jump , or do use otherwise|once a is smaller than 0 you are able to build until finally position is less than or equal to y|a suggests that it would be advantageous to do build if iron y otherwise, if a do find , or do use as a last resort|when inventory is smaller than x you have the choice to use until finally b is not the same as 1|whenever position is equal to 1 you have the option to use until a is greater than or equal to 0|whenever b is greater than 1 you have the option to build until finally position is less than x|b entails that you do run if b x otherwise, if b do jump , or do use if not|as soon as position is at least x you have the choice to jump until finally inventory is equal to x|a suggests that it would be advantageous to do find if iron is not equal to y otherwise, if b do build , or do build otherwise|when position is not the same as y you have the choice to build until y|b is a tactic where it is advantageous to do jump if position is not equal to x otherwise, if position do use , or do find as a last resort|b is an approach where you do build if b is equal to x otherwise, if a do run , or do use if no other options are possible|as soon as b is greater than 0 you have the choice to use until finally inventory is less than x|a is a tactic where it is advantageous to do use if iron is larger than 0 otherwise, if b do build , or do find otherwise|b is an approach where you do run if b x otherwise, if b do jump , or do build otherwise|as soon as a is less than 2 you have the option to run until finally inventory is less than or equal to x|as soon as position is larger than 0 you are able to use until inventory is exactly the same as 2|a entails that you do use if iron is smaller than y otherwise, if position do jump , or do jump if not|b is a good strategy where you should do run if b y otherwise, if b do build , or do run as a last resort|if b is exactly the same as 2 you can jump until position is greater than or equal to x|a is a good strategy where you should do jump if position 0 otherwise, if iron do jump , or do find if no other options are possible|whenever inventory is smaller than 1 you have the option to find until finally b is not the same as 0|when b is not equal to y you are able to use until b is less than x|a suggests that it would be advantageous to do run if b 1 otherwise, if a do jump , or do run otherwise|as soon as y you can jump until finally position is at least 0|b means that it would be good to do find if iron is greater than 2 , or do use if not|b suggests that it would be advantageous to do find if iron is less than x otherwise, if a do find , or do run if not|when a is greater than or equal to 1 you have the choice to build until b is at least y|a states that you should do jump if a y otherwise, if b do jump , or do build as a last resort|a is a tactic where it is advantageous to do find if b is not equal to x otherwise, if a do find , or do use if no other options are possible|a is an approach where it would be good to do jump if iron 1 otherwise, if position do build , or do run as a last resort|b states that you should do build if a x otherwise, if a do find , or do use if not|whenever b is greater than y you have the choice to use until finally a is not the same as y|b states that you should do find if iron is equal to y otherwise, if iron do find , or do find otherwise|b suggests that it would be advantageous to do run if b is smaller than x otherwise, if position do build , or do run if no other options are possible|if position you can run until a is not equal to 2|a means that it would be good to do find if a 2 otherwise, if a do run , or do find if not|a is a tactic where it is good to do build if position is larger than x otherwise, if b do find , or do find if no other options are possible|b is a tactic where it is good to do jump if a y otherwise, if position do build , or do use as a last resort|a is a good strategy where you should do use if b 0 otherwise, if iron do use , or do use if not|a is a good strategy where you should do use if position is not equal to 0 otherwise, if a do build , or do jump if no other options are possible|a is a good strategy where you should do find if position is greater than x otherwise, if iron do build , or do build otherwise|as soon as position is greater than y you are able to run until a is larger than 1|b entails that you do use if a is equal to y otherwise, if b do run , or do find otherwise|whenever inventory is greater than or equal to y you have the choice to jump until inventory is greater than y|a is a tactic where it is good to do use if iron is larger than 0 otherwise, if b do build , or do jump if no other options are possible|a is an approach where you do jump if b otherwise, if position do jump , or do run otherwise|whenever position is greater than 2 you have the option to run until position is less than or equal to 1|a is a good strategy where you should do find if a is smaller than 2 otherwise, if b do find , or do find as a last resort|when b is not equal to y you can use until finally a is equal to 0|a is a good strategy where you should do run if a is smaller than 1 otherwise, if position do find , or do run as a last resort|as soon as a is at most 0 you have the choice to build until inventory is greater than y|b means that it would be good to do jump if position x otherwise, if iron do build , or do use if no other options are possible|whenever a is greater than or equal to x you are able to jump until finally inventory is less than x|a is a tactic where it is good to do jump if iron is less than 0 otherwise, if b do run , or do run if not|as soon as x you are able to build until finally inventory is equal to 0|if a is greater than or equal to x you have the choice to build until finally a is less than or equal to 0|once b is greater than or equal to 0 you have the choice to jump until finally a is greater than 2|b states that you should do run if position x otherwise, if position do jump , or do build otherwise|a is an approach where you do run if iron x otherwise, if b do build , or do run if no other options are possible|b is a tactic where it is advantageous to do jump if position is smaller than 0|whenever inventory is at least 2 you can run until a is at most y|b states that you should do jump if position is greater than y otherwise, if iron do use , or do find if not|a is a good strategy where you should do run if b is smaller than y otherwise, if b do find , or do run if no other options are possible|a entails that you do find if b is smaller than y otherwise, if a do jump , or do find otherwise|whenever inventory is not the same as x you have the option to jump until a is at most 0|b suggests that it would be advantageous to do build if iron is not the same as y otherwise, if a do build , or do use otherwise|a is a tactic where it is good to do find if b is less than x otherwise, if a do use , or do run as a last resort|b is a tactic where it is good to do jump if a is smaller than 2 otherwise, if a do use , or do run if no other options are possible|as soon as position is larger than 1 you have the option to build until inventory is less than 1|if a is not the same as 0 you have the option to build until position is not the same as x|b states that you should do build if iron 1|when b is at least y you have the choice to jump until inventory is larger than y|a suggests that it would be advantageous to do find if a x otherwise, if position do use , or do find otherwise|once b is less than or equal to y you are able to run until y|a states that you should do find if position is larger than x otherwise, if b do jump , or do use as a last resort|a is a strategy where you do jump if position 1 otherwise, if position do find , or do build as a last resort|a is an approach where it would be good to do run if a y otherwise, if position do build , or do jump otherwise|b is an approach where you do find if iron 1 , or do use if no other options are possible|when inventory is at most 1 you can jump until finally x|a is a tactic where it is advantageous to do find if b is larger than x otherwise, if position do jump , or do run otherwise|a is an approach where it would be good to do use if b is greater than 1 otherwise, if b do run , or do jump if no other options are possible|as soon as position is equal to 2 you have the choice to jump until finally b is less than or equal to 0|b suggests that it would be advantageous to do jump if iron is smaller than y otherwise, if position do find , or do build if not|as soon as position is larger than y you have the choice to jump until finally a is equal to y|b is a tactic where it is advantageous to do build if iron x otherwise, if a do jump , or do find as a last resort|when b is exactly the same as 1 you can find until b is smaller than y|a entails that you do jump if b is smaller than 1 otherwise, if a do run , or do build if no other options are possible|whenever position is smaller than 2 you can build until finally b|a states that you should do find if b 2 otherwise, if a do jump , or do use if not|a is a tactic where it is advantageous to do find if b 2 otherwise, if a do jump , or do build as a last resort|b is an approach where it would be good to do jump if iron is not the same as y otherwise, if a do use , or do jump if not|whenever a is equal to 2 you are able to find until a is not the same as x|a suggests that it would be advantageous to do build if iron is not equal to 2 otherwise, if position do build , or do build if no other options are possible|a means that it would be good to do build if b is not the same as y otherwise, if b do jump , or do build as a last resort|whenever inventory is at most 2 you have the choice to build until finally a is at most 0|whenever position is smaller than y you have the option to jump until a is at least y|b is a tactic where it is advantageous to do build if position is less than 1 , or do build if not|a is a tactic where it is good to do use if iron otherwise, if position do run , or do run otherwise|a is a good strategy where you should do find if a is not the same as 2 otherwise, if iron do find , or do jump as a last resort|if position is at least 2 you have the choice to use until inventory is equal to y|b is a strategy where you do run if iron y otherwise, if a do jump , or do find otherwise|a entails that you do build if iron 2 otherwise, if b do use , or do build if no other options are possible|whenever x you are able to run until finally b is smaller than 2|when a is exactly the same as 1 you can build until finally a is equal to 1|when position is smaller than 2 you have the option to jump until finally b is not the same as 0|b suggests that it would be advantageous to do find if position y otherwise, if a do run , or do run otherwise|once a is smaller than 2 you have the option to find until finally a is equal to 2|b is a tactic where it is advantageous to do jump if position 2 , or do jump otherwise|as soon as inventory is at most 0 you can use until finally position is smaller than 1|a is a strategy where you do find if iron is smaller than 0 otherwise, if b do jump , or do build as a last resort|b is a good strategy where you should do find if b y otherwise, if position do find , or do find if not|a means that it would be good to do find if b is greater than y otherwise, if b do jump , or do use otherwise|a states that you should do build if b 2 otherwise, if iron do run , or do find as a last resort|b is an approach where you do jump if position is greater than y otherwise, if b do jump , or do build otherwise|when position is less than or equal to x you can use until inventory is not the same as 1|whenever position is at most 0 you can build until finally inventory is equal to y|a is an approach where you do find if b 2 otherwise, if position do build , or do jump as a last resort|as soon as position is at most x you have the option to jump until finally a is at least x|b is a good strategy where you should do jump if a x , or do jump otherwise|once a is greater than x you have the option to use until b is greater than or equal to x|b entails that you do build if a y otherwise, if b do build , or do jump as a last resort|a is an approach where it would be good to do run if iron 0 otherwise, if a do run , or do use if no other options are possible|as soon as inventory is exactly the same as 1 you are able to run until finally b is at least y|if b is smaller than 2 you are able to run until finally inventory is less than 2|a is a tactic where it is good to do find if a x otherwise, if a do find , or do use otherwise|a is an approach where it would be good to do find if a is exactly the same as 0 otherwise, if iron do jump , or do jump if no other options are possible|b states that you should do use if position is larger than y otherwise, if iron do jump , or do use if not|a means that it would be good to do find if iron is not equal to y otherwise, if iron do run , or do build if no other options are possible|a is a tactic where it is advantageous to do jump if a is not equal to 0 otherwise, if position do build , or do build otherwise|b states that you should do find if a is smaller than 2 otherwise, if iron do use , or do jump as a last resort|if a is greater than or equal to x you are able to build until finally position is equal to 0|when position you have the choice to jump until inventory is less than y|when position is greater than 0 you can build until finally a is less than or equal to y|a states that you should do build if position is not the same as x otherwise, if b do run , or do run otherwise|a is a tactic where it is advantageous to do use if a 2 otherwise, if b do find , or do jump if not|whenever a is larger than 0 you can jump until position is at least 0|once b is greater than or equal to x you are able to build until position is greater than or equal to 2|a suggests that it would be advantageous to do use if position is equal to 1 , or do build if no other options are possible|b is a good strategy where you should do jump if a is smaller than y otherwise, if b do jump , or do find if not|a is a good strategy where you should do use if a is equal to 2 otherwise, if b do run , or do find as a last resort|a is a strategy where you do build if position is equal to 1 otherwise, if a do run , or do build otherwise|a is a strategy where you do use if b y otherwise, if b do use , or do build otherwise|a states that you should do build if position y otherwise, if position do find , or do jump as a last resort|when inventory is not the same as 0 you have the choice to use until finally a is less than or equal to x|b suggests that it would be advantageous to do run if a is exactly the same as y otherwise, if b do use , or do run if not|a means that it would be good to do use if position 1 otherwise, if a do use , or do jump if not|once b is greater than 2 you have the option to build until position is larger than x|when b is equal to x you are able to run until finally inventory is less than 1|if inventory is not the same as y you have the option to build until a|a is a strategy where you do jump if a 0 otherwise, if iron do run , or do run as a last resort|when position is greater than or equal to 2 you can build until finally b is at least x|whenever inventory is at least 0 you have the option to find until finally inventory is at least 2|when a is greater than y you can use until position is less than or equal to 1|a suggests that it would be advantageous to do find if iron is less than x otherwise, if a do use , or do jump as a last resort|as soon as inventory is not equal to x you have the option to jump until a is greater than 0|whenever position is not the same as 0 you have the choice to use until inventory is at most 2|a is a good strategy where you should do use if a is equal to 0 , or do find otherwise|a is an approach where it would be good to do jump if iron 2 otherwise, if a do find , or do find as a last resort|b is an approach where it would be good to do build if iron is exactly the same as x otherwise, if position do run , or do use as a last resort|if inventory is greater than 1 you have the choice to use until a is larger than 2|when a is less than 1 you are able to run until b is less than 0|once a is smaller than y you are able to use until a is greater than 1|whenever b is greater than y you can find until finally a is not equal to 0|a is a good strategy where you should do use if a is not the same as 1 otherwise, if a do jump , or do jump if not|whenever position is greater than or equal to x you are able to use until finally position is larger than y|whenever b is less than 0 you can run until a is exactly the same as 0|whenever b is equal to y you can run until inventory is equal to 0|a is an approach where you do run if position 2 otherwise, if position do run , or do run if not|a is an approach where you do find if a is less than 1 otherwise, if b do find , or do use as a last resort|a means that it would be good to do jump if a 0 otherwise, if a do build , or do run as a last resort|a is a tactic where it is good to do run if b is equal to y otherwise, if position do use , or do run if not|as soon as position is at most y you can jump until finally inventory is not equal to x|whenever position is greater than or equal to 2 you have the option to use until finally inventory is larger than 2|when inventory is larger than 2 you have the choice to run until finally a is not equal to 2|a states that you should do build if position 1 otherwise, if a do jump , or do build if not|a suggests that it would be advantageous to do build if a is greater than 2 otherwise, if a do use , or do run if not|a is a tactic where it is good to do find if position 1 otherwise, if b do run , or do use as a last resort|b is a good strategy where you should do jump if iron is not equal to x otherwise, if iron do use , or do run otherwise|a states that you should do run if b y otherwise, if a do use , or do find if no other options are possible|a is a good strategy where you should do use if iron is smaller than 2 otherwise, if iron do jump , or do run if no other options are possible|b is a tactic where it is good to do find if a 2 , or do use if no other options are possible|once b is exactly the same as 1 you can use until finally inventory is larger than y|a is a good strategy where you should do find if position 2 , or do run otherwise|b is an approach where it would be good to do build if b is less than x|a is a tactic where it is advantageous to do jump if a is exactly the same as 2 otherwise, if a do jump , or do use otherwise|if position is not the same as x you have the option to use until a is at least 0|a suggests that it would be advantageous to do find if iron 0 otherwise, if iron do run , or do jump if no other options are possible|a is a strategy where you do use if iron is not equal to 2 otherwise, if b do jump , or do use otherwise|if a is not equal to 0 you can use until inventory is greater than x|if b is greater than or equal to 1 you are able to find until position is equal to x|once position is greater than or equal to 1 you have the choice to jump until finally a is equal to y|when inventory is at most 1 you can build until b is at least y|a is an approach where it would be good to do use if b is equal to 2 otherwise, if iron do use , or do find if no other options are possible|whenever position is not the same as 0 you have the option to build until finally position is smaller than 2|a is a tactic where it is advantageous to do build if position is not the same as 0 otherwise, if position do build , or do build if no other options are possible|b is an approach where you do use if a is larger than x otherwise, if iron do run , or do use otherwise|a states that you should do use if a y otherwise, if iron do run , or do use as a last resort|a is an approach where it would be good to do find if position is smaller than 2 otherwise, if iron do jump , or do build as a last resort|when position is greater than 0 you have the choice to find until b is larger than 0|whenever inventory is exactly the same as 0 you can build until position is at most x|when a is larger than x you are able to find until b is greater than 0|b is a tactic where it is good to do jump if iron is exactly the same as y otherwise, if a do find , or do build if no other options are possible|a suggests that it would be advantageous to do use if a is less than 2 otherwise, if b do build , or do jump if not|when inventory is not the same as x you have the choice to jump until finally position is less than 1|when inventory is not equal to x you have the option to find until inventory is exactly the same as 2|if b is greater than or equal to x you can find until finally position is at most x|as soon as b is at most y you have the option to build until b is greater than 2|a is a strategy where you do find if iron is not the same as 0 otherwise, if a do find , or do run as a last resort|as soon as inventory is greater than or equal to 0 you can run until finally b is exactly the same as x|when a is greater than or equal to 0 you have the option to build until position is larger than 0|b is a good strategy where you should do find if position x otherwise, if iron do build , or do jump as a last resort|as soon as b is larger than 2 you have the option to jump until finally a is at least 2|whenever b is less than or equal to x you are able to build until finally inventory is less than x|b is an approach where you do run if iron otherwise, if b do run , or do find if not|b states that you should do find if iron is larger than y otherwise, if iron do run , or do jump otherwise|when b is not the same as x you are able to find until inventory is greater than 0|as soon as position is not the same as 0 you are able to build until finally inventory is smaller than 0|b is a good strategy where you should do jump if iron y otherwise, if iron do jump , or do jump if no other options are possible|whenever inventory is greater than or equal to 1 you are able to find until finally inventory is exactly the same as x|whenever inventory is equal to y you can build until inventory is less than or equal to 2|if inventory is less than 0 you have the option to run until finally inventory is greater than or equal to 1|b is an approach where it would be good to do use if a is equal to 0 otherwise, if a do build , or do use otherwise|when b is less than or equal to 0 you can jump until finally a is exactly the same as x|if inventory is at most y you can use until finally position is equal to 0|a is an approach where you do use if a is greater than y otherwise, if b do use , or do use as a last resort|a is an approach where you do jump if a x otherwise, if b do jump , or do run if not|once b is greater than 1 you are able to use until finally position is less than y|if inventory is larger than 2 you have the choice to find until b is smaller than y|b is a tactic where it is good to do jump if position is equal to 2 , or do build otherwise|as soon as a is at most 1 you have the option to use until b is not equal to 2|a is an approach where it would be good to do run if iron 0 otherwise, if iron do run , or do find otherwise|once inventory is greater than y you can build until position is not the same as x|a is a tactic where it is advantageous to do find if a is greater than 2 otherwise, if position do use , or do run if no other options are possible|if b is greater than or equal to 1 you have the choice to jump until finally b is smaller than y|once a is not equal to x you have the choice to use until finally inventory is greater than 2|a entails that you do use if a is not the same as 0 otherwise, if position do run , or do run otherwise|b means that it would be good to do use if b otherwise, if b do use , or do use if not|as soon as position is at least y you are able to build until finally inventory is exactly the same as 2|b states that you should do jump if b is exactly the same as x otherwise, if position do find , or do run as a last resort|when position is greater than y you can find until finally b is equal to 1|b is a tactic where it is good to do find if a is exactly the same as x otherwise, if b do use , or do build if not|a means that it would be good to do jump if iron is equal to 1 otherwise, if iron do find , or do find as a last resort|a is a tactic where it is advantageous to do find if iron x otherwise, if position do build , or do use if not|a suggests that it would be advantageous to do jump if iron is greater than x otherwise, if b do use , or do use if no other options are possible|a is a strategy where you do run if iron is less than y otherwise, if b do run , or do build as a last resort|a is a tactic where it is advantageous to do find if a is less than 2 otherwise, if b do jump , or do build if not|a states that you should do find if b is not equal to y otherwise, if b do build , or do build if no other options are possible|if position is at most 0 you have the choice to find until inventory is smaller than 0|whenever b is smaller than 1 you have the choice to jump until finally inventory is greater than 2|b is a good strategy where you should do find if iron is larger than 2 , or do find if no other options are possible|a is an approach where it would be good to do build if position is equal to 2 otherwise, if position do run , or do build otherwise|when a is at least y you have the option to find until a is greater than or equal to 2|a entails that you do build if position is not the same as x otherwise, if b do use , or do build if not|a means that it would be good to do use if b is smaller than x otherwise, if iron do find , or do build if no other options are possible|a means that it would be good to do run if a is greater than 0 otherwise, if position do build , or do use as a last resort|b is a good strategy where you should do run if b , or do run if no other options are possible|a is a good strategy where you should do find if iron is not equal to 2 otherwise, if position do jump , or do run otherwise|b is an approach where you do run if a is less than x|when a is not equal to 2 you have the choice to run until position is not equal to 1|a suggests that it would be advantageous to do find if iron is smaller than 1 otherwise, if b do jump , or do find otherwise|a is a strategy where you do build if iron is equal to y otherwise, if position do build , or do build otherwise|a is an approach where it would be good to do jump if position is smaller than x otherwise, if b do run , or do build as a last resort|when inventory is at least 0 you have the choice to run until finally a is not the same as x|when a is not the same as 2 you have the option to run until position is not equal to y|a means that it would be good to do run if a is equal to x otherwise, if position do jump , or do jump otherwise|a states that you should do use if position 2 otherwise, if a do jump , or do jump if not|when a is at least x you can use until finally position is smaller than y|b means that it would be good to do use if a is smaller than 2 otherwise, if position do find , or do find as a last resort|when a is exactly the same as 2 you have the option to find until finally a is at most 0|b states that you should do use if b y otherwise, if a do find , or do use otherwise|a is a tactic where it is good to do use if a y otherwise, if iron do jump , or do find if not|if y you have the choice to run until finally position is at least 0|a is a tactic where it is good to do find if a 0 otherwise, if iron do build , or do run as a last resort|a is a tactic where it is advantageous to do find if b 0 otherwise, if iron do use , or do build otherwise|when position is equal to 2 you have the option to find until finally a|a is a tactic where it is good to do jump if iron x otherwise, if position do find , or do jump otherwise|a is a strategy where you do jump if b is not the same as y otherwise, if iron do find , or do build as a last resort|once a is less than 1 you have the option to find until position is less than or equal to x|whenever inventory is smaller than x you are able to find until finally position is at most x|a is an approach where you do run if iron is smaller than 0 otherwise, if position do run , or do build as a last resort|once a is exactly the same as 0 you have the choice to find until inventory is exactly the same as 2|once inventory is less than or equal to 2 you have the choice to run until finally position is less than 0|a is a good strategy where you should do use if iron 2 otherwise, if a do use , or do build as a last resort|b is a tactic where it is good to do use if a is not equal to 2 otherwise, if a do run , or do find otherwise|a is an approach where you do run if iron is equal to 2 otherwise, if iron do use , or do find if no other options are possible|a is a tactic where it is advantageous to do jump if a is exactly the same as y otherwise, if a do run , or do run otherwise|whenever b is at most 0 you have the option to use until a is less than 0|a is an approach where it would be good to do jump if iron y otherwise, if b do find , or do jump otherwise|b is an approach where you do use if a is equal to 1 otherwise, if a do use , or do use as a last resort|a entails that you do use if iron x otherwise, if iron do find , or do build if not|when a is smaller than x you can use until a is equal to 1|whenever position is not equal to 1 you are able to build until finally position is not the same as 1|whenever a is greater than 0 you have the option to find until finally inventory is exactly the same as 2|b suggests that it would be advantageous to do find if position is exactly the same as x otherwise, if a do build , or do use as a last resort|as soon as b is not the same as 2 you are able to run until position is less than or equal to 0|if inventory is greater than or equal to y you have the choice to build until finally a is smaller than y|a is an approach where you do run if position is exactly the same as 1 otherwise, if position do use , or do use if not|a is a strategy where you do jump if a y , or do jump as a last resort|if a is larger than 2 you have the option to run until inventory is less than x|b states that you should do find if iron x otherwise, if b do build , or do use otherwise|if position is less than x you have the choice to find until inventory is larger than 1|once b is larger than 2 you are able to use until inventory|if inventory you are able to run until position|if position is not equal to 0 you have the choice to find until finally a is greater than or equal to 2|when position is greater than x you are able to jump until position is equal to 2|if a is exactly the same as x you are able to build until finally b is equal to 2|when inventory is less than 2 you have the option to use until finally b is exactly the same as y|a suggests that it would be advantageous to do use if a is less than 0 otherwise, if b do use , or do use as a last resort|as soon as inventory is smaller than x you have the choice to build until finally b is exactly the same as 2|whenever a is exactly the same as 2 you have the choice to build until b is less than or equal to y|b is a tactic where it is good to do run if iron y otherwise, if b do build , or do run otherwise|as soon as a is less than y you have the option to find until b is not equal to x|a suggests that it would be advantageous to do use if b y , or do find otherwise|if a is smaller than 1 you are able to use until finally position is larger than y|a states that you should do jump if b 2 otherwise, if a do build , or do jump otherwise|whenever b is greater than or equal to 1 you are able to build until inventory is at least y|if b is smaller than 2 you have the option to use until inventory is at most 0|once position is exactly the same as 0 you can find until finally position is greater than or equal to 0|when b is larger than 0 you have the option to build until position is not equal to 2|if position is greater than or equal to 2 you have the option to run until finally b is less than or equal to 0|as soon as a is at most x you can jump until b is greater than y|a entails that you do run if a x otherwise, if position do run , or do build as a last resort|a is an approach where it would be good to do run if a is larger than y otherwise, if b do use , or do build if not|once a is greater than or equal to 2 you have the choice to use until a is exactly the same as 0|if position is not the same as y you have the choice to find until b is less than or equal to y|a entails that you do build if position is smaller than 0 otherwise, if iron do build , or do find otherwise|once position is greater than 1 you can jump until b is larger than 0|a suggests that it would be advantageous to do build if iron 1 otherwise, if position do jump , or do build if no other options are possible|b suggests that it would be advantageous to do build if b y otherwise, if a do jump , or do run if not|whenever position is equal to y you have the option to use until finally inventory is at most 0|as soon as inventory is at least 0 you have the choice to find until finally position is greater than y|as soon as b is equal to x you can use until inventory is smaller than y|a entails that you do find if iron 1 otherwise, if iron do run , or do run as a last resort|as soon as a is not the same as x you can find until inventory is at most 0|a is a strategy where you do use if a is larger than y otherwise, if a do find , or do jump as a last resort|when inventory is less than or equal to 2 you are able to jump until y|as soon as b is exactly the same as 2 you are able to use until inventory is exactly the same as x|a is a tactic where it is good to do jump if a is smaller than 0 otherwise, if position do build , or do use as a last resort|whenever b is at most 0 you have the choice to jump until b is greater than or equal to y|a states that you should do jump if iron is larger than x otherwise, if b do find , or do use as a last resort|b means that it would be good to do run if position is less than y otherwise, if b do run , or do find if no other options are possible|a is a tactic where it is good to do find if b x otherwise, if position do jump , or do build as a last resort|if b is equal to 2 you are able to build until position is at most x|a is an approach where it would be good to do use if b is not equal to y otherwise, if iron do run , or do build as a last resort|a states that you should do run if position is not equal to x otherwise, if position do run , or do use otherwise|once x you have the choice to jump until finally position is less than x|as soon as b is exactly the same as 1 you have the choice to find until finally inventory is not the same as 0|as soon as a is less than or equal to 0 you have the choice to use until finally position is not the same as y|when inventory is smaller than 1 you can build until finally position is less than 0|a states that you should do use if position is smaller than 1 otherwise, if position do find , or do build if no other options are possible|when a is smaller than 2 you have the choice to use until b is equal to y|a is a good strategy where you should do find if iron is equal to 2 otherwise, if iron do find , or do use if not|as soon as b is exactly the same as y you have the option to build until finally position is less than or equal to 1|when position is greater than 1 you have the choice to build until inventory|once b is at most 1 you are able to build until b is at least 0|b is a good strategy where you should do run if b is less than y otherwise, if iron do find , or do use if not|once inventory is less than x you are able to use until finally b is larger than 0|a is an approach where you do jump if iron is exactly the same as y otherwise, if iron do jump , or do build otherwise|if position is at most y you are able to find until a is less than or equal to 1|as soon as position is greater than or equal to x you are able to run until finally b is equal to 0|b is an approach where it would be good to do run if a y otherwise, if iron do use , or do build otherwise|whenever a is equal to x you have the choice to find until inventory is at most 2|a entails that you do build if b y otherwise, if position do jump , or do run otherwise|b states that you should do run if b x otherwise, if b do use , or do build if no other options are possible|b is a good strategy where you should do use if b is larger than y otherwise, if position do jump , or do run if not|as soon as position is smaller than 2 you are able to jump until finally b is less than or equal to 0|a suggests that it would be advantageous to do use if a is greater than y otherwise, if iron do find , or do jump otherwise|if b is greater than or equal to 2 you have the option to build until a is not the same as 2|once inventory is smaller than 0 you are able to find until a is at least 1|when b is equal to y you have the option to jump until finally inventory is at most 2|once a is not equal to 0 you have the choice to jump until inventory is larger than 2|if a is equal to y you have the option to jump until a is greater than 0|a entails that you do jump if a is larger than x otherwise, if b do build , or do run if not|once b is less than y you have the option to run until finally a is greater than 1|a is an approach where it would be good to do build if iron is smaller than 2 otherwise, if position do use , or do jump otherwise|as soon as b is exactly the same as 2 you have the choice to use until inventory is at most 2|b entails that you do run if iron y otherwise, if a do jump , or do use if no other options are possible|if a is larger than 2 you are able to run until inventory is larger than 0|if position is smaller than x you can build until position is less than or equal to x|a is a tactic where it is good to do find if iron x otherwise, if a do find , or do use otherwise|once position is greater than or equal to x you have the option to find until position is smaller than 2|when b is equal to x you are able to jump until finally position is not the same as y|a is an approach where you do build if a is not the same as x otherwise, if position do build , or do run otherwise|when inventory is smaller than x you have the option to find until finally inventory is at most y|a is an approach where it would be good to do run if position is equal to 2 otherwise, if b do jump , or do jump otherwise|if b is smaller than x you have the choice to build until position is exactly the same as 2|b is a good strategy where you should do build if a y otherwise, if b do jump , or do jump otherwise|as soon as a is smaller than y you have the choice to jump until inventory is at most 1|once y you are able to build until finally position is not equal to 1|when b is not the same as 2 you can jump until a is larger than 0|a is a tactic where it is advantageous to do use if position is equal to 2 otherwise, if position do build , or do jump if not|a suggests that it would be advantageous to do jump if iron is less than y , or do jump otherwise|if position is less than or equal to y you have the option to jump until inventory is exactly the same as 2|b states that you should do jump if position is exactly the same as y , or do run as a last resort|when inventory is not the same as y you are able to use until finally inventory is less than x|when inventory is at least 0 you can use until finally b is larger than 0|as soon as inventory is at most x you can use until finally a is larger than 2|b is a strategy where you do jump if b is not the same as y otherwise, if position do use , or do run as a last resort|when a is at most 2 you have the choice to find until finally b is not the same as x|whenever position is equal to 2 you are able to build until a is greater than or equal to 1|a suggests that it would be advantageous to do find if b is not the same as y otherwise, if a do jump , or do find as a last resort|a is an approach where it would be good to do run if iron 1 otherwise, if position do run , or do jump if not|a suggests that it would be advantageous to do jump if a is equal to y otherwise, if position do run , or do run otherwise|b is a tactic where it is good to do build if a is exactly the same as x otherwise, if b do use , or do build if not|b entails that you do jump if position is not the same as x otherwise, if a do use , or do build as a last resort|b is an approach where it would be good to do use if a is not equal to x otherwise, if position do jump , or do run as a last resort|b entails that you do find if a y otherwise, if iron do find , or do run as a last resort|whenever b is larger than y you can use until finally b is at least 0|if b is equal to x you are able to use until inventory is greater than 1|a states that you should do build if a is larger than 2 otherwise, if iron do run , or do use if no other options are possible|when inventory is at most 2 you are able to use until inventory is less than or equal to 0|whenever inventory is larger than x you can find until b is greater than or equal to 1|whenever b is at least 2 you have the option to find until finally inventory is greater than 1|if a is greater than or equal to 1 you have the option to run until finally position is smaller than 0|a suggests that it would be advantageous to do run if iron x otherwise, if position do find , or do build if not|when b is greater than x you have the option to find until a is less than or equal to 2|b entails that you do jump if iron is not the same as y otherwise, if position do jump , or do run if no other options are possible|a is a strategy where you do build if b is equal to 0 otherwise, if a do find , or do jump if no other options are possible|when a is smaller than y you have the option to run until finally position is equal to 1|whenever b is less than or equal to y you have the choice to run until finally inventory|b is a good strategy where you should do jump if position is larger than y otherwise, if b do use , or do run if no other options are possible|when inventory is not equal to x you can run until finally b is not equal to 2|b is an approach where you do use if a is equal to 2 otherwise, if b do jump , or do jump if not|as soon as b is exactly the same as 0 you can find until finally position is greater than or equal to 0|whenever b is greater than 2 you are able to use until b is at most x|b entails that you do build if a is not the same as y otherwise, if b do jump , or do jump if no other options are possible|when b is at least 0 you have the choice to jump until position is less than 1|once y you have the choice to build until finally inventory is greater than or equal to x|a is an approach where it would be good to do jump if b is not the same as 2 otherwise, if b do use , or do jump otherwise|if position is at least 2 you can jump until finally b is greater than 1|when b is smaller than y you have the choice to jump until finally inventory is at most x|if position is greater than or equal to 0 you can find until finally b is exactly the same as 2|if position is larger than x you have the option to find until position is smaller than 2|a is a strategy where you do build if b is less than y otherwise, if iron do run , or do find if not|as soon as inventory is not equal to 2 you have the option to find until position is at most 2|when inventory is greater than or equal to x you are able to jump until b is greater than or equal to y|a is a tactic where it is advantageous to do use if position x otherwise, if iron do jump , or do use if not|b is an approach where you do run if position x otherwise, if a do use , or do run if not|when inventory is at least 2 you can find until inventory is not the same as 0|once b is not equal to 1 you have the option to jump until a is exactly the same as 1|once inventory is exactly the same as y you can find until finally b is greater than x|a means that it would be good to do use if a is smaller than 1 otherwise, if b do run , or do use if not|if inventory is not the same as 0 you have the choice to run until finally b is equal to 2|once inventory is at least 2 you are able to jump until a is larger than x|a is a good strategy where you should do build if position is larger than y otherwise, if position do use , or do jump if not|a is a strategy where you do use if iron is exactly the same as 0 otherwise, if position do run , or do build if not|when inventory is smaller than x you have the choice to run until position is greater than or equal to 2|once inventory is smaller than 0 you can build until finally b is less than y|a means that it would be good to do run if a x otherwise, if b do find , or do build as a last resort|a is an approach where you do use if iron is larger than 1 otherwise, if a do use , or do run if not|once inventory is greater than 0 you are able to run until b is equal to 0|a is a tactic where it is good to do run if a is equal to 0 otherwise, if b do build , or do find as a last resort|when b you have the option to use until finally a is greater than or equal to x|whenever a is equal to 1 you can jump until a is greater than or equal to x|as soon as b is not equal to 1 you can jump until a is less than 0|b is an approach where you do run if b is smaller than 1 , or do find if not|if inventory is less than x you can use until a is at least y|whenever inventory is equal to y you can build until finally position is not the same as y|if b is less than or equal to 0 you can run until finally position is at least y|a is a tactic where it is good to do use if position is not the same as 1 otherwise, if iron do use , or do find as a last resort|whenever position is not the same as x you have the choice to build until position is at least 1|b is a tactic where it is advantageous to do run if b is not equal to x otherwise, if a do use , or do build if not|b entails that you do run if iron x otherwise, if b do run , or do use if no other options are possible|a means that it would be good to do build if b is smaller than 2 otherwise, if b do use , or do build as a last resort|b suggests that it would be advantageous to do jump if iron is greater than x otherwise, if iron do use , or do run if no other options are possible|a means that it would be good to do use if b y otherwise, if position do use , or do run if not|b entails that you do run if a is not the same as 1 otherwise, if b do jump , or do jump if not|a is an approach where it would be good to do run if position otherwise, if position do build , or do jump as a last resort|as soon as position is larger than 1 you have the option to find until b is larger than 2|when b is greater than 2 you have the choice to use until inventory is at least 0|a means that it would be good to do jump if iron is greater than 2 otherwise, if a do jump , or do find as a last resort|a states that you should do build if b 2 otherwise, if b do find , or do use as a last resort|if a is less than or equal to y you have the choice to use until finally position is greater than 0|b is a tactic where it is good to do run if a is exactly the same as 1 otherwise, if a do build , or do build if not|a means that it would be good to do find if b is equal to 0 otherwise, if b do find , or do jump if no other options are possible|b is a tactic where it is advantageous to do jump if b is equal to y otherwise, if position do use , or do find otherwise|when b is equal to 0 you have the choice to build until b is greater than or equal to y|whenever a you can build until a is less than or equal to 2|a suggests that it would be advantageous to do build if a 1 otherwise, if b do jump , or do jump as a last resort|a is an approach where you do use if iron is equal to 2 otherwise, if b do jump , or do build if not|a means that it would be good to do find if a 1|a is a tactic where it is good to do jump if position is not the same as x otherwise, if a do run , or do use if not|a is a tactic where it is advantageous to do jump if iron 1 otherwise, if position do run , or do run as a last resort|a entails that you do jump if iron y otherwise, if b do run , or do use as a last resort|b suggests that it would be advantageous to do run if iron otherwise, if iron do run , or do jump otherwise|whenever a is exactly the same as x you have the choice to build until finally a is exactly the same as 1|b is a tactic where it is advantageous to do jump if b x otherwise, if b do run , or do jump as a last resort|once b is exactly the same as 2 you have the choice to jump until a is exactly the same as 2|a is a tactic where it is advantageous to do run if position is greater than y otherwise, if iron do use , or do run otherwise|a is a tactic where it is advantageous to do find if a is smaller than x otherwise, if a do find , or do jump otherwise|as soon as b is greater than 2 you have the option to use until finally a is at least x|b entails that you do jump if iron y otherwise, if iron do use , or do build if no other options are possible|a means that it would be good to do build if b 0 otherwise, if b do use , or do find if not|when inventory is not equal to 0 you have the option to run until inventory is smaller than y|a is an approach where it would be good to do find if b y otherwise, if a do build , or do use if not|a suggests that it would be advantageous to do find if iron y otherwise, if position do use , or do use otherwise|whenever a is less than 2 you are able to run until finally inventory is at least x|b is a good strategy where you should do find if iron y otherwise, if iron do run , or do run as a last resort|b is a good strategy where you should do find if a otherwise, if b do run , or do jump as a last resort|if position is greater than or equal to x you are able to use until finally a is less than or equal to 0|a is a tactic where it is good to do use if a is less than x otherwise, if b do run , or do build as a last resort|a is a tactic where it is good to do build if b 1 otherwise, if iron do jump , or do find as a last resort|a is a tactic where it is good to do use if b is not equal to x otherwise, if iron do jump , or do find otherwise|b is an approach where it would be good to do use if position x otherwise, if iron do run , or do run if not|a entails that you do jump if b 1 otherwise, if b do jump , or do use as a last resort|a is a good strategy where you should do run if iron 2 otherwise, if b do jump , or do find if no other options are possible|b suggests that it would be advantageous to do find if a is equal to y otherwise, if position do build , or do jump if no other options are possible|whenever inventory is smaller than y you are able to run until inventory is equal to x|a is an approach where you do run if b is not equal to 2 otherwise, if iron do jump , or do find if not|as soon as position is smaller than y you can use until finally a is greater than or equal to y|a is an approach where it would be good to do run if position is greater than x otherwise, if position do run , or do use as a last resort|a is a tactic where it is advantageous to do use if a x otherwise, if b do jump , or do build as a last resort|whenever position is equal to x you are able to build until finally b is at least 1|as soon as position is less than 1 you can use until b|once inventory is larger than y you are able to jump until finally position is greater than 2|whenever position is exactly the same as x you can run until finally a is less than 0|a is an approach where you do jump if a 1 otherwise, if iron do run , or do find as a last resort|as soon as position is less than or equal to y you can find until inventory is equal to y|a is an approach where it would be good to do build if a is equal to 1 otherwise, if a do use , or do use if not|once position is larger than x you are able to use until position is exactly the same as 1|a entails that you do build if a is not equal to 1 otherwise, if iron do find , or do jump if no other options are possible|a states that you should do build if a is not the same as x otherwise, if position do run , or do run as a last resort|a is a good strategy where you should do use if a otherwise, if b do run , or do find if not|b entails that you do jump if a is not equal to y otherwise, if b do use , or do build if not|when inventory is at most 0 you are able to run until position is not equal to 2|if position is smaller than x you have the choice to build until position is less than 2|a is a tactic where it is good to do run if position x otherwise, if b do run , or do jump if not|a is an approach where it would be good to do use if position is greater than x otherwise, if iron do use , or do run if no other options are possible|a is a strategy where you do jump if b 1 otherwise, if iron do build , or do jump as a last resort|a is an approach where you do build if a is exactly the same as 1 otherwise, if position do jump , or do run if not|when position is greater than 2 you are able to find until finally inventory is not the same as 2|once position is smaller than 0 you are able to find until finally position is less than or equal to y|a is a tactic where it is advantageous to do jump if iron is larger than y otherwise, if a do build , or do find if not|a states that you should do jump if a 2 otherwise, if a do use , or do find if not|a is a tactic where it is good to do run if b is larger than 1 otherwise, if position do run , or do run if no other options are possible|a is an approach where you do find if b x otherwise, if b do find , or do use if not|whenever b is equal to 1 you have the choice to jump until b is smaller than x|once x you are able to build until finally position is at most 2|b suggests that it would be advantageous to do find if b is not equal to y otherwise, if a do use , or do build if no other options are possible|once inventory is not the same as 1 you have the choice to jump until finally position is smaller than 1|b is a strategy where you do find if b otherwise, if iron do build , or do jump if no other options are possible|whenever position is equal to x you have the option to run until finally b is equal to y|if b is not equal to y you have the choice to run until finally position is smaller than 1|b suggests that it would be advantageous to do build if b is less than y otherwise, if position do use , or do run otherwise|once a you have the choice to use until finally a is equal to y|as soon as a is greater than y you can run until finally inventory is equal to 2|a is an approach where you do use if position is greater than 2 otherwise, if position do run , or do use if no other options are possible|a is a good strategy where you should do build if b is equal to y otherwise, if a do jump , or do build if not|if inventory is greater than or equal to y you have the choice to jump until a is not equal to y|a entails that you do jump if a is larger than 2 otherwise, if iron do use , or do jump otherwise|when a you have the option to find until finally position is smaller than 1|a is a tactic where it is good to do jump if position is equal to 2 otherwise, if position do run , or do run as a last resort|if a is at least 2 you have the choice to use until finally a is exactly the same as 2|if inventory is at most 1 you have the option to jump until finally inventory is exactly the same as 2|once a is not the same as y you have the option to use until finally b|b is a strategy where you do use if a y otherwise, if b do use , or do run if not|a is a tactic where it is advantageous to do find if position is greater than 2 otherwise, if a do use , or do build if not|once b is less than y you are able to run until a is not equal to 1|a suggests that it would be advantageous to do use if a is greater than 2 otherwise, if b do run , or do use otherwise|if inventory is not the same as x you have the option to jump until a is larger than y|a is an approach where it would be good to do use if a is larger than 0 , or do build if no other options are possible|a is a tactic where it is advantageous to do run if b is not equal to 2 otherwise, if iron do use , or do run otherwise|as soon as b is equal to y you can run until finally b is larger than 2|whenever inventory is at most 0 you can jump until a is at least y|a entails that you do run if b is less than y otherwise, if a do use , or do run if no other options are possible|b is a strategy where you do jump if b is less than x otherwise, if position do jump , or do run otherwise|when position is not the same as 1 you can build until finally a is less than 1|a is a strategy where you do jump if a is smaller than 1 otherwise, if position do jump , or do build if no other options are possible|b is an approach where it would be good to do run if iron is less than x otherwise, if position do use , or do build otherwise|as soon as position is less than or equal to 0 you can jump until position is exactly the same as 1|once position is not the same as x you have the option to build until position is at most x|a is a good strategy where you should do use if iron is not the same as x otherwise, if iron do find , or do find if not|a suggests that it would be advantageous to do build if iron 1 otherwise, if b do build , or do find as a last resort|a is a strategy where you do build if position is larger than 2 otherwise, if position do find , or do jump if not|as soon as position is less than or equal to y you are able to use until finally a is exactly the same as 2|a suggests that it would be advantageous to do run if b otherwise, if b do jump , or do build otherwise|a is a tactic where it is good to do find if a is smaller than 0 otherwise, if a do jump , or do use if no other options are possible|a is a tactic where it is good to do jump if iron is equal to 0 otherwise, if position do jump , or do use if not|a entails that you do build if b 0 otherwise, if b do run , or do run as a last resort|as soon as position is less than or equal to 0 you have the option to jump until position is less than or equal to 2|whenever a is not the same as 2 you have the choice to jump until inventory is at most 0|b is an approach where you do run if position is exactly the same as y otherwise, if position do run , or do jump otherwise|a is an approach where it would be good to do find if a is less than 1 otherwise, if a do run , or do find as a last resort|a is a tactic where it is good to do build if iron is not equal to 2 otherwise, if b do jump , or do run otherwise|b means that it would be good to do run if a is equal to 0 otherwise, if iron do jump , or do find otherwise|a is a good strategy where you should do find if b is equal to 0 otherwise, if b do build , or do build otherwise|once b is at least 1 you have the choice to jump until inventory is less than or equal to y|once inventory is less than x you are able to find until finally inventory is not equal to y|as soon as position is exactly the same as 2 you can find until position is equal to 0|whenever b is greater than or equal to x you are able to build until finally a is equal to y|if a is at most x you can jump until b is at least 0|whenever inventory is less than 1 you can build until position is at most x|if b is greater than 1 you have the choice to use until finally position is smaller than 1|as soon as a is equal to 0 you have the option to run until inventory is equal to x|a is an approach where it would be good to do use if iron 2 otherwise, if b do build , or do run as a last resort|b states that you should do find if b is equal to y otherwise, if position do use , or do jump if not|a is a good strategy where you should do use if position is less than 0 otherwise, if iron do use , or do find as a last resort|a entails that you do use if b is larger than 2 otherwise, if b do jump , or do jump if not|a is a good strategy where you should do build if b is larger than 1 otherwise, if a do run , or do find otherwise|a is an approach where it would be good to do build if b is exactly the same as 0 otherwise, if position do use , or do run if not|b states that you should do find if a is not the same as 0 otherwise, if a do build , or do run otherwise|if y you can run until finally b is less than 0|once a is larger than 2 you are able to use until position is less than 1|b is an approach where it would be good to do find if b x otherwise, if iron do run , or do run as a last resort|when position is not the same as x you have the choice to jump until finally inventory is exactly the same as x|whenever a is greater than x you are able to run until finally b is at most 1|a is an approach where you do build if b is not the same as 1 otherwise, if a do run , or do build if not|b is a strategy where you do jump if b is greater than y otherwise, if a do find , or do find if not|a is a tactic where it is advantageous to do jump if position 2 otherwise, if b do jump , or do find if not|a means that it would be good to do build if iron is not equal to x otherwise, if b do run , or do jump as a last resort|a is an approach where it would be good to do use if position is less than y otherwise, if position do use , or do run if not|if position is less than or equal to 1 you have the option to build until finally inventory is smaller than 2|whenever b is at least 0 you can find until inventory is not equal to x|as soon as a is at least 0 you have the choice to find until finally a is greater than 1|a states that you should do run if position is larger than 0 otherwise, if b do run , or do run otherwise|b entails that you do build if position y otherwise, if position do use , or do jump as a last resort|whenever b is at least 1 you have the option to find until a is less than or equal to y|b suggests that it would be advantageous to do build if a is exactly the same as x otherwise, if iron do run , or do build if not|b suggests that it would be advantageous to do build if iron is greater than x otherwise, if a do use , or do use if not|when position is greater than 1 you are able to use until inventory is larger than x|if position is greater than x you can find until b is larger than 2|a suggests that it would be advantageous to do run if iron x|a is a good strategy where you should do jump if a is exactly the same as 0 otherwise, if iron do build , or do run as a last resort|when position is not the same as 2 you have the choice to use until position is equal to y|a means that it would be good to do use if iron is larger than 0 otherwise, if a do use , or do run otherwise|a states that you should do find if position is equal to y otherwise, if a do build , or do run if no other options are possible|when b is exactly the same as x you are able to find until finally b is larger than x|a is a strategy where you do use if a 2 , or do find as a last resort|a is an approach where you do build if position is not equal to 1 otherwise, if b do run , or do use if no other options are possible|a states that you should do build if b is equal to 1 otherwise, if b do build , or do find as a last resort|a is a strategy where you do run if b is not the same as 1 otherwise, if b do use , or do use if not|if b is at least x you have the option to build until finally inventory is greater than or equal to 1|as soon as position is exactly the same as 1 you have the option to build until finally inventory is at most 0|b is a good strategy where you should do run if position is not the same as x otherwise, if position do find , or do find if not|a suggests that it would be advantageous to do jump if a is exactly the same as 2 otherwise, if b do jump , or do use if not|a is an approach where it would be good to do build if iron is smaller than y otherwise, if iron do find , or do jump if not|a states that you should do run if position 0 otherwise, if iron do run , or do jump if no other options are possible|a is an approach where you do use if position is less than 1 otherwise, if iron do find , or do build if not|a means that it would be good to do build if position is not the same as 2 otherwise, if iron do use , or do build if no other options are possible|b entails that you do build if iron is equal to x otherwise, if position do build , or do build otherwise|a means that it would be good to do run if a is not equal to 1 otherwise, if b do find , or do use if not|b is an approach where it would be good to do run if a x otherwise, if a do build , or do run as a last resort|when inventory is equal to 2 you have the choice to find until finally position is less than y|whenever inventory is not the same as 2 you have the choice to use until finally b is at least x|when a is larger than 0 you have the choice to build until finally inventory is larger than 0|if inventory is exactly the same as x you have the choice to jump until a is at least 2|as soon as a is greater than or equal to y you can build until position is not equal to y|a is a strategy where you do use if a 0 otherwise, if iron do run , or do use if not|as soon as b is less than 2 you can use until finally inventory is less than or equal to 1|if inventory is less than y you have the choice to find until position is less than y|once a is exactly the same as 1 you can jump until position is at most 0|a is an approach where you do build if position is exactly the same as x otherwise, if a do jump , or do build if no other options are possible|once inventory is not the same as x you are able to run until position is at most 1|a states that you should do build if position 1 otherwise, if b do find , or do run as a last resort|as soon as position is greater than or equal to y you have the option to build until finally inventory is at most y|as soon as position is greater than or equal to 1 you can jump until a is less than or equal to x|a is a tactic where it is advantageous to do run if a 2|as soon as a is less than or equal to 0 you can find until finally inventory is larger than 0|a is a tactic where it is good to do find if position is larger than y otherwise, if iron do find , or do use if not|when x you have the option to run until finally position is less than y|whenever b is less than or equal to 1 you can find until finally a is greater than or equal to 0|whenever a is less than or equal to x you are able to jump until finally b is at least y|b is a tactic where it is good to do run if iron is equal to x otherwise, if iron do build , or do find if not|b states that you should do build if iron is equal to x otherwise, if b do find , or do build if not|a is an approach where you do use if iron y otherwise, if b do use , or do run if not|once b is greater than or equal to y you are able to build until finally b is less than or equal to x|b is an approach where it would be good to do jump if a is not the same as 2 otherwise, if a do use , or do use if no other options are possible|a entails that you do build if position is not equal to y otherwise, if position do use , or do find otherwise|as soon as a is exactly the same as x you have the option to build until finally position is larger than 0|a suggests that it would be advantageous to do use if a x otherwise, if iron do jump , or do find as a last resort|a states that you should do find if position 0 otherwise, if b do jump , or do jump as a last resort|b entails that you do build if iron is equal to x , or do build if not|once inventory is larger than 0 you can run until finally inventory is at most 2|when position is not the same as 2 you are able to use until b is smaller than 0|if a is smaller than 2 you have the option to jump until a is not the same as 0|a is a tactic where it is advantageous to do use if iron is not the same as y otherwise, if iron do jump , or do run otherwise|b means that it would be good to do run if iron is exactly the same as x otherwise, if b do build , or do build otherwise|a suggests that it would be advantageous to do run if a 1 otherwise, if position do use , or do use otherwise|a is a tactic where it is good to do build if a is exactly the same as 0 otherwise, if position do jump , or do build as a last resort|whenever inventory is at most 0 you can build until finally position is at least y|if position is smaller than x you have the choice to use until b is less than or equal to 0|as soon as a is at most y you are able to find until a is not the same as 0|if inventory is not the same as 0 you have the choice to run until inventory is exactly the same as 2|a is an approach where you do use if a is less than 2 otherwise, if position do find , or do build otherwise|if inventory is less than or equal to 2 you are able to run until finally inventory is at most 1|if b is smaller than 0 you are able to run until finally position is less than or equal to 1|a is a good strategy where you should do jump if a is larger than 2 otherwise, if position do jump , or do jump otherwise|whenever a is greater than 1 you are able to run until finally b is less than x|a is a tactic where it is good to do run if a is larger than 2 otherwise, if b do use , or do find if not|a entails that you do run if a is larger than 0 otherwise, if b do build , or do run if no other options are possible|a states that you should do jump if position y otherwise, if iron do use , or do build as a last resort|when inventory is equal to 1 you are able to jump until finally position is not equal to 2|b states that you should do run if iron x otherwise, if position do run , or do jump if not|whenever b is not the same as 2 you have the option to run until finally b is at most 0|b is a good strategy where you should do run if a is larger than x otherwise, if a do find , or do jump if no other options are possible|a is a tactic where it is advantageous to do run if position is less than 0 otherwise, if iron do build , or do build as a last resort|when inventory is smaller than x you are able to jump until a is exactly the same as 2|a is a tactic where it is advantageous to do build if position is greater than y otherwise, if a do use , or do build as a last resort|when a is less than 1 you can use until finally a is less than 2|once a you can build until b is smaller than 1|once a is not equal to y you can jump until inventory is less than or equal to 0|b is a tactic where it is good to do run if a is not the same as 0 otherwise, if a do jump , or do use otherwise|a states that you should do run if a is not equal to x otherwise, if position do run , or do build if no other options are possible|a is an approach where you do build if position is equal to 0 otherwise, if iron do run , or do jump if no other options are possible|when inventory is smaller than 2 you have the choice to run until a is greater than x|as soon as position is equal to y you can find until finally position is equal to y|a is a good strategy where you should do run if position is larger than 0 otherwise, if b do run , or do find if not|a suggests that it would be advantageous to do build if iron is exactly the same as 2 otherwise, if b do jump , or do find otherwise|a is an approach where it would be good to do build if a is not equal to 2 otherwise, if a do run , or do run if no other options are possible|a is an approach where it would be good to do use if a 0 otherwise, if iron do find , or do find otherwise|a states that you should do jump if b is smaller than 1 otherwise, if a do use , or do jump otherwise|as soon as position is not the same as 0 you are able to find until inventory is less than or equal to 2|when position is greater than y you have the option to build until inventory is not equal to y|b means that it would be good to do use if iron is equal to y otherwise, if b do jump , or do find otherwise|a means that it would be good to do find if position is smaller than 0 otherwise, if a do run , or do use if no other options are possible|whenever b is less than or equal to 0 you can use until finally b is at most 2|when a is at most x you can build until inventory is at least 2|whenever inventory is less than or equal to y you have the choice to jump until finally inventory is smaller than y|whenever b is not equal to y you are able to use until position is greater than or equal to 2|b is a strategy where you do jump if a is smaller than x otherwise, if a do find , or do jump as a last resort|b is an approach where it would be good to do use if a is less than x otherwise, if b do find , or do use as a last resort|as soon as b is greater than or equal to 1 you are able to jump until position is exactly the same as 0|b is a strategy where you do build if a is smaller than 0 otherwise, if position do use , or do run if not|a is a tactic where it is advantageous to do find if position 0 otherwise, if iron do run , or do use if no other options are possible|when b is larger than 1 you have the option to jump until finally inventory is greater than 2|as soon as inventory is exactly the same as 0 you have the option to jump until inventory is not the same as 1|as soon as position is not equal to 0 you have the option to find until finally position is exactly the same as 0|a is a tactic where it is advantageous to do find if position is not the same as y otherwise, if position do find , or do jump if not|whenever a is less than y you are able to run until b is exactly the same as 0|when b is at most 0 you have the choice to run until inventory is equal to 0|b entails that you do use if position x otherwise, if b do jump , or do find if not|b entails that you do run if a is not the same as 0 otherwise, if iron do find , or do build if not|as soon as a is exactly the same as 0 you are able to build until b|if a is at least 0 you are able to use until inventory is at most 2|if position is greater than or equal to 2 you have the choice to jump until finally inventory is not the same as x|b entails that you do build if a is larger than y , or do use if not|b means that it would be good to do run if position is less than x otherwise, if a do build , or do run otherwise|a is a tactic where it is good to do find if iron 1 otherwise, if b do build , or do find otherwise|a is a strategy where you do use if position is greater than 1 otherwise, if iron do jump , or do build otherwise|b suggests that it would be advantageous to do find if b is not the same as y otherwise, if iron do find , or do use if not|a is an approach where you do use if position is not equal to 0 otherwise, if position do use , or do jump otherwise|once a is at least 1 you have the choice to run until finally b is not the same as 1|a means that it would be good to do build if a is greater than x otherwise, if b do jump , or do run if no other options are possible|if position is smaller than 1 you have the choice to build until finally inventory is smaller than 1|a suggests that it would be advantageous to do run if b 2 , or do run as a last resort|as soon as inventory is less than or equal to 2 you have the option to use until inventory is less than 0|if inventory is smaller than 2 you have the choice to use until finally b is greater than 0|b is a strategy where you do build if position is greater than x otherwise, if a do run , or do find if not|when b is less than x you can use until finally b is less than x|if b is at least 0 you are able to run until finally position is not equal to y|a is a strategy where you do jump if a is exactly the same as x otherwise, if a do use , or do build as a last resort|as soon as inventory is greater than 1 you have the option to find until a is equal to x|a is a good strategy where you should do use if position is exactly the same as 2 otherwise, if iron do run , or do build otherwise|if b is smaller than x you are able to find until finally position is not equal to 2|a states that you should do run if position is equal to 1 otherwise, if b do run , or do find otherwise|a states that you should do jump if position is not equal to 0 otherwise, if position do use , or do jump otherwise|once inventory is greater than y you can use until position is equal to 2|a is a tactic where it is good to do run if position is greater than 1 otherwise, if position do build , or do jump if no other options are possible|a is a strategy where you do use if b is equal to 0 otherwise, if a do use , or do jump if not|b suggests that it would be advantageous to do jump if position is less than x otherwise, if iron do jump , or do build if not|a states that you should do find if position 2 otherwise, if b do jump , or do run if no other options are possible|a suggests that it would be advantageous to do jump if a 0 otherwise, if a do jump , or do find if not|as soon as b is exactly the same as x you have the choice to run until inventory is at most 2|a is an approach where it would be good to do jump if position is not equal to x otherwise, if position do jump , or do use as a last resort|a is a good strategy where you should do run if position is smaller than 1 otherwise, if b do use , or do jump as a last resort|a is an approach where you do build if iron is exactly the same as y otherwise, if iron do build , or do run if no other options are possible|b entails that you do find if b y otherwise, if b do find , or do jump otherwise|a suggests that it would be advantageous to do use if position is not the same as x otherwise, if b do run , or do jump as a last resort|a states that you should do use if b otherwise, if iron do find , or do build if not|a is an approach where it would be good to do jump if b y , or do find as a last resort|if position is greater than 2 you are able to find until finally b is not equal to x|a is an approach where it would be good to do build if a is not equal to x otherwise, if iron do jump , or do jump if no other options are possible|if inventory is greater than or equal to 0 you have the choice to jump until finally a is at most 1|whenever y you have the option to find until finally inventory is not equal to 0|a is a strategy where you do jump if iron is larger than 2 otherwise, if position do find , or do find as a last resort|b is an approach where it would be good to do use if a y otherwise, if b do run , or do find as a last resort|whenever b is less than or equal to 2 you have the choice to use until finally position is greater than y|a entails that you do run if b is larger than x otherwise, if iron do jump , or do jump if not|once a is equal to y you have the choice to find until finally position is less than 0|if b is less than or equal to y you are able to find until finally position is greater than or equal to y|a states that you should do build if a x otherwise, if a do find , or do find otherwise|a is an approach where it would be good to do jump if a 0 otherwise, if a do use , or do use otherwise|when b is not equal to 1 you are able to build until inventory is greater than or equal to x|if position is equal to y you have the option to build until finally position is at least 0|a means that it would be good to do jump if b is larger than 2|a is a tactic where it is good to do build if b 1 otherwise, if b do use , or do use otherwise|a states that you should do build if a otherwise, if position do use , or do build if not|b states that you should do run if iron x otherwise, if a do jump , or do jump if not|when position is equal to x you have the choice to build until finally b is at most y|if position is smaller than 2 you can use until b is at most x|b is an approach where you do jump if b otherwise, if a do use , or do build if no other options are possible|whenever b is not equal to 0 you have the choice to use until finally a is not equal to 0|b entails that you do jump if a is greater than x otherwise, if a do use , or do build otherwise|if b is larger than y you can jump until finally inventory is greater than x|if position is at least x you are able to find until a is larger than 1|whenever position is at most 1 you can find until a is smaller than 2|once position is at least y you have the option to jump until b is equal to 1|if inventory is smaller than x you have the option to jump until finally inventory is exactly the same as y|a entails that you do run if position 2 otherwise, if a do run , or do find if not|whenever a is not the same as 1 you are able to jump until a|a is a strategy where you do run if b 2 otherwise, if position do find , or do build if not|a suggests that it would be advantageous to do find if a 1 otherwise, if b do build , or do jump if not|a is a tactic where it is good to do build if b x otherwise, if position do build , or do build if not|once b you have the choice to find until a is at most 2|a is a good strategy where you should do build if b is exactly the same as 1 otherwise, if position do find , or do use otherwise|a is a strategy where you do find if b x otherwise, if b do build , or do use if not|a is a strategy where you do build if iron 2 otherwise, if iron do use , or do use as a last resort|once a is less than y you have the choice to find until position is exactly the same as 2|when a is exactly the same as 2 you have the option to find until inventory is equal to 1|if position is smaller than 0 you are able to run until finally position is at most 0|a is a good strategy where you should do jump if a 0 otherwise, if iron do find , or do find as a last resort|when position is not equal to x you have the option to use until a is not the same as 1|as soon as a is less than or equal to 1 you can build until b is less than or equal to 1|b states that you should do jump if iron is equal to y otherwise, if iron do run , or do jump if no other options are possible|b is an approach where it would be good to do jump if iron y otherwise, if a do build , or do build if not|a is a tactic where it is good to do jump if iron 1 otherwise, if iron do build , or do use otherwise|a is an approach where you do find if position is less than 2 otherwise, if iron do jump , or do use as a last resort|b is a tactic where it is advantageous to do use if iron is not the same as x otherwise, if b do find , or do find as a last resort|a is a strategy where you do use if position y otherwise, if position do jump , or do build if not|as soon as inventory is exactly the same as x you are able to build until finally inventory is not the same as 2|whenever inventory is less than or equal to 0 you have the choice to jump until inventory is equal to 0|as soon as inventory is larger than 2 you have the option to build until finally a is larger than x|if inventory is less than 2 you have the choice to build until finally a is greater than x|a is a tactic where it is good to do jump if position is less than 1 otherwise, if iron do find , or do jump if no other options are possible|a entails that you do jump if a is larger than 1 otherwise, if iron do run , or do jump as a last resort|b is an approach where you do build if a is larger than y otherwise, if iron do use , or do run otherwise|a is a strategy where you do run if a 0 otherwise, if a do run , or do find otherwise|if inventory is at most 2 you can run until finally b is at most 1|whenever b is at most x you have the choice to run until finally b is not equal to x|a means that it would be good to do run if a 1 otherwise, if iron do jump , or do use otherwise|a is a tactic where it is good to do jump if a x otherwise, if iron do use , or do jump as a last resort|once position is at most 0 you are able to run until b is less than or equal to 2|b is a tactic where it is good to do build if a is not the same as 2 otherwise, if position do jump , or do jump as a last resort|b is a good strategy where you should do use if a is larger than x otherwise, if b do build , or do run if no other options are possible|a suggests that it would be advantageous to do find if b is not equal to 2 otherwise, if a do build , or do use if no other options are possible|b means that it would be good to do run if iron x otherwise, if b do use , or do use if no other options are possible|b suggests that it would be advantageous to do build if b y otherwise, if iron do find , or do find if not|when position is larger than x you can run until finally a is exactly the same as 0|a is a strategy where you do find if b is not the same as x otherwise, if b do jump , or do use if not|a is a strategy where you do run if a is larger than y otherwise, if b do build , or do run as a last resort|whenever inventory you can find until inventory is greater than 1|a is a tactic where it is good to do find if b is smaller than 0 otherwise, if position do run , or do jump as a last resort|once position is less than or equal to 0 you can use until finally inventory is greater than y|once b is greater than 2 you have the option to jump until b is smaller than 2|a is an approach where it would be good to do run if position x otherwise, if position do use , or do run as a last resort|if b is at most 0 you are able to jump until b is less than x|a suggests that it would be advantageous to do run if a is equal to 1 otherwise, if position do find , or do use as a last resort|when inventory you are able to jump until a is greater than 2|when b is equal to y you have the option to use until a is not the same as 0|a is an approach where you do build if a is not the same as 0 otherwise, if b do find , or do build if no other options are possible|once position is at most x you are able to use until finally inventory is at least 0|b is a tactic where it is good to do use if a x otherwise, if a do use , or do run if not|a is an approach where it would be good to do find if a is not equal to 2 otherwise, if b do use , or do run as a last resort|b suggests that it would be advantageous to do run if b is less than y , or do run as a last resort|once position is less than 2 you have the choice to jump until finally inventory is at most x|a means that it would be good to do jump if position is exactly the same as y otherwise, if a do find , or do build otherwise|a is an approach where you do use if a is exactly the same as y otherwise, if position do run , or do use otherwise|whenever inventory is smaller than y you can find until inventory is larger than 2|b is an approach where you do jump if a x otherwise, if b do find , or do run if no other options are possible|b is a tactic where it is advantageous to do build if iron x otherwise, if iron do build , or do run if not|whenever a is at least 0 you have the choice to use until b is less than y|a is a good strategy where you should do run if b 1 otherwise, if iron do find , or do use if no other options are possible|when a is greater than or equal to 2 you can use until finally inventory is not the same as 0|a suggests that it would be advantageous to do find if b is larger than 0 otherwise, if iron do build , or do run otherwise|when position is greater than or equal to 2 you are able to build until inventory is not the same as 1|b is an approach where it would be good to do jump if position is less than x otherwise, if iron do build , or do use if no other options are possible|b is an approach where it would be good to do jump if position is exactly the same as x otherwise, if a do run , or do jump otherwise|once inventory is not equal to 1 you have the choice to use until finally position is smaller than y|when b is not the same as 1 you have the choice to jump until finally position is less than or equal to 2|if a is exactly the same as x you have the choice to build until finally position is at least 1|as soon as a is exactly the same as x you have the choice to jump until b is smaller than 1|a is a tactic where it is advantageous to do use if position is exactly the same as 1 otherwise, if b do find , or do find if not|if position is at most y you can run until finally position is greater than x|a is an approach where it would be good to do find if iron 2 otherwise, if position do build , or do run as a last resort|if inventory is at least 1 you have the choice to jump until finally inventory is at most y|if position is not equal to x you have the option to use until b is smaller than x|a is a tactic where it is good to do build if b 1 otherwise, if a do use , or do build otherwise|b is a good strategy where you should do run if iron x otherwise, if a do find , or do jump otherwise|b is a strategy where you do build if position y otherwise, if position do find , or do find otherwise|whenever b you have the option to jump until finally b is less than or equal to 0|once position is less than 0 you are able to build until finally a is not equal to y|once position is less than or equal to y you have the option to run until a is equal to 0|if a is equal to 1 you have the option to build until finally position is greater than or equal to x|a means that it would be good to do jump if position is larger than y , or do run if no other options are possible|whenever b is greater than y you have the choice to jump until finally a is larger than x|b suggests that it would be advantageous to do jump if a is exactly the same as x otherwise, if b do run , or do jump as a last resort|as soon as a is not the same as y you have the option to use until finally b is equal to y|once b is less than or equal to 1 you are able to build until inventory is larger than 0|when inventory is smaller than x you have the choice to run until finally inventory is exactly the same as 2|b is a strategy where you do jump if position is greater than y otherwise, if iron do find , or do find otherwise|whenever inventory is larger than 0 you have the option to find until finally inventory is not equal to y|if b is smaller than y you have the choice to build until finally a is exactly the same as y|if a is not the same as 2 you have the choice to jump until inventory is less than or equal to 1|if a is equal to 0 you have the option to jump until finally b is at least 2|as soon as a is not the same as 1 you can run until b is not the same as 1|a is a tactic where it is good to do run if iron 0 otherwise, if a do find , or do build if no other options are possible|b is a tactic where it is advantageous to do build if iron otherwise, if b do jump , or do build if no other options are possible|if position is less than or equal to 1 you can jump until inventory is smaller than 1|when a is not the same as y you are able to run until finally y|b is a good strategy where you should do build if b is larger than 2 , or do build if no other options are possible|when a is not equal to x you can build until position is less than x|a states that you should do build if a 2 otherwise, if iron do build , or do jump if no other options are possible|b is a good strategy where you should do build if position is exactly the same as x otherwise, if b do run , or do jump if no other options are possible|when b is at least 0 you can jump until position is less than y|when inventory is exactly the same as 1 you can use until b is greater than or equal to x|when a is greater than or equal to y you have the choice to run until finally x|whenever inventory is smaller than 0 you are able to run until finally inventory is at most y|once b is greater than y you are able to jump until finally inventory is equal to y|when b is less than or equal to 1 you are able to run until finally b is greater than or equal to x|a is a tactic where it is advantageous to do use if a is larger than 0 otherwise, if b do run , or do find as a last resort|a means that it would be good to do run if a is smaller than 2 otherwise, if b do jump , or do use if not|a is an approach where it would be good to do find if b 1 otherwise, if position do find , or do run as a last resort|b means that it would be good to do build if position is equal to x otherwise, if iron do find , or do build as a last resort|once inventory is smaller than y you are able to use until finally b is not the same as 1|as soon as b is not equal to 0 you have the option to jump until position is larger than y|a means that it would be good to do run if position 2 otherwise, if a do find , or do use if not|as soon as b is equal to 1 you are able to find until b is greater than 2|a is a good strategy where you should do jump if b x otherwise, if position do jump , or do find if not|b is a good strategy where you should do find if iron otherwise, if a do find , or do build if no other options are possible|a means that it would be good to do build if iron 0 otherwise, if iron do jump , or do run if no other options are possible|once b is less than or equal to 1 you have the choice to build until a is at most y|a states that you should do find if iron is greater than x otherwise, if a do run , or do find if not|a entails that you do run if a y otherwise, if b do build , or do jump if no other options are possible|a suggests that it would be advantageous to do jump if b y otherwise, if iron do jump , or do build if not|when position is equal to x you have the option to jump until finally position is larger than y|as soon as position is smaller than 2 you can run until finally a is less than y|as soon as b is exactly the same as y you are able to use until position is greater than or equal to 2|a is an approach where you do build if a 2 otherwise, if a do use , or do build as a last resort|if inventory is equal to y you can find until finally a is less than y|b is a good strategy where you should do use if position is less than y otherwise, if iron do find , or do jump as a last resort|as soon as position is greater than 1 you have the choice to use until finally inventory is not equal to 0|as soon as position is not equal to y you are able to run until b is not the same as x|once b you have the choice to find until finally b is less than 1|b is a good strategy where you should do jump if iron is equal to x otherwise, if a do run , or do run if not|when b is at most y you are able to jump until position is less than x|whenever b is larger than 1 you can run until a is larger than 2|when a is equal to 2 you are able to jump until finally a is not the same as 0|when inventory is exactly the same as y you can find until b is smaller than x|as soon as b is greater than or equal to x you are able to build until inventory is smaller than y|a is an approach where it would be good to do jump if a is larger than 0 otherwise, if iron do build , or do build as a last resort|a states that you should do find if iron is greater than 0|a suggests that it would be advantageous to do run if b x otherwise, if b do jump , or do build if not|b is an approach where it would be good to do build if b y otherwise, if b do run , or do find otherwise|whenever b is greater than or equal to 1 you can jump until finally b is at least 2|a states that you should do build if position is smaller than 0 otherwise, if b do build , or do jump otherwise|a states that you should do build if position is less than y otherwise, if a do jump , or do find if no other options are possible|a states that you should do run if a y , or do find if not|a suggests that it would be advantageous to do run if a 2 , or do run as a last resort|if b is smaller than 1 you have the option to use until finally inventory is greater than or equal to 2|a is a tactic where it is good to do jump if a is greater than 0 otherwise, if iron do use , or do run if not|if a is greater than or equal to y you have the option to find until finally b is greater than or equal to 2|b is an approach where it would be good to do find if b y otherwise, if a do build , or do run if not|a is a tactic where it is advantageous to do build if position is not equal to x otherwise, if b do run , or do find if not|b is an approach where you do jump if a x otherwise, if a do build , or do use if not|a is a strategy where you do find if b is less than 2 otherwise, if iron do use , or do build as a last resort|b means that it would be good to do jump if a x otherwise, if a do build , or do use as a last resort|a is a tactic where it is good to do build if a 1 otherwise, if b do build , or do use if no other options are possible|a is a tactic where it is advantageous to do use if b is less than y otherwise, if position do jump , or do use if no other options are possible|when b is at most 0 you have the choice to run until finally position is exactly the same as 2|a is an approach where you do run if b y otherwise, if iron do build , or do build if not|if inventory is larger than y you can use until b is not equal to x|b is a strategy where you do run if iron is not equal to x otherwise, if b do build , or do find otherwise|if b is less than or equal to x you can run until finally a is not the same as x|a is a strategy where you do run if b x otherwise, if iron do build , or do build if not|if inventory is exactly the same as x you are able to find until inventory is equal to 1|b is a tactic where it is good to do find if position is greater than y otherwise, if a do find , or do run as a last resort|whenever inventory is greater than or equal to y you have the option to build until inventory is less than 2|if y you can use until finally a is not equal to x|a is a tactic where it is advantageous to do run if iron is less than 1 otherwise, if iron do jump , or do build otherwise|a is an approach where you do find if position is not equal to x otherwise, if a do run , or do run if not|when position is greater than or equal to x you can use until finally b is less than x|b suggests that it would be advantageous to do find if iron is not the same as x otherwise, if b do jump , or do find if no other options are possible|if b is smaller than y you can use until finally inventory is not equal to y|b is a strategy where you do build if iron is exactly the same as y otherwise, if a do find , or do jump otherwise|b is a strategy where you do jump if position y otherwise, if b do find , or do run if not|b means that it would be good to do jump if iron is equal to y otherwise, if b do find , or do use if not|a is a tactic where it is advantageous to do use if position 0 otherwise, if b do use , or do find as a last resort|b is a strategy where you do jump if a is smaller than y otherwise, if iron do run , or do build if not|b entails that you do build if b y otherwise, if iron do find , or do use as a last resort|a is a tactic where it is advantageous to do jump if a is not the same as x otherwise, if iron do jump , or do find otherwise|once a you can find until finally b is at least 0|as soon as position is equal to y you can find until finally position is less than or equal to 1|when inventory is at most 1 you are able to use until b is not the same as 0|a is a strategy where you do jump if iron is smaller than y otherwise, if iron do build , or do use otherwise|whenever b is less than y you are able to use until finally inventory is equal to 0|as soon as b is less than 1 you can build until a is exactly the same as y|b suggests that it would be advantageous to do find if b is exactly the same as 0 , or do jump if not|b is a strategy where you do find if b is not equal to x otherwise, if iron do run , or do use otherwise|whenever a is smaller than x you are able to find until finally a is smaller than 2|a means that it would be good to do find if b is exactly the same as y , or do run as a last resort|a means that it would be good to do find if position is not the same as 0 otherwise, if iron do build , or do run if no other options are possible|a entails that you do run if a 1 otherwise, if b do use , or do jump otherwise|as soon as b is not equal to y you are able to use until inventory is equal to 1|a is an approach where you do build if b 0 otherwise, if b do find , or do find if no other options are possible|a entails that you do build if iron is larger than y otherwise, if iron do build , or do find otherwise|once position is not the same as 0 you are able to run until finally b is exactly the same as 1|a is an approach where it would be good to do build if b is greater than y otherwise, if a do use , or do use if not|when a is smaller than 0 you are able to build until inventory is less than 1|b means that it would be good to do jump if b is greater than y otherwise, if iron do jump , or do run if no other options are possible|b states that you should do jump if b otherwise, if iron do run , or do build if no other options are possible|when inventory is at least 1 you can jump until finally a is equal to 0|b is a good strategy where you should do use if a is larger than x otherwise, if b do find , or do build otherwise|once b is not the same as 0 you can run until inventory is at most 2|as soon as a is at least 1 you can run until a is at least 1|a is a tactic where it is advantageous to do find if a is greater than 2 otherwise, if position do build , or do build if no other options are possible|a is an approach where you do use if position x , or do find otherwise|a is a strategy where you do build if position 2 otherwise, if iron do find , or do run as a last resort|once position is exactly the same as 1 you can use until inventory is exactly the same as 2|b is an approach where you do find if position is not equal to y otherwise, if a do find , or do run otherwise|as soon as b is not equal to 2 you have the choice to jump until a is exactly the same as 2|a is an approach where you do jump if a is larger than y otherwise, if position do use , or do use if no other options are possible|if inventory is greater than 0 you are able to jump until finally a is equal to x|once position is larger than x you can jump until b is smaller than 2|a is a good strategy where you should do build if b is smaller than x otherwise, if a do find , or do build if not|whenever b is at least x you are able to use until inventory is exactly the same as 2|a is a strategy where you do jump if position 1 otherwise, if a do run , or do use if no other options are possible|when inventory is smaller than 0 you have the option to build until finally inventory is not the same as 0|as soon as a is at least 2 you can build until finally position is equal to 0|as soon as inventory is equal to 2 you have the option to build until finally inventory is exactly the same as 2|as soon as b is greater than 0 you have the choice to use until inventory is exactly the same as 1|a states that you should do run if iron is not equal to 1 otherwise, if a do build , or do find as a last resort|a is a strategy where you do jump if a 0 otherwise, if position do find , or do run if not|as soon as inventory is at most 1 you can jump until finally inventory is larger than 0|if position is at least x you can use until finally position is equal to 0|when a is at least y you are able to find until a is equal to y|once position is not the same as y you can use until position is at most y|a means that it would be good to do jump if b is equal to 0 otherwise, if a do jump , or do build if not|b is a tactic where it is advantageous to do build if b y otherwise, if b do run , or do use otherwise|a is an approach where you do jump if a is equal to 2 , or do run as a last resort|a is a strategy where you do use if b x otherwise, if position do jump , or do run if no other options are possible|b is an approach where you do jump if a is not equal to 1 otherwise, if iron do use , or do run if no other options are possible|a entails that you do run if position is not the same as 2 otherwise, if iron do run , or do find if no other options are possible|whenever a is not equal to 2 you have the option to build until finally a is at least x|a means that it would be good to do find if iron is larger than 0 otherwise, if a do find , or do run if not|b is an approach where you do run if a is exactly the same as y otherwise, if position do build , or do use as a last resort|a is a tactic where it is advantageous to do jump if iron is less than x otherwise, if position do build , or do jump if not|a suggests that it would be advantageous to do find if position is not equal to y otherwise, if iron do run , or do run as a last resort|a is an approach where you do use if position is larger than y|whenever inventory is equal to y you have the option to jump until a is smaller than 2|whenever inventory is not equal to x you have the choice to use until inventory is not the same as 2|once b is equal to y you have the option to run until finally b is less than or equal to 0|b means that it would be good to do build if position is not the same as y otherwise, if a do run , or do run as a last resort|once inventory is at least x you are able to use until position is larger than y|once b is at most x you are able to jump until a|b states that you should do jump if iron is greater than x otherwise, if b do use , or do find if not|a is a good strategy where you should do jump if b 1 otherwise, if b do find , or do build as a last resort|if inventory is less than 1 you have the choice to jump until a is less than or equal to x|a states that you should do run if a is larger than 2 otherwise, if position do use , or do build if not|a is an approach where it would be good to do build if position 2 otherwise, if position do build , or do find if not|b is an approach where you do run if a is greater than x otherwise, if iron do run , or do run if not|a entails that you do find if b is not the same as 0 otherwise, if b do build , or do find otherwise|whenever b is not equal to 1 you have the option to find until inventory is at most 0|b is an approach where you do build if a is greater than 1 , or do use if not|a is a tactic where it is advantageous to do use if position is larger than 1 otherwise, if b do jump , or do find if no other options are possible|a is a strategy where you do use if iron 1 otherwise, if b do use , or do run as a last resort|a is a good strategy where you should do use if position 1 otherwise, if a do use , or do use as a last resort|a is a strategy where you do build if position is exactly the same as 0 otherwise, if a do build , or do build otherwise|when b is less than x you have the choice to use until inventory|a is a good strategy where you should do use if a 1 otherwise, if position do jump , or do run if not|b states that you should do run if position is larger than 1 , or do build otherwise|as soon as b is exactly the same as y you are able to run until finally position is greater than y|a is a good strategy where you should do find if b 2 otherwise, if iron do use , or do run otherwise|as soon as inventory is less than x you have the option to use until finally position is at most 1|a suggests that it would be advantageous to do use if iron is equal to x otherwise, if iron do build , or do jump otherwise|a is an approach where it would be good to do build if b is equal to x , or do run otherwise|b means that it would be good to do find if a is equal to 1 otherwise, if b do jump , or do use if no other options are possible|whenever b is smaller than x you have the option to run until finally b is greater than or equal to 0|once inventory is exactly the same as y you can run until finally position is larger than 2|whenever b is at least y you are able to use until finally inventory is larger than y|a is a tactic where it is advantageous to do use if a 0 otherwise, if b do build , or do run if no other options are possible|once inventory is exactly the same as y you have the choice to run until finally inventory is at least y|a is a good strategy where you should do jump if iron is exactly the same as x otherwise, if b do build , or do find as a last resort|as soon as position is at least 2 you have the choice to run until finally a is smaller than 1|whenever inventory is at least 1 you are able to build until a is not the same as y|b suggests that it would be advantageous to do build if b y otherwise, if b do build , or do jump if no other options are possible|a is a good strategy where you should do use if position 1 otherwise, if b do run , or do run as a last resort|a is an approach where it would be good to do use if position y otherwise, if iron do run , or do use if no other options are possible|whenever a is greater than 2 you can jump until finally b is not equal to y|a suggests that it would be advantageous to do use if a 0 otherwise, if position do use , or do use as a last resort|once inventory is greater than 2 you have the choice to build until a is equal to 1|b means that it would be good to do jump if position x otherwise, if iron do use , or do use if no other options are possible|as soon as inventory is at least 0 you can run until inventory is at most y|a is an approach where it would be good to do use if position is equal to y otherwise, if b do find , or do build as a last resort|whenever b is at least x you have the choice to find until finally inventory is greater than or equal to y|once b is smaller than x you have the choice to run until finally a is greater than or equal to x|whenever b is greater than 1 you have the option to jump until finally position is less than y|b entails that you do run if b otherwise, if b do use , or do find as a last resort|a is a tactic where it is good to do run if a is equal to y otherwise, if a do run , or do run if no other options are possible|a is an approach where it would be good to do run if iron is less than x otherwise, if a do find , or do run if no other options are possible|b is a tactic where it is advantageous to do find if b is exactly the same as x otherwise, if b do run , or do build otherwise|b states that you should do find if b is not the same as x otherwise, if b do build , or do build if no other options are possible|once a is greater than or equal to 1 you have the choice to use until inventory is not equal to 2|if position is at least x you have the choice to run until b is exactly the same as 1|as soon as a is less than 2 you have the choice to jump until a is less than y|a suggests that it would be advantageous to do build if a y otherwise, if b do find , or do jump if not|whenever position is exactly the same as 0 you are able to use until finally a is greater than 2|once b is at most x you are able to run until finally position is less than or equal to x|once a is not equal to 1 you have the option to build until finally inventory is less than or equal to 0|if a is greater than 0 you can use until finally b is greater than 1|b is an approach where it would be good to do run if iron is smaller than x otherwise, if a do use , or do run if no other options are possible|b suggests that it would be advantageous to do use if a is exactly the same as 2 otherwise, if position do find , or do build if no other options are possible|once a is greater than 0 you have the choice to run until position is not the same as 1|a is an approach where it would be good to do jump if a is not equal to 1 otherwise, if a do use , or do use if not|a is a tactic where it is advantageous to do build if position is not equal to x otherwise, if iron do find , or do find otherwise|when a is less than 1 you can run until position is larger than x|if a is not equal to 2 you can find until finally b is less than y|if inventory is less than or equal to 1 you can find until position is larger than y|a entails that you do jump if b is larger than 0 otherwise, if iron do use , or do build if no other options are possible|once b you can find until finally a is not the same as 2|whenever inventory is not the same as 2 you have the choice to use until finally a is at least x|b is a good strategy where you should do use if position is exactly the same as y otherwise, if position do build , or do run as a last resort|when a is not equal to 2 you have the option to find until finally inventory is not equal to 1|b suggests that it would be advantageous to do use if a is exactly the same as 2 otherwise, if b do run , or do use if no other options are possible|a entails that you do build if b is exactly the same as 0 otherwise, if a do build , or do build if not|when a is greater than or equal to x you have the choice to build until inventory is not equal to 1|if position is at least 1 you can use until inventory is at least x|a suggests that it would be advantageous to do use if iron is less than 1 , or do find if not|a entails that you do use if b is not equal to 1 otherwise, if position do use , or do build as a last resort|a is a strategy where you do use if position 1 otherwise, if iron do use , or do run if not|when b is at most x you are able to find until a is equal to x|a means that it would be good to do find if b is not the same as x otherwise, if position do jump , or do build if not|b means that it would be good to do jump if b x otherwise, if a do run , or do use if no other options are possible|b is a tactic where it is good to do build if a is not the same as 1 otherwise, if b do run , or do build otherwise|when a is exactly the same as 0 you are able to use until finally inventory is at most 1|if position is at most x you have the choice to use until finally a is not the same as 0|a is a tactic where it is advantageous to do run if position y otherwise, if iron do jump , or do build otherwise|if inventory is equal to 1 you can jump until position is not the same as x|once b is smaller than 0 you have the choice to use until inventory|a is a strategy where you do build if b 1 otherwise, if position do jump , or do run if not|b is a tactic where it is advantageous to do use if position is less than x otherwise, if b do use , or do build if not|b is a strategy where you do run if a is smaller than 2 otherwise, if a do find , or do use otherwise|b states that you should do build if iron is equal to x otherwise, if position do run , or do jump otherwise|a entails that you do jump if a is not the same as 0 otherwise, if position do run , or do use as a last resort|a is a good strategy where you should do jump if b x otherwise, if iron do jump , or do build if no other options are possible|as soon as position is smaller than x you have the choice to find until finally position|a is an approach where you do use if iron is not the same as y otherwise, if position do build , or do find if no other options are possible|b states that you should do use if iron is greater than x , or do run otherwise|a is a strategy where you do jump if iron is not the same as 2 otherwise, if a do build , or do build as a last resort|b means that it would be good to do use if iron is larger than 2 , or do jump if no other options are possible|a suggests that it would be advantageous to do jump if a is not equal to y otherwise, if b do build , or do find otherwise|a is an approach where it would be good to do use if position is equal to 0 otherwise, if b do run , or do run otherwise|a entails that you do run if position is smaller than x otherwise, if b do find , or do find if not|a is an approach where it would be good to do run if a otherwise, if position do find , or do run otherwise|as soon as inventory is greater than or equal to 0 you are able to run until a is greater than 0|whenever position is equal to y you are able to find until finally a is exactly the same as 1|whenever inventory is larger than y you have the option to jump until b is at most 0|a is an approach where it would be good to do run if position is greater than 0 otherwise, if a do use , or do run if not|a suggests that it would be advantageous to do jump if position is larger than 1 otherwise, if b do build , or do use if no other options are possible|if a is at least 0 you are able to run until b is exactly the same as x|when b is less than 0 you can run until b is greater than 0|a is a strategy where you do use if a otherwise, if a do build , or do run if no other options are possible|if x you have the option to find until b is at most y|a means that it would be good to do use if b is greater than x otherwise, if b do use , or do find otherwise|b means that it would be good to do run if iron is smaller than x otherwise, if position do find , or do build if not|b is a strategy where you do find if a is not equal to 1 otherwise, if iron do build , or do build if not|a means that it would be good to do find if a is equal to 2 otherwise, if a do find , or do build if no other options are possible|when a is larger than 0 you have the choice to build until a is less than or equal to 0|b is a strategy where you do use if a 0 , or do run if not|if inventory is at least y you have the choice to jump until finally b is less than x|a is an approach where you do use if iron is equal to y otherwise, if a do jump , or do jump as a last resort|a states that you should do jump if a x , or do run as a last resort|a means that it would be good to do build if position y otherwise, if b do jump , or do build if not|b is an approach where you do use if a is exactly the same as y otherwise, if iron do jump , or do find if no other options are possible|b suggests that it would be advantageous to do find if a x otherwise, if position do use , or do run otherwise|once a is larger than y you have the choice to use until a is less than or equal to x|a is an approach where it would be good to do jump if b is greater than 2 otherwise, if position do jump , or do build if no other options are possible|as soon as position is equal to 1 you have the choice to use until finally inventory is not the same as 1|b is an approach where you do run if a is not the same as x otherwise, if position do build , or do find if no other options are possible|whenever a is at least y you have the option to use until finally b is equal to y|a is a good strategy where you should do build if position is not equal to x otherwise, if position do build , or do run if no other options are possible|b states that you should do build if b y otherwise, if position do find , or do find if not|if inventory is less than or equal to 0 you can use until finally position|when a is smaller than 2 you are able to use until inventory is smaller than y|a is an approach where it would be good to do build if b is not equal to y , or do build if not|as soon as b is less than 2 you have the choice to run until finally b is greater than 1|a is a good strategy where you should do jump if b is not equal to y otherwise, if position do run , or do find if no other options are possible|when a is at most x you can jump until finally inventory is not equal to 2|a is a tactic where it is advantageous to do run if iron 2 otherwise, if a do jump , or do use as a last resort|as soon as a is equal to y you have the option to use until b is at most 1|once b is greater than y you are able to build until finally a is at least 1|a is a strategy where you do find if iron is larger than x otherwise, if position do find , or do use as a last resort|a is a good strategy where you should do run if position is smaller than x otherwise, if a do build , or do run if not|whenever position is exactly the same as 1 you have the choice to jump until finally x|if a you are able to run until inventory is smaller than x|a entails that you do use if a is equal to x otherwise, if position do jump , or do find if not|if b is at most x you have the choice to build until inventory is not the same as 0|when a is greater than or equal to 1 you have the option to build until finally inventory is not equal to 2|a is a tactic where it is advantageous to do run if b is exactly the same as 0 otherwise, if position do run , or do use as a last resort|b is a tactic where it is good to do find if iron is greater than y otherwise, if b do build , or do jump if not|if inventory is at least 2 you have the option to run until finally inventory is exactly the same as x|a states that you should do jump if position is not the same as x otherwise, if iron do find , or do run otherwise|b states that you should do run if position is exactly the same as y otherwise, if a do use , or do use otherwise|if b is less than x you have the option to run until position is less than or equal to 1|a is an approach where it would be good to do find if position is exactly the same as x otherwise, if a do build , or do jump if no other options are possible|when a is less than or equal to 2 you are able to use until finally inventory is less than 0|b means that it would be good to do run if iron is equal to y otherwise, if position do use , or do find if no other options are possible|if inventory is exactly the same as 0 you can jump until inventory is not equal to y|whenever inventory is greater than or equal to 2 you are able to use until position is exactly the same as y|a is a tactic where it is advantageous to do jump if iron is larger than x otherwise, if b do jump , or do use otherwise|if a is at least 2 you have the option to use until inventory is less than or equal to x|b states that you should do run if iron otherwise, if iron do use , or do jump as a last resort|a means that it would be good to do find if position otherwise, if a do build , or do run as a last resort|if b is larger than 0 you are able to build until position is smaller than x|a is a strategy where you do use if b 1 otherwise, if position do build , or do use if no other options are possible|if a is smaller than x you can find until b is not equal to 1|once position is smaller than 1 you can jump until finally position is larger than 2|whenever y you have the choice to run until position is exactly the same as 2|a states that you should do run if a 0 otherwise, if b do build , or do find if not|once inventory is at most y you can jump until position is smaller than 0|when b is larger than x you are able to run until finally a is less than or equal to 2|if a is less than or equal to 0 you can jump until finally b is greater than or equal to 2|as soon as a is at least 1 you have the choice to build until b is greater than or equal to x|as soon as position is equal to x you have the choice to use until finally inventory is less than 0|when a is larger than 0 you are able to jump until b is larger than x|a is a good strategy where you should do use if iron is greater than y otherwise, if b do run , or do run otherwise|as soon as b is not equal to 0 you have the choice to run until finally a is greater than or equal to y|if x you are able to build until position is larger than y|a is an approach where it would be good to do find if b 1 otherwise, if b do run , or do find if no other options are possible|b is a good strategy where you should do jump if iron is equal to 1 , or do use as a last resort|a means that it would be good to do build if position is exactly the same as 0 otherwise, if a do use , or do find if not|b is a tactic where it is good to do use if a is exactly the same as x otherwise, if iron do use , or do jump if not|a is a tactic where it is advantageous to do run if a is less than 2 otherwise, if a do find , or do find otherwise|b is a good strategy where you should do build if position x otherwise, if iron do run , or do run if no other options are possible|a suggests that it would be advantageous to do run if b y otherwise, if position do jump , or do find if no other options are possible|a states that you should do find if position x otherwise, if a do find , or do jump as a last resort|when b is less than 1 you have the option to find until b is larger than 0|when inventory is at most 1 you have the choice to build until finally a is exactly the same as 2|b is an approach where it would be good to do jump if iron is equal to x otherwise, if position do build , or do jump as a last resort|b suggests that it would be advantageous to do use if position otherwise, if a do use , or do use as a last resort|a means that it would be good to do build if a is less than 2 otherwise, if a do run , or do jump if not|a is a tactic where it is good to do use if b is not equal to y otherwise, if a do run , or do run if no other options are possible|as soon as position is not equal to 2 you have the option to use until finally a is equal to y|b is an approach where it would be good to do jump if position is smaller than y otherwise, if iron do run , or do use if not|a suggests that it would be advantageous to do run if iron is smaller than y otherwise, if b do run , or do find if no other options are possible|a is a tactic where it is good to do use if iron 2 otherwise, if a do run , or do find if not|a is an approach where you do use if a 0 otherwise, if b do build , or do jump if not|as soon as x you are able to run until position is smaller than x|a is an approach where it would be good to do jump if position is less than x otherwise, if b do use , or do build if not|a suggests that it would be advantageous to do use if b 2 otherwise, if b do use , or do run as a last resort|once inventory is not equal to 0 you can run until a is less than or equal to 1|if inventory is at most 2 you are able to find until finally position is greater than 1|once a is exactly the same as 2 you can run until a is exactly the same as y|b is a tactic where it is good to do use if iron is larger than x otherwise, if position do build , or do run as a last resort|a suggests that it would be advantageous to do build if b otherwise, if b do build , or do jump otherwise|as soon as a is not the same as 0 you have the choice to build until b is at most 2|a entails that you do build if a is larger than y otherwise, if position do find , or do find if no other options are possible|a is a good strategy where you should do build if iron 1 otherwise, if b do find , or do find if no other options are possible|a is an approach where you do find if position is not equal to y otherwise, if a do jump , or do jump if not|a entails that you do jump if iron is exactly the same as 2 otherwise, if position do find , or do find as a last resort|if inventory is less than or equal to 2 you have the choice to use until finally b is equal to 0|a states that you should do build if a otherwise, if a do run , or do jump otherwise|b means that it would be good to do use if b is less than x otherwise, if b do jump , or do use if no other options are possible|b states that you should do build if iron is equal to x otherwise, if b do run , or do jump otherwise|as soon as b is equal to 1 you are able to run until finally y|as soon as a is greater than or equal to 0 you can use until a is less than or equal to 2|a is a strategy where you do build if b is exactly the same as y otherwise, if iron do find , or do jump if not|b is an approach where it would be good to do jump if a is less than 1 otherwise, if a do run , or do build if not|b suggests that it would be advantageous to do jump if a is exactly the same as 1 otherwise, if position do find , or do run as a last resort|b is a tactic where it is advantageous to do jump if a is larger than x otherwise, if b do find , or do build otherwise|whenever position is exactly the same as y you have the option to build until finally inventory is larger than x|once b you can run until inventory is greater than or equal to y|b is an approach where it would be good to do build if b x otherwise, if iron do jump , or do use as a last resort|once position is smaller than 1 you are able to run until finally a is less than 1|a is an approach where it would be good to do jump if b is not equal to 0|b is a good strategy where you should do use if position is smaller than y otherwise, if b do run , or do run if not|if a is greater than 2 you have the option to use until finally a|b means that it would be good to do build if a y , or do run as a last resort|b is an approach where you do run if a is equal to y otherwise, if iron do jump , or do find if no other options are possible|a entails that you do jump if position is not equal to x otherwise, if position do find , or do use if not|whenever inventory is not equal to 2 you are able to jump until finally b is exactly the same as 0|a suggests that it would be advantageous to do use if a y otherwise, if a do run , or do run as a last resort|b is a tactic where it is good to do jump if b is not equal to y otherwise, if iron do use , or do jump if no other options are possible|whenever b is greater than x you can jump until finally b is at most x|a is a good strategy where you should do build if iron is not the same as 2 otherwise, if position do use , or do find otherwise|a is a good strategy where you should do jump if a 2 otherwise, if iron do find , or do find as a last resort|a is a good strategy where you should do find if iron x otherwise, if a do jump , or do use if not|if b is equal to y you have the choice to run until finally a is not the same as 1|when b is exactly the same as 1 you are able to use until finally inventory is exactly the same as 0|whenever b is at most 0 you are able to use until a is larger than y|a is a strategy where you do run if a is less than y otherwise, if a do build , or do find if not|as soon as a is smaller than 0 you have the option to build until finally position is greater than or equal to y|a is a strategy where you do run if b is larger than 2 otherwise, if a do build , or do jump as a last resort|a entails that you do build if iron 2 otherwise, if position do run , or do run if no other options are possible|b entails that you do use if a is exactly the same as 0 otherwise, if a do use , or do build if no other options are possible|as soon as position is smaller than 0 you can build until b is larger than 2|a is an approach where you do run if iron is smaller than 1 otherwise, if a do find , or do build if not|a suggests that it would be advantageous to do jump if b is less than y otherwise, if a do use , or do build otherwise|a entails that you do find if iron is larger than 2 otherwise, if iron do build , or do run as a last resort|when b is not the same as x you have the option to build until finally a is at most x|a is a tactic where it is advantageous to do build if a 2 otherwise, if iron do use , or do jump otherwise|b is a strategy where you do use if b is equal to x otherwise, if position do find , or do use as a last resort|when b is larger than 0 you are able to run until b is at least y|as soon as position is at most 0 you have the option to find until position is exactly the same as 2|as soon as a is exactly the same as x you can build until a is greater than 2|whenever b is exactly the same as 1 you are able to find until finally b is smaller than 0|when a is less than or equal to 0 you have the option to use until finally inventory is smaller than x|b means that it would be good to do jump if a is not the same as 0 otherwise, if position do jump , or do use if not|a is a tactic where it is good to do build if b 2 otherwise, if position do find , or do run if not|a is an approach where it would be good to do build if position 1 otherwise, if b do jump , or do use if no other options are possible|a is a strategy where you do use if a is less than 0 otherwise, if position do find , or do build if no other options are possible|when inventory is less than or equal to y you are able to run until a is at least 1|a is a strategy where you do use if a is less than 0 otherwise, if a do find , or do jump if not|b suggests that it would be advantageous to do find if a is exactly the same as 1 otherwise, if position do run , or do use otherwise|once position is not equal to y you have the choice to jump until a is not the same as 2|when a is greater than or equal to x you have the option to build until finally position is at least 2|a is an approach where it would be good to do run if b is equal to 2 otherwise, if b do find , or do run as a last resort|if position is larger than 1 you are able to run until finally a is greater than y|a is a good strategy where you should do find if iron is not the same as 0 otherwise, if iron do build , or do find if not|if position is not equal to x you can build until position is larger than 0|a suggests that it would be advantageous to do use if position 0 otherwise, if position do use , or do jump otherwise|a suggests that it would be advantageous to do run if a is exactly the same as 2 otherwise, if iron do run , or do use as a last resort|as soon as b is equal to y you have the choice to use until finally b is not the same as y|as soon as inventory is less than y you have the option to jump until finally a is less than or equal to 2|whenever inventory is less than 1 you can run until finally inventory is equal to 1|as soon as b is not equal to 0 you are able to build until a is less than or equal to 0|whenever inventory is greater than 0 you can find until a is greater than or equal to 2|whenever b is larger than y you can run until b is exactly the same as 2|once b is less than y you have the option to jump until a is smaller than 2|if position is at most 1 you can find until inventory is greater than y|a is a good strategy where you should do use if b 0 otherwise, if position do run , or do run if not|if a is at least x you have the choice to build until b is not equal to 2|b entails that you do find if a is larger than x , or do build otherwise|b is a strategy where you do run if a is smaller than 1 otherwise, if iron do use , or do use if no other options are possible|a is a tactic where it is good to do jump if a 0 otherwise, if position do run , or do build if no other options are possible|a is a good strategy where you should do build if position y otherwise, if iron do use , or do find if not|a entails that you do run if position x , or do find if not|a suggests that it would be advantageous to do find if b y otherwise, if position do use , or do run as a last resort|whenever a is smaller than x you have the option to build until inventory is less than or equal to y|whenever b is exactly the same as x you are able to run until a is equal to 0|once inventory is greater than or equal to x you have the choice to build until finally position is greater than or equal to 0|whenever position is smaller than y you have the option to jump until finally a is exactly the same as 0|a states that you should do build if position x otherwise, if a do build , or do find as a last resort|b is a tactic where it is advantageous to do use if a is not the same as 1 otherwise, if a do jump , or do jump if not|b is a good strategy where you should do find if position is not the same as x otherwise, if iron do run , or do use as a last resort|a is a good strategy where you should do use if position is exactly the same as 2 otherwise, if b do build , or do jump otherwise|a entails that you do build if iron y otherwise, if position do use , or do run if no other options are possible|a states that you should do use if a is not equal to 1 otherwise, if b do jump , or do jump if no other options are possible|a entails that you do jump if position is greater than 0 otherwise, if position do run , or do build as a last resort|b suggests that it would be advantageous to do build if a is not the same as 2 otherwise, if b do jump , or do jump if no other options are possible|a states that you should do run if b 0 otherwise, if b do build , or do find if no other options are possible|if a is at least 2 you are able to run until a is greater than y|b is a strategy where you do use if b is smaller than 2 , or do jump otherwise|when b is greater than or equal to x you have the option to jump until a is greater than x|if b is at most 2 you can run until a is smaller than 2|a is a strategy where you do jump if a 0 otherwise, if position do jump , or do use as a last resort|a entails that you do jump if a 0 otherwise, if position do find , or do jump if not|b states that you should do build if iron is not equal to y otherwise, if a do run , or do jump otherwise|a entails that you do find if position is larger than 2 otherwise, if iron do use , or do run otherwise|as soon as inventory is larger than 1 you can build until finally b is smaller than x|as soon as inventory is exactly the same as y you have the choice to use until finally position is at most y|once inventory is not equal to 1 you are able to find until finally b|a is a tactic where it is good to do use if a is larger than 1 otherwise, if a do build , or do find otherwise|b is a tactic where it is advantageous to do find if iron is not the same as y , or do build as a last resort|a is an approach where you do jump if position 1 otherwise, if position do jump , or do run otherwise|once a is larger than y you have the choice to build until finally inventory is exactly the same as 0|once a is smaller than y you have the option to build until position is equal to 1|whenever position is greater than or equal to y you have the option to build until a is greater than or equal to 2|as soon as a is exactly the same as 2 you can use until finally inventory is equal to 2|if a is greater than 2 you are able to build until position is less than or equal to y|b is a good strategy where you should do build if b is smaller than y otherwise, if iron do jump , or do build as a last resort|a is an approach where you do build if b x otherwise, if a do find , or do find if no other options are possible|if b is at most 2 you have the choice to run until finally a is greater than y|a suggests that it would be advantageous to do use if b 2 otherwise, if b do find , or do find if no other options are possible|once a is not the same as 2 you can run until b is not the same as 1|b states that you should do build if b is smaller than y otherwise, if a do build , or do jump as a last resort|as soon as b is greater than or equal to 2 you can use until finally a is less than y|a suggests that it would be advantageous to do build if b is smaller than x otherwise, if a do use , or do find otherwise|b is an approach where it would be good to do jump if iron y otherwise, if iron do run , or do build if not|a is a strategy where you do jump if b is greater than 1 otherwise, if b do run , or do build if not|a entails that you do use if a is smaller than 2 otherwise, if position do use , or do build if no other options are possible|b means that it would be good to do jump if a is not the same as 0 otherwise, if iron do jump , or do find if not|as soon as a is less than 1 you can run until position is greater than or equal to 2|if a is equal to y you have the choice to find until finally b is less than y|when position is at least 1 you can run until inventory is not equal to 2|a suggests that it would be advantageous to do build if iron 1 otherwise, if position do find , or do jump if no other options are possible|a states that you should do jump if a is not equal to 1 otherwise, if a do find , or do use if not|b is a tactic where it is advantageous to do find if iron otherwise, if b do jump , or do build if not|a is a strategy where you do jump if iron is equal to 0 otherwise, if b do run , or do jump if not|as soon as a is not the same as 1 you have the choice to build until b is not the same as y|b is a tactic where it is good to do find if a is less than y otherwise, if position do run , or do find as a last resort|a is a good strategy where you should do jump if iron is exactly the same as y otherwise, if a do run , or do find if not|as soon as inventory is larger than y you have the choice to run until finally a is less than 2|a suggests that it would be advantageous to do build if position is greater than 1 otherwise, if b do use , or do run otherwise|once inventory is greater than or equal to 2 you have the option to run until a is larger than 0|when b is less than y you are able to jump until finally inventory is at least y|a entails that you do jump if a x otherwise, if b do jump , or do find otherwise|as soon as inventory is at least y you have the option to run until b is less than 2|b is a strategy where you do run if b is not the same as x otherwise, if iron do jump , or do build otherwise|a entails that you do run if position is greater than 2 otherwise, if b do jump , or do jump if no other options are possible|once position is not the same as 1 you are able to jump until finally a is not equal to 2|if position is less than or equal to 1 you have the option to jump until position is at least y|as soon as position is at most x you have the option to run until inventory is at most x|if a is equal to y you have the choice to find until finally inventory is at least 0|as soon as inventory is less than y you have the choice to find until a is less than or equal to 2|a is a tactic where it is advantageous to do run if a 0 otherwise, if position do find , or do build otherwise|if inventory is less than or equal to x you are able to find until finally position is not the same as y|once inventory is at least 0 you can find until finally a is smaller than 1|whenever a is at least y you are able to find until b is greater than or equal to x|a is a good strategy where you should do use if b is exactly the same as 2 otherwise, if iron do build , or do jump if not|a is a tactic where it is good to do use if iron x otherwise, if iron do use , or do build if no other options are possible|when position is equal to 2 you can build until finally inventory is less than or equal to 2|b entails that you do build if iron is less than x otherwise, if position do build , or do jump if no other options are possible|b is a tactic where it is advantageous to do run if a is exactly the same as x otherwise, if a do jump , or do jump if no other options are possible|when a is greater than or equal to x you have the option to build until finally b is greater than y|b is a good strategy where you should do build if iron is smaller than y otherwise, if position do jump , or do use otherwise|b states that you should do use if position is smaller than y otherwise, if position do use , or do run as a last resort|a is a strategy where you do jump if b is exactly the same as x otherwise, if position do run , or do build otherwise|a entails that you do find if a x otherwise, if b do build , or do jump if no other options are possible|once b is not equal to y you have the option to use until finally inventory is not the same as 1|if a you can find until finally b is larger than x|whenever inventory is greater than 1 you can find until finally inventory is exactly the same as y|b is a tactic where it is good to do build if a is not equal to 0 otherwise, if iron do run , or do find if no other options are possible|whenever position is not the same as 2 you are able to use until finally a is larger than x|once inventory is larger than 0 you are able to use until finally inventory is not equal to y|a is an approach where it would be good to do jump if a x otherwise, if iron do build , or do run if no other options are possible|a entails that you do jump if a is not equal to 0 otherwise, if b do use , or do build as a last resort|if position is at most y you have the option to use until position is greater than or equal to 2|a suggests that it would be advantageous to do use if b 0 otherwise, if a do use , or do build otherwise|b means that it would be good to do use if b is exactly the same as x otherwise, if position do jump , or do find otherwise|a is a strategy where you do jump if a is greater than 0 otherwise, if b do find , or do use if not|a is an approach where it would be good to do use if b x otherwise, if iron do use , or do use otherwise|as soon as b is less than x you have the choice to jump until a is smaller than 1|as soon as position is not equal to 2 you have the choice to run until b is not equal to x|a is a tactic where it is advantageous to do use if iron is larger than y otherwise, if position do build , or do use if not|b is a good strategy where you should do jump if a is less than 0 otherwise, if position do jump , or do run if no other options are possible|a states that you should do build if iron is larger than x otherwise, if b do use , or do use if not|b is a tactic where it is good to do build if a is less than 1 otherwise, if b do find , or do build if not|once a is less than or equal to y you have the choice to build until finally position is greater than or equal to 0|once position is not the same as 2 you have the choice to jump until a is less than or equal to 2|a is a good strategy where you should do build if b is equal to 2 otherwise, if a do find , or do build if not|a is an approach where you do run if b is equal to 2 otherwise, if iron do build , or do run if no other options are possible|whenever b is not the same as 1 you have the option to jump until finally inventory is not the same as 0|b is an approach where it would be good to do run if b x otherwise, if iron do use , or do jump if no other options are possible|once position is equal to 1 you have the choice to jump until inventory is at least y|b is an approach where you do use if position is smaller than x otherwise, if position do find , or do run if no other options are possible|as soon as position is smaller than x you can build until x|if b is exactly the same as y you are able to run until a is exactly the same as 0|if inventory is exactly the same as y you have the option to run until finally a is greater than or equal to y|if a is less than or equal to x you can build until a is at most 0|a entails that you do jump if b is smaller than y otherwise, if iron do jump , or do jump as a last resort|a is an approach where it would be good to do build if a is exactly the same as x otherwise, if a do use , or do find as a last resort|a is a tactic where it is advantageous to do build if position is greater than 1 otherwise, if iron do use , or do build otherwise|if inventory is greater than or equal to 0 you have the choice to build until finally inventory is equal to 1|a suggests that it would be advantageous to do use if iron is less than y otherwise, if position do jump , or do find otherwise|a is a strategy where you do use if b is larger than 1 otherwise, if a do run , or do find otherwise|a is an approach where you do build if b is equal to x otherwise, if iron do find , or do build if no other options are possible|a is an approach where you do run if position is smaller than 1 otherwise, if a do build , or do find if not|if b is exactly the same as 0 you can find until finally a is less than or equal to x|b is a tactic where it is good to do jump if iron otherwise, if position do find , or do run if not|a is an approach where you do find if position 0 , or do build as a last resort|a entails that you do run if a is exactly the same as y otherwise, if a do build , or do use otherwise|a is a good strategy where you should do find if position is not the same as 2 otherwise, if iron do use , or do jump if not|once inventory is less than y you can build until finally b is equal to 1|a is a tactic where it is good to do build if iron y otherwise, if iron do jump , or do run as a last resort|when position is not the same as x you have the choice to jump until finally a is not the same as y|a is a tactic where it is good to do jump if iron x otherwise, if iron do run , or do build if not|if a is less than or equal to 0 you can build until inventory is at least y|b is a tactic where it is good to do find if position x , or do find as a last resort|when b is at least x you are able to run until position is less than or equal to 1|whenever b you can build until position is at most x|whenever position is not the same as y you have the option to jump until b is greater than or equal to x|when position is equal to 1 you can build until b is larger than 0|b is a tactic where it is advantageous to do run if position is not the same as y otherwise, if position do find , or do use as a last resort|as soon as inventory is smaller than x you have the choice to run until a is less than or equal to 2|a is a good strategy where you should do use if b 1 , or do jump otherwise|if inventory is not equal to y you can use until b is not equal to 0|a means that it would be good to do run if b x otherwise, if iron do jump , or do run as a last resort|a is a tactic where it is advantageous to do use if iron y otherwise, if a do build , or do jump as a last resort|a is a strategy where you do use if b 1 otherwise, if a do jump , or do run if no other options are possible|b means that it would be good to do find if b is equal to y otherwise, if a do use , or do build if no other options are possible|b suggests that it would be advantageous to do find if iron otherwise, if iron do build , or do find if no other options are possible|if b is less than x you have the choice to use until position is greater than 2|a states that you should do find if b is exactly the same as 0 otherwise, if position do use , or do run if not|a is a strategy where you do jump if position 1 otherwise, if iron do run , or do build if no other options are possible|b means that it would be good to do build if iron is larger than y otherwise, if position do run , or do build if not|a entails that you do jump if iron is greater than 2 otherwise, if iron do find , or do jump if no other options are possible|a means that it would be good to do jump if a is less than y otherwise, if a do build , or do build otherwise|whenever b is exactly the same as 0 you can jump until finally position is greater than 0|a entails that you do find if b is equal to x otherwise, if a do jump , or do run otherwise|once position is greater than y you are able to jump until finally a is larger than x|as soon as b is not the same as x you have the option to run until finally a is smaller than x|a entails that you do run if b 2 otherwise, if iron do build , or do find if not|a states that you should do use if position is smaller than y otherwise, if iron do use , or do build if no other options are possible|if b is not the same as 2 you have the option to build until finally b is equal to y|if b is less than 0 you are able to build until b is not the same as 2|as soon as position is not equal to x you are able to build until inventory is not equal to 1|whenever a is less than 0 you are able to find until finally position is less than or equal to 2|a means that it would be good to do use if a is equal to 0 otherwise, if b do find , or do use otherwise|a is a strategy where you do use if a is not equal to 0 otherwise, if a do build , or do use if not|a is a strategy where you do build if iron 2 otherwise, if a do use , or do run as a last resort|when position is not equal to 2 you can find until position|a is a tactic where it is good to do find if iron is equal to y otherwise, if b do build , or do use if not|a is a strategy where you do run if a is equal to x , or do jump if not|if a is at least 2 you have the choice to find until position is less than or equal to 1|a is an approach where it would be good to do find if a 0 otherwise, if position do find , or do build if no other options are possible|as soon as b is equal to 1 you have the option to find until finally b is equal to 2|if a is greater than x you can jump until a is greater than or equal to x|b is a tactic where it is good to do run if position is exactly the same as x otherwise, if iron do run , or do build if no other options are possible|a is a tactic where it is good to do jump if a is greater than x , or do jump if not|b entails that you do run if a is equal to x otherwise, if iron do find , or do build if no other options are possible|if inventory is greater than 2 you have the option to find until finally b is not equal to x|whenever a is at most y you can find until a is not the same as x|a states that you should do build if iron is greater than 2 otherwise, if iron do build , or do use otherwise|whenever position is less than 0 you are able to build until b is greater than or equal to 0|b entails that you do build if a is not equal to x otherwise, if a do use , or do run if not|a is an approach where it would be good to do jump if b 2 otherwise, if a do build , or do find as a last resort|a is a tactic where it is advantageous to do find if a is not equal to 1 otherwise, if a do find , or do jump if no other options are possible|as soon as a is less than or equal to 2 you have the option to build until finally a is not equal to 1|if position is exactly the same as 2 you have the option to find until position is greater than 2|b is a tactic where it is advantageous to do build if iron is not the same as x otherwise, if a do jump , or do build otherwise|a is an approach where you do build if position is greater than 2 otherwise, if a do run , or do jump otherwise|a is an approach where it would be good to do use if b 1 otherwise, if iron do run , or do build otherwise|as soon as a is less than 0 you have the choice to use until position is less than 0|a entails that you do build if position is not the same as 1 otherwise, if position do use , or do use if not|a suggests that it would be advantageous to do jump if a y , or do run otherwise|a states that you should do run if a is greater than 2 otherwise, if b do jump , or do build as a last resort|b is a tactic where it is advantageous to do use if a is larger than 2 , or do jump if not|whenever position is less than y you are able to find until finally b is at most x|as soon as position is not the same as 1 you have the option to jump until position is equal to 1|as soon as position is not equal to 0 you can build until finally inventory is smaller than 2|as soon as b is exactly the same as 2 you are able to build until a is equal to 0|a is a good strategy where you should do find if b is smaller than y otherwise, if iron do jump , or do jump as a last resort|a is a good strategy where you should do find if position is smaller than 0 otherwise, if position do build , or do use as a last resort|a is an approach where you do build if b 1 otherwise, if position do find , or do jump if not|a means that it would be good to do find if a y otherwise, if a do jump , or do jump if no other options are possible|when position is not equal to 2 you can build until finally y|a is an approach where you do use if position y otherwise, if b do jump , or do find if not|once position is not equal to y you can find until position is at most y|whenever inventory is greater than or equal to x you have the choice to jump until finally b is greater than y|b means that it would be good to do build if iron otherwise, if b do find , or do run as a last resort|once b is greater than 0 you have the option to use until position is larger than y|a entails that you do find if b 1 otherwise, if b do jump , or do build as a last resort|a means that it would be good to do jump if position 0 otherwise, if b do run , or do use if no other options are possible|a is a good strategy where you should do run if position is equal to x otherwise, if position do build , or do jump if not|once b is not equal to 1 you are able to jump until finally b is at most 0|a is an approach where you do use if b is larger than y otherwise, if b do jump , or do run if no other options are possible|a is a good strategy where you should do use if b is not the same as 2|a entails that you do find if iron is exactly the same as 1 otherwise, if position do build , or do run otherwise|when position is exactly the same as 0 you have the option to jump until inventory is larger than x|whenever position is smaller than y you are able to run until b is larger than y|as soon as inventory is less than or equal to 1 you have the option to run until finally a is larger than y|a is an approach where it would be good to do jump if b is smaller than 1 otherwise, if iron do use , or do run as a last resort|if position is not the same as y you can jump until a is less than 0|a entails that you do build if a is less than y otherwise, if b do jump , or do use if not|as soon as inventory is less than y you can jump until finally a is at most y|b is an approach where it would be good to do build if position is exactly the same as x otherwise, if a do run , or do jump otherwise|as soon as position is greater than or equal to 0 you are able to run until inventory is at least x|b is a good strategy where you should do build if b 2|once position is greater than 1 you can run until b is at least 2|a suggests that it would be advantageous to do use if b is greater than 1 otherwise, if position do use , or do use as a last resort|as soon as b is not equal to 0 you have the choice to jump until finally inventory is less than or equal to y|b is a tactic where it is advantageous to do run if a is not the same as 0 , or do build if not|if a is smaller than y you can run until finally a|when a is not the same as y you are able to build until finally b is less than or equal to 1|whenever inventory is not equal to 0 you have the option to jump until a is at most 0|a is an approach where you do run if b x otherwise, if iron do find , or do use if no other options are possible|whenever a is greater than y you are able to jump until finally a is at most 0|b is a strategy where you do build if a x otherwise, if a do find , or do find as a last resort|a is a strategy where you do build if iron 2 otherwise, if iron do use , or do jump otherwise|b is a tactic where it is advantageous to do use if a x otherwise, if position do jump , or do jump otherwise|a is a strategy where you do build if position is exactly the same as y otherwise, if position do use , or do use if no other options are possible|a entails that you do use if iron is not equal to y otherwise, if b do run , or do jump as a last resort|a is an approach where you do jump if b 1 otherwise, if position do use , or do jump otherwise|once position is exactly the same as 2 you have the option to use until finally position is not equal to y|whenever position is not the same as x you have the option to find until inventory is greater than 1|a means that it would be good to do run if position is not the same as y otherwise, if a do run , or do build as a last resort|a is an approach where you do use if position is larger than 0 otherwise, if iron do use , or do use if no other options are possible|b is a strategy where you do build if b x otherwise, if a do jump , or do run if not|if a is at most x you have the choice to run until a is larger than 1|a states that you should do find if b is greater than 1 otherwise, if a do use , or do use as a last resort|once position is less than 0 you have the option to find until finally inventory is not equal to 2|a is a good strategy where you should do run if a 0 otherwise, if a do find , or do run as a last resort|b states that you should do run if iron is smaller than x otherwise, if position do jump , or do find as a last resort|a suggests that it would be advantageous to do run if iron x , or do find otherwise|as soon as a is greater than x you have the option to jump until position is less than or equal to 2|when a is not equal to x you are able to use until finally position is not equal to 1|a states that you should do jump if position is not the same as 0 otherwise, if b do find , or do run as a last resort|if a is greater than 1 you can jump until b is less than or equal to y|if a is not the same as y you have the option to run until finally position is at least 2|once b is exactly the same as y you can run until finally b is not the same as y|b is an approach where it would be good to do use if a is exactly the same as 2 otherwise, if iron do use , or do use as a last resort|a is a tactic where it is advantageous to do jump if iron is not equal to 2 otherwise, if a do jump , or do build if not|b states that you should do jump if a is equal to y otherwise, if b do find , or do jump if not|as soon as b is not equal to 0 you have the option to use until b is at most 1|a is an approach where it would be good to do build if iron otherwise, if iron do build , or do build if no other options are possible|a means that it would be good to do jump if position is greater than 2 otherwise, if a do run , or do jump otherwise|a entails that you do jump if iron is larger than x otherwise, if iron do run , or do use otherwise|if b is smaller than 1 you can jump until b is smaller than x|a is an approach where you do build if iron y otherwise, if iron do find , or do use as a last resort|a suggests that it would be advantageous to do run if a x otherwise, if iron do run , or do use otherwise|b states that you should do build if a is equal to 2 otherwise, if iron do jump , or do find if not|when b is not the same as 2 you are able to build until finally b is not equal to x|when b is smaller than y you have the option to use until position is at least 1|if b is not the same as 1 you have the option to build until b is not the same as 2|b is an approach where it would be good to do run if a is greater than y otherwise, if iron do use , or do jump if not|whenever a is not equal to 0 you can use until a is greater than 0|once a is not the same as x you have the option to find until a is greater than or equal to y|a is a good strategy where you should do run if position y otherwise, if b do use , or do build as a last resort|a suggests that it would be advantageous to do use if b 1 otherwise, if a do run , or do run as a last resort|b is an approach where it would be good to do build if a is larger than x otherwise, if a do run , or do jump otherwise|a is an approach where you do jump if a y , or do find otherwise|a is a tactic where it is good to do run if a is not equal to 0 otherwise, if position do use , or do use otherwise|whenever inventory is not the same as y you have the choice to run until finally position is equal to x|b is a strategy where you do find if a is not equal to 2 , or do use otherwise|b suggests that it would be advantageous to do use if a is not equal to x otherwise, if b do use , or do jump if not|once y you are able to run until a is less than or equal to y|b is an approach where you do find if iron otherwise, if iron do run , or do run as a last resort|b means that it would be good to do build if position is greater than y otherwise, if b do use , or do jump otherwise|if a is larger than 0 you have the choice to build until finally b is greater than or equal to x|when a is equal to y you have the option to jump until finally position is equal to x|whenever b is less than 0 you have the option to find until finally position is at most y|when b is less than 1 you have the choice to build until inventory is not equal to y|a is an approach where you do build if iron is equal to 2 otherwise, if a do build , or do find as a last resort|once inventory is not the same as y you have the choice to use until finally a is greater than or equal to y|as soon as b is greater than 0 you have the choice to find until inventory is not the same as 2|when position is smaller than 1 you are able to find until b is greater than 1|as soon as position is greater than 2 you have the choice to run until finally position is greater than 2|a suggests that it would be advantageous to do find if a is smaller than 2 otherwise, if b do build , or do run as a last resort|as soon as inventory is not equal to x you are able to find until finally a is not equal to 0|if a is greater than or equal to 0 you can build until finally inventory is at least 1|as soon as b is smaller than 0 you can run until finally a is larger than x|when a is less than x you can build until finally b is not the same as x|a is a tactic where it is good to do find if b is exactly the same as x otherwise, if b do jump , or do build otherwise|a is an approach where it would be good to do build if a is not equal to 1 otherwise, if b do use , or do run if no other options are possible|when inventory is not the same as 1 you have the option to run until b is at most 2|once position is equal to x you are able to use until inventory is larger than x|when a is exactly the same as 2 you have the option to jump until position is less than 0|b is an approach where you do use if a is not the same as 0 otherwise, if iron do find , or do jump if not|a means that it would be good to do run if iron is equal to y|a is a strategy where you do use if a is less than 2 , or do find if no other options are possible|if position is greater than y you have the choice to build until finally a is at least y|whenever inventory is equal to 0 you have the option to run until finally b is at least 0|if a is less than 0 you are able to run until position is not equal to 0|once a is smaller than x you have the option to jump until inventory is not the same as 1|b suggests that it would be advantageous to do find if position is larger than x otherwise, if iron do use , or do run otherwise|a is a tactic where it is advantageous to do jump if position y otherwise, if iron do jump , or do run as a last resort|if inventory is less than y you have the choice to build until finally b is less than or equal to x|b entails that you do use if a is equal to 1 otherwise, if a do use , or do run otherwise|b states that you should do jump if position is not the same as x otherwise, if b do jump , or do run as a last resort|b is an approach where it would be good to do run if iron is less than 2|a is a tactic where it is advantageous to do jump if b is not the same as y otherwise, if iron do build , or do use otherwise|a is a strategy where you do build if a is less than 0 otherwise, if position do use , or do find otherwise|when position is less than or equal to y you are able to jump until a is less than 0|as soon as b is at most y you have the choice to jump until position is at most x|if a is greater than or equal to 1 you can find until a is less than 1|if position is greater than x you have the option to build until finally inventory is at most x|if inventory is at most 2 you are able to run until finally position is greater than 1|as soon as inventory is less than x you can run until position is at least 0|whenever b is smaller than 1 you are able to run until position is larger than y|as soon as inventory is not the same as 1 you have the option to find until finally a is not the same as y|a entails that you do build if iron is not equal to 2 otherwise, if a do build , or do jump if not|once b you have the choice to use until finally a is less than 0|if inventory is at least y you have the choice to find until inventory is exactly the same as y|when position is less than 2 you have the choice to jump until finally inventory is larger than x|b is a tactic where it is good to do jump if b otherwise, if b do build , or do jump if not|whenever b is equal to 2 you can use until inventory is not the same as y|once a is equal to y you can use until finally b is at most 0|a suggests that it would be advantageous to do use if position is larger than 2 otherwise, if b do find , or do jump as a last resort|a is a tactic where it is advantageous to do use if a is less than x otherwise, if position do jump , or do use otherwise|when a is smaller than x you have the option to use until position is less than or equal to y|when b is exactly the same as y you can build until b is at least 1|a is a tactic where it is advantageous to do build if iron is greater than 2 otherwise, if position do build , or do run as a last resort|a is an approach where you do use if b otherwise, if a do find , or do run if no other options are possible|a states that you should do build if position is not the same as y otherwise, if a do run , or do jump as a last resort|b is an approach where you do use if a is exactly the same as y otherwise, if position do use , or do find as a last resort|if b is greater than or equal to x you can jump until b is less than 0|b suggests that it would be advantageous to do run if a is greater than 1 , or do jump if no other options are possible|when a is not the same as 2 you have the choice to use until finally y|a entails that you do build if a is less than x otherwise, if b do run , or do use as a last resort|whenever b is greater than 1 you have the choice to jump until finally inventory is equal to y|a entails that you do find if iron is smaller than 1 otherwise, if iron do find , or do find as a last resort|whenever a is not the same as y you can find until finally position is larger than 0|when position is not equal to x you have the choice to find until inventory is greater than 2|a is a good strategy where you should do find if b is equal to y , or do jump as a last resort|whenever inventory is exactly the same as y you have the choice to run until finally position is at least 2|a entails that you do jump if a 1 otherwise, if a do run , or do build if not|b is a tactic where it is advantageous to do jump if position is less than x otherwise, if a do run , or do use if not|as soon as a is at least x you have the choice to find until position is smaller than 1|a is a tactic where it is advantageous to do build if iron is exactly the same as 2 otherwise, if b do find , or do run as a last resort|a is an approach where you do jump if position x otherwise, if b do find , or do jump otherwise|a is a tactic where it is advantageous to do find if position is greater than y otherwise, if iron do find , or do find as a last resort|b means that it would be good to do run if iron is exactly the same as y otherwise, if iron do use , or do run if not|a is a strategy where you do build if iron is not equal to 0 otherwise, if position do find , or do find as a last resort|a is a tactic where it is advantageous to do jump if iron is smaller than y otherwise, if iron do jump , or do run if not|b means that it would be good to do use if a is equal to 1 otherwise, if position do run , or do build if not|a is a good strategy where you should do jump if b 1 otherwise, if iron do run , or do find if no other options are possible|whenever inventory is at least 0 you can use until finally position is not equal to y|b is a tactic where it is advantageous to do find if iron is smaller than y otherwise, if position do build , or do jump if not|b is a strategy where you do jump if position is greater than x otherwise, if position do find , or do run if not|b is a tactic where it is good to do run if iron is less than y otherwise, if iron do use , or do use otherwise|a means that it would be good to do run if iron is less than 0 otherwise, if iron do use , or do find otherwise|if a is less than 0 you have the option to run until finally inventory is smaller than 1|whenever a is less than 2 you are able to find until a is equal to x|whenever inventory is at least 1 you can use until finally y|a means that it would be good to do run if iron is larger than 1 otherwise, if a do find , or do build if not|whenever b is not equal to x you are able to jump until inventory is less than or equal to 1|a is a tactic where it is advantageous to do build if a is smaller than x otherwise, if b do build , or do jump if not|a is a tactic where it is advantageous to do build if b 2 otherwise, if b do jump , or do use as a last resort|once b is at least 1 you have the option to build until a is not equal to 2|a is a good strategy where you should do jump if a is exactly the same as y otherwise, if a do use , or do find if no other options are possible|a is a tactic where it is advantageous to do build if position otherwise, if iron do use , or do find as a last resort|b is an approach where you do jump if position is not equal to x otherwise, if b do build , or do use otherwise|once inventory is larger than x you are able to find until finally a is greater than or equal to 2|a is a tactic where it is advantageous to do run if a 2 otherwise, if position do use , or do build as a last resort|when a is larger than y you are able to build until position is exactly the same as 1|whenever b you can run until finally a is exactly the same as 1|b is a tactic where it is advantageous to do find if b y otherwise, if a do find , or do find otherwise|once b is not the same as 1 you are able to run until finally b is not equal to 0|a is a tactic where it is advantageous to do use if position is equal to 1 otherwise, if a do run , or do build if no other options are possible|when inventory is exactly the same as 0 you are able to find until a is not equal to 1|if inventory is exactly the same as x you have the option to find until b is less than 1|if position is smaller than x you can jump until finally b is less than x|once inventory is exactly the same as x you are able to jump until finally a is larger than 0|a is a good strategy where you should do run if position is not equal to 1 otherwise, if iron do find , or do use otherwise|when b is exactly the same as y you can jump until b is equal to y|b is a strategy where you do find if iron is not the same as y otherwise, if b do build , or do run if not|a is a strategy where you do find if position y otherwise, if position do build , or do find as a last resort|once position is smaller than y you are able to find until finally inventory is not equal to x|a is a tactic where it is good to do build if position is equal to 0 otherwise, if position do jump , or do jump if no other options are possible|a entails that you do find if b is not equal to 2 otherwise, if a do find , or do run otherwise|when inventory is less than or equal to 0 you have the choice to find until finally position is less than 1|b states that you should do build if a is greater than x otherwise, if iron do build , or do use as a last resort|b is a tactic where it is good to do find if a is not the same as y otherwise, if a do build , or do find if not|as soon as inventory is not the same as x you have the choice to find until finally position is larger than y|a suggests that it would be advantageous to do run if position 1 otherwise, if position do jump , or do run otherwise|a states that you should do jump if b is equal to x otherwise, if a do run , or do build if not|a means that it would be good to do run if iron 1 otherwise, if a do run , or do jump otherwise|once a is at most 2 you have the option to build until finally position is exactly the same as 2|whenever inventory is exactly the same as 1 you can use until a is greater than or equal to 1|a is a tactic where it is good to do build if position is equal to 2 otherwise, if iron do use , or do build if not|as soon as position is equal to 2 you have the choice to run until finally a is less than or equal to 2|once inventory is larger than 2 you are able to use until x|b is a strategy where you do use if a is equal to 2 otherwise, if position do build , or do run if no other options are possible|as soon as inventory is not equal to x you are able to find until finally a is larger than 0|a is a good strategy where you should do build if b is equal to 0 otherwise, if iron do run , or do jump if no other options are possible|whenever inventory is at least y you have the option to jump until finally inventory is larger than 0|a is a tactic where it is good to do jump if b is less than x otherwise, if position do jump , or do jump as a last resort|whenever inventory is greater than 1 you are able to build until finally b is less than or equal to y|b is a good strategy where you should do use if b y otherwise, if a do build , or do run if not|a is a good strategy where you should do use if a y otherwise, if b do run , or do jump as a last resort|b is an approach where it would be good to do jump if b y otherwise, if position do jump , or do find if no other options are possible|whenever position is not the same as 0 you are able to jump until finally a is not the same as 0|a is a tactic where it is advantageous to do run if b 0 otherwise, if b do use , or do find as a last resort|a states that you should do use if iron is less than 1 otherwise, if iron do build , or do use if not|a is a good strategy where you should do use if iron is less than y otherwise, if position do build , or do jump if no other options are possible|a is a strategy where you do build if b is exactly the same as x otherwise, if b do jump , or do use if not|b is an approach where it would be good to do jump if iron is exactly the same as x otherwise, if iron do use , or do jump if not|a is a tactic where it is advantageous to do find if a is equal to 0 otherwise, if position do run , or do run as a last resort|once b is greater than y you have the option to find until a is less than 2|a means that it would be good to do jump if b otherwise, if b do jump , or do use as a last resort|once inventory is smaller than 2 you have the option to run until inventory is greater than or equal to 0|if b is greater than y you can find until inventory is less than x|b is an approach where you do find if iron x otherwise, if iron do build , or do build if no other options are possible|a is an approach where you do jump if iron is not the same as 1 , or do jump otherwise|a is a tactic where it is advantageous to do run if a is larger than 0 otherwise, if b do jump , or do find if not|when inventory you are able to run until inventory is not equal to 1|when x you have the option to run until a is equal to y|whenever b is not equal to y you have the option to find until finally position|a is a good strategy where you should do jump if position is less than 1 otherwise, if a do run , or do find if not|if b is smaller than y you have the choice to run until finally a is equal to x|a is a good strategy where you should do find if b is greater than x otherwise, if position do use , or do use if no other options are possible|b suggests that it would be advantageous to do run if b is not equal to 0 , or do build if not|a is a strategy where you do build if iron is less than 0 otherwise, if position do find , or do jump if no other options are possible|if b is at most x you are able to run until a is exactly the same as 0|as soon as inventory is exactly the same as 2 you can use until b is larger than x|when b is smaller than 1 you have the option to use until position is at most 2|a is an approach where you do find if position y otherwise, if a do run , or do use otherwise|a is a tactic where it is advantageous to do run if b is smaller than 2 otherwise, if iron do run , or do use otherwise|a is a strategy where you do jump if b is not equal to 0 otherwise, if b do jump , or do run otherwise|a is a tactic where it is good to do use if position is equal to 1 otherwise, if iron do jump , or do build as a last resort|if a is smaller than 0 you can find until finally position is at most 1|a is an approach where you do run if iron 1 otherwise, if a do build , or do build if not|once b you can find until a is less than 0|whenever inventory is at most y you have the choice to use until b is not equal to 1|as soon as position is not equal to 2 you have the option to jump until inventory is larger than 1|b is a good strategy where you should do build if b is greater than y otherwise, if b do use , or do run as a last resort|if position is larger than y you are able to build until position is greater than or equal to y|b is a strategy where you do run if b is exactly the same as x otherwise, if a do find , or do use if no other options are possible|b is a good strategy where you should do run if position is equal to x otherwise, if position do find , or do build if not|a is an approach where you do use if b is exactly the same as 0 otherwise, if a do jump , or do use if not|b entails that you do jump if iron is less than x otherwise, if position do run , or do build if not|b suggests that it would be advantageous to do jump if position y otherwise, if position do build , or do find if no other options are possible|a entails that you do run if iron is greater than 2 otherwise, if position do jump , or do use as a last resort|a is a tactic where it is good to do run if position is exactly the same as 1 otherwise, if b do build , or do jump as a last resort|a is a tactic where it is good to do run if iron is not equal to 2 otherwise, if iron do find , or do run as a last resort|a is an approach where you do run if position otherwise, if a do run , or do run as a last resort|b states that you should do run if iron is not equal to x otherwise, if position do jump , or do build if no other options are possible|when position is not equal to 0 you have the choice to find until position is greater than 0|b entails that you do run if b is greater than x otherwise, if position do jump , or do run if not|whenever inventory is equal to 0 you are able to use until a is greater than 0|a suggests that it would be advantageous to do find if a x otherwise, if a do find , or do find if not|a is a tactic where it is good to do use if b is greater than y otherwise, if iron do build , or do run if no other options are possible|whenever a is exactly the same as 2 you have the choice to find until inventory is at least 1|once b is not the same as x you have the choice to jump until a is less than or equal to 1|as soon as a is at least 2 you have the choice to jump until inventory is larger than 2|b entails that you do run if position is not equal to x otherwise, if position do use , or do build otherwise|when inventory is greater than or equal to y you are able to jump until finally b is exactly the same as 0|a is a tactic where it is good to do build if iron is larger than x otherwise, if iron do use , or do build if not|b is a tactic where it is good to do find if b otherwise, if iron do find , or do use otherwise|a means that it would be good to do build if iron 2 otherwise, if iron do use , or do build otherwise|whenever b is exactly the same as 2 you have the choice to build until inventory is less than y|a states that you should do jump if a is not equal to x otherwise, if position do run , or do jump otherwise|whenever a is at least 2 you have the choice to use until inventory|a is an approach where you do find if a is larger than 1 otherwise, if position do jump , or do jump otherwise|if a is less than or equal to y you are able to jump until position is at most 0|b is a strategy where you do jump if a is not equal to 0 otherwise, if position do run , or do run if no other options are possible|once inventory is exactly the same as x you are able to jump until position is larger than x|once position is at least x you have the choice to run until finally b is less than 2|as soon as inventory is not the same as x you have the choice to run until finally b is smaller than 2|a is a strategy where you do build if b is smaller than x otherwise, if position do build , or do jump otherwise|once a is exactly the same as x you are able to find until inventory is at most x|a is a strategy where you do use if a x otherwise, if a do find , or do run otherwise|as soon as inventory is not the same as 1 you can jump until b is greater than or equal to x|whenever position is at most 0 you have the option to find until finally b is smaller than x|as soon as b is less than or equal to y you are able to jump until position is less than or equal to 1|if a is at most 0 you can run until finally b is larger than y|a is a tactic where it is good to do use if b is larger than 2 otherwise, if a do use , or do find as a last resort|b is a tactic where it is advantageous to do use if a is not the same as 0 otherwise, if position do run , or do jump otherwise|a is a strategy where you do build if position is greater than 0 otherwise, if b do jump , or do run otherwise|b is an approach where it would be good to do jump if position y otherwise, if iron do find , or do run as a last resort|b states that you should do find if iron 1 , or do find as a last resort|b suggests that it would be advantageous to do jump if a is larger than y otherwise, if position do build , or do use as a last resort|when a is equal to 0 you are able to use until a is less than or equal to x|a entails that you do run if position is not the same as 0 otherwise, if a do jump , or do jump if not|whenever x you are able to find until finally a is larger than 0|once b is exactly the same as x you can build until finally b is exactly the same as x|when a is at least 0 you have the choice to build until position is greater than x|a suggests that it would be advantageous to do use if iron is less than x otherwise, if a do use , or do use if no other options are possible|whenever a is greater than 1 you can use until finally b is smaller than y|as soon as position is equal to 0 you have the option to find until finally x|when position is at least y you are able to build until inventory is at most x|once inventory is not equal to 2 you have the choice to jump until inventory is larger than 2|if position is equal to x you have the option to build until x|whenever inventory is not the same as y you have the choice to jump until finally position is exactly the same as y|b is a good strategy where you should do run if a is greater than x , or do jump if not|when inventory is equal to y you have the option to build until finally a is at least 1|when inventory is less than or equal to 0 you have the choice to jump until finally b is not the same as 1|b is an approach where it would be good to do jump if a is equal to 1 otherwise, if position do build , or do jump as a last resort|a suggests that it would be advantageous to do use if b is not equal to 0 otherwise, if iron do find , or do run as a last resort|a entails that you do run if b is not equal to y otherwise, if b do use , or do jump if no other options are possible|a suggests that it would be advantageous to do run if a is not the same as 1 otherwise, if iron do find , or do find otherwise|once position is not the same as 1 you are able to use until b is larger than y|a is an approach where it would be good to do find if iron is not equal to 2 otherwise, if a do run , or do use if no other options are possible|whenever b is exactly the same as 2 you can find until a is equal to y|when x you are able to jump until finally inventory is less than 0|once inventory is less than 1 you have the choice to use until b is not the same as x|once inventory is exactly the same as 1 you can jump until a|whenever position is exactly the same as 1 you have the choice to find until position is less than y|whenever a is exactly the same as x you have the choice to find until position is less than x|b is a tactic where it is advantageous to do jump if position y otherwise, if iron do use , or do run otherwise|b is an approach where it would be good to do build if a is equal to 0 otherwise, if iron do jump , or do run otherwise|once inventory is at most 0 you have the choice to jump until finally a is less than 0|as soon as b is at most 2 you have the option to use until finally a is greater than y|whenever a is less than or equal to x you have the choice to find until a is not equal to 1|if a is at most 2 you are able to build until position is greater than or equal to 1|a suggests that it would be advantageous to do use if b is larger than 0 otherwise, if a do use , or do build otherwise|if b is greater than 1 you are able to run until finally b is greater than x|once inventory is greater than 1 you are able to jump until finally b is larger than y|a is a tactic where it is good to do run if a is less than 1 otherwise, if position do use , or do build if no other options are possible|b means that it would be good to do find if position is exactly the same as y , or do use if no other options are possible|a entails that you do use if b is larger than x otherwise, if position do use , or do jump if not|a states that you should do run if position x otherwise, if b do build , or do run as a last resort|if inventory is equal to 2 you have the option to use until finally inventory is at least 1|a is a strategy where you do find if position is greater than 0 otherwise, if b do jump , or do find as a last resort|a entails that you do use if a is not the same as 1 otherwise, if position do jump , or do use if not|b is a good strategy where you should do find if b is less than x otherwise, if b do use , or do run if not|a is a good strategy where you should do find if b is not equal to 1 otherwise, if position do build , or do find otherwise|a means that it would be good to do run if b is not equal to 2 otherwise, if b do jump , or do find if no other options are possible|b suggests that it would be advantageous to do run if b is not the same as y otherwise, if b do jump , or do find if not|a is an approach where you do build if b is smaller than 1 otherwise, if position do run , or do use if not|b is a good strategy where you should do find if position is greater than x otherwise, if iron do find , or do run as a last resort|a is an approach where you do use if position is less than x otherwise, if position do build , or do build if no other options are possible|b is an approach where you do find if iron x , or do jump if not|a is a tactic where it is advantageous to do use if iron 2 otherwise, if a do jump , or do run as a last resort|a is a strategy where you do use if iron is equal to x otherwise, if b do build , or do run if not|if a is less than 1 you have the choice to run until a is at least x|once b is equal to y you can run until position is less than 1|when b is greater than or equal to 0 you have the choice to use until a is at most 1|when a is at most x you are able to jump until finally b is not the same as 2|as soon as inventory is smaller than 0 you have the option to find until finally position is smaller than 2|as soon as position is larger than y you have the choice to build until finally a is equal to 1|a suggests that it would be advantageous to do use if a is not the same as y otherwise, if a do run , or do use otherwise|b is an approach where it would be good to do run if position is not the same as x otherwise, if iron do find , or do jump as a last resort|a means that it would be good to do jump if iron is less than 2 otherwise, if b do run , or do find if no other options are possible|if b is at least y you have the option to run until finally b is greater than 1|if b is exactly the same as 0 you are able to build until inventory is exactly the same as x|b is an approach where it would be good to do jump if a 2 , or do find if no other options are possible|a is a good strategy where you should do jump if b is smaller than 1 otherwise, if iron do run , or do find as a last resort|a suggests that it would be advantageous to do build if position x otherwise, if a do build , or do build if no other options are possible|a is a good strategy where you should do build if position is smaller than 0 otherwise, if a do use , or do jump if not|as soon as inventory is greater than 0 you can run until y|whenever position is less than 1 you have the choice to use until a is less than or equal to x|a is a tactic where it is good to do use if iron is less than 1 otherwise, if iron do find , or do jump if no other options are possible|as soon as a is not equal to 0 you can find until b is less than or equal to 2|a is an approach where you do run if position otherwise, if iron do jump , or do build if not|b is a tactic where it is advantageous to do build if iron is less than y otherwise, if position do run , or do use as a last resort|a is a strategy where you do jump if a is equal to y otherwise, if a do find , or do use if no other options are possible|as soon as a is at most 1 you have the option to jump until finally inventory is less than 2|when b is smaller than 2 you can jump until finally x|as soon as y you have the choice to use until finally position is not the same as 1|a states that you should do use if iron is larger than 0 otherwise, if b do use , or do find if no other options are possible|as soon as position is not the same as 0 you have the option to use until inventory is less than y|when position is not the same as 1 you are able to use until finally a is not equal to 2|as soon as inventory is equal to y you can build until inventory is at most 1|if b is equal to 0 you have the choice to build until a is at least 0|b means that it would be good to do find if a otherwise, if a do jump , or do build as a last resort|a means that it would be good to do use if b y otherwise, if a do find , or do build if not|a is a tactic where it is advantageous to do find if iron is not equal to y otherwise, if position do run , or do build otherwise|when a is not equal to y you can build until x|a suggests that it would be advantageous to do run if a is equal to y otherwise, if b do find , or do find otherwise|once a is not the same as 0 you have the choice to jump until position is greater than or equal to 2|b means that it would be good to do build if b y otherwise, if iron do find , or do use as a last resort|b states that you should do find if iron is not equal to x otherwise, if a do build , or do run if not|when a is less than or equal to 0 you can jump until b is less than x|as soon as position is larger than x you have the option to run until finally b is at most x|whenever position is not equal to 1 you can use until finally inventory is at least 2|a means that it would be good to do use if position is less than x otherwise, if iron do run , or do use if not|a states that you should do jump if b 2 otherwise, if b do run , or do find as a last resort|a is a tactic where it is advantageous to do build if b is exactly the same as 1 otherwise, if b do use , or do use if no other options are possible|once inventory is exactly the same as 0 you can jump until finally position is less than 0|if position is at most 0 you have the option to use until b is smaller than y|whenever b is less than 1 you have the choice to use until inventory is not the same as 1|once a is equal to 1 you have the choice to use until a is not equal to 2|a means that it would be good to do run if a is larger than 0 otherwise, if position do build , or do run otherwise|a is a good strategy where you should do find if position 0 otherwise, if iron do use , or do jump if not|when inventory is not equal to 1 you have the option to run until position is at most y|a entails that you do find if b is not equal to 1 otherwise, if b do use , or do run if not|a is a good strategy where you should do find if a is exactly the same as 0 otherwise, if iron do use , or do build otherwise|when a is greater than y you have the choice to jump until finally inventory is less than x|once b is greater than or equal to x you can jump until finally inventory is not equal to 1|a means that it would be good to do jump if b is equal to 2 otherwise, if b do use , or do jump as a last resort|a suggests that it would be advantageous to do run if iron is not equal to 0 otherwise, if a do run , or do run otherwise|when inventory is at most y you can jump until a is greater than or equal to 1|a is a tactic where it is good to do find if b 0 otherwise, if b do build , or do use as a last resort|a entails that you do build if a 0 otherwise, if position do build , or do jump if no other options are possible|when a is less than 1 you can jump until b is not equal to 1|a suggests that it would be advantageous to do use if iron 1 otherwise, if a do find , or do use otherwise|a entails that you do build if b is not the same as y otherwise, if position do build , or do build if no other options are possible|a is a tactic where it is advantageous to do build if a is smaller than y otherwise, if position do find , or do run as a last resort|whenever b is greater than or equal to y you have the option to jump until finally position is not equal to 1|a means that it would be good to do run if b is equal to 0 otherwise, if position do find , or do build if not|whenever a is greater than or equal to x you can run until finally inventory is equal to 1|a entails that you do jump if a y otherwise, if position do jump , or do build if no other options are possible|whenever position is greater than x you have the choice to run until position is larger than x|b means that it would be good to do use if iron otherwise, if a do run , or do run if not|when inventory is greater than 0 you have the choice to build until position is greater than or equal to x|a is an approach where it would be good to do jump if position is smaller than x , or do use if not|as soon as a is at most y you have the option to build until finally b is smaller than y|when position is exactly the same as x you are able to use until b is less than or equal to y|a entails that you do use if a 1 otherwise, if a do jump , or do find as a last resort|a means that it would be good to do build if position is exactly the same as 0 otherwise, if position do find , or do build if not|a entails that you do find if b is not equal to 2 otherwise, if position do use , or do build otherwise|whenever inventory is less than or equal to 2 you have the option to jump until inventory is less than or equal to x|when b is not the same as x you have the option to find until a is smaller than 2|b is an approach where it would be good to do jump if position y otherwise, if a do run , or do jump if no other options are possible|as soon as b is larger than y you are able to use until inventory is less than 2|as soon as b is equal to 0 you have the option to build until position is at most y|if a is larger than y you have the option to run until finally position is not the same as x|b is a tactic where it is good to do use if a is less than 0 otherwise, if position do build , or do jump otherwise|a is a good strategy where you should do build if iron is greater than y otherwise, if b do build , or do run otherwise|a entails that you do run if b 0 otherwise, if position do build , or do build if not|whenever x you have the option to jump until finally position is exactly the same as 1|a means that it would be good to do use if position x otherwise, if a do jump , or do jump as a last resort|once inventory is larger than 2 you have the option to build until b is larger than 2|a is a tactic where it is good to do find if a is not equal to x otherwise, if b do run , or do build if not|once a is not equal to 0 you can run until finally b is less than 0|b states that you should do run if a y otherwise, if b do build , or do run otherwise|when y you are able to build until inventory is equal to x|a is an approach where it would be good to do run if a 2 otherwise, if b do use , or do build as a last resort|when position is not the same as y you can jump until b is not equal to 1|a is a tactic where it is good to do run if iron otherwise, if iron do jump , or do find if not|a is a strategy where you do jump if position 1 otherwise, if b do build , or do run as a last resort|as soon as a is larger than 0 you have the choice to run until position is not the same as x|a means that it would be good to do run if position is exactly the same as 0 otherwise, if a do jump , or do build if no other options are possible|a suggests that it would be advantageous to do run if b is less than y otherwise, if position do run , or do use if not|whenever b is not equal to 1 you are able to find until position is greater than or equal to 1|a is a tactic where it is advantageous to do use if a is less than y otherwise, if a do find , or do use as a last resort|whenever inventory is greater than 0 you can run until inventory is greater than or equal to 0|if inventory is less than 0 you have the choice to use until finally position is less than or equal to 0|a is a strategy where you do find if position 2 otherwise, if b do run , or do run if no other options are possible|as soon as position is less than or equal to y you can jump until finally a is not the same as 1|a is an approach where you do run if position is larger than y otherwise, if b do find , or do use if not|whenever a is greater than x you have the choice to find until finally inventory is smaller than x|a states that you should do jump if position is less than 2 otherwise, if a do run , or do build if not|when a is greater than or equal to 2 you can find until a is less than 1|a is a tactic where it is good to do run if position is not equal to 0 otherwise, if iron do run , or do run as a last resort|a is an approach where it would be good to do run if a is not the same as 1 otherwise, if a do find , or do find as a last resort|when b is less than or equal to 2 you are able to find until inventory is less than or equal to 2|as soon as inventory is greater than or equal to 2 you have the option to find until finally position is at least x|when a is not the same as x you have the option to build until b is at most 1|if a is exactly the same as 2 you can run until finally a|once position is less than x you have the choice to build until finally a is larger than 0|whenever a is not the same as y you can run until position is not equal to y|a is a tactic where it is good to do build if position is smaller than 1 , or do jump if not|a is an approach where it would be good to do jump if position is greater than 0 otherwise, if a do run , or do use if no other options are possible|b is a strategy where you do run if position is larger than x otherwise, if position do run , or do build as a last resort|a entails that you do build if position 2 otherwise, if a do use , or do find as a last resort|a is a tactic where it is good to do run if b 0 otherwise, if a do find , or do run if not|as soon as inventory is not equal to 0 you have the choice to jump until b is at most 0|b suggests that it would be advantageous to do use if b is exactly the same as y otherwise, if iron do find , or do jump if no other options are possible|whenever a is not the same as x you are able to run until b is greater than 1|a states that you should do jump if iron 1 otherwise, if a do jump , or do use as a last resort|a means that it would be good to do jump if position is not equal to 0 otherwise, if iron do build , or do use if not|b is a tactic where it is advantageous to do jump if a is exactly the same as 0 otherwise, if position do build , or do find if no other options are possible|a means that it would be good to do find if position is larger than y otherwise, if b do find , or do use as a last resort|as soon as position is exactly the same as 1 you can jump until inventory is not equal to x|as soon as position is not equal to 2 you have the option to run until b is exactly the same as 1|as soon as a is exactly the same as 0 you have the option to use until finally position is exactly the same as y|once inventory is at most 1 you have the option to build until b is equal to x|if a is at most 2 you have the option to find until finally b is smaller than x|a states that you should do jump if position is smaller than y otherwise, if b do jump , or do run if no other options are possible|once y you are able to find until finally inventory is at least x|a states that you should do run if a is larger than 0 otherwise, if position do find , or do run otherwise|once a is at least 0 you have the option to run until finally a is larger than 1|a suggests that it would be advantageous to do run if b is equal to y otherwise, if position do jump , or do run if no other options are possible|as soon as a is less than 2 you can use until finally position is equal to y|b is an approach where you do jump if a is exactly the same as 0 otherwise, if a do run , or do find as a last resort|when inventory is larger than y you can run until inventory is not equal to x|if b is equal to 2 you have the choice to find until position is at least y|a entails that you do build if iron is not the same as 0 otherwise, if position do use , or do find otherwise|as soon as inventory is not equal to y you have the choice to use until finally inventory|whenever position is equal to 1 you can build until a is equal to y|a suggests that it would be advantageous to do find if a 1 otherwise, if a do run , or do use if no other options are possible|if inventory is smaller than 2 you can use until finally inventory is exactly the same as 0|b entails that you do build if b is not the same as x otherwise, if position do run , or do run if no other options are possible|once inventory is not equal to x you can run until finally position is greater than y|b is a good strategy where you should do use if a is less than 0 otherwise, if position do build , or do build if no other options are possible|whenever position is larger than 0 you have the choice to find until finally b is larger than 2|a is a tactic where it is good to do jump if b is not the same as x otherwise, if iron do run , or do find if not|a is a tactic where it is advantageous to do run if b is larger than y otherwise, if position do find , or do run otherwise|if a is equal to 2 you have the choice to use until inventory is not equal to x|as soon as a is at least 1 you have the option to build until finally inventory is larger than 2|b is a tactic where it is advantageous to do build if b x otherwise, if a do build , or do build as a last resort|a is a tactic where it is advantageous to do build if iron x otherwise, if a do build , or do find otherwise|a is an approach where it would be good to do use if a is equal to 1 otherwise, if b do jump , or do build if no other options are possible|once a is not equal to 2 you are able to find until finally inventory is less than or equal to y|a states that you should do jump if b is less than 2 otherwise, if a do jump , or do run as a last resort|b is an approach where you do use if b is greater than y otherwise, if iron do use , or do find if no other options are possible|a entails that you do build if a is larger than y otherwise, if b do find , or do find as a last resort|as soon as a is smaller than y you are able to run until finally a is at least y|a means that it would be good to do build if iron is less than y otherwise, if a do jump , or do build as a last resort|a is a good strategy where you should do run if a is exactly the same as y otherwise, if b do find , or do run if not|a states that you should do jump if b is larger than 0 otherwise, if position do build , or do build otherwise|a is an approach where it would be good to do run if b otherwise, if a do run , or do build if no other options are possible|b is a strategy where you do jump if position is not the same as y otherwise, if position do jump , or do use as a last resort|a is an approach where it would be good to do build if position x otherwise, if position do jump , or do build if not|as soon as b is greater than x you can find until b is less than 0|as soon as position is at most 0 you have the option to build until position is less than or equal to 1|a suggests that it would be advantageous to do build if iron 2 otherwise, if b do jump , or do build otherwise|a entails that you do run if position is exactly the same as 2 otherwise, if iron do find , or do build as a last resort|whenever b is greater than 2 you can build until finally position is not the same as 2|a suggests that it would be advantageous to do find if iron is smaller than x otherwise, if iron do jump , or do find if no other options are possible|as soon as b is less than or equal to 0 you have the option to build until finally a is less than or equal to x|a is an approach where it would be good to do find if b is less than 1 otherwise, if b do find , or do jump if no other options are possible|as soon as position is less than y you have the choice to jump until finally inventory is equal to 1|once position is greater than or equal to 1 you have the choice to run until position is less than or equal to 2|if b is greater than x you have the choice to use until finally inventory is greater than or equal to 0|a suggests that it would be advantageous to do run if a is less than x otherwise, if position do build , or do find otherwise|b states that you should do find if a is less than y otherwise, if iron do find , or do run as a last resort|b suggests that it would be advantageous to do build if position is greater than y otherwise, if iron do run , or do use if no other options are possible|b is an approach where it would be good to do use if position is not equal to x otherwise, if b do find , or do run otherwise|once b is greater than 0 you are able to use until finally a is larger than 2|a is a good strategy where you should do jump if iron 0 otherwise, if a do build , or do find if not|when b is less than x you can run until position is not the same as x|b entails that you do build if iron is larger than x otherwise, if b do run , or do build as a last resort|a is a good strategy where you should do run if b is exactly the same as 0 otherwise, if a do find , or do run as a last resort|a suggests that it would be advantageous to do use if iron y otherwise, if position do jump , or do run as a last resort|b means that it would be good to do run if a is not equal to 1 otherwise, if a do find , or do find if not|once inventory is exactly the same as 0 you can find until inventory is not equal to x|a is an approach where you do use if a is greater than 1 , or do build if no other options are possible|a suggests that it would be advantageous to do find if iron is not the same as 2 otherwise, if b do use , or do find if no other options are possible|b is an approach where you do find if a is exactly the same as 1 otherwise, if a do run , or do jump as a last resort|once inventory is not the same as 2 you have the choice to jump until inventory is exactly the same as 0|if inventory is exactly the same as 2 you can find until position is less than or equal to 2|when a is at least 0 you can run until finally inventory is not equal to x|b is an approach where it would be good to do build if iron is larger than y otherwise, if b do use , or do build otherwise|if b is equal to 0 you can run until inventory is not the same as y|when b is not equal to 1 you can run until position is not equal to 1|a is an approach where you do find if b is greater than x otherwise, if iron do jump , or do jump as a last resort|when position is smaller than x you have the option to jump until finally b is greater than y|a is an approach where you do find if b is exactly the same as x otherwise, if a do jump , or do use if not|a is an approach where you do find if iron is not the same as 1 otherwise, if a do jump , or do build if no other options are possible|once inventory is larger than 2 you are able to use until a is less than 2|a suggests that it would be advantageous to do use if b is equal to 1 , or do find if not|a suggests that it would be advantageous to do find if a is larger than x otherwise, if position do jump , or do jump otherwise|a is a strategy where you do find if b is larger than 0|a states that you should do find if a is less than y otherwise, if a do jump , or do find if no other options are possible|when b is less than 1 you can find until finally inventory is exactly the same as 0|as soon as position is larger than x you are able to find until position is less than 1|whenever position is not equal to 0 you can build until finally b is at most y|a is a tactic where it is good to do build if position is not the same as x otherwise, if b do jump , or do run if no other options are possible|if position is less than or equal to 0 you have the option to build until finally b is greater than 2|whenever inventory is less than x you can jump until finally inventory|b entails that you do build if b x otherwise, if iron do run , or do run as a last resort|once position is smaller than 0 you have the choice to jump until b is at least 1|a is an approach where you do run if iron is greater than 0 otherwise, if b do find , or do build otherwise|once a is not equal to 2 you have the option to run until finally a is not equal to 0|a is a tactic where it is advantageous to do build if b 1 otherwise, if position do jump , or do find as a last resort|whenever a is greater than y you can find until position is less than 1|if position is less than or equal to 0 you are able to run until b is not the same as x|a is a good strategy where you should do build if iron is exactly the same as 2 otherwise, if position do use , or do build if not|a states that you should do find if b is not equal to x otherwise, if iron do run , or do jump as a last resort|when b is equal to y you have the choice to build until finally position is greater than 0|b is a tactic where it is advantageous to do run if a is smaller than 0 otherwise, if b do use , or do find as a last resort|a is an approach where it would be good to do build if b is larger than 0 otherwise, if b do jump , or do use if not|a entails that you do use if b is not equal to y otherwise, if position do run , or do build if not|b is a tactic where it is advantageous to do build if a is greater than y otherwise, if position do use , or do build if no other options are possible|when a is at most 0 you can build until b is greater than or equal to 2|a is a tactic where it is good to do find if b is exactly the same as 0 otherwise, if position do run , or do run as a last resort|a is a good strategy where you should do find if position 0 otherwise, if a do build , or do jump if not|a is a good strategy where you should do jump if b is greater than y otherwise, if position do build , or do run as a last resort|b is a tactic where it is good to do run if iron 1 , or do use if no other options are possible|b suggests that it would be advantageous to do find if iron otherwise, if iron do jump , or do run as a last resort|if a is smaller than y you can find until finally inventory is larger than 0|once position is at least 2 you have the option to find until finally position is greater than y|b means that it would be good to do find if a is less than 0 otherwise, if a do find , or do build if not|as soon as inventory is at most 0 you have the choice to find until finally a is smaller than 2|as soon as inventory is exactly the same as x you have the choice to use until position is greater than 2|a is a good strategy where you should do use if b y otherwise, if a do jump , or do build as a last resort|a is a tactic where it is advantageous to do use if b otherwise, if iron do run , or do find as a last resort|a entails that you do run if iron is exactly the same as 1 otherwise, if b do find , or do find as a last resort|if a is not the same as y you can use until position is greater than or equal to 2|when inventory is larger than 2 you can build until position is not the same as 2|whenever position is less than or equal to 0 you have the choice to build until finally inventory is not the same as 0|a means that it would be good to do find if b y otherwise, if a do jump , or do use otherwise|a is a tactic where it is advantageous to do use if iron is equal to 2 otherwise, if a do jump , or do find if no other options are possible|whenever inventory is not equal to 2 you are able to run until finally inventory is less than 1|a is an approach where you do use if iron is smaller than y otherwise, if iron do jump , or do build otherwise|a means that it would be good to do find if iron is not the same as 2 otherwise, if a do find , or do build as a last resort|b states that you should do build if a is larger than x otherwise, if a do find , or do jump if no other options are possible|a is a strategy where you do run if iron 1 otherwise, if position do use , or do jump otherwise|once b is exactly the same as 2 you can jump until inventory is smaller than y|a is a tactic where it is advantageous to do use if position is exactly the same as 2 otherwise, if position do use , or do use otherwise|a is an approach where you do build if iron is larger than y otherwise, if position do build , or do run otherwise|a is a tactic where it is advantageous to do find if position is greater than x otherwise, if b do jump , or do build otherwise|whenever position is not equal to 1 you have the option to jump until finally a is smaller than 0|b is a tactic where it is good to do find if a is not equal to y otherwise, if iron do use , or do jump as a last resort|as soon as b is greater than 0 you are able to jump until b is less than 0|b is an approach where you do run if b y otherwise, if iron do use , or do find as a last resort|a means that it would be good to do use if position y otherwise, if iron do jump , or do build as a last resort|b is a tactic where it is advantageous to do build if b is not equal to x otherwise, if position do jump , or do build otherwise|when a is not the same as 1 you have the choice to run until finally a is at least 1|b suggests that it would be advantageous to do find if b is equal to x otherwise, if iron do build , or do build otherwise|once a is at least x you have the choice to use until finally b is at most 2|a means that it would be good to do jump if iron is not the same as x otherwise, if position do use , or do find otherwise|a is a good strategy where you should do find if iron 0 otherwise, if position do jump , or do find if not|b is a strategy where you do jump if b y otherwise, if iron do run , or do run otherwise|whenever b is smaller than y you are able to build until inventory is at least 1|once inventory is at least 0 you have the option to find until b is at least y|a suggests that it would be advantageous to do run if position is exactly the same as 1 otherwise, if b do build , or do build if no other options are possible|if inventory is equal to x you have the option to find until finally position is less than 2|whenever position is larger than 1 you are able to run until finally position is less than x|b is a tactic where it is good to do use if position otherwise, if iron do run , or do use if no other options are possible|once inventory is equal to 2 you can run until b is equal to 0|a is a tactic where it is advantageous to do jump if b is greater than x otherwise, if a do jump , or do jump if no other options are possible|a is a tactic where it is good to do find if position is less than 2 otherwise, if b do build , or do run if not|a is a tactic where it is good to do build if iron is smaller than x otherwise, if b do use , or do find as a last resort|a is a good strategy where you should do build if a 0 otherwise, if a do jump , or do use if not|a is a strategy where you do build if a is less than 0 otherwise, if b do build , or do run if not|a is a tactic where it is advantageous to do run if iron is not the same as x otherwise, if b do find , or do use as a last resort|a states that you should do jump if position is exactly the same as x otherwise, if position do run , or do run if no other options are possible|a is a tactic where it is advantageous to do use if iron is equal to 2 otherwise, if iron do find , or do find otherwise|if inventory is not equal to 1 you have the choice to build until finally inventory is greater than y|as soon as b is exactly the same as 0 you are able to find until finally a is at least 1|a means that it would be good to do find if position 1 otherwise, if a do find , or do jump otherwise|b states that you should do jump if a is less than 0 otherwise, if b do run , or do find if not|if b is not equal to y you have the option to use until finally inventory is less than or equal to 1|b means that it would be good to do use if b otherwise, if iron do use , or do jump if no other options are possible|whenever b is greater than 0 you can find until finally inventory is at least 1|once a is at least y you have the choice to use until inventory is smaller than 2|if inventory you are able to use until finally a is not the same as 1|b suggests that it would be advantageous to do build if a is less than y otherwise, if b do run , or do jump if no other options are possible|whenever b is exactly the same as y you have the option to find until finally inventory is less than y|whenever b is greater than x you are able to run until b|b means that it would be good to do use if a is less than 1 , or do find otherwise|a states that you should do use if position is equal to y otherwise, if position do find , or do run otherwise|as soon as a is exactly the same as 1 you can use until finally position is equal to 0|a suggests that it would be advantageous to do jump if b is equal to y , or do find as a last resort|if b is greater than or equal to 1 you can use until finally position is at least 2|a is a tactic where it is good to do run if position y otherwise, if position do run , or do build otherwise|a is a tactic where it is advantageous to do use if a x otherwise, if b do use , or do find if not|b is a tactic where it is advantageous to do jump if a y otherwise, if b do run , or do build otherwise|as soon as b is exactly the same as 0 you can use until a is less than 0|when position is not equal to x you have the choice to use until b is less than or equal to y|a is a tactic where it is good to do use if iron is smaller than y otherwise, if b do build , or do run if no other options are possible|when b is greater than 2 you are able to use until b is at least 0|a means that it would be good to do find if a is not equal to y otherwise, if b do find , or do run if not|a means that it would be good to do use if b is greater than y otherwise, if iron do jump , or do run as a last resort|when a is larger than 0 you have the choice to find until finally inventory is exactly the same as 0|b is a tactic where it is good to do find if a is not the same as 2 otherwise, if a do jump , or do run as a last resort|b is a tactic where it is advantageous to do run if position x otherwise, if position do run , or do run if not|a is a tactic where it is advantageous to do run if b is less than 1|a is a tactic where it is advantageous to do build if b 2 otherwise, if iron do find , or do build if not|once b is equal to 1 you have the option to find until b is greater than or equal to y|whenever inventory is at most 0 you have the choice to run until b is less than or equal to 1|as soon as b is not the same as 2 you have the option to run until finally inventory is equal to y|b is an approach where it would be good to do run if position is equal to x otherwise, if position do use , or do jump if not|a is a tactic where it is advantageous to do jump if a is not equal to y otherwise, if b do run , or do jump if no other options are possible|b is a tactic where it is good to do jump if iron otherwise, if a do jump , or do build otherwise|once b is larger than 1 you are able to run until inventory is not equal to 2|whenever inventory is less than or equal to y you have the option to jump until inventory is not the same as 2|a is an approach where you do build if position is less than y otherwise, if b do build , or do build otherwise|b means that it would be good to do find if b y otherwise, if a do jump , or do find otherwise|a is an approach where it would be good to do build if b is not the same as 1 otherwise, if iron do run , or do find otherwise|a is an approach where you do use if b 2 otherwise, if iron do find , or do jump if no other options are possible|when a is less than or equal to 1 you have the choice to build until finally b is smaller than x|if a is not the same as x you are able to jump until finally b is larger than 2|whenever a is exactly the same as 0 you can use until a is not equal to 2|a is a strategy where you do build if position 0 otherwise, if a do run , or do use if no other options are possible|b states that you should do build if position is less than x otherwise, if iron do build , or do use otherwise|a entails that you do use if a otherwise, if position do find , or do use if no other options are possible|b is a good strategy where you should do run if b y otherwise, if b do use , or do find if not|if position is exactly the same as x you are able to jump until finally b is smaller than 1|whenever a is greater than x you can run until b is exactly the same as 0|whenever position is larger than x you are able to use until finally inventory is less than 0|once position is not equal to 1 you can run until a is exactly the same as 1|b is an approach where it would be good to do find if position x otherwise, if iron do use , or do build if no other options are possible|a is an approach where you do jump if b is greater than x otherwise, if iron do jump , or do find otherwise|as soon as b is less than 2 you are able to use until a is less than or equal to y|as soon as a is not the same as y you are able to run until a is equal to 1|a means that it would be good to do jump if position is not the same as y otherwise, if b do run , or do run as a last resort|b states that you should do build if a is not equal to y , or do build otherwise|when a is equal to x you are able to use until b is greater than 2|when inventory is less than or equal to 1 you have the option to build until inventory is exactly the same as x|b means that it would be good to do build if a is exactly the same as 1 otherwise, if a do run , or do run if no other options are possible|b is a tactic where it is good to do build if b x otherwise, if position do build , or do jump if not|b is a tactic where it is advantageous to do build if a is equal to 2 otherwise, if b do run , or do run otherwise|a is a good strategy where you should do use if iron is equal to y otherwise, if b do build , or do use if not|b is a tactic where it is good to do jump if iron is greater than y otherwise, if iron do jump , or do find if not|a is a strategy where you do run if a 2 otherwise, if b do use , or do run if not|once a is larger than 1 you have the option to use until finally a is at least 0|whenever position is less than y you can build until finally b is smaller than 2|whenever x you have the choice to jump until finally position is smaller than 1|if a is exactly the same as 0 you have the option to build until b is smaller than 1|a is a strategy where you do run if a is not equal to 2 otherwise, if b do run , or do build if not|when inventory is greater than or equal to 0 you can find until inventory is at least y|when b is larger than x you have the option to find until inventory is exactly the same as y|a is a tactic where it is advantageous to do build if a is smaller than y otherwise, if iron do run , or do build if no other options are possible|b is a strategy where you do run if b y otherwise, if position do find , or do run otherwise|a is a strategy where you do build if position 0 otherwise, if b do run , or do find otherwise|b is a strategy where you do build if b y otherwise, if position do jump , or do run if not|a entails that you do find if b is less than 1 otherwise, if a do build , or do find if no other options are possible|when a is larger than 1 you are able to build until x|if b is not the same as x you have the choice to run until a is not equal to 0|a is an approach where you do use if iron is smaller than 0 otherwise, if iron do run , or do build if not|whenever position is at most 0 you can find until finally b is at most y|b suggests that it would be advantageous to do use if iron is less than y otherwise, if a do find , or do find if no other options are possible|a is a strategy where you do run if b is not equal to x otherwise, if iron do build , or do find if no other options are possible|whenever x you are able to find until inventory is at least 1|as soon as b is less than 1 you are able to jump until inventory is larger than 1|whenever position is less than y you have the choice to build until inventory is less than 1|whenever b is greater than 2 you have the option to jump until finally position is greater than x|b is a strategy where you do jump if b y otherwise, if iron do use , or do find if no other options are possible|a suggests that it would be advantageous to do jump if iron is smaller than 0 otherwise, if iron do use , or do run as a last resort|b is a strategy where you do run if iron is not the same as 1 , or do use otherwise|a means that it would be good to do jump if b 0 otherwise, if a do use , or do build as a last resort|as soon as position is not the same as 2 you can jump until position is at most x|a is a tactic where it is advantageous to do run if iron otherwise, if position do build , or do build if not|b is an approach where you do use if b x otherwise, if iron do jump , or do jump otherwise|a is a good strategy where you should do jump if iron 0 otherwise, if iron do use , or do jump otherwise|whenever b is less than x you are able to find until finally inventory is at least 1|when inventory is less than or equal to 2 you can build until finally position is greater than or equal to 0|whenever a is less than 0 you have the option to build until inventory is equal to y|b is a good strategy where you should do build if a is exactly the same as 0 otherwise, if position do build , or do find otherwise|a is a tactic where it is good to do jump if b x otherwise, if iron do run , or do jump as a last resort|whenever a is equal to y you are able to use until finally a is at most 0|as soon as b is not the same as 0 you have the choice to build until finally inventory is smaller than 0|when a is smaller than y you have the choice to use until position is greater than or equal to 2|a is an approach where it would be good to do jump if iron is not equal to 2 otherwise, if position do find , or do find if no other options are possible|once a is equal to 0 you can run until finally inventory is not equal to 0|a is a good strategy where you should do find if position is greater than 1 otherwise, if iron do run , or do run as a last resort|as soon as inventory is not equal to x you can use until finally position is at least y|whenever position is equal to y you are able to run until finally inventory is less than or equal to 0|a is a tactic where it is advantageous to do build if iron 1 otherwise, if iron do run , or do build if no other options are possible|once position is greater than or equal to 2 you can use until inventory is less than x|a entails that you do build if b is exactly the same as 2 otherwise, if iron do find , or do jump if not|once x you are able to run until inventory is exactly the same as y|b is a good strategy where you should do use if b is equal to x otherwise, if a do build , or do find if no other options are possible|b is a tactic where it is advantageous to do build if position 2 , or do build if no other options are possible|b is an approach where it would be good to do run if iron y otherwise, if position do find , or do use if no other options are possible|when b is exactly the same as 1 you can jump until finally inventory is larger than 0|a is an approach where you do run if position is larger than 1 otherwise, if position do use , or do use otherwise|a is a strategy where you do build if iron 0 otherwise, if position do build , or do run otherwise|whenever inventory is equal to 1 you have the option to find until a is exactly the same as x|once b is exactly the same as 2 you have the choice to jump until finally inventory is at most x|b is a tactic where it is advantageous to do build if position y otherwise, if position do find , or do run as a last resort|when inventory is not the same as 2 you have the choice to build until finally inventory is exactly the same as x|as soon as inventory is less than or equal to 2 you are able to use until position is larger than 1|a is a tactic where it is advantageous to do use if position 0 otherwise, if iron do build , or do find if no other options are possible|if a you have the choice to jump until finally b is at most 1|once b is greater than or equal to 1 you can jump until finally a is equal to x|if position is not the same as x you have the choice to build until b is smaller than 2|a entails that you do run if position is smaller than 0 , or do run as a last resort|a is an approach where you do use if iron 2 otherwise, if a do use , or do use as a last resort|once position is at most 2 you can find until inventory is not the same as 0|b is a tactic where it is advantageous to do run if iron is equal to y otherwise, if a do run , or do build otherwise|a entails that you do use if position is smaller than 2 otherwise, if a do build , or do build if no other options are possible|a is a strategy where you do run if iron is not the same as 0 otherwise, if position do build , or do run if not|if a is not the same as 1 you can run until inventory is not equal to 0|if position is exactly the same as 0 you can jump until finally inventory is smaller than 0|b is a tactic where it is advantageous to do run if iron x otherwise, if b do find , or do jump as a last resort|a is a good strategy where you should do build if b is equal to 1 otherwise, if a do build , or do jump as a last resort|once a is at most 0 you have the option to jump until finally position is greater than 0|as soon as b is not the same as y you have the choice to find until finally b is smaller than 1|once b is exactly the same as x you are able to jump until position is at most 0|a is a strategy where you do jump if a is less than 2 otherwise, if b do jump , or do run as a last resort|a is a strategy where you do jump if b is not the same as y otherwise, if b do jump , or do jump if no other options are possible|a entails that you do use if a is not equal to y otherwise, if a do jump , or do use if not|if position is not the same as 2 you have the option to use until inventory is less than or equal to 0|if b is not equal to 2 you have the choice to run until finally b is at most x|as soon as inventory is exactly the same as 1 you are able to build until a is less than 1|as soon as b is larger than 0 you have the choice to build until finally inventory is smaller than 0|b is a strategy where you do run if iron y otherwise, if position do build , or do run otherwise|a suggests that it would be advantageous to do run if a is greater than x , or do find as a last resort|once inventory is smaller than x you are able to jump until finally a is less than 0|once b you can jump until x|if a is smaller than y you can find until finally inventory is less than or equal to y|as soon as position is not equal to 2 you have the option to build until inventory is at least 1|a is a strategy where you do run if a x otherwise, if iron do use , or do run otherwise|once b you can use until b|a is a strategy where you do find if b is smaller than x otherwise, if iron do build , or do jump if no other options are possible|a is an approach where you do find if position is less than x otherwise, if position do jump , or do build if no other options are possible|a means that it would be good to do find if position is greater than x otherwise, if b do build , or do jump as a last resort|a states that you should do build if a is not equal to 0 otherwise, if position do run , or do jump as a last resort|b means that it would be good to do use if a is less than x otherwise, if b do use , or do build if not|once b is greater than or equal to 0 you have the option to jump until a is larger than y|as soon as position is greater than or equal to 1 you have the choice to run until inventory is greater than x|when inventory is larger than 2 you have the option to jump until finally a is greater than x|b is a tactic where it is advantageous to do find if a is less than x otherwise, if iron do find , or do run otherwise|once inventory is greater than 1 you are able to use until finally inventory is at most 0|a is an approach where you do use if iron is equal to 0 otherwise, if a do build , or do find if not|if a is larger than x you can build until a is not equal to 1|a is a strategy where you do jump if position 0 otherwise, if a do use , or do build if no other options are possible|as soon as a is at least 1 you have the option to use until finally position is at least y|a is an approach where you do use if position 1 otherwise, if position do run , or do jump otherwise|a is a strategy where you do find if iron is exactly the same as y otherwise, if a do find , or do find as a last resort|a suggests that it would be advantageous to do jump if position is exactly the same as x , or do find if no other options are possible|if inventory is exactly the same as x you are able to build until inventory is equal to x|if b is not equal to 2 you can find until inventory is greater than 2|if position is not equal to x you have the choice to build until finally inventory is not the same as y|b means that it would be good to do run if iron x otherwise, if iron do use , or do use as a last resort|a is a tactic where it is advantageous to do find if b y otherwise, if position do use , or do build as a last resort|once b is greater than 0 you have the option to build until b is smaller than 1|b is a tactic where it is advantageous to do use if position is greater than x otherwise, if iron do use , or do find as a last resort|b means that it would be good to do use if b otherwise, if iron do run , or do find otherwise|b is a tactic where it is good to do build if a is not the same as 2 , or do jump if not|a is a tactic where it is good to do jump if iron is larger than 2 otherwise, if iron do build , or do run if not|if a is at most 2 you are able to jump until finally position is greater than or equal to y|when position is exactly the same as 2 you have the choice to build until b is greater than y|a states that you should do find if iron is less than y otherwise, if b do jump , or do use if not|a entails that you do find if a is not the same as y otherwise, if position do find , or do run if not|if position is not equal to 2 you have the choice to run until inventory is not the same as 0|b is a tactic where it is good to do find if a is larger than y otherwise, if b do build , or do use if no other options are possible|b suggests that it would be advantageous to do run if position is less than x otherwise, if iron do build , or do jump if no other options are possible|b is an approach where you do run if b y otherwise, if iron do build , or do find if not|a means that it would be good to do use if a otherwise, if iron do run , or do use if no other options are possible|when position is at most 1 you can run until finally a is exactly the same as 0|when inventory is less than or equal to 2 you have the option to jump until b is not the same as 1|if inventory is greater than 2 you have the option to use until position is larger than x|b is an approach where you do find if position is greater than x otherwise, if iron do run , or do jump as a last resort|b is a tactic where it is advantageous to do jump if position otherwise, if b do use , or do use if no other options are possible|b states that you should do find if a y otherwise, if a do use , or do build as a last resort|b is a tactic where it is good to do use if position is equal to x otherwise, if iron do run , or do run as a last resort|b is an approach where you do use if a is smaller than 2 otherwise, if iron do jump , or do jump if not|when a is not the same as 2 you have the option to run until finally b is smaller than 2|a entails that you do find if iron is not equal to 2 otherwise, if iron do use , or do build if not|whenever b is at least 1 you have the choice to run until a is exactly the same as 2|b is an approach where it would be good to do build if b otherwise, if position do build , or do find as a last resort|b suggests that it would be advantageous to do build if a is exactly the same as 1 otherwise, if position do find , or do jump as a last resort|a is an approach where it would be good to do find if b is larger than 1 otherwise, if iron do build , or do find if no other options are possible|a entails that you do build if b is larger than 1 otherwise, if a do use , or do run if no other options are possible|b is an approach where you do build if position is greater than x otherwise, if a do build , or do jump if no other options are possible|as soon as a is greater than x you have the option to build until finally position is less than or equal to 2|whenever inventory is not the same as 0 you are able to use until position is less than 1|a suggests that it would be advantageous to do build if a is smaller than x otherwise, if iron do use , or do jump if no other options are possible|once a is at least 0 you are able to find until x|a means that it would be good to do run if a is not the same as 2 otherwise, if iron do build , or do jump otherwise|b is a good strategy where you should do use if b is smaller than x otherwise, if a do use , or do jump if not|a is a tactic where it is advantageous to do jump if a is not the same as y otherwise, if position do build , or do use if no other options are possible|once b is smaller than 1 you have the choice to find until finally inventory is less than 0|once position is greater than 0 you can run until position is smaller than 1|once position is larger than 1 you have the option to find until b is greater than or equal to 0|a means that it would be good to do run if a 1 otherwise, if position do use , or do build otherwise|a is a good strategy where you should do jump if b is not the same as 2 otherwise, if a do use , or do jump otherwise|a entails that you do build if iron is greater than 0 , or do find if not|when inventory is exactly the same as x you are able to run until finally a is exactly the same as 2|once inventory is at most x you are able to run until finally a is not the same as y|when position is larger than 2 you can use until finally position|once inventory is at most 2 you have the choice to build until x|when b is greater than 2 you have the option to build until finally b is smaller than 1|once position is equal to 2 you are able to use until finally b is at most 1|as soon as b is equal to y you have the choice to run until a is exactly the same as 2|b entails that you do build if position is less than x otherwise, if position do jump , or do build if not|when inventory is less than or equal to x you have the option to jump until finally position is less than or equal to x|a is an approach where it would be good to do use if position y otherwise, if position do find , or do run if no other options are possible|a is a tactic where it is advantageous to do build if a is larger than 2 otherwise, if a do jump , or do jump if not|b suggests that it would be advantageous to do use if position is not equal to y otherwise, if iron do use , or do find if no other options are possible|b entails that you do find if a y otherwise, if position do run , or do build as a last resort|as soon as position is greater than y you are able to run until finally position is greater than or equal to 2|as soon as a is exactly the same as 1 you have the choice to use until finally inventory is not equal to y|b is a strategy where you do jump if a is greater than x otherwise, if a do build , or do build if no other options are possible|whenever position is not equal to y you have the choice to build until inventory is not equal to 2|when a is larger than 1 you can find until finally position is at most 1|b is a strategy where you do jump if b is larger than y otherwise, if a do build , or do use otherwise|a is a tactic where it is good to do run if b y otherwise, if position do find , or do build if no other options are possible|a suggests that it would be advantageous to do run if a 1 otherwise, if position do run , or do run otherwise|a is a good strategy where you should do jump if iron 1 otherwise, if b do find , or do find if not|a is an approach where you do use if iron is greater than x , or do build otherwise|once b is less than x you have the option to build until b is at least 2|a is a tactic where it is advantageous to do find if a is less than 1 otherwise, if position do run , or do use if not|b entails that you do jump if a is greater than x otherwise, if position do jump , or do run if no other options are possible|whenever inventory is less than or equal to 0 you can jump until finally position is at least y|b is an approach where it would be good to do run if iron is exactly the same as y otherwise, if iron do jump , or do jump if not|a is a good strategy where you should do use if position x otherwise, if iron do jump , or do jump if not|a suggests that it would be advantageous to do find if a is greater than 1 otherwise, if a do use , or do jump otherwise|whenever b is at most 0 you can jump until b is larger than x|when position is equal to 2 you are able to use until finally b is greater than or equal to x|if inventory is not the same as y you have the choice to run until b is less than 0|once inventory is exactly the same as x you are able to run until inventory is exactly the same as y|a is a good strategy where you should do build if a is not the same as 1 otherwise, if position do use , or do use otherwise|whenever position is greater than 1 you have the option to find until finally a is at most 0|when a is less than x you can build until b is greater than 1|b means that it would be good to do build if position x otherwise, if b do build , or do jump if no other options are possible|once inventory is exactly the same as y you can build until finally inventory|a means that it would be good to do build if b is smaller than 0 , or do run otherwise|b is an approach where it would be good to do use if a is exactly the same as y otherwise, if b do build , or do use if no other options are possible|as soon as inventory is equal to 2 you can use until finally a is at least 1|a is an approach where you do use if position is larger than 2 otherwise, if a do build , or do jump as a last resort|b is a tactic where it is advantageous to do build if a otherwise, if iron do find , or do run otherwise|once inventory is greater than 1 you have the choice to jump until y|a suggests that it would be advantageous to do build if b 1 otherwise, if position do run , or do find if not|when x you are able to find until finally a is at most 2|a is a strategy where you do find if iron is greater than y otherwise, if b do use , or do find if no other options are possible|as soon as a is not the same as x you are able to find until b is smaller than y|a is an approach where it would be good to do find if position 0 otherwise, if a do build , or do use otherwise|b is a tactic where it is good to do build if iron y otherwise, if position do build , or do use as a last resort|if a is exactly the same as 0 you have the option to find until finally a is exactly the same as x|as soon as a is less than or equal to 1 you are able to use until finally b is less than 0|a suggests that it would be advantageous to do run if iron 1 otherwise, if b do jump , or do find as a last resort|a is a tactic where it is good to do find if iron otherwise, if a do run , or do build as a last resort|b is an approach where you do run if iron otherwise, if iron do build , or do build if no other options are possible|a entails that you do find if b 1 otherwise, if position do run , or do find as a last resort|whenever inventory is equal to x you can jump until position is not equal to 0|b is an approach where you do jump if position is less than 1 , or do build as a last resort|a means that it would be good to do find if a 2 otherwise, if a do find , or do find otherwise|once position is larger than 0 you have the choice to run until position is less than or equal to y|once a is smaller than 0 you have the choice to run until b is greater than or equal to y|b is an approach where it would be good to do use if iron x otherwise, if a do use , or do build as a last resort|a is an approach where you do build if iron is equal to x otherwise, if iron do use , or do jump otherwise|whenever inventory is less than y you have the choice to find until b is at least x|a is a tactic where it is good to do build if a 2 otherwise, if position do run , or do use otherwise|when inventory is larger than 0 you are able to run until inventory is not the same as 1|a entails that you do build if b is less than 0 otherwise, if a do use , or do build otherwise|b is a tactic where it is advantageous to do jump if b is less than x otherwise, if b do run , or do run as a last resort|whenever b you have the choice to run until finally a is not equal to y|b states that you should do find if position x otherwise, if iron do run , or do run if not|a is a good strategy where you should do build if b is not equal to 0 otherwise, if iron do find , or do run as a last resort|as soon as b is greater than 1 you have the choice to jump until finally b is less than or equal to 2|once a is smaller than x you have the choice to build until b is at most 0|if inventory is larger than y you are able to find until finally inventory|as soon as b is not equal to 0 you are able to find until a is equal to y|b means that it would be good to do use if iron is larger than y otherwise, if iron do run , or do jump if no other options are possible|b states that you should do jump if iron x otherwise, if b do use , or do run if no other options are possible|whenever a is greater than 0 you can find until finally inventory is at most y|when a is at least 1 you can find until finally b is larger than 0|if position is less than y you can jump until inventory is greater than or equal to x|once inventory is smaller than x you can build until a is greater than 1|a states that you should do find if b 0 otherwise, if position do build , or do find if not|b states that you should do jump if position x otherwise, if iron do find , or do run otherwise|a suggests that it would be advantageous to do run if position is equal to 2 otherwise, if position do run , or do jump as a last resort|when a is greater than or equal to 1 you have the choice to use until finally position is less than 2|once inventory you have the option to use until finally position is greater than 1|if inventory is smaller than y you are able to use until finally b is exactly the same as y|if inventory is larger than 1 you are able to jump until finally position is smaller than 0|once a is exactly the same as 1 you have the choice to build until position is at most 1|once a is not the same as x you are able to build until finally a is less than or equal to 2|a is a good strategy where you should do build if b is not the same as 1 otherwise, if a do run , or do run as a last resort|a is an approach where you do jump if a is not equal to y otherwise, if a do run , or do jump if not|if inventory is equal to x you can jump until a is equal to 0|a is an approach where you do build if position 1 otherwise, if position do build , or do use as a last resort|once b is smaller than 1 you can build until finally b is not the same as 2|when inventory is greater than or equal to 1 you can build until position|once a is greater than y you have the choice to build until finally inventory is larger than x|once a is less than or equal to y you can run until a is not equal to 2|a entails that you do use if iron is larger than 0 otherwise, if a do find , or do use if not|a entails that you do find if a is greater than x otherwise, if position do build , or do use if not|as soon as a is greater than 1 you have the choice to use until position is larger than 2|b is a tactic where it is advantageous to do find if a y otherwise, if a do run , or do use as a last resort|if position is not the same as x you are able to find until a is larger than x|b entails that you do use if iron x otherwise, if a do find , or do find if no other options are possible|b means that it would be good to do find if position is larger than y otherwise, if a do run , or do build if no other options are possible|a states that you should do use if b y otherwise, if a do run , or do use if not|a is a tactic where it is good to do use if b is smaller than x otherwise, if iron do find , or do run as a last resort|as soon as b is less than 0 you can find until b is exactly the same as 1|whenever a is exactly the same as y you can use until finally position is larger than y|whenever b is less than 2 you have the choice to jump until finally position is at least y|once a is not equal to 1 you have the option to build until finally a is less than or equal to y|if position is greater than or equal to y you have the option to use until finally b is not equal to 1|whenever inventory is less than or equal to x you are able to use until finally a is less than or equal to 2|a suggests that it would be advantageous to do find if position is less than 2 otherwise, if position do jump , or do jump otherwise|b is an approach where you do run if b is larger than y otherwise, if position do run , or do build if not|once position is not the same as y you are able to run until b is greater than 2|as soon as position is not the same as x you are able to find until finally b is exactly the same as y|a suggests that it would be advantageous to do run if a is not equal to y otherwise, if iron do find , or do jump if no other options are possible|whenever position is equal to 2 you can jump until a is larger than x|a entails that you do run if position 1 otherwise, if b do build , or do build if not|a is a tactic where it is good to do find if b is larger than 0 otherwise, if iron do run , or do run if not|b suggests that it would be advantageous to do jump if b y otherwise, if iron do find , or do run if not|when inventory you have the option to run until finally inventory is smaller than 2|a is a good strategy where you should do build if b is not the same as 1 otherwise, if a do build , or do use as a last resort|if a is greater than or equal to 2 you can run until finally b is not equal to 2|b is a tactic where it is advantageous to do build if a y otherwise, if position do jump , or do use as a last resort|a is a tactic where it is good to do build if a is not equal to x otherwise, if iron do find , or do find if not|a means that it would be good to do find if b is equal to 2 otherwise, if a do run , or do run otherwise|whenever position is at least x you are able to jump until finally a is less than 2|once position is equal to 2 you can build until a is greater than or equal to 2|a is a tactic where it is advantageous to do use if a is exactly the same as x otherwise, if a do find , or do find otherwise|b is a good strategy where you should do run if iron is smaller than x otherwise, if a do find , or do find as a last resort|once inventory is not the same as x you have the choice to use until y|a is a tactic where it is advantageous to do run if a is larger than 1 otherwise, if position do run , or do jump if no other options are possible|whenever a is not the same as 2 you have the choice to run until finally b is at least x|once position is not the same as 1 you have the option to run until b is exactly the same as x|a is a tactic where it is advantageous to do run if b is equal to x otherwise, if a do jump , or do jump otherwise|b means that it would be good to do run if a is exactly the same as 0 otherwise, if a do build , or do find if no other options are possible|a entails that you do find if b is smaller than 0 otherwise, if iron do use , or do jump if not|if inventory is greater than or equal to y you are able to build until finally b is less than or equal to 0|when b is exactly the same as y you have the option to use until a is not equal to 1|b is a strategy where you do find if a is exactly the same as y otherwise, if a do run , or do jump otherwise|a means that it would be good to do run if a is larger than 1 otherwise, if a do find , or do run as a last resort|a suggests that it would be advantageous to do use if position y otherwise, if iron do build , or do find if not|whenever inventory is greater than 2 you are able to use until finally inventory is greater than or equal to x|when position is less than or equal to y you have the option to find until finally inventory is less than or equal to x|if a is equal to 2 you can build until a is greater than 2|whenever a is less than 1 you can jump until finally b is exactly the same as x|if inventory is smaller than 1 you have the choice to jump until finally a is at most 0|a entails that you do use if iron is not the same as 1 otherwise, if iron do find , or do find if no other options are possible|once a is larger than y you have the choice to build until finally position is exactly the same as 2|whenever position is greater than or equal to 2 you have the option to jump until finally inventory is greater than or equal to 1|a means that it would be good to do find if b is not equal to y otherwise, if b do jump , or do jump as a last resort|as soon as x you have the option to build until finally inventory is larger than 1|if b is greater than 0 you can use until b is smaller than x|when inventory is less than 2 you can find until b is greater than or equal to 1|a is a good strategy where you should do run if a 1 otherwise, if iron do find , or do jump otherwise|a entails that you do jump if iron is equal to 1 otherwise, if b do use , or do run if not|a is a strategy where you do jump if iron 0 otherwise, if b do jump , or do jump if no other options are possible|whenever position is greater than 1 you can use until b is exactly the same as x|a is a strategy where you do use if position is not the same as 2 otherwise, if b do jump , or do build otherwise|as soon as inventory is at least 1 you are able to run until position is equal to y|whenever inventory is less than 2 you are able to run until b is not equal to y|b means that it would be good to do jump if position is smaller than y otherwise, if a do build , or do run if not|when position is at least 1 you can use until finally b is larger than x|a is an approach where it would be good to do jump if iron is exactly the same as 0 otherwise, if a do build , or do use otherwise|a states that you should do find if iron y otherwise, if iron do build , or do jump if no other options are possible|if b is equal to 1 you can run until finally b is less than or equal to 1|b is a good strategy where you should do use if a is exactly the same as 1 otherwise, if iron do build , or do find if no other options are possible|as soon as inventory is at most y you are able to run until position is not equal to 1|whenever b is less than 2 you have the option to use until finally a is smaller than x|b suggests that it would be advantageous to do find if b x otherwise, if b do jump , or do find otherwise|once inventory is at most y you have the option to run until b is greater than x|a is an approach where you do run if position is not equal to 0 otherwise, if b do jump , or do jump if not|as soon as a is larger than 0 you have the option to jump until position is equal to 2|a is a tactic where it is good to do find if b is equal to y otherwise, if b do use , or do use if not|a entails that you do build if a is not equal to x , or do use if no other options are possible|as soon as a is at least x you are able to use until position is larger than y|a entails that you do jump if position is not equal to x otherwise, if iron do jump , or do jump if not|whenever a is not the same as 0 you have the choice to find until position is smaller than 2|if position is greater than 0 you have the option to find until y|b is a tactic where it is advantageous to do use if iron is less than y otherwise, if b do jump , or do use otherwise|once b is at least y you have the choice to build until b is not equal to x|b is a tactic where it is good to do build if position is greater than x otherwise, if a do jump , or do build if not|when a is not equal to x you have the option to find until inventory is larger than 0|as soon as inventory is not the same as x you can run until position is not equal to 0|b is a tactic where it is advantageous to do run if b is exactly the same as x otherwise, if b do jump , or do build otherwise|b entails that you do jump if a is larger than y otherwise, if a do jump , or do find if no other options are possible|if inventory is less than y you can build until inventory is not the same as x|b states that you should do build if iron x otherwise, if b do use , or do find if not|a is an approach where you do build if a x otherwise, if iron do find , or do run otherwise|whenever inventory is greater than or equal to x you can build until position is larger than 2|if b is greater than x you are able to find until position is equal to 0|a is an approach where it would be good to do run if b y , or do run if no other options are possible|a means that it would be good to do build if position is greater than 2 , or do find otherwise|a is a strategy where you do find if iron 0 otherwise, if a do build , or do find if no other options are possible|as soon as b is at most 0 you can run until finally a is not equal to 2|whenever position is greater than or equal to 1 you are able to run until finally b is larger than 2|a is an approach where it would be good to do jump if b is less than y otherwise, if position do find , or do run as a last resort|if inventory is at most x you are able to find until finally a is larger than x|whenever b is smaller than 0 you can run until position is at most y|b is an approach where you do run if a is not the same as 0 otherwise, if b do use , or do run otherwise|when position is not the same as x you are able to run until finally position is at least 0|a is an approach where it would be good to do run if b is exactly the same as y otherwise, if b do find , or do run otherwise|if b is larger than 2 you have the choice to jump until inventory is not equal to x|when position you can build until finally b is exactly the same as 1|whenever b is smaller than 0 you can run until finally b is not the same as 2|once inventory is larger than 1 you are able to find until position is not the same as y|if b is smaller than y you have the choice to build until finally x|once position is not equal to y you have the option to find until inventory is at most 0|a states that you should do run if iron 0 otherwise, if b do build , or do build otherwise|a is a tactic where it is good to do find if iron 1 otherwise, if a do use , or do find as a last resort|as soon as b is not the same as 2 you have the option to jump until inventory is at most x|b is a good strategy where you should do find if b y , or do use if no other options are possible|once inventory is greater than or equal to 0 you have the option to use until finally a is equal to 2|once a is exactly the same as 0 you can jump until position is not the same as y|a is an approach where it would be good to do run if position 1 otherwise, if iron do run , or do jump if no other options are possible|when inventory is smaller than 0 you have the option to use until inventory is smaller than 2|a is a tactic where it is advantageous to do jump if a 2 otherwise, if position do find , or do find if not|when inventory is larger than x you have the choice to build until a is exactly the same as y|a is an approach where it would be good to do build if b is equal to y otherwise, if position do find , or do find as a last resort|b is an approach where it would be good to do use if position is equal to y otherwise, if b do jump , or do jump otherwise|once inventory is not the same as x you have the choice to find until finally b is equal to 1|if b is not equal to 0 you are able to find until finally position is less than 0|a is a tactic where it is good to do find if iron 1 otherwise, if position do build , or do build if not|if b is smaller than 0 you have the option to find until position is at least y|a is a strategy where you do build if iron is less than 2 otherwise, if iron do use , or do find if no other options are possible|b is a strategy where you do build if a is smaller than 0 otherwise, if b do build , or do build as a last resort|when b is greater than or equal to 2 you have the option to use until finally a is at most 2|a is a good strategy where you should do use if a is greater than 1 otherwise, if b do run , or do run otherwise|b is an approach where it would be good to do build if b is smaller than x otherwise, if position do jump , or do find as a last resort|once inventory is larger than 1 you have the option to use until position is not the same as 2|if inventory is greater than x you are able to find until finally inventory is less than or equal to 2|a is a strategy where you do use if b is larger than 0 otherwise, if position do find , or do jump if not|b is a good strategy where you should do build if a is smaller than x , or do build if no other options are possible|b is a tactic where it is advantageous to do build if iron is not equal to 1|when a is less than 0 you can find until finally position is not equal to 0|a is an approach where you do use if a 2 otherwise, if b do use , or do find if not|when y you have the option to jump until finally a is larger than x|as soon as a is equal to 2 you are able to jump until inventory is not the same as 1|a means that it would be good to do use if position is not the same as 0 otherwise, if b do build , or do run as a last resort|once position is greater than or equal to 1 you can find until b is at least 2|if position you have the choice to use until b is smaller than 2|when position is not the same as x you are able to find until finally b is at most 2|once b is greater than x you have the option to find until position is larger than y|b is a tactic where it is good to do build if iron is larger than x otherwise, if a do build , or do jump if no other options are possible|when inventory is exactly the same as y you are able to run until b is less than x|b is a tactic where it is good to do use if b x otherwise, if b do build , or do run otherwise|a states that you should do find if position is larger than 0 otherwise, if position do find , or do use if not|b is an approach where you do use if a is exactly the same as 1 otherwise, if position do run , or do jump as a last resort|as soon as inventory is equal to 0 you can jump until inventory is at least 2|as soon as a is at most 2 you are able to jump until finally inventory is exactly the same as x|b entails that you do jump if iron x otherwise, if a do find , or do use if no other options are possible|once b is larger than x you can jump until finally inventory is less than or equal to 0|a suggests that it would be advantageous to do build if iron otherwise, if b do jump , or do use if no other options are possible|when a is less than or equal to y you have the choice to build until b is not the same as 2|a is an approach where it would be good to do find if position is not equal to 1 otherwise, if a do jump , or do run otherwise|once a is not equal to x you can use until a is not equal to 0|a means that it would be good to do run if b is less than x otherwise, if b do run , or do jump as a last resort|a is an approach where it would be good to do jump if iron 1 otherwise, if iron do run , or do jump as a last resort|once position you can run until finally b is equal to 1|when b is less than 2 you have the choice to jump until position is greater than x|as soon as position is greater than or equal to x you can build until finally b is less than 0|once position is at least 0 you are able to find until inventory is larger than x|whenever position is greater than or equal to y you have the option to run until finally a is smaller than x|b is a tactic where it is advantageous to do jump if position is exactly the same as y otherwise, if a do run , or do run if no other options are possible|once position is less than or equal to 2 you can build until inventory is less than or equal to 1|a is a tactic where it is good to do jump if a is not equal to 1 otherwise, if a do jump , or do run as a last resort|a suggests that it would be advantageous to do find if a is not equal to x otherwise, if iron do jump , or do use if not|as soon as b is greater than or equal to 0 you are able to find until finally b is smaller than 0|when a is at least 0 you have the option to jump until a is greater than y|if inventory is equal to 2 you are able to use until position is not the same as x|as soon as a you can build until position is not the same as 0|a means that it would be good to do build if b is exactly the same as x otherwise, if a do build , or do find if no other options are possible|once b is not the same as x you are able to use until position is larger than x|a is an approach where you do jump if position is greater than x otherwise, if iron do run , or do jump if not|a entails that you do use if b is larger than 2 otherwise, if position do run , or do build if no other options are possible|if position is not the same as y you are able to jump until finally a is equal to 1|a is an approach where it would be good to do find if iron is exactly the same as 2 otherwise, if a do jump , or do build as a last resort|when inventory is greater than y you have the option to find until finally position is equal to x|a is a strategy where you do find if a is greater than 1 otherwise, if position do run , or do jump as a last resort|when a is larger than x you have the option to use until finally inventory is less than or equal to 0|a is a good strategy where you should do build if iron is not equal to 2 otherwise, if b do use , or do jump if no other options are possible|if b is less than or equal to y you have the choice to jump until inventory is greater than or equal to y|b is a tactic where it is good to do use if a x otherwise, if b do jump , or do find if no other options are possible|if y you have the option to jump until finally inventory is at least x|b entails that you do jump if a is less than 2 otherwise, if position do build , or do use if not|whenever b is greater than or equal to x you have the choice to use until position is greater than or equal to 0|as soon as b is less than or equal to 2 you are able to use until finally inventory is at most 1|if inventory is less than 2 you can build until finally b is exactly the same as y|if position is not the same as x you can run until finally b is equal to 2|as soon as b is less than or equal to y you can build until finally b is not equal to x|once inventory is exactly the same as x you are able to build until a is greater than or equal to 0|b is a strategy where you do jump if position is larger than y otherwise, if iron do use , or do build if no other options are possible|when inventory is equal to y you can find until finally inventory is not equal to 1|b states that you should do find if position x , or do jump otherwise|when position is larger than 2 you can use until finally inventory is greater than y|a means that it would be good to do run if b y otherwise, if iron do find , or do jump if no other options are possible|as soon as inventory is exactly the same as y you can build until finally a is exactly the same as 1|b suggests that it would be advantageous to do find if b is not the same as x otherwise, if iron do use , or do use otherwise|a states that you should do use if a is greater than x otherwise, if b do use , or do run as a last resort|a is a good strategy where you should do build if position is equal to 0 otherwise, if b do build , or do use if not|as soon as position is greater than or equal to y you are able to run until position is smaller than 2|if position is less than or equal to 2 you are able to build until finally position is at most 1|when b is greater than x you have the choice to build until position is larger than x|b entails that you do jump if a is equal to x otherwise, if a do run , or do use if no other options are possible|b means that it would be good to do run if a is less than x otherwise, if iron do find , or do jump if not|a is a good strategy where you should do run if position 0 otherwise, if iron do build , or do use as a last resort|if b is greater than 1 you can build until finally b is at least x|if inventory is at least 2 you are able to find until b is less than or equal to y|a means that it would be good to do find if a x otherwise, if iron do jump , or do jump if not|b suggests that it would be advantageous to do jump if position is not the same as x otherwise, if a do build , or do find as a last resort|a is an approach where you do find if a is larger than 0 otherwise, if position do build , or do find if not|b is an approach where it would be good to do build if a is not the same as 0 otherwise, if iron do use , or do find otherwise|once inventory is greater than or equal to 0 you have the choice to use until inventory is equal to 2|once a is greater than 1 you can use until position is less than y|as soon as a is greater than 1 you are able to jump until inventory is less than 0|a is a good strategy where you should do use if b 1 otherwise, if iron do find , or do build as a last resort|a means that it would be good to do use if a 1 otherwise, if a do jump , or do jump if no other options are possible|if position is smaller than 2 you have the choice to build until position is at least 1|b entails that you do find if iron is less than x otherwise, if a do build , or do jump as a last resort|whenever a is exactly the same as 2 you have the choice to run until finally a is less than or equal to y|b is a strategy where you do find if a otherwise, if iron do build , or do build if not|b means that it would be good to do use if a x otherwise, if b do jump , or do build if no other options are possible|a is a tactic where it is good to do use if b is larger than y otherwise, if iron do build , or do build if no other options are possible|when inventory is exactly the same as 2 you have the option to jump until a is at most 2|a is a tactic where it is good to do use if a is not equal to 0 otherwise, if iron do build , or do jump if no other options are possible|whenever a is smaller than 2 you have the choice to jump until position is less than y|once inventory is greater than 0 you are able to jump until inventory is less than x|whenever inventory is equal to 0 you are able to use until b is smaller than y|a is a good strategy where you should do find if a is equal to x otherwise, if b do build , or do jump if not|whenever position is not equal to x you can jump until finally b|a is an approach where you do run if a is not equal to 0 otherwise, if position do build , or do run as a last resort|whenever a is larger than 2 you have the choice to build until finally inventory is larger than 1|if b is smaller than y you can jump until finally position is equal to 2|once b is equal to y you have the option to build until inventory is less than or equal to y|b is an approach where you do build if position y otherwise, if a do run , or do use if not|b is an approach where it would be good to do find if iron is larger than 1 , or do jump if not|once position is greater than y you have the option to build until inventory is less than y|as soon as b is equal to 0 you have the choice to run until finally b is not equal to y|when b is not the same as 1 you are able to find until b is less than 2|a is an approach where it would be good to do find if b is exactly the same as y otherwise, if a do find , or do build as a last resort|a is an approach where it would be good to do use if iron 0 otherwise, if position do use , or do run as a last resort|as soon as b is greater than y you are able to run until position is larger than 2|a is a good strategy where you should do jump if position 2 otherwise, if b do use , or do use if no other options are possible|a entails that you do jump if position is greater than 0 otherwise, if b do use , or do jump otherwise|a is a tactic where it is good to do jump if a is not equal to 2 otherwise, if position do jump , or do jump if no other options are possible|b states that you should do use if iron x otherwise, if b do build , or do build otherwise|once inventory is not equal to 1 you have the choice to jump until finally b is exactly the same as 0|a is a strategy where you do use if b is greater than 2 otherwise, if position do find , or do run otherwise|a is a strategy where you do find if position is equal to 2 otherwise, if iron do jump , or do jump as a last resort|as soon as inventory is greater than or equal to y you have the option to find until finally b is larger than 0|b is a strategy where you do use if iron is greater than x otherwise, if b do jump , or do find as a last resort|once position is not the same as 0 you have the choice to run until finally inventory is smaller than y|b is a tactic where it is good to do jump if a y otherwise, if b do build , or do build if no other options are possible|a is an approach where you do run if position x otherwise, if a do build , or do build if no other options are possible|whenever inventory is not equal to y you are able to use until finally inventory is larger than x|when a is not equal to 1 you have the option to build until inventory is larger than y|b entails that you do build if iron otherwise, if position do use , or do find otherwise|a is a tactic where it is advantageous to do jump if position 2 otherwise, if position do run , or do use otherwise|a is a strategy where you do jump if position is not equal to x otherwise, if b do jump , or do find if no other options are possible|as soon as b is equal to y you can jump until inventory is larger than y|b means that it would be good to do use if iron y otherwise, if a do use , or do build if not|as soon as position is not the same as 2 you have the choice to run until finally position is not equal to 1|whenever position is at most 2 you can find until finally a is not equal to 2|b is a strategy where you do run if position x otherwise, if a do use , or do use as a last resort|a is a good strategy where you should do run if position is larger than x otherwise, if iron do run , or do run otherwise|once position is less than 2 you can use until position is exactly the same as 2|when b is greater than 1 you are able to jump until a is at least x|as soon as position is less than y you are able to run until a is larger than x|a suggests that it would be advantageous to do use if a is not the same as x otherwise, if iron do build , or do build if not|b entails that you do jump if position is smaller than x otherwise, if b do find , or do run as a last resort|when b is at most 2 you can find until a is equal to x|a means that it would be good to do find if b x otherwise, if iron do find , or do build if no other options are possible|a is a good strategy where you should do use if b is larger than 0 otherwise, if b do use , or do build if no other options are possible|whenever a is at most 0 you can find until position is smaller than x|a is a tactic where it is good to do jump if iron is equal to 0 otherwise, if b do jump , or do build otherwise|a states that you should do jump if iron 2 otherwise, if b do find , or do use if not|whenever b is larger than x you have the choice to build until finally b is exactly the same as 1|a suggests that it would be advantageous to do jump if b is greater than x otherwise, if a do run , or do use if not|if a is not equal to y you have the option to jump until b is smaller than 2|if a is not equal to 2 you can find until inventory is greater than y|b is a good strategy where you should do build if b x otherwise, if position do build , or do jump otherwise|when position is larger than 0 you can find until b is larger than y|b is a good strategy where you should do use if a y otherwise, if b do use , or do use otherwise|a entails that you do find if iron 2 otherwise, if a do jump , or do find otherwise|a states that you should do jump if b is not equal to 1 otherwise, if a do jump , or do jump otherwise|whenever position is at least y you can use until inventory is at least 1|a is a good strategy where you should do use if b is not the same as x otherwise, if a do jump , or do jump if no other options are possible|when a is at least x you can use until inventory is not the same as x|if b is less than or equal to 0 you have the option to use until inventory is at least y|as soon as position is greater than x you have the option to run until position is less than y|once position is not the same as 0 you are able to build until finally a is at least 0|b entails that you do build if b y otherwise, if position do run , or do find if not|once a is exactly the same as 1 you are able to find until inventory is less than 2|as soon as b is greater than 2 you have the option to use until finally b is less than or equal to 1|as soon as inventory is exactly the same as 2 you have the choice to run until a is smaller than 0|as soon as inventory is at most y you are able to jump until finally position is greater than or equal to 0|a entails that you do use if iron 1 otherwise, if b do use , or do jump as a last resort|once position is larger than x you are able to run until finally position is not equal to 2|a is a good strategy where you should do jump if b is equal to x otherwise, if iron do use , or do use as a last resort|a is a good strategy where you should do jump if position is smaller than 1 , or do run as a last resort|when inventory is at most y you have the option to find until b is at most 0|a is a strategy where you do find if iron 2 otherwise, if a do use , or do jump otherwise|when inventory is less than or equal to y you have the choice to jump until finally position is larger than 0|when b is greater than or equal to x you are able to use until position is less than or equal to 2|as soon as b is at least 2 you can build until finally a is at most 1|b means that it would be good to do jump if b is equal to x otherwise, if position do use , or do run as a last resort|b means that it would be good to do build if a x otherwise, if position do jump , or do use if not|a is a tactic where it is good to do use if position is not the same as 1 otherwise, if b do use , or do build if not|a states that you should do jump if position y otherwise, if a do use , or do use otherwise|b is a good strategy where you should do build if a is larger than y , or do find as a last resort|once position is larger than x you can run until finally b is less than 2|as soon as position is less than or equal to 0 you have the choice to run until inventory is not equal to x|a means that it would be good to do use if position 2 otherwise, if a do use , or do jump if not|b is a tactic where it is advantageous to do run if a is equal to 0 otherwise, if a do jump , or do use as a last resort|when a is less than y you can find until finally position is exactly the same as y|a is a tactic where it is advantageous to do build if position is not the same as 0 otherwise, if a do run , or do use otherwise|a is a good strategy where you should do build if iron is exactly the same as y otherwise, if position do use , or do find if no other options are possible|when position is exactly the same as y you are able to build until inventory is exactly the same as 1|once b is less than 1 you have the choice to run until a is larger than 0|as soon as position is greater than 2 you are able to use until finally a is not equal to y|a is a good strategy where you should do use if iron is less than x otherwise, if a do find , or do use if not|b is an approach where you do jump if iron is smaller than x otherwise, if a do find , or do build otherwise|a is a strategy where you do run if b x otherwise, if iron do run , or do use otherwise|once position is less than or equal to 1 you are able to use until finally b is less than or equal to x|whenever inventory is at least 2 you have the option to find until inventory|once a is not the same as 1 you can use until b is exactly the same as 0|a entails that you do find if position is not the same as 2 otherwise, if iron do use , or do run as a last resort|as soon as inventory is equal to 2 you are able to build until a is exactly the same as y|once a is greater than y you have the choice to find until finally inventory is smaller than 2|once position is not equal to 2 you can build until a is smaller than 1|as soon as b is at most 2 you have the option to run until finally position is greater than or equal to 2|b is an approach where it would be good to do jump if b 2 , or do build otherwise|if b is not equal to x you can run until inventory is not equal to y|as soon as inventory is larger than 0 you have the option to build until finally a is not the same as y|once inventory is greater than or equal to y you are able to build until a is at least 1|if b you have the option to jump until finally a is at most x|b is an approach where you do use if b y otherwise, if iron do use , or do use if no other options are possible|a suggests that it would be advantageous to do use if iron is larger than 0 otherwise, if position do find , or do jump otherwise|when a is not equal to x you are able to run until finally a is less than or equal to 0|once position is greater than or equal to x you have the option to run until finally b is at most 2|a suggests that it would be advantageous to do jump if iron x otherwise, if iron do find , or do jump as a last resort|a is a tactic where it is advantageous to do run if b is less than 2 otherwise, if iron do jump , or do build if not|when b is less than 1 you can use until finally a is exactly the same as x|whenever position is larger than 1 you have the option to run until position is greater than y|a means that it would be good to do find if a y otherwise, if a do jump , or do find otherwise|b states that you should do jump if a is not the same as x otherwise, if b do use , or do run if no other options are possible|when a is at least 2 you have the option to use until position is less than or equal to 1|when b is equal to 2 you can build until finally position is exactly the same as 2|whenever a is greater than 2 you are able to find until finally position is greater than or equal to y|whenever a is less than x you are able to find until b is not the same as y|a states that you should do build if a 2 otherwise, if a do use , or do use if not|b is a tactic where it is advantageous to do run if a y otherwise, if b do find , or do use otherwise|a states that you should do build if position is exactly the same as 0 , or do use if no other options are possible|if position is equal to 1 you can run until position is at least 0|b is an approach where it would be good to do use if position is equal to y otherwise, if position do jump , or do find if not|whenever b is exactly the same as 1 you are able to run until finally inventory is not equal to 0|whenever position is smaller than 2 you have the option to find until b is less than 1|a is an approach where you do find if iron is larger than x otherwise, if a do run , or do use otherwise|whenever inventory is exactly the same as y you have the option to build until finally inventory is equal to 1|whenever inventory is not equal to 1 you have the option to jump until finally position is at least 2|a is a tactic where it is advantageous to do run if iron 2 otherwise, if b do jump , or do run otherwise|once position is smaller than x you are able to run until finally a is larger than 2|when position is greater than or equal to 2 you can use until finally b is exactly the same as y|once position is exactly the same as 1 you can run until finally a is equal to 1|whenever inventory is not equal to 1 you are able to use until finally inventory is at least 0|b is an approach where it would be good to do run if position is equal to x otherwise, if a do build , or do find if not|as soon as inventory is not the same as 2 you can build until a is greater than y|b is an approach where it would be good to do jump if a is equal to x otherwise, if b do use , or do find if not|when a is not equal to 2 you are able to build until a|a states that you should do run if position is greater than 1 otherwise, if b do use , or do build if no other options are possible|if a is greater than 2 you have the choice to jump until finally inventory is greater than x|if position is less than or equal to 0 you can jump until finally b is at most x|as soon as inventory is not equal to 1 you have the choice to find until finally b is exactly the same as 0|b is a tactic where it is good to do jump if b is greater than 0 , or do jump if not|whenever a is equal to y you have the option to build until finally b is at least 1|a is a good strategy where you should do jump if position 2 , or do build if no other options are possible|if a you are able to find until b|if position is at most 1 you have the option to use until inventory is greater than x|a is an approach where you do run if b is smaller than x otherwise, if iron do find , or do run as a last resort|if a is not the same as 0 you can find until inventory is less than 1|b is an approach where it would be good to do find if a is smaller than 0 otherwise, if iron do run , or do use if no other options are possible|a is an approach where you do find if iron is greater than 1 otherwise, if iron do run , or do find if no other options are possible|b means that it would be good to do run if b 1 , or do find otherwise|b is an approach where you do find if a y otherwise, if position do jump , or do find if not|as soon as b is less than or equal to y you have the choice to find until finally position is less than y|a states that you should do build if b 1 otherwise, if iron do find , or do jump if no other options are possible|whenever b is larger than x you are able to build until a is not equal to 1|once position is greater than y you can jump until finally b is not the same as x|a is a tactic where it is good to do build if b is larger than 2 otherwise, if b do find , or do find if not|as soon as b is equal to x you have the choice to jump until position is equal to 2|a is a strategy where you do build if b is larger than y otherwise, if iron do run , or do use otherwise|b is a good strategy where you should do jump if a is greater than x otherwise, if position do build , or do jump otherwise|a states that you should do jump if b 2 otherwise, if iron do jump , or do find if not|when position is equal to 1 you are able to run until finally position is less than y|b is a tactic where it is advantageous to do use if a is equal to y otherwise, if position do find , or do use otherwise|when position is not equal to x you are able to jump until finally b is not the same as 0|once a you have the option to build until position is not equal to 1|if inventory is greater than y you can jump until finally a is less than or equal to 2|a means that it would be good to do find if position y otherwise, if b do jump , or do jump as a last resort|a is an approach where you do jump if b is exactly the same as y otherwise, if position do use , or do find as a last resort|whenever position is less than 0 you have the choice to run until finally b is greater than or equal to x|as soon as position is at most x you can use until finally inventory is less than or equal to 0|a states that you should do use if iron x otherwise, if b do find , or do jump otherwise|as soon as b is less than 0 you have the option to use until a is smaller than x|b states that you should do use if a is smaller than x otherwise, if position do use , or do find if not|if position is at least 0 you have the choice to find until inventory is larger than 2|as soon as b is smaller than x you have the choice to jump until inventory is at most 1|if b is at most x you have the choice to use until finally inventory is at most 1|when a is not equal to x you have the choice to use until a is less than x|whenever b is at most 2 you can build until finally position is less than 0|when b is exactly the same as 0 you have the option to jump until finally position is less than or equal to 1|b is a good strategy where you should do jump if iron y , or do run if not|if inventory is not the same as 2 you have the choice to find until finally position is less than or equal to 0|as soon as a is greater than or equal to x you can build until inventory is less than or equal to 1|when inventory is less than or equal to 1 you have the option to build until inventory is equal to 1|a is an approach where it would be good to do use if a 0 otherwise, if iron do build , or do jump if not|b is a tactic where it is good to do run if position otherwise, if iron do run , or do run if no other options are possible|if b is not the same as 1 you are able to find until b is not the same as 1|b is a tactic where it is advantageous to do run if position is greater than y otherwise, if position do build , or do run if not|b means that it would be good to do run if a is larger than y otherwise, if position do build , or do build as a last resort|once inventory is equal to 0 you have the choice to build until b is not equal to 1|once position is greater than 1 you have the option to use until a is not the same as 0|b is a tactic where it is good to do use if a x otherwise, if iron do use , or do run as a last resort|a suggests that it would be advantageous to do jump if position is less than y otherwise, if b do find , or do run if no other options are possible|a entails that you do run if a y otherwise, if position do use , or do use if not|b is a good strategy where you should do run if position is greater than x otherwise, if position do jump , or do find as a last resort|a suggests that it would be advantageous to do find if a is greater than x otherwise, if position do run , or do jump as a last resort|b is a good strategy where you should do find if b is exactly the same as y otherwise, if b do use , or do run if not|b is a tactic where it is advantageous to do build if iron y otherwise, if iron do build , or do build as a last resort|b is an approach where you do find if position is less than y otherwise, if iron do jump , or do build as a last resort|a is a good strategy where you should do jump if position is not equal to 1 otherwise, if b do use , or do find if no other options are possible|a means that it would be good to do jump if position is smaller than 2 otherwise, if a do find , or do build if no other options are possible|whenever b is equal to 0 you can build until finally b is not equal to 1|a states that you should do run if b is not the same as y otherwise, if iron do jump , or do build if not|whenever b is not equal to y you have the option to use until position is not equal to y|a is a good strategy where you should do use if a is not the same as 0 otherwise, if position do use , or do use as a last resort|a suggests that it would be advantageous to do build if iron is exactly the same as x otherwise, if iron do build , or do use otherwise|a is an approach where you do jump if iron is not the same as 2 otherwise, if a do run , or do jump if not|whenever a is less than or equal to x you have the option to build until finally b is smaller than y|b is a tactic where it is advantageous to do run if b is less than y otherwise, if a do use , or do use as a last resort|a is a tactic where it is good to do use if position is exactly the same as x , or do build if not|a means that it would be good to do use if position is greater than x otherwise, if iron do run , or do build if not|if inventory is exactly the same as 0 you have the option to run until position is exactly the same as y|a is an approach where you do find if a is equal to 1 otherwise, if iron do build , or do use if not|as soon as a is equal to 2 you are able to find until inventory is not the same as 0|a suggests that it would be advantageous to do build if b is greater than 0 otherwise, if b do build , or do find otherwise|a is an approach where it would be good to do run if position is equal to y , or do jump as a last resort|whenever b is greater than 0 you have the choice to build until b is smaller than y|if inventory is less than or equal to 2 you can jump until finally position is larger than y|a suggests that it would be advantageous to do jump if position is equal to 2 otherwise, if a do jump , or do run otherwise|whenever position is equal to 1 you can jump until finally position is greater than or equal to 2|if inventory is exactly the same as 0 you have the choice to find until finally a is equal to x|a is a tactic where it is advantageous to do build if iron 2 otherwise, if position do build , or do find if not|once a is smaller than x you have the choice to use until finally position is at most 2|b is a tactic where it is good to do jump if iron is greater than y otherwise, if a do use , or do build if not|a entails that you do use if a is exactly the same as 1 , or do build as a last resort|whenever a is greater than or equal to 0 you have the option to jump until finally inventory is exactly the same as y|as soon as b is exactly the same as x you have the option to run until finally a|b is an approach where it would be good to do run if a is smaller than 0 otherwise, if b do run , or do jump if not|b is a good strategy where you should do run if a is not equal to 0 otherwise, if iron do jump , or do jump as a last resort|if b is less than 2 you have the option to find until finally b is exactly the same as y|if position is not the same as y you have the choice to jump until finally a is equal to 2|whenever position is at least 0 you can build until finally a|a means that it would be good to do build if b is not equal to 2 otherwise, if iron do find , or do find otherwise|as soon as position is exactly the same as x you can use until a is exactly the same as 1|when a is at most 0 you have the choice to run until inventory is larger than 2|a is a strategy where you do jump if b is not equal to 0 otherwise, if iron do find , or do use otherwise|b means that it would be good to do find if b is greater than y otherwise, if iron do build , or do jump as a last resort|if b is less than x you have the choice to build until a is larger than 2|b means that it would be good to do jump if b x otherwise, if position do find , or do jump if not|as soon as b is at least x you can use until finally inventory is not equal to x|if position is less than or equal to x you have the option to use until y|once inventory is greater than or equal to 0 you can build until b is greater than or equal to x|as soon as inventory is greater than or equal to y you are able to run until finally b is at least y|a entails that you do build if a is not equal to 2 otherwise, if position do jump , or do find otherwise|whenever inventory you have the choice to jump until a|b is a strategy where you do use if position is exactly the same as y otherwise, if a do find , or do run if no other options are possible|as soon as position is at most 0 you have the choice to use until finally b is larger than 0|once inventory is exactly the same as 0 you are able to jump until b is greater than 1|whenever position is greater than 0 you can build until b is not the same as 1|once inventory is at most y you have the option to use until finally a is greater than or equal to x|a suggests that it would be advantageous to do build if a is not equal to x otherwise, if iron do build , or do build as a last resort|as soon as a is larger than 2 you are able to find until a is at least 1|a entails that you do use if b 2 otherwise, if iron do use , or do build as a last resort|a suggests that it would be advantageous to do jump if a is larger than 1 , or do find if not|b is a tactic where it is advantageous to do find if iron x otherwise, if b do find , or do find if not|a suggests that it would be advantageous to do find if position is exactly the same as 1 otherwise, if a do run , or do run if no other options are possible|as soon as b is smaller than y you can use until finally position is at most 1|a is a strategy where you do find if position is exactly the same as 1 otherwise, if iron do find , or do run as a last resort|b is an approach where it would be good to do use if a is equal to 2 otherwise, if b do run , or do find if not|if b is less than 1 you have the option to use until a is larger than 0|b is a good strategy where you should do find if iron is equal to y|a is a tactic where it is advantageous to do find if position 1 otherwise, if position do use , or do use as a last resort|b is a tactic where it is advantageous to do find if iron is equal to y otherwise, if a do jump , or do find otherwise|b is an approach where it would be good to do jump if position is exactly the same as y otherwise, if a do find , or do find as a last resort|a is a strategy where you do jump if b is equal to 2 otherwise, if a do jump , or do build if not|if position is greater than or equal to 0 you have the option to jump until b is greater than x|b is a tactic where it is good to do find if position is not the same as x otherwise, if position do find , or do build as a last resort|as soon as position is greater than 1 you have the choice to find until finally a is less than 2|whenever inventory is smaller than y you have the option to use until finally b is greater than x|a entails that you do find if a is smaller than x otherwise, if iron do run , or do run as a last resort|if b is equal to 2 you have the option to use until finally a is exactly the same as y|b is an approach where it would be good to do run if b y , or do find otherwise|a is an approach where it would be good to do run if b is greater than y otherwise, if iron do use , or do use if no other options are possible|as soon as b is not the same as 2 you are able to use until finally position is equal to 1|whenever a is at least y you have the option to run until inventory is at least 1|a is a tactic where it is advantageous to do find if b is equal to 0 otherwise, if position do build , or do find if no other options are possible|b entails that you do jump if a 2 , or do jump otherwise|a is a tactic where it is good to do run if position 2 otherwise, if a do build , or do find if not|once inventory is not the same as x you can use until position is equal to y|when a is greater than or equal to 0 you have the option to jump until inventory is at most 1|whenever inventory you have the choice to find until finally inventory is greater than or equal to 1|once inventory is greater than 0 you have the option to jump until finally a is less than 1|whenever a is smaller than 0 you can jump until finally position is larger than x|once a is greater than or equal to x you can run until finally inventory is larger than 1|when a is not the same as 1 you have the option to jump until finally inventory is larger than x|as soon as b is at least 2 you have the option to use until a is at most 1|b is a good strategy where you should do find if b is not the same as x otherwise, if b do use , or do run if not|as soon as a is less than or equal to x you are able to build until finally position|a entails that you do use if b is greater than 1 otherwise, if b do find , or do jump if not|a is a tactic where it is advantageous to do jump if b is not the same as y otherwise, if b do find , or do build otherwise|a is an approach where you do use if a is equal to 1 otherwise, if b do jump , or do find if no other options are possible|once inventory is at least x you are able to jump until inventory is greater than or equal to 2|b is a strategy where you do build if a x otherwise, if position do run , or do find if not|b is an approach where you do build if position otherwise, if iron do build , or do find if not|a is a tactic where it is good to do build if position 2 otherwise, if position do build , or do run otherwise|when inventory is larger than 1 you are able to jump until finally a is not the same as x|a is a tactic where it is good to do build if iron x otherwise, if position do run , or do jump if not|whenever a is not the same as y you have the option to jump until a is smaller than y|when position is smaller than y you have the choice to use until finally a is exactly the same as y|a is a good strategy where you should do run if iron is not the same as 2 otherwise, if position do run , or do run if no other options are possible|b suggests that it would be advantageous to do run if a is smaller than 2 otherwise, if b do jump , or do build as a last resort|b states that you should do jump if position y otherwise, if iron do use , or do jump otherwise|b is a strategy where you do run if position otherwise, if position do run , or do use if no other options are possible|if a is not the same as x you can build until finally a is less than or equal to 1|a is an approach where you do build if b 2 otherwise, if a do find , or do run if not|if b is equal to 2 you can build until position is less than y|a is a good strategy where you should do run if b is larger than 1 otherwise, if b do build , or do use if not|when a is not the same as 1 you have the option to find until b is smaller than 1|a means that it would be good to do build if position 1 otherwise, if position do find , or do use otherwise|as soon as b is not equal to 0 you have the option to use until b is greater than 1|once b is not the same as 0 you can jump until finally position is less than or equal to 0|a is an approach where you do jump if iron is exactly the same as x otherwise, if a do find , or do run as a last resort|whenever inventory is not equal to y you are able to build until finally position is less than 1|b is a tactic where it is advantageous to do find if a is equal to 1 otherwise, if iron do use , or do find if not|b is a good strategy where you should do build if b is smaller than y otherwise, if iron do run , or do jump if no other options are possible|a states that you should do jump if iron is less than 1 otherwise, if b do run , or do use if not|if b is not the same as 2 you have the option to use until finally inventory is greater than or equal to x|b is a tactic where it is good to do run if iron is larger than x otherwise, if b do build , or do run if no other options are possible|a is a tactic where it is advantageous to do find if position is not the same as y otherwise, if position do run , or do jump if not|a is a tactic where it is advantageous to do jump if iron otherwise, if position do find , or do build if no other options are possible|once position is smaller than 2 you can run until finally position is equal to x|when a is not the same as y you have the choice to jump until finally inventory is greater than y|as soon as inventory is at least y you have the option to run until finally position is greater than 1|b states that you should do run if a is equal to 2 otherwise, if a do use , or do run if not|a is an approach where it would be good to do find if b 1 , or do use if no other options are possible|b entails that you do build if b otherwise, if b do build , or do find if no other options are possible|a suggests that it would be advantageous to do use if iron is larger than 1 otherwise, if b do build , or do find otherwise|whenever b is exactly the same as 0 you have the choice to find until b|when b is at most 2 you have the choice to jump until inventory is equal to 1|a is a tactic where it is good to do use if a is not equal to x otherwise, if b do use , or do jump if not|if inventory is not the same as 1 you have the choice to jump until a is exactly the same as x|b suggests that it would be advantageous to do jump if position is not equal to x otherwise, if position do build , or do jump otherwise|a states that you should do run if a is equal to 2 , or do build as a last resort|a suggests that it would be advantageous to do jump if a is not the same as 0 otherwise, if a do run , or do find if not|b entails that you do jump if a is larger than x otherwise, if a do find , or do jump if not|a is a good strategy where you should do find if b otherwise, if a do find , or do find if not|b is a strategy where you do find if a y otherwise, if position do run , or do jump otherwise|a means that it would be good to do run if iron is not the same as 0 otherwise, if iron do jump , or do run if no other options are possible|b states that you should do jump if a 1 , or do build if no other options are possible|once a is larger than 2 you can jump until inventory is equal to x|if position is smaller than 0 you can jump until finally inventory is smaller than x|a means that it would be good to do use if iron is equal to 2 otherwise, if iron do jump , or do build as a last resort|a entails that you do build if b is larger than 2 otherwise, if b do use , or do build if no other options are possible|a is a strategy where you do find if a y otherwise, if iron do use , or do jump if not|a is a good strategy where you should do build if b is less than 0 otherwise, if position do run , or do use if not|if a is greater than x you are able to jump until a is smaller than 2|a is an approach where you do use if position is greater than 2 otherwise, if a do find , or do find as a last resort|a states that you should do use if b is exactly the same as 0 otherwise, if a do use , or do find as a last resort|b is an approach where it would be good to do find if position is smaller than y otherwise, if a do find , or do find otherwise|a states that you should do build if a is exactly the same as 0 otherwise, if iron do use , or do find if not|b states that you should do build if a is not equal to 1 otherwise, if b do use , or do use as a last resort|when inventory is equal to y you are able to jump until finally position is less than x|as soon as a is exactly the same as 1 you are able to jump until position is not equal to y|whenever a is not the same as 2 you can use until inventory is not the same as 1|a is a strategy where you do find if iron is smaller than 2 otherwise, if b do build , or do build if not|whenever a is less than or equal to 1 you can run until b is exactly the same as x|a is a strategy where you do jump if b is less than 2 otherwise, if b do build , or do find otherwise|b is a strategy where you do run if iron is exactly the same as x otherwise, if a do jump , or do build otherwise|a is an approach where you do jump if a x otherwise, if a do jump , or do jump if no other options are possible|a states that you should do use if iron is less than 2 otherwise, if iron do find , or do run if not|as soon as inventory is larger than x you have the option to use until position is greater than or equal to 2|as soon as a is at least 2 you are able to run until finally position is less than or equal to x|once inventory is exactly the same as 2 you have the choice to use until finally b is greater than or equal to y|if a is not the same as x you are able to find until finally inventory is less than 2|b is a tactic where it is advantageous to do find if position y , or do use if no other options are possible|a is an approach where you do build if position is equal to y otherwise, if b do use , or do run if not|as soon as inventory is larger than y you are able to use until finally b is smaller than x|whenever b is at least 2 you are able to find until position is greater than 1|once inventory is less than or equal to 2 you can build until finally inventory is at least y|a entails that you do use if a is smaller than 0 , or do jump as a last resort|a suggests that it would be advantageous to do find if iron is not the same as 0 otherwise, if iron do run , or do run as a last resort|once position is greater than 1 you have the choice to find until b is at most 2|if position is smaller than y you have the choice to find until finally a is exactly the same as y|a is a strategy where you do build if iron otherwise, if b do use , or do use if no other options are possible|b is an approach where it would be good to do build if a is less than x otherwise, if a do run , or do run if not|if a is larger than x you can jump until b is at least 2|a entails that you do build if position is not the same as x otherwise, if a do build , or do use if no other options are possible|a is a strategy where you do use if b is not the same as 0 , or do find if not|a is a good strategy where you should do jump if position is exactly the same as 0 otherwise, if a do run , or do build as a last resort|once inventory is equal to x you have the option to find until b|a is a good strategy where you should do find if iron is exactly the same as y otherwise, if a do run , or do find otherwise|a means that it would be good to do jump if position is larger than 1 otherwise, if iron do build , or do use if not|a states that you should do build if b is not the same as x otherwise, if position do use , or do use if not|if position you can build until finally position is greater than or equal to 0|b is a strategy where you do run if iron is equal to x otherwise, if position do jump , or do use if not|as soon as b is larger than 1 you have the choice to jump until finally a is smaller than y|once b is equal to y you are able to jump until finally position is not the same as x|a suggests that it would be advantageous to do build if position is equal to 1 , or do run otherwise|if inventory is smaller than 1 you can build until finally inventory is equal to x|a is an approach where you do run if position is exactly the same as 0 otherwise, if position do jump , or do use as a last resort|b entails that you do use if a is less than 0 otherwise, if position do run , or do build otherwise|as soon as a is less than x you have the choice to build until b is greater than 2|as soon as a is not equal to 0 you have the option to jump until finally b is at least 1|a states that you should do find if position 1 otherwise, if b do jump , or do run otherwise|as soon as a is at least x you can use until finally inventory is exactly the same as 2|a suggests that it would be advantageous to do find if b 1 otherwise, if b do build , or do find if not|if a is exactly the same as x you can use until finally inventory is less than 0|whenever b is exactly the same as 1 you have the choice to jump until finally inventory is greater than y|b is a good strategy where you should do run if b is not the same as x otherwise, if iron do run , or do find otherwise|whenever b is less than 1 you are able to jump until finally y|when position is not equal to 2 you have the option to find until b is smaller than x|when a is larger than 1 you have the option to build until finally a is larger than x|when inventory is smaller than y you have the option to jump until a is not the same as 0|when position is greater than x you have the choice to jump until position is larger than 0|once a is larger than x you can build until b is less than 2|b states that you should do jump if position is smaller than 2 , or do run otherwise|as soon as position is smaller than 0 you are able to find until inventory is not the same as x|b is a tactic where it is advantageous to do build if a is smaller than 2 otherwise, if position do find , or do jump as a last resort|a is an approach where it would be good to do find if position is less than 1 otherwise, if b do use , or do find otherwise|a suggests that it would be advantageous to do use if a otherwise, if iron do use , or do jump as a last resort|as soon as position is equal to y you are able to run until a is at least 1|b states that you should do find if position is not the same as y otherwise, if iron do jump , or do run if no other options are possible|a entails that you do find if position y otherwise, if iron do use , or do build as a last resort|whenever b is larger than 0 you can find until b is at least 0|once a is larger than 0 you have the option to find until b is at most x|a means that it would be good to do jump if position 1 otherwise, if position do find , or do jump if not|if a is equal to 0 you have the option to jump until position is less than or equal to y|a is an approach where it would be good to do jump if iron otherwise, if b do run , or do find as a last resort|a is a good strategy where you should do use if position is not the same as x otherwise, if b do use , or do build if not|a is a tactic where it is good to do use if b is greater than y otherwise, if position do use , or do find if not|b is a strategy where you do build if a is not the same as 1 otherwise, if iron do run , or do run otherwise|b entails that you do jump if a is equal to y otherwise, if b do jump , or do jump otherwise|b is a strategy where you do find if iron is less than x otherwise, if b do build , or do use if not|a suggests that it would be advantageous to do build if a is greater than x otherwise, if position do use , or do build otherwise|b is a good strategy where you should do build if iron is equal to x otherwise, if iron do build , or do jump if not|once b is exactly the same as y you can run until a is less than x|as soon as b is at least 2 you have the choice to run until finally inventory is exactly the same as y|once b is less than or equal to 0 you are able to build until finally a is not equal to 0|b suggests that it would be advantageous to do run if b x otherwise, if position do run , or do jump if no other options are possible|whenever b is smaller than 0 you are able to run until inventory is larger than y|if a is equal to 0 you are able to run until b is not equal to 0|once a is less than 2 you have the choice to jump until position is greater than 1|b is a good strategy where you should do jump if position is not equal to y otherwise, if iron do run , or do jump otherwise|once inventory is less than or equal to x you are able to use until position is equal to 2|b is an approach where it would be good to do jump if iron is less than x otherwise, if a do jump , or do use if not|b is a good strategy where you should do build if b is equal to y otherwise, if position do build , or do build if not|a suggests that it would be advantageous to do build if position 0 otherwise, if position do use , or do jump if no other options are possible|as soon as x you can run until b is equal to 1|if a is not equal to y you can jump until a is greater than 1|a is a tactic where it is good to do find if position is larger than 2 otherwise, if iron do build , or do run if no other options are possible|a is a strategy where you do build if b is less than 1 otherwise, if iron do find , or do build if no other options are possible|a suggests that it would be advantageous to do run if iron x otherwise, if a do build , or do use if not|once b is exactly the same as 2 you have the choice to use until position is not equal to 2|if a is at least x you have the choice to use until finally inventory is not equal to 1|a states that you should do use if a is smaller than 2 otherwise, if iron do jump , or do run as a last resort|a states that you should do find if position is less than 2 otherwise, if a do find , or do use as a last resort|if b is not the same as 0 you can jump until finally b is not the same as 2|b states that you should do jump if a is not equal to 1 otherwise, if iron do find , or do use if no other options are possible|whenever a is not the same as 0 you have the choice to build until finally b is greater than or equal to 2|a is a good strategy where you should do find if a is not the same as x otherwise, if a do find , or do use otherwise|b is a tactic where it is good to do use if a is smaller than y otherwise, if a do find , or do use as a last resort|if b is not equal to 2 you have the option to jump until inventory is less than or equal to 1|whenever position is at least 0 you can find until finally a is greater than 1|if a is equal to 0 you have the option to run until a is greater than y|a suggests that it would be advantageous to do find if position is exactly the same as 0 otherwise, if position do use , or do find as a last resort|once position is equal to x you have the option to build until finally b is greater than 1|a is an approach where you do jump if position is exactly the same as 1 otherwise, if b do run , or do find if not|when position is exactly the same as 1 you have the choice to find until finally b is at least y|once a is less than or equal to 2 you are able to jump until finally inventory|as soon as b is at least 2 you can use until a is not equal to 1|once b is less than or equal to y you have the option to jump until a is exactly the same as 2|whenever b is less than 0 you are able to jump until finally b is smaller than 1|a entails that you do run if position is smaller than 0 otherwise, if b do build , or do use as a last resort|a states that you should do jump if iron is not the same as y otherwise, if a do jump , or do build if no other options are possible|a is a tactic where it is good to do run if position is less than 1 otherwise, if b do use , or do find if not|a entails that you do build if iron is not the same as y otherwise, if iron do run , or do find if no other options are possible|whenever position is equal to 1 you have the choice to build until finally inventory is at most 2|if inventory is exactly the same as 2 you can build until finally inventory is less than 1|when b is at least x you are able to jump until a is less than or equal to y|if inventory is larger than 0 you are able to build until b is greater than y|once inventory is larger than 0 you have the choice to jump until position is equal to 2|b is an approach where you do run if b is greater than y otherwise, if iron do build , or do jump otherwise|once a is larger than 1 you are able to run until a is at least 0|a states that you should do use if position is smaller than x , or do run if no other options are possible|a is a tactic where it is good to do find if b 2 otherwise, if iron do build , or do find if not|whenever position is exactly the same as 2 you have the option to find until inventory is at least 2|whenever b is smaller than x you have the choice to jump until finally b|as soon as b is larger than 2 you can build until b is not the same as 2|when inventory is not the same as 1 you are able to build until finally a is greater than or equal to y|once a is greater than or equal to 1 you are able to run until finally a is at most x|if b is equal to 2 you have the option to jump until finally inventory is greater than or equal to 1|if a is exactly the same as y you have the option to find until b is less than or equal to 0|b is a good strategy where you should do build if position is not equal to y otherwise, if position do run , or do run if not|once b is greater than 2 you have the option to find until position is exactly the same as x|a is a good strategy where you should do run if b is less than 1 otherwise, if position do run , or do use if no other options are possible|a suggests that it would be advantageous to do run if a is not the same as x otherwise, if b do use , or do jump if no other options are possible|b entails that you do use if position is smaller than y otherwise, if a do build , or do use otherwise|b is an approach where it would be good to do run if a is exactly the same as y otherwise, if b do find , or do run as a last resort|a means that it would be good to do run if iron 0 otherwise, if b do use , or do use otherwise|a means that it would be good to do use if position 1 otherwise, if iron do jump , or do build if no other options are possible|b is a good strategy where you should do use if b is not the same as 0 , or do use as a last resort|as soon as position is not the same as x you have the option to run until finally a is not the same as 0|if a is less than or equal to 1 you have the option to build until b is less than or equal to 0|a suggests that it would be advantageous to do jump if iron 1 , or do jump if not|a states that you should do build if a is equal to y|once a is not equal to x you can jump until inventory is less than or equal to 2|once b is larger than x you have the choice to use until finally a is less than or equal to 1|b is a good strategy where you should do run if a is smaller than 1 otherwise, if a do build , or do build as a last resort|b states that you should do use if iron y otherwise, if iron do build , or do find if not|b is an approach where you do use if a is less than 0 otherwise, if b do build , or do use if no other options are possible|b states that you should do find if iron x otherwise, if b do jump , or do build as a last resort|once inventory is greater than or equal to 2 you have the choice to run until a is not equal to 1|when position is greater than 2 you have the option to build until finally b is greater than or equal to x|when a is not equal to 2 you can find until b is at most 1|whenever b is less than x you have the choice to build until a is at most 2|a entails that you do run if b 0 otherwise, if position do run , or do jump as a last resort|b is a strategy where you do find if a x otherwise, if iron do jump , or do use if no other options are possible|a is an approach where you do build if a is greater than 2 , or do jump if no other options are possible|a is an approach where it would be good to do find if iron is exactly the same as x otherwise, if a do find , or do use if not|a entails that you do jump if b is less than 1 otherwise, if position do jump , or do run if not|whenever inventory is not the same as 0 you have the choice to run until finally a is at most y|b is a strategy where you do use if iron is not equal to 0 , or do find if not|a is a tactic where it is good to do find if position 0 otherwise, if b do run , or do find as a last resort|once y you have the option to run until finally b is at least y|b is a tactic where it is advantageous to do build if a y otherwise, if b do jump , or do build as a last resort|once position is larger than 2 you can find until finally a is greater than y|a is a tactic where it is advantageous to do build if position otherwise, if a do run , or do run if no other options are possible|b suggests that it would be advantageous to do use if iron is greater than y otherwise, if iron do find , or do jump if not|a means that it would be good to do jump if position is larger than 0 otherwise, if position do run , or do use if no other options are possible|as soon as inventory is at most 0 you have the option to use until position is not the same as 1|when inventory is exactly the same as 1 you have the option to build until a is not equal to y|if a you have the option to build until finally inventory is at most 0|b means that it would be good to do run if a is not equal to y otherwise, if position do jump , or do use if no other options are possible|b entails that you do use if b x otherwise, if iron do jump , or do use if no other options are possible|once a is less than y you have the choice to find until position is at most 0|when b is less than or equal to 0 you have the option to use until finally b is less than or equal to x|when position is equal to x you have the choice to jump until finally position is smaller than 2|b is a tactic where it is good to do find if b is smaller than y otherwise, if iron do jump , or do build if no other options are possible|when a is less than 1 you are able to jump until finally a is larger than 0|when b is not the same as 2 you can use until inventory is exactly the same as 0|a is a strategy where you do run if b is equal to x otherwise, if b do find , or do find if no other options are possible|once b is not the same as x you are able to build until b is exactly the same as x|once a is exactly the same as 0 you have the choice to find until a is at most 1|b is a good strategy where you should do build if b x otherwise, if iron do run , or do build if not|a entails that you do run if b 2 otherwise, if a do build , or do use otherwise|as soon as b is larger than x you have the choice to jump until finally position is equal to x|b means that it would be good to do find if iron otherwise, if position do jump , or do jump as a last resort|b is a tactic where it is advantageous to do run if position|a entails that you do use if iron is less than 0 otherwise, if a do run , or do use otherwise|when position is at most x you have the choice to build until finally position is not the same as 1|when a is at most x you have the option to build until finally b is larger than 2|if position is at least x you have the option to find until position is less than 0|if b is less than 2 you can jump until a is larger than 2|if inventory is not equal to y you can build until finally inventory is smaller than 2|b is a tactic where it is good to do use if iron otherwise, if b do use , or do use otherwise|a suggests that it would be advantageous to do use if b is not equal to 1 otherwise, if a do build , or do use as a last resort|whenever b is not equal to y you have the choice to use until finally inventory is smaller than 2|as soon as position is at most 0 you can use until finally b is at most y|a suggests that it would be advantageous to do use if a 1 otherwise, if a do use , or do run as a last resort|when position is greater than or equal to 1 you are able to jump until finally b is equal to x|a is a tactic where it is advantageous to do jump if a is equal to 0 otherwise, if b do find , or do jump if not|as soon as inventory is not the same as 2 you have the option to build until finally x|a suggests that it would be advantageous to do find if position is exactly the same as x otherwise, if iron do find , or do use as a last resort|once b is greater than or equal to 2 you can find until position is greater than or equal to 2|b entails that you do use if b y otherwise, if a do use , or do build if no other options are possible|when y you have the choice to use until b is at most 1|once a is greater than or equal to 1 you have the option to find until finally position is less than 0|a is a tactic where it is good to do jump if iron x otherwise, if position do run , or do jump as a last resort|when position is less than or equal to y you have the choice to jump until finally a is equal to 1|a is an approach where it would be good to do jump if iron x otherwise, if a do find , or do build otherwise|a is a tactic where it is advantageous to do use if b is smaller than 0 otherwise, if iron do build , or do jump otherwise|b is a tactic where it is advantageous to do run if b is larger than y otherwise, if iron do run , or do use if not|b is a strategy where you do run if a is exactly the same as x otherwise, if a do jump , or do build if no other options are possible|as soon as a is smaller than 0 you can build until finally inventory is larger than y|a states that you should do find if iron otherwise, if iron do jump , or do find if not|a means that it would be good to do jump if iron 2 otherwise, if iron do find , or do run if not|a means that it would be good to do use if b 0 otherwise, if b do jump , or do find if no other options are possible|a is a tactic where it is advantageous to do use if iron 1 otherwise, if position do jump , or do build otherwise|a entails that you do jump if iron x otherwise, if a do build , or do run if not|b is an approach where you do find if b x otherwise, if a do build , or do build if not|a means that it would be good to do build if b 0 otherwise, if b do run , or do find if no other options are possible|b is a tactic where it is good to do run if position y otherwise, if b do run , or do use otherwise|once inventory is not equal to y you are able to find until finally b is greater than or equal to x|a is a tactic where it is good to do jump if a is not equal to y otherwise, if position do find , or do use as a last resort|as soon as a is at most x you can find until finally b is less than or equal to 2|b is an approach where it would be good to do find if position is smaller than 0 , or do run as a last resort|if b is not the same as 2 you are able to build until position is greater than or equal to y|a is a strategy where you do find if position x otherwise, if b do jump , or do run if not|a is a tactic where it is advantageous to do use if iron 2 otherwise, if b do build , or do find otherwise|if a is equal to 0 you have the choice to jump until b is greater than or equal to 1|a is an approach where it would be good to do find if iron is not the same as 2 otherwise, if a do use , or do build otherwise|b is a good strategy where you should do jump if position x otherwise, if a do jump , or do find if no other options are possible|a entails that you do build if b is exactly the same as 0 otherwise, if iron do jump , or do find if no other options are possible|b is a good strategy where you should do use if b is less than y otherwise, if a do run , or do use if not|b is a good strategy where you should do build if a is greater than y otherwise, if b do run , or do use otherwise|once a is exactly the same as x you have the option to use until finally inventory|as soon as inventory is larger than 2 you have the choice to use until finally a is not equal to 0|when a is at most 2 you have the option to use until finally a is greater than 1|a is a tactic where it is good to do use if a is larger than 0 otherwise, if a do use , or do use as a last resort|whenever position is greater than 2 you can run until a is greater than or equal to y|when b is exactly the same as 2 you have the option to find until inventory is equal to 1|once inventory is not the same as y you have the option to use until b is equal to 0|a is an approach where you do run if b 1 otherwise, if iron do run , or do jump as a last resort|b entails that you do jump if iron is not the same as y otherwise, if position do build , or do build as a last resort|as soon as b is greater than 1 you have the choice to find until a is not the same as 2|a is an approach where you do build if position is larger than 2 otherwise, if position do use , or do find otherwise|a is a tactic where it is advantageous to do jump if b y otherwise, if a do use , or do use if not|as soon as a is greater than or equal to 2 you are able to jump until a is at least y|if b is at least 2 you can find until finally a is equal to 2|whenever position is at least 0 you are able to jump until b is not the same as 2|as soon as inventory is larger than 0 you can use until finally a is larger than 1|as soon as x you have the choice to build until finally position is exactly the same as 2|once b is not the same as x you have the option to jump until a is exactly the same as 0|b means that it would be good to do jump if b is equal to x otherwise, if a do find , or do find as a last resort|a states that you should do use if position is smaller than y otherwise, if iron do build , or do use as a last resort|as soon as inventory is equal to x you have the choice to run until position is larger than 0|once inventory is not equal to 0 you have the option to use until x|a means that it would be good to do find if iron 0 otherwise, if b do use , or do jump if not|a states that you should do use if position is equal to y otherwise, if iron do build , or do jump if no other options are possible|whenever a is at most 1 you can find until a is equal to 2|a is a tactic where it is good to do find if position is greater than 0 otherwise, if position do jump , or do jump as a last resort|a is a tactic where it is good to do run if a 1 otherwise, if position do run , or do use if not|b means that it would be good to do jump if a is not the same as x otherwise, if a do jump , or do find otherwise|once inventory is exactly the same as 1 you can use until position is less than 0|b is a strategy where you do jump if position is not the same as y otherwise, if a do build , or do find otherwise|if b is less than or equal to x you have the option to use until finally position is at least 0|b entails that you do jump if position x otherwise, if position do run , or do run if not|once b you have the choice to build until inventory is not equal to y|once inventory is not the same as x you can use until inventory is smaller than 2|a is an approach where it would be good to do find if position is exactly the same as x otherwise, if iron do run , or do build if no other options are possible|a entails that you do use if b is equal to 0 otherwise, if a do use , or do run if no other options are possible|whenever b is smaller than y you have the option to find until position is not equal to 0|a is a tactic where it is advantageous to do build if b 0 otherwise, if a do jump , or do find if no other options are possible|a entails that you do jump if position is equal to 0 otherwise, if position do use , or do find if no other options are possible|b is a tactic where it is good to do use if a is smaller than 1 , or do use if no other options are possible|a suggests that it would be advantageous to do run if iron is greater than 0 , or do run if not|once inventory is exactly the same as x you have the option to find until position is larger than 1|b suggests that it would be advantageous to do build if a is smaller than y otherwise, if a do find , or do find otherwise|a is a good strategy where you should do jump if a is equal to 2 , or do build as a last resort|when b is smaller than 0 you have the choice to use until a is at most 1|when position is not the same as 0 you have the option to run until finally b is not equal to 2|b is a strategy where you do find if a is less than 1 otherwise, if b do use , or do jump if no other options are possible|as soon as b is equal to 0 you have the choice to jump until position is less than 2|b entails that you do find if iron is greater than x otherwise, if a do jump , or do run as a last resort|a is an approach where it would be good to do jump if a is not the same as 0 otherwise, if position do build , or do find if no other options are possible|whenever position is not the same as y you are able to use until finally inventory is at most 2|a is an approach where it would be good to do run if position 2 otherwise, if b do run , or do run if not|as soon as position is not equal to 0 you can jump until finally inventory is equal to 1|a is a strategy where you do find if a is exactly the same as y otherwise, if a do find , or do build otherwise|whenever a is not equal to 2 you can find until finally position is not the same as x|as soon as position you have the option to jump until finally b is less than 1|a is a strategy where you do build if iron 2 otherwise, if position do find , or do run otherwise|a entails that you do find if iron is less than 0 otherwise, if b do run , or do build as a last resort|a is an approach where you do jump if position otherwise, if position do find , or do jump if not|b is a tactic where it is advantageous to do jump if iron is not the same as y otherwise, if a do run , or do use if no other options are possible|a is a tactic where it is good to do build if a is not equal to 1 otherwise, if iron do jump , or do jump as a last resort|a is an approach where it would be good to do build if b is larger than x otherwise, if a do jump , or do find otherwise|a suggests that it would be advantageous to do run if b is less than y otherwise, if b do find , or do jump if not|once position is not equal to x you have the option to jump until finally b is greater than 1|if position is equal to 1 you have the option to use until finally position is not the same as 0|once b is at most y you can jump until finally a is at most 2|when a is not equal to y you have the option to build until inventory is at least 2|as soon as a is exactly the same as 1 you have the option to use until finally a is at most y|b is an approach where it would be good to do find if iron is smaller than x otherwise, if position do build , or do find if no other options are possible|whenever inventory is smaller than x you have the option to run until finally position is not the same as 1|a is an approach where it would be good to do jump if b 2 otherwise, if b do build , or do use otherwise|b is an approach where you do use if a is exactly the same as y otherwise, if iron do run , or do jump if not|as soon as a is greater than or equal to 0 you have the choice to build until position is smaller than x|if a is exactly the same as y you have the option to build until finally position is not the same as 0|when b is exactly the same as y you have the option to use until finally b is not the same as 0|b is a strategy where you do use if position otherwise, if b do run , or do use if not|b is an approach where you do build if a is larger than 1 , or do find otherwise|a is a tactic where it is advantageous to do run if a is greater than 0 otherwise, if b do run , or do jump if not|a is an approach where you do jump if b 1|a is an approach where you do find if b is not equal to x otherwise, if b do jump , or do find if no other options are possible|whenever b is smaller than 2 you are able to build until finally inventory is less than 2|a entails that you do build if position 0 otherwise, if b do find , or do find otherwise|a is an approach where you do run if iron y otherwise, if a do find , or do jump if not|a is an approach where you do build if a otherwise, if iron do jump , or do jump otherwise|b is a tactic where it is good to do build if position is exactly the same as x otherwise, if iron do jump , or do build as a last resort|a is an approach where it would be good to do build if position is greater than y , or do find if not|when position is less than 0 you have the option to run until finally b is at least 1|a is a good strategy where you should do run if a 2 otherwise, if iron do find , or do find if not|as soon as inventory is greater than 0 you are able to use until a is not equal to 1|whenever x you have the option to jump until finally position is equal to y|if position is at most y you have the option to build until finally inventory is at most y|a is an approach where you do run if a x otherwise, if b do find , or do find if no other options are possible|whenever inventory you have the option to build until inventory is at most x|once b is not the same as y you can run until inventory is at least 0|a states that you should do run if b is not the same as 2 otherwise, if a do run , or do jump otherwise|b is a good strategy where you should do use if b is less than y otherwise, if position do build , or do build if no other options are possible|a is an approach where it would be good to do use if iron 0 otherwise, if position do run , or do build as a last resort|a is an approach where you do find if position is exactly the same as y otherwise, if position do build , or do jump as a last resort|a is a good strategy where you should do build if iron 2 otherwise, if iron do run , or do use otherwise|a is a tactic where it is advantageous to do jump if iron 0 otherwise, if iron do find , or do find as a last resort|a is a good strategy where you should do run if b is not equal to 1 otherwise, if a do build , or do run if not|a is a tactic where it is good to do jump if iron is greater than 1 otherwise, if a do find , or do run if not|b states that you should do use if position is less than x otherwise, if b do use , or do jump if no other options are possible|as soon as b is equal to x you are able to jump until a is at least x|a is an approach where it would be good to do build if b x otherwise, if b do run , or do run as a last resort|a states that you should do find if a is greater than x otherwise, if iron do jump , or do use if no other options are possible|once b is at least 1 you can jump until finally a is greater than or equal to x|a means that it would be good to do use if a is not equal to x otherwise, if b do use , or do build otherwise|b entails that you do find if a is exactly the same as y otherwise, if iron do find , or do build if not|once inventory is exactly the same as 2 you can build until finally b is smaller than 2|a is an approach where you do build if b is equal to y otherwise, if iron do find , or do build as a last resort|if inventory is less than 0 you have the choice to build until finally b is less than 1|when inventory is less than y you can build until finally position is smaller than 1|a is a strategy where you do use if position is not equal to y otherwise, if a do use , or do use as a last resort|b is an approach where you do find if b is equal to y otherwise, if b do run , or do use as a last resort|a is a strategy where you do run if b y otherwise, if iron do use , or do use as a last resort|as soon as a is greater than 1 you have the choice to run until b is exactly the same as 0|b is a strategy where you do find if iron y otherwise, if a do use , or do jump as a last resort|a is a good strategy where you should do run if b is less than y otherwise, if position do find , or do jump if not|b is a tactic where it is advantageous to do find if b is smaller than x otherwise, if position do run , or do jump if not|a is a good strategy where you should do use if iron is greater than x otherwise, if position do run , or do build if not|b is a tactic where it is good to do jump if a 1 , or do run otherwise|a is a tactic where it is advantageous to do run if position is smaller than y otherwise, if a do jump , or do jump if no other options are possible|whenever b is at least 0 you are able to run until b is smaller than 1|a suggests that it would be advantageous to do run if a is larger than 1 otherwise, if position do find , or do build if no other options are possible|whenever a is exactly the same as x you have the option to jump until finally b|a is a good strategy where you should do run if b is larger than y otherwise, if b do find , or do run if no other options are possible|once b is at most 0 you have the option to jump until inventory is greater than 0|b suggests that it would be advantageous to do jump if position is exactly the same as x otherwise, if b do build , or do build if not|when position is not the same as 0 you are able to find until finally b is larger than 1|when inventory is less than 2 you have the choice to find until finally a is not equal to 0|when b is greater than or equal to 2 you are able to find until finally position is less than 0|whenever a is larger than 1 you are able to jump until finally position is greater than 1|a is a good strategy where you should do use if iron is greater than 0 otherwise, if position do build , or do use if not|a is a tactic where it is advantageous to do build if a is less than x , or do build otherwise|when position is smaller than 2 you are able to jump until b is smaller than 0|b suggests that it would be advantageous to do build if b is exactly the same as y otherwise, if a do build , or do build otherwise|b is an approach where you do build if a is larger than y otherwise, if b do use , or do use otherwise|a is an approach where it would be good to do find if position 2 otherwise, if iron do build , or do find otherwise|a is a strategy where you do run if b is less than 0 otherwise, if iron do build , or do find if not|a is an approach where you do find if b 0 otherwise, if a do use , or do jump as a last resort|as soon as position is at most 0 you can use until a is larger than 0|b states that you should do find if a is not equal to 1 otherwise, if iron do jump , or do find as a last resort|a entails that you do use if a otherwise, if b do run , or do run otherwise|whenever position is not the same as x you can build until finally inventory is larger than x|a is a strategy where you do find if b is greater than x otherwise, if b do run , or do jump if not|a entails that you do jump if a is less than y otherwise, if position do jump , or do run otherwise|once b is greater than or equal to 1 you have the option to use until position is larger than 1|a is a tactic where it is good to do find if iron otherwise, if a do use , or do build if not|whenever position is less than x you are able to jump until finally inventory is not the same as 1|if position is greater than or equal to 1 you have the option to build until finally b is exactly the same as 0|if position is greater than or equal to 2 you have the option to build until position is greater than or equal to 2|as soon as position is less than or equal to 2 you can jump until finally position is exactly the same as x|a entails that you do jump if a 1 otherwise, if b do use , or do run as a last resort|b suggests that it would be advantageous to do use if a x otherwise, if b do build , or do use otherwise|a is a tactic where it is good to do jump if b is exactly the same as 0 otherwise, if iron do use , or do run otherwise|b means that it would be good to do jump if a is smaller than 1 otherwise, if a do jump , or do use as a last resort|a is an approach where you do jump if iron is less than x otherwise, if iron do find , or do jump otherwise|whenever a is exactly the same as 0 you can build until finally a is not the same as y|a states that you should do use if a is smaller than x otherwise, if position do build , or do find otherwise|b entails that you do build if a is not equal to 1 otherwise, if a do find , or do run as a last resort|if inventory is greater than or equal to 2 you are able to run until finally position is not the same as y|when b is less than x you have the option to find until finally inventory is less than 0|whenever position is greater than or equal to 0 you are able to jump until inventory is equal to x|b states that you should do find if a is smaller than y otherwise, if b do build , or do jump if not|a is a good strategy where you should do build if b 2 otherwise, if position do use , or do run otherwise|b means that it would be good to do use if iron x otherwise, if position do build , or do find if not|b is an approach where it would be good to do run if a is less than 2 otherwise, if position do find , or do run if not|a is a tactic where it is good to do run if b 1 otherwise, if b do use , or do use if no other options are possible|if b is exactly the same as y you can build until finally position is smaller than 0|a is a tactic where it is advantageous to do find if iron is smaller than x otherwise, if iron do use , or do run if not|whenever inventory is at least 0 you have the choice to build until a is less than 0|whenever b is larger than x you have the choice to find until finally a is greater than 2|a suggests that it would be advantageous to do build if a is less than 0 otherwise, if b do find , or do jump otherwise|a is an approach where it would be good to do run if position 1 otherwise, if b do find , or do use if no other options are possible|b is an approach where it would be good to do use if a is smaller than x otherwise, if b do jump , or do jump otherwise|once a is not the same as 1 you can build until inventory is not the same as 0|b is a tactic where it is advantageous to do find if a is not the same as x otherwise, if position do find , or do build if not|when inventory is less than or equal to 0 you have the option to find until finally b is larger than 0|a is a good strategy where you should do run if iron is less than 1 otherwise, if position do jump , or do jump if not|a is a good strategy where you should do find if position x otherwise, if b do build , or do run if no other options are possible|b is a tactic where it is good to do use if a is exactly the same as 2 otherwise, if a do find , or do find if no other options are possible|b is a good strategy where you should do build if iron is larger than x otherwise, if a do find , or do run otherwise|a is an approach where you do run if position is not equal to 2 otherwise, if b do run , or do use as a last resort|when b is greater than 1 you have the option to run until finally y|whenever b is exactly the same as 1 you are able to build until inventory is greater than y|if a is equal to 2 you have the option to use until b|when y you can use until position is not equal to 0|a is an approach where it would be good to do jump if a is not equal to y otherwise, if a do jump , or do build if not|b is a tactic where it is good to do use if iron is greater than y otherwise, if b do jump , or do build as a last resort|a states that you should do build if b 1 otherwise, if b do run , or do find otherwise|a means that it would be good to do build if position otherwise, if iron do find , or do use otherwise|a is an approach where it would be good to do jump if iron is not the same as 2 otherwise, if b do run , or do jump if no other options are possible|once a is not the same as 2 you have the choice to run until inventory is exactly the same as 2|a is a tactic where it is good to do run if iron 1 , or do run if not|once b is at most 1 you have the option to find until a is less than 1|if inventory is less than 0 you are able to build until a is not equal to x|a is a good strategy where you should do run if b is equal to x otherwise, if position do run , or do run as a last resort|once inventory is exactly the same as 2 you have the choice to find until finally position is equal to 1|a is an approach where it would be good to do use if position is not the same as y otherwise, if a do use , or do find as a last resort|a states that you should do run if position x otherwise, if b do build , or do use as a last resort|a is an approach where you do build if b is greater than 2 otherwise, if b do use , or do use if no other options are possible|whenever a is less than x you are able to find until finally b is greater than 2|once position is exactly the same as x you have the option to use until finally position is larger than 2|whenever a is larger than x you are able to jump until b is greater than y|a is a tactic where it is good to do jump if position is exactly the same as x otherwise, if position do jump , or do jump otherwise|as soon as inventory is at most y you have the choice to use until position is less than or equal to x|a is an approach where it would be good to do use if a is not equal to 1 otherwise, if iron do jump , or do jump if no other options are possible|a means that it would be good to do run if a x otherwise, if iron do find , or do build otherwise|b states that you should do jump if iron is equal to y otherwise, if iron do build , or do jump as a last resort|if inventory is less than or equal to 2 you are able to run until finally b is greater than x|b entails that you do use if a is less than y otherwise, if a do find , or do build as a last resort|a means that it would be good to do find if a 2 otherwise, if a do jump , or do run if not|as soon as b is greater than or equal to 2 you are able to run until finally position is smaller than y|if position is smaller than 0 you are able to find until finally inventory is not the same as y|once position is not the same as x you can find until finally inventory is not the same as 0|once inventory is at least y you have the option to use until finally inventory|once a is larger than x you have the choice to use until finally b is equal to 0|a means that it would be good to do jump if a is greater than x otherwise, if position do build , or do use if not|when a is exactly the same as 2 you have the option to jump until finally a is at most 1|a is a tactic where it is advantageous to do run if position is exactly the same as 1 otherwise, if a do jump , or do build otherwise|b means that it would be good to do build if b is not equal to y otherwise, if position do use , or do find as a last resort|a suggests that it would be advantageous to do find if a otherwise, if iron do find , or do find as a last resort|a is an approach where you do build if a 1 , or do find if no other options are possible|b is an approach where you do jump if b is equal to y otherwise, if b do find , or do run otherwise|when b is not the same as 0 you have the choice to use until a is larger than 0|a means that it would be good to do run if a is equal to 0 otherwise, if a do jump , or do build if not|a is a tactic where it is advantageous to do run if position 1 otherwise, if iron do run , or do find if not|a is an approach where you do run if b is not the same as y otherwise, if iron do find , or do find otherwise|a suggests that it would be advantageous to do jump if iron is less than y otherwise, if position do run , or do find otherwise|b entails that you do jump if a is not equal to y , or do use otherwise|a suggests that it would be advantageous to do use if position is exactly the same as y otherwise, if iron do jump , or do run if not|as soon as inventory is greater than or equal to 1 you have the choice to run until b is not equal to 1|a is an approach where you do run if a x otherwise, if position do build , or do run otherwise|b means that it would be good to do use if a is not the same as 0 otherwise, if b do run , or do find if no other options are possible|b is a strategy where you do use if a otherwise, if a do build , or do find if not|a is an approach where you do run if position is greater than 1 otherwise, if b do jump , or do build as a last resort|when b is larger than x you are able to run until finally b is not equal to x|b is a tactic where it is good to do build if a is not the same as 2 otherwise, if b do use , or do run otherwise|a is an approach where it would be good to do jump if a is not equal to y otherwise, if position do use , or do use if not|b entails that you do jump if a x otherwise, if iron do jump , or do jump otherwise|a entails that you do find if a is not the same as 1 otherwise, if position do run , or do run if no other options are possible|b is a tactic where it is good to do build if b is exactly the same as x otherwise, if iron do find , or do run if no other options are possible|b means that it would be good to do build if iron is equal to y otherwise, if b do run , or do run if not|b is a strategy where you do run if iron otherwise, if b do use , or do find otherwise|whenever position is exactly the same as 0 you can jump until a is larger than y|a is an approach where it would be good to do jump if b is larger than 2 otherwise, if iron do find , or do run if no other options are possible|when position is smaller than x you have the option to use until finally inventory is equal to y|a means that it would be good to do use if a otherwise, if a do jump , or do build otherwise|once inventory is not equal to y you have the option to run until position is at least 0|a is a good strategy where you should do build if iron is not equal to 0 otherwise, if a do use , or do build if no other options are possible|a suggests that it would be advantageous to do run if a 0 otherwise, if b do use , or do run if no other options are possible|a entails that you do use if iron is smaller than 0 otherwise, if a do build , or do build if no other options are possible|if b is smaller than 1 you can find until position is not the same as x|once b is less than 1 you have the choice to find until inventory is greater than 1|when inventory is larger than 0 you are able to find until a is greater than 0|b is a good strategy where you should do find if a x otherwise, if b do use , or do use otherwise|if inventory is at least 1 you are able to jump until position is exactly the same as 2|a is an approach where you do run if iron is less than 2 otherwise, if a do jump , or do use if no other options are possible|once position is not equal to 1 you are able to run until a is not equal to 1|whenever inventory is at least 1 you can jump until finally y|b suggests that it would be advantageous to do run if position is equal to y otherwise, if iron do find , or do build if no other options are possible|a is an approach where it would be good to do find if a 1 otherwise, if a do build , or do build as a last resort|as soon as position is less than or equal to y you are able to build until finally position is equal to 1|once inventory is less than x you have the choice to run until inventory is at most 2|a is an approach where you do find if a is exactly the same as y , or do build if not|if position is greater than 1 you have the choice to build until position is greater than or equal to 1|once b is at most y you have the option to build until position is not the same as y|a means that it would be good to do use if iron is larger than 0 otherwise, if iron do find , or do jump otherwise|b suggests that it would be advantageous to do find if a is not equal to x otherwise, if iron do find , or do build if no other options are possible|a states that you should do build if b is exactly the same as 0 otherwise, if position do jump , or do run as a last resort|a is an approach where you do find if b 0 otherwise, if b do use , or do build if not|a is a tactic where it is good to do run if position y otherwise, if a do use , or do build as a last resort|whenever a is greater than or equal to 1 you are able to jump until a is greater than or equal to y|whenever position is equal to 1 you have the option to find until finally position|b is a tactic where it is advantageous to do find if position otherwise, if a do run , or do jump if not|a is a strategy where you do find if a 1 otherwise, if iron do jump , or do run if not|if inventory is exactly the same as x you are able to build until b is at least 0|if b is less than or equal to 2 you can build until finally b is exactly the same as 2|once position is at least y you are able to run until inventory is less than or equal to 1|b means that it would be good to do use if a is less than 0 otherwise, if iron do jump , or do use if not|a suggests that it would be advantageous to do use if b is larger than 0 otherwise, if b do find , or do find if not|a means that it would be good to do run if position is smaller than y , or do jump as a last resort|when position is not equal to 1 you have the option to run until finally inventory is less than or equal to 0|if position is greater than or equal to y you have the choice to find until finally position is less than 0|b is a tactic where it is advantageous to do run if iron y otherwise, if position do use , or do find otherwise|once a is not equal to y you are able to use until a|b is a strategy where you do use if position is smaller than x otherwise, if b do use , or do find if no other options are possible|as soon as a is greater than x you can find until a is greater than y|b is a tactic where it is good to do run if position x otherwise, if iron do build , or do build as a last resort|if b is smaller than 0 you have the option to use until a is smaller than 1|a is a strategy where you do use if b is larger than x otherwise, if position do jump , or do jump otherwise|b entails that you do jump if iron is not the same as y otherwise, if iron do use , or do find if not|once position is larger than 1 you are able to build until finally a is at least x|a states that you should do build if iron is less than x otherwise, if iron do run , or do find otherwise|a is an approach where you do build if b is exactly the same as 0 otherwise, if b do build , or do run if not|when position is not the same as y you have the choice to jump until finally b is not equal to y|as soon as b is greater than or equal to 1 you have the option to find until inventory is exactly the same as 1|b is a good strategy where you should do run if a x otherwise, if b do use , or do find otherwise|b is an approach where you do jump if a is not equal to x otherwise, if iron do jump , or do jump otherwise|b is an approach where it would be good to do find if b is not the same as y otherwise, if iron do find , or do run if not|b is an approach where you do find if a x otherwise, if iron do find , or do run as a last resort|once inventory is not equal to 2 you have the choice to run until finally position is equal to 1|a is an approach where it would be good to do use if a is smaller than x otherwise, if a do build , or do jump if no other options are possible|b is a good strategy where you should do find if a is less than 1 otherwise, if a do use , or do find if not|b entails that you do use if a is not the same as y otherwise, if a do find , or do build if no other options are possible|a is an approach where it would be good to do jump if position is equal to y otherwise, if position do build , or do run as a last resort|when b is greater than 0 you have the choice to use until finally b is larger than y|when position is less than 2 you have the choice to jump until finally position is larger than 2|b entails that you do build if a is exactly the same as x otherwise, if iron do run , or do use as a last resort|once a is greater than or equal to y you have the choice to jump until position is less than 2|if position is not equal to 0 you have the option to find until a is larger than 2|a is a strategy where you do run if iron 2 otherwise, if position do build , or do find if no other options are possible|a is a good strategy where you should do run if position is smaller than x otherwise, if b do use , or do use as a last resort|when position is less than or equal to 2 you can find until finally inventory is less than 1|a states that you should do use if iron is smaller than y otherwise, if b do jump , or do use as a last resort|a is an approach where it would be good to do build if b is larger than 0 otherwise, if b do jump , or do build if not|when inventory is not the same as 0 you have the choice to build until a is less than or equal to 2|once b is larger than 1 you are able to jump until finally a is at most y|if b is exactly the same as 1 you have the choice to build until finally a is equal to y|a means that it would be good to do run if a y otherwise, if b do find , or do jump as a last resort|whenever position is less than or equal to y you can find until finally a is greater than or equal to 2|a entails that you do jump if iron is equal to x otherwise, if iron do jump , or do use as a last resort|a is a strategy where you do build if iron x otherwise, if b do find , or do use otherwise|a suggests that it would be advantageous to do build if b y otherwise, if position do jump , or do jump if no other options are possible|b is a tactic where it is good to do use if position is greater than x otherwise, if a do jump , or do jump otherwise|a entails that you do jump if position 1 otherwise, if position do run , or do run otherwise|a is an approach where you do jump if b is exactly the same as y otherwise, if a do jump , or do build if not|when inventory is at most 1 you have the choice to build until finally position is less than 0|when position is exactly the same as y you have the option to jump until position is larger than 2|a is an approach where it would be good to do use if a is less than 2 otherwise, if iron do use , or do run if no other options are possible|b is a good strategy where you should do find if position y otherwise, if a do jump , or do build if not|a suggests that it would be advantageous to do use if b 0 otherwise, if a do run , or do jump otherwise|a is a good strategy where you should do jump if position x otherwise, if position do find , or do run otherwise|b is a tactic where it is advantageous to do build if position is exactly the same as y otherwise, if position do run , or do use if no other options are possible|a entails that you do jump if b is greater than 1 otherwise, if b do build , or do find as a last resort|when position is exactly the same as 1 you have the option to jump until finally inventory is equal to 2|b states that you should do find if position x otherwise, if a do find , or do find if no other options are possible|once inventory is at least x you can use until inventory is less than 1|when b is at least 1 you can jump until finally position is larger than 2|as soon as b is at least 1 you can build until finally a is at least 0|whenever position is greater than or equal to y you have the option to build until finally b is less than or equal to 1|as soon as a is smaller than 0 you have the choice to run until inventory is greater than 2|a means that it would be good to do build if position is less than 2 otherwise, if iron do find , or do build otherwise|b states that you should do find if a is not the same as y otherwise, if position do find , or do use otherwise|a is a good strategy where you should do run if iron 2 otherwise, if a do find , or do build otherwise|as soon as b is smaller than 1 you have the choice to use until finally inventory is equal to 2|b is a tactic where it is advantageous to do build if position is smaller than x otherwise, if a do find , or do use otherwise|b states that you should do jump if a is not the same as 1 otherwise, if iron do run , or do build as a last resort|once a is at least y you have the choice to run until position is not equal to 0|b entails that you do find if a is greater than y otherwise, if position do find , or do build if not|if b is smaller than 0 you have the option to build until b is less than or equal to 2|a is an approach where you do use if position otherwise, if b do run , or do find if no other options are possible|a is a tactic where it is good to do jump if a is not equal to y otherwise, if iron do jump , or do build if not|as soon as position is exactly the same as y you have the option to jump until finally a is larger than y|a states that you should do build if position y otherwise, if b do build , or do use otherwise|b suggests that it would be advantageous to do find if a is less than 1 otherwise, if position do jump , or do find otherwise|a suggests that it would be advantageous to do jump if b x otherwise, if iron do jump , or do use if no other options are possible|if b is at least y you have the option to find until y|b is an approach where it would be good to do find if a is exactly the same as 0 otherwise, if b do run , or do build otherwise|a states that you should do build if position is not the same as x , or do find if no other options are possible|when inventory is smaller than 2 you have the choice to find until b is less than or equal to 0|once b is greater than or equal to 0 you have the choice to build until position is smaller than x|a is an approach where you do build if position 2 otherwise, if b do use , or do build as a last resort|a is a tactic where it is advantageous to do build if a is greater than 1 otherwise, if iron do jump , or do jump if no other options are possible|once b is equal to y you have the option to build until finally b is smaller than y|if b is greater than or equal to 0 you can find until inventory is at most 2|b entails that you do use if a is less than y otherwise, if iron do build , or do use as a last resort|b suggests that it would be advantageous to do run if a is smaller than x otherwise, if iron do build , or do use if no other options are possible|b entails that you do run if a is not the same as 0 otherwise, if position do run , or do run if not|b entails that you do find if position x otherwise, if a do build , or do find otherwise|a is a good strategy where you should do jump if position is less than 0 otherwise, if position do jump , or do find if no other options are possible|a is a tactic where it is advantageous to do run if b is greater than x otherwise, if position do use , or do jump if not|if b is equal to y you have the choice to find until finally position is greater than or equal to 2|once a is smaller than 1 you can use until finally b is smaller than y|a suggests that it would be advantageous to do build if b x otherwise, if b do build , or do jump if no other options are possible|whenever b is not equal to 2 you are able to run until finally position is not equal to 1|a is a strategy where you do run if position 0 otherwise, if iron do run , or do run as a last resort|whenever b is less than or equal to 2 you have the option to use until finally inventory is greater than or equal to 2|a is an approach where it would be good to do jump if iron x otherwise, if iron do find , or do use otherwise|a suggests that it would be advantageous to do find if a is not equal to x otherwise, if a do run , or do build if no other options are possible|a is a tactic where it is advantageous to do build if position 0 otherwise, if b do jump , or do run if not|b is a strategy where you do run if b y otherwise, if position do find , or do use otherwise|a states that you should do find if a y otherwise, if iron do run , or do jump otherwise|if position is not the same as 2 you can build until finally inventory is less than x|a is an approach where it would be good to do build if position is greater than y otherwise, if b do find , or do use as a last resort|b is a good strategy where you should do jump if a is not the same as y otherwise, if position do find , or do use otherwise|a is an approach where it would be good to do use if b is exactly the same as x otherwise, if iron do find , or do build as a last resort|as soon as b is equal to 0 you have the choice to use until finally position is greater than 1|a is a tactic where it is good to do jump if a is larger than x otherwise, if b do build , or do build if not|b is a good strategy where you should do find if b is equal to x otherwise, if b do use , or do use as a last resort|a is a strategy where you do build if iron y otherwise, if iron do find , or do find if no other options are possible|whenever inventory is larger than 2 you are able to jump until a is less than or equal to 2|a means that it would be good to do use if iron 1 otherwise, if b do use , or do run if not|once inventory is not equal to x you have the option to jump until finally a is less than y|once inventory is exactly the same as x you have the option to run until finally inventory is larger than 2|b is an approach where you do build if b is equal to y otherwise, if a do use , or do jump as a last resort|a means that it would be good to do find if position y otherwise, if b do build , or do find as a last resort|whenever b is greater than or equal to y you are able to build until finally b is at least y|when position is less than or equal to y you are able to use until finally position is at least 0|whenever inventory is at least 1 you can build until finally b is larger than x|when b is equal to 0 you have the option to find until b is smaller than 0|a is an approach where you do run if iron is greater than 2 otherwise, if a do run , or do use otherwise|b suggests that it would be advantageous to do find if b otherwise, if a do find , or do find otherwise|when inventory is exactly the same as 2 you have the choice to jump until finally b is greater than y|as soon as b is less than 2 you have the choice to find until finally inventory is not the same as 0|b is an approach where you do run if b is not equal to x otherwise, if b do find , or do run if not|as soon as inventory is greater than or equal to 1 you can use until finally b is smaller than x|a entails that you do use if b otherwise, if iron do build , or do build as a last resort|if b is at most x you are able to run until inventory is smaller than y|once position is at least 1 you have the option to use until finally inventory is at least 0|a suggests that it would be advantageous to do build if iron is larger than 1 otherwise, if b do find , or do find otherwise|as soon as inventory is greater than 0 you can find until finally inventory is at least x|a entails that you do find if iron 0 otherwise, if position do run , or do run if not|a is a strategy where you do jump if b is smaller than 2 otherwise, if b do jump , or do jump as a last resort|a is an approach where you do jump if a is equal to 0 otherwise, if a do run , or do run if no other options are possible|once position is not the same as x you have the choice to find until position is not the same as x|a is a tactic where it is advantageous to do run if a is equal to y otherwise, if a do use , or do find if no other options are possible|b means that it would be good to do run if position x , or do run if no other options are possible|a is a tactic where it is advantageous to do build if iron 2 otherwise, if b do use , or do find otherwise|a is a strategy where you do build if iron is larger than y otherwise, if b do jump , or do find if not|a is a tactic where it is good to do use if position is greater than 2 otherwise, if a do jump , or do use if no other options are possible|once position is at least 2 you have the choice to use until position is less than 2|a states that you should do find if b is greater than 0 otherwise, if b do find , or do build as a last resort|when a is greater than 0 you have the option to use until inventory is less than or equal to y|b is an approach where it would be good to do run if position y otherwise, if a do run , or do find if not|b is an approach where you do jump if a is not equal to 1 otherwise, if a do find , or do build if no other options are possible|b is an approach where it would be good to do use if position is not equal to x otherwise, if b do use , or do find if no other options are possible|if inventory is greater than 0 you have the choice to use until b is smaller than 0|as soon as a is smaller than 2 you have the option to find until inventory is equal to 0|a is a strategy where you do run if position is not the same as 0 otherwise, if b do use , or do find if no other options are possible|a is a good strategy where you should do run if position is greater than 0 otherwise, if a do jump , or do find if not|b means that it would be good to do jump if position y otherwise, if b do find , or do use as a last resort|a is an approach where it would be good to do find if a is not equal to 2 otherwise, if iron do jump , or do build otherwise|a is a strategy where you do find if a is larger than 2 otherwise, if a do build , or do use if no other options are possible|a is a strategy where you do jump if iron is less than 1 otherwise, if iron do build , or do use otherwise|a is an approach where you do find if b y otherwise, if position do run , or do jump if not|a is a tactic where it is good to do use if a is greater than 0 otherwise, if position do find , or do jump if no other options are possible|if a is equal to 0 you can jump until b is larger than x|a is an approach where you do build if position is exactly the same as 0 otherwise, if iron do build , or do build if not|whenever inventory is greater than or equal to 2 you have the choice to find until b is smaller than x|b means that it would be good to do find if position y otherwise, if b do run , or do run otherwise|b means that it would be good to do use if b y otherwise, if position do find , or do find otherwise|b is an approach where you do run if b is larger than x otherwise, if b do use , or do build if not|if b is equal to 1 you have the choice to run until finally inventory is less than 2|whenever inventory is at least y you are able to use until finally inventory is at least 2|as soon as position is equal to 0 you are able to build until inventory is at most 0|a means that it would be good to do run if iron 2 otherwise, if iron do find , or do build otherwise|if inventory is smaller than 1 you have the option to use until finally position is smaller than 1|a is an approach where you do jump if b 2 otherwise, if b do find , or do use as a last resort|if position you have the choice to find until finally a is at least x|if position is larger than y you have the choice to run until finally inventory is greater than 2|if b is greater than or equal to x you can use until finally b is greater than or equal to y|whenever b is greater than or equal to 1 you have the choice to use until position is greater than or equal to 0|a is a strategy where you do use if iron otherwise, if iron do jump , or do run if no other options are possible|a suggests that it would be advantageous to do find if iron is not the same as 1 otherwise, if b do build , or do find if no other options are possible|if position is larger than 1 you are able to build until b|as soon as position is exactly the same as 2 you can use until finally b is not the same as y|a is a good strategy where you should do find if position is greater than 2 otherwise, if iron do run , or do find if no other options are possible|a is a good strategy where you should do jump if position is smaller than x otherwise, if position do build , or do find as a last resort|a entails that you do find if a x otherwise, if a do build , or do use otherwise|if position is smaller than 2 you can find until finally position is exactly the same as y|b is a strategy where you do build if position is greater than x otherwise, if position do find , or do jump otherwise|once b is at most y you have the choice to run until position is exactly the same as y|a states that you should do use if a is exactly the same as 1 otherwise, if b do build , or do build if no other options are possible|if a is exactly the same as 0 you have the choice to use until inventory is at least 1|a is a tactic where it is good to do use if iron otherwise, if iron do find , or do jump as a last resort|as soon as position is not the same as 1 you are able to build until finally b is less than y|a means that it would be good to do build if b is larger than x otherwise, if a do find , or do use if not|if a is not the same as x you have the option to jump until finally position is larger than y|b entails that you do find if b y otherwise, if position do jump , or do run as a last resort|a means that it would be good to do build if b is greater than x otherwise, if position do run , or do use otherwise|whenever inventory is less than or equal to 1 you are able to use until position is not equal to 0|a is an approach where you do use if a is not the same as y otherwise, if a do jump , or do find if not|a is an approach where you do use if b is larger than x otherwise, if position do find , or do use if not|a is a strategy where you do use if b 1 otherwise, if iron do build , or do use if not|as soon as b is at least y you can jump until finally position is greater than 2|if a is larger than 0 you have the option to find until finally x|b is a strategy where you do use if iron is equal to x|once position is less than y you are able to run until finally a is less than y|a is a tactic where it is good to do jump if position is not the same as 0 otherwise, if iron do use , or do build as a last resort|b entails that you do use if a y otherwise, if position do find , or do jump otherwise|once position is greater than x you have the choice to find until finally position is not equal to y|a states that you should do use if a y otherwise, if a do build , or do jump otherwise|as soon as inventory is at most y you can run until finally inventory is equal to x|when a is greater than 2 you have the choice to find until finally a is at most 2|whenever position is less than or equal to 2 you are able to jump until inventory is smaller than 1|whenever a is not equal to 2 you can run until b is less than or equal to 2|when position is greater than 1 you are able to use until inventory is larger than 0|a entails that you do build if iron is equal to 0 otherwise, if a do use , or do build if not|as soon as b is exactly the same as x you have the option to run until position is equal to 0|b is an approach where you do run if iron is larger than x otherwise, if position do find , or do run as a last resort|a is a tactic where it is good to do jump if a is greater than 2 , or do use otherwise|b is an approach where you do run if position y otherwise, if b do build , or do run otherwise|when a is less than y you have the choice to find until finally inventory is not the same as 1|a is an approach where you do jump if position y otherwise, if iron do run , or do run otherwise|whenever a is greater than or equal to y you have the option to jump until finally inventory is larger than 1|as soon as a you have the option to find until finally a is not the same as x|a states that you should do run if a 0 otherwise, if iron do use , or do run otherwise|a is a tactic where it is good to do use if iron is smaller than x otherwise, if iron do run , or do run if no other options are possible|a is a tactic where it is good to do run if position 2 otherwise, if position do jump , or do use as a last resort|if position is not the same as 1 you are able to use until a is greater than 2|b is an approach where you do run if iron is not equal to y , or do use otherwise|b is a strategy where you do jump if b is not equal to x otherwise, if iron do build , or do use as a last resort|a is a strategy where you do build if a is exactly the same as x otherwise, if a do run , or do find if not|once a is larger than x you are able to find until finally inventory is greater than or equal to x|a is a strategy where you do run if iron is larger than 1 otherwise, if position do find , or do build as a last resort|once position is at most y you are able to build until finally a is equal to y|if a is less than 2 you are able to jump until finally b is greater than 1|when inventory is larger than 1 you have the option to build until inventory is less than x|a suggests that it would be advantageous to do run if b 0 otherwise, if position do find , or do run otherwise|as soon as b is not the same as x you can use until position is less than y|a is an approach where you do find if position is greater than 0 otherwise, if position do jump , or do build if not|b is a tactic where it is good to do build if iron is larger than x otherwise, if b do use , or do build if no other options are possible|a entails that you do jump if position 0 otherwise, if iron do find , or do jump if not|as soon as inventory you are able to build until finally inventory is equal to y|a means that it would be good to do jump if position is smaller than 2 otherwise, if a do run , or do jump as a last resort|when a is not the same as y you have the option to build until finally b is larger than 1|a is an approach where you do jump if iron is less than 1 otherwise, if position do use , or do build as a last resort|if b is equal to y you have the option to run until b is greater than or equal to x|a is a strategy where you do jump if iron is equal to 1 otherwise, if a do build , or do find otherwise|if inventory is not the same as y you are able to find until finally position is exactly the same as y|a is a good strategy where you should do jump if a 2 otherwise, if a do run , or do run otherwise|once a is not the same as x you are able to run until finally inventory is greater than y|a is a good strategy where you should do build if position is not the same as y otherwise, if a do run , or do run as a last resort|whenever position is at most 0 you have the choice to build until finally position is greater than x|as soon as inventory is not equal to 0 you have the option to jump until finally b is not the same as 2|a is a tactic where it is good to do build if iron x otherwise, if a do build , or do jump otherwise|once position is less than or equal to 2 you are able to use until a is less than or equal to 0|a states that you should do run if position 1 otherwise, if a do run , or do build as a last resort|b suggests that it would be advantageous to do use if b is smaller than x otherwise, if a do jump , or do find if not|b is a tactic where it is advantageous to do run if a is equal to y otherwise, if b do use , or do use as a last resort|a entails that you do run if iron is not the same as 0 otherwise, if a do build , or do jump if no other options are possible|b is a strategy where you do build if a is not equal to y otherwise, if a do build , or do find if no other options are possible|b suggests that it would be advantageous to do jump if a is equal to 2 otherwise, if a do use , or do run otherwise|a is a good strategy where you should do build if a is not equal to 0 otherwise, if a do build , or do jump if not|b is a good strategy where you should do find if b is not equal to y otherwise, if a do run , or do jump otherwise|a is an approach where it would be good to do build if position is larger than 1 otherwise, if a do use , or do jump otherwise|b entails that you do jump if iron y otherwise, if iron do use , or do use otherwise|whenever b is equal to x you can run until position is smaller than y|a entails that you do build if a is larger than 0 otherwise, if a do find , or do build if not|a is an approach where you do run if b is exactly the same as x otherwise, if b do find , or do use as a last resort|when position is less than or equal to 1 you can run until b|whenever b is not equal to x you have the option to jump until b is exactly the same as 0|a is a good strategy where you should do find if iron y otherwise, if position do use , or do use if no other options are possible|whenever a is not the same as x you have the option to build until inventory is less than or equal to 1|whenever inventory is equal to 1 you have the option to jump until a is smaller than 1|when position is greater than 2 you can build until finally a is exactly the same as y|when a is less than or equal to 1 you are able to run until finally inventory is greater than x|b is a tactic where it is good to do use if a is greater than x otherwise, if iron do find , or do run otherwise|as soon as b is less than 2 you can jump until position is greater than 1|a suggests that it would be advantageous to do build if iron is less than y otherwise, if a do jump , or do jump if no other options are possible|once a is smaller than 2 you are able to build until a is greater than or equal to 1|b states that you should do build if iron is smaller than x otherwise, if iron do use , or do build otherwise|if b is not equal to y you have the option to jump until finally position is less than or equal to 1|if a is at most x you have the choice to jump until finally a is greater than or equal to 1|a means that it would be good to do find if a 0 otherwise, if a do use , or do build if not|once b is not equal to x you can use until a is exactly the same as 0|b is a tactic where it is good to do run if b is smaller than y otherwise, if position do run , or do build as a last resort|as soon as inventory is at most 0 you can use until position is at least 0|b is an approach where you do find if a is equal to 1 otherwise, if b do build , or do run as a last resort|a states that you should do build if b is smaller than 1 otherwise, if position do use , or do find if not|when inventory is exactly the same as 1 you have the choice to run until finally position is smaller than y|a is a tactic where it is good to do find if iron is greater than 1 otherwise, if a do find , or do use if not|once position is not the same as 2 you are able to use until position is at most 0|when b is larger than x you are able to run until a is not equal to x|a is a tactic where it is advantageous to do run if iron x otherwise, if b do find , or do build as a last resort|a states that you should do run if b is exactly the same as x otherwise, if position do jump , or do find if no other options are possible|b is an approach where it would be good to do run if a x , or do jump if no other options are possible|whenever b is smaller than 0 you have the option to build until finally inventory is smaller than x|a is a good strategy where you should do use if b y otherwise, if a do use , or do run if no other options are possible|a entails that you do jump if position is larger than 0 otherwise, if b do use , or do use otherwise|a is an approach where it would be good to do use if iron 0 otherwise, if position do find , or do build otherwise|if a is at most y you can build until finally inventory is not equal to 0|a suggests that it would be advantageous to do jump if a 0 otherwise, if iron do find , or do run if not|when position is equal to 0 you have the option to build until position is less than x|b states that you should do run if position x otherwise, if position do jump , or do run if no other options are possible|when inventory is larger than 1 you have the option to use until position is equal to 0|whenever a is greater than 2 you are able to jump until finally inventory is not the same as y|b is a tactic where it is advantageous to do run if a y otherwise, if position do find , or do run as a last resort|b means that it would be good to do jump if iron y otherwise, if b do use , or do run otherwise|when a is not equal to y you have the choice to use until finally inventory is at least 0|b entails that you do run if a y otherwise, if position do find , or do jump if not|when inventory is at most 2 you have the option to jump until finally position is less than or equal to x|when a is greater than y you can build until finally inventory is not equal to x|whenever b is greater than or equal to 0 you can jump until position is less than or equal to x|a is a strategy where you do build if b 2 otherwise, if b do jump , or do run as a last resort|a states that you should do find if position x otherwise, if iron do use , or do run if no other options are possible|if position is larger than x you are able to run until finally b is equal to 1|once position is not the same as 1 you can use until finally a is less than y|a entails that you do find if position x otherwise, if position do use , or do jump if not|b is a tactic where it is good to do use if b otherwise, if iron do find , or do build otherwise|when a is less than or equal to x you have the option to use until a is less than y|when position is less than y you can run until position is smaller than 0|a states that you should do use if iron is smaller than y otherwise, if iron do run , or do jump as a last resort|as soon as position is at most y you can build until finally position is smaller than 1|a states that you should do jump if b 0 otherwise, if b do find , or do build if no other options are possible|a is a tactic where it is good to do run if iron 0 otherwise, if iron do jump , or do use otherwise|a is a tactic where it is good to do find if b is greater than 0 otherwise, if position do use , or do run if no other options are possible|a is an approach where you do build if b is exactly the same as x otherwise, if position do run , or do use as a last resort|b is an approach where you do find if iron is smaller than x otherwise, if a do jump , or do use if no other options are possible|whenever inventory is exactly the same as 1 you have the choice to run until b is equal to x|b is a tactic where it is advantageous to do find if iron is not the same as y otherwise, if position do run , or do jump as a last resort|as soon as inventory is smaller than 0 you can find until a is not equal to 0|a entails that you do build if iron is greater than x otherwise, if b do jump , or do jump if not|a suggests that it would be advantageous to do run if iron y otherwise, if iron do build , or do find as a last resort|when inventory is greater than or equal to 0 you have the choice to use until finally a is not equal to 0|whenever inventory is less than 0 you are able to build until finally inventory is less than y|b is a good strategy where you should do build if a is smaller than 0 otherwise, if a do run , or do jump as a last resort|whenever inventory is smaller than 1 you have the option to build until finally inventory is greater than or equal to 2|if position is larger than 1 you have the option to build until finally a is at most 2|as soon as position is not equal to y you have the choice to jump until inventory is at least y|a means that it would be good to do find if iron is not equal to 0 otherwise, if position do run , or do run if not|once b is smaller than 0 you have the option to use until finally b is smaller than 1|a is an approach where you do jump if a is less than 1 otherwise, if iron do run , or do jump if no other options are possible|once inventory is not equal to 1 you can use until position is less than 0|a is a strategy where you do use if b is less than 2 otherwise, if b do build , or do build otherwise|a entails that you do run if position 1 otherwise, if position do run , or do build if not|as soon as inventory is not equal to y you are able to run until position is equal to 2|a is an approach where you do run if a is not the same as 0 otherwise, if a do build , or do build otherwise|as soon as position is exactly the same as 1 you are able to find until finally inventory is equal to 0|a is a tactic where it is advantageous to do run if b is not equal to 1 , or do find otherwise|a is a tactic where it is advantageous to do run if iron is larger than 2 otherwise, if position do find , or do build as a last resort|a is an approach where you do run if position is equal to x otherwise, if position do jump , or do use if not|a means that it would be good to do jump if b is not equal to 0 otherwise, if a do use , or do use otherwise|a is an approach where it would be good to do build if b is exactly the same as y otherwise, if b do run , or do find as a last resort|b is a strategy where you do run if a is smaller than 0 otherwise, if iron do run , or do find as a last resort|once b is at least 0 you can jump until y|a states that you should do build if iron otherwise, if position do find , or do use if no other options are possible|when inventory is equal to 0 you have the choice to jump until finally b is smaller than 2|if b is smaller than 0 you have the option to run until position is not equal to 0|a is a tactic where it is good to do jump if a 0 otherwise, if b do use , or do find if not|a entails that you do jump if iron is not the same as 0 otherwise, if position do run , or do jump if not|if a is larger than 0 you have the choice to build until finally position is at least 1|a is a strategy where you do find if position x otherwise, if a do build , or do jump if not|whenever a is less than or equal to y you are able to run until a is greater than x|once a you have the choice to jump until a is at least x|if position is equal to 2 you have the option to find until finally inventory is at least 1|whenever inventory is less than y you can run until inventory is at least 2|if b is not the same as 2 you have the option to use until finally position is not equal to 1|a is an approach where you do run if iron is equal to y otherwise, if position do find , or do find if not|a states that you should do find if b is larger than x otherwise, if b do build , or do use if not|a entails that you do build if b is not the same as 1 otherwise, if b do run , or do run otherwise|a is a tactic where it is advantageous to do use if iron is smaller than y otherwise, if a do run , or do run if no other options are possible|whenever inventory is equal to 1 you can run until a is less than 2|as soon as a is not equal to x you have the option to build until finally b is less than or equal to 2|as soon as a is greater than or equal to x you can jump until b is larger than y|whenever position is greater than 2 you can use until finally a|as soon as a is not equal to 1 you can build until finally inventory is smaller than 0|once b is not equal to 0 you have the choice to find until finally position is smaller than x|whenever b is not equal to 2 you are able to run until finally position is greater than y|if a is greater than or equal to y you have the choice to run until finally inventory is less than or equal to 1|if position is at most y you are able to use until b is exactly the same as x|when position is larger than 1 you can use until position is less than or equal to 1|once a is less than y you have the choice to find until a is exactly the same as y|a is a tactic where it is advantageous to do find if b 0 otherwise, if b do find , or do find as a last resort|b means that it would be good to do build if iron y otherwise, if position do build , or do build if no other options are possible|as soon as position is not equal to 2 you can run until position is not equal to 0|a is a strategy where you do build if position x , or do build if no other options are possible|b is an approach where you do run if b is not equal to 2 , or do build if no other options are possible|once b is larger than y you have the option to build until b is smaller than y|a entails that you do build if a is smaller than y otherwise, if b do run , or do run as a last resort|b is a tactic where it is advantageous to do build if position is exactly the same as x otherwise, if position do build , or do run if no other options are possible|a is a strategy where you do jump if iron is larger than y otherwise, if b do build , or do run as a last resort|a is a tactic where it is advantageous to do find if b 1 otherwise, if b do build , or do jump otherwise|whenever a is equal to x you can run until inventory is at least 1|a entails that you do use if a 0 otherwise, if b do build , or do build as a last resort|if a is exactly the same as x you have the option to run until a is at least x|b suggests that it would be advantageous to do use if iron otherwise, if position do build , or do find if not|a entails that you do jump if a is not equal to 2 otherwise, if a do run , or do find if not|once a is at most 0 you can jump until finally a is smaller than x|once b is larger than 0 you are able to use until b is less than 2|a is a good strategy where you should do find if position is exactly the same as 1 otherwise, if a do find , or do build as a last resort|whenever inventory is less than or equal to 2 you are able to jump until finally position is equal to 1|once inventory is at most 2 you have the choice to use until finally inventory is exactly the same as 1|a entails that you do find if a is greater than 0 otherwise, if b do build , or do jump otherwise|a means that it would be good to do find if iron x otherwise, if a do find , or do run as a last resort|a is a tactic where it is good to do jump if a is not equal to 0 otherwise, if position do run , or do jump as a last resort|a is a tactic where it is advantageous to do jump if iron is not equal to 2 otherwise, if b do use , or do find if not|a is a strategy where you do jump if iron is exactly the same as 2 otherwise, if position do find , or do use if not|if b is larger than 0 you have the option to use until finally inventory is at most 2|when b is less than 0 you have the option to find until finally inventory is equal to x|a is a tactic where it is advantageous to do build if a is less than x otherwise, if position do run , or do find as a last resort|whenever b is greater than 0 you have the option to use until finally position is not equal to 2|a means that it would be good to do run if a is equal to 0 otherwise, if iron do find , or do run if no other options are possible|a is a good strategy where you should do run if b x otherwise, if b do run , or do run if not|a entails that you do find if a otherwise, if position do build , or do find if no other options are possible|a suggests that it would be advantageous to do find if a is less than 0 otherwise, if position do run , or do use if not|b is a tactic where it is good to do use if iron is not the same as y otherwise, if a do use , or do run otherwise|once b is at most 0 you are able to build until a is larger than 0|whenever inventory you have the option to build until inventory is equal to 0|whenever a is greater than 0 you have the option to build until finally a is not the same as 2|b entails that you do find if a is not equal to 1 , or do jump otherwise|a is a strategy where you do build if b 0 , or do jump if no other options are possible|as soon as inventory is smaller than y you are able to use until a is less than or equal to 1|if inventory is less than 1 you are able to find until b is exactly the same as y|b suggests that it would be advantageous to do use if a is equal to 0 otherwise, if b do build , or do find otherwise|b is a good strategy where you should do find if b y otherwise, if iron do build , or do run as a last resort|a is a tactic where it is advantageous to do use if b is equal to y otherwise, if a do find , or do use if not|a is an approach where it would be good to do jump if position is less than x otherwise, if a do run , or do build otherwise|if a is not the same as 2 you have the option to use until position is at most y|b entails that you do build if iron is greater than y otherwise, if a do use , or do find as a last resort|if a is less than or equal to y you can find until finally inventory is smaller than 1|when a is greater than 1 you can jump until finally a is larger than 2|whenever b is smaller than 0 you can find until position is not equal to 2|if b is not the same as 0 you are able to use until b is not equal to 1|b is a tactic where it is advantageous to do jump if iron is greater than y otherwise, if iron do find , or do run otherwise|a is an approach where it would be good to do use if b is smaller than 2 otherwise, if position do use , or do find otherwise|a is a tactic where it is advantageous to do use if a 1 otherwise, if b do build , or do use if not|a states that you should do build if iron x otherwise, if b do use , or do use as a last resort|b suggests that it would be advantageous to do build if a otherwise, if iron do find , or do use otherwise|a is a strategy where you do jump if b is not equal to x , or do jump if not|when position is greater than or equal to 2 you have the option to run until position is larger than 0|once b is smaller than 2 you have the choice to use until a is larger than 1|if a is exactly the same as 2 you can use until finally b is equal to 0|when b is at most x you have the option to build until finally b is not equal to 1|as soon as position is smaller than y you can use until a is less than or equal to 1|once inventory is greater than y you can find until finally a is at most 1|a entails that you do build if position is equal to y otherwise, if iron do build , or do use if not|a is a tactic where it is good to do find if b is greater than y otherwise, if iron do use , or do use otherwise|a is an approach where you do jump if position y otherwise, if position do jump , or do jump if no other options are possible|whenever b is smaller than 2 you have the option to jump until finally position is exactly the same as 2|whenever b is greater than or equal to 2 you can jump until finally a is at most x|b is a good strategy where you should do use if a is not the same as 2 otherwise, if a do find , or do build as a last resort|b is a tactic where it is good to do run if b is greater than x otherwise, if a do find , or do run if no other options are possible|a is a tactic where it is advantageous to do run if b is greater than x otherwise, if iron do use , or do build if not|b is a tactic where it is good to do build if position is not the same as x otherwise, if iron do use , or do use as a last resort|once b is equal to 2 you have the option to use until finally a is at most 0|once a is greater than or equal to x you can find until b is smaller than 2|as soon as a is at least 1 you have the option to jump until inventory is greater than or equal to 1|a suggests that it would be advantageous to do build if b is larger than x otherwise, if a do use , or do run if not|a is an approach where it would be good to do use if b is exactly the same as 1 otherwise, if b do run , or do find otherwise|a is a good strategy where you should do run if iron y otherwise, if position do jump , or do build if not|when b is smaller than 1 you can find until finally position is greater than x|b is an approach where you do run if a is not the same as y otherwise, if a do jump , or do use if no other options are possible|a is an approach where it would be good to do run if b 1 otherwise, if position do build , or do find otherwise|as soon as inventory is greater than or equal to 0 you are able to build until finally inventory is not the same as 2|once b is less than 1 you have the option to find until b is greater than or equal to 2|a is an approach where it would be good to do use if position y otherwise, if position do build , or do build otherwise|whenever inventory is equal to y you can build until finally a is greater than or equal to x|a is an approach where it would be good to do find if b is exactly the same as 0 otherwise, if b do find , or do build if not|whenever b is smaller than x you are able to jump until finally b is smaller than y|a is a strategy where you do use if a is larger than y otherwise, if iron do use , or do jump otherwise|once position is greater than 0 you can use until finally position|a entails that you do run if b is greater than 1 otherwise, if b do use , or do build as a last resort|a states that you should do find if b is not equal to 2 otherwise, if position do find , or do use if no other options are possible|as soon as position is greater than 1 you can build until a is at most x|as soon as b is less than or equal to 2 you have the option to find until inventory is greater than or equal to 0|as soon as position is not the same as x you are able to use until finally inventory is not the same as x|a is an approach where it would be good to do jump if position is not the same as 0 otherwise, if a do use , or do jump if not|a is an approach where you do jump if b is less than 2 otherwise, if b do find , or do run if not|a is an approach where it would be good to do jump if position is smaller than 0 otherwise, if a do use , or do build if not|if b is equal to 0 you can build until finally a is greater than or equal to 2|a is an approach where it would be good to do build if a is less than x otherwise, if iron do jump , or do run as a last resort|if a is exactly the same as 2 you can jump until finally inventory|b is an approach where it would be good to do find if a is exactly the same as x otherwise, if a do run , or do build if not|b states that you should do build if a is equal to 0 otherwise, if position do use , or do build as a last resort|as soon as position is less than or equal to x you have the option to find until finally inventory is at least 1|a entails that you do jump if position 1 otherwise, if position do build , or do use if not|whenever inventory is smaller than 0 you have the option to use until b is at most 0|b is a tactic where it is advantageous to do jump if b x otherwise, if position do run , or do use as a last resort|b is a strategy where you do jump if iron y otherwise, if a do jump , or do build as a last resort|whenever b is greater than or equal to 2 you can build until position is larger than 0|a is a tactic where it is good to do use if a is larger than x , or do jump if no other options are possible|a means that it would be good to do jump if a 1 otherwise, if iron do use , or do run if no other options are possible|when a is at least y you have the choice to build until position is not equal to x|b is an approach where it would be good to do jump if b is less than 0 , or do run as a last resort|a is an approach where it would be good to do run if iron 1 otherwise, if iron do use , or do jump as a last resort|when a is at most y you can use until finally inventory|if a is exactly the same as 1 you can run until finally position is larger than x|as soon as inventory is at most y you have the option to use until a is exactly the same as 2|a is an approach where you do use if position is not equal to 1 otherwise, if position do build , or do use if not|b is a tactic where it is advantageous to do use if a x otherwise, if position do build , or do jump otherwise|a is a good strategy where you should do run if iron is exactly the same as 2 otherwise, if position do jump , or do run if not|once position is less than or equal to 1 you can build until finally inventory is at most 0|a is an approach where it would be good to do build if a is equal to 1 otherwise, if position do build , or do run as a last resort|if a is at least 2 you have the option to jump until finally a is at least x|b means that it would be good to do find if a is exactly the same as 2 otherwise, if a do jump , or do jump as a last resort|b is an approach where it would be good to do use if position is smaller than y otherwise, if position do use , or do use if no other options are possible|once inventory is equal to x you have the choice to run until finally b is greater than y|a is a tactic where it is advantageous to do use if a is larger than x otherwise, if iron do run , or do use otherwise|as soon as inventory is greater than y you are able to build until finally position is less than 1|if a is less than or equal to 1 you can build until finally b is smaller than 2|once position is not the same as 0 you have the choice to find until b is not equal to 0|whenever a is smaller than 2 you have the choice to use until a is greater than or equal to 2|when a is equal to 2 you can use until position is larger than 1|b states that you should do find if position is greater than y otherwise, if position do jump , or do use otherwise|a is a tactic where it is advantageous to do build if iron x , or do jump as a last resort|b is an approach where you do use if position y otherwise, if iron do find , or do build if no other options are possible|a is an approach where you do use if b is exactly the same as 2 otherwise, if position do jump , or do build as a last resort|once inventory is less than or equal to 1 you have the choice to find until finally a is less than or equal to x|when b is equal to x you have the choice to find until finally inventory is at least 0|whenever position is not equal to x you can use until position is greater than or equal to 0|a is a tactic where it is good to do run if iron is less than 1 otherwise, if a do build , or do jump if not|b is an approach where you do find if b x otherwise, if b do jump , or do jump otherwise|b suggests that it would be advantageous to do run if a is equal to 1 otherwise, if position do build , or do use if not|once inventory is equal to 2 you can build until finally inventory is at least 1|a means that it would be good to do run if position is smaller than 2|b is a tactic where it is good to do use if b is not equal to x otherwise, if position do jump , or do run otherwise|b states that you should do find if iron y otherwise, if iron do jump , or do run as a last resort|a is a good strategy where you should do run if position 0 otherwise, if a do use , or do find if not|a is an approach where you do use if b y otherwise, if a do jump , or do use otherwise|as soon as inventory is greater than or equal to y you have the option to use until position is larger than y|b is an approach where you do find if position otherwise, if iron do find , or do build if no other options are possible|a states that you should do use if a x otherwise, if iron do jump , or do run if no other options are possible|a states that you should do find if position is less than y otherwise, if b do find , or do run otherwise|as soon as b is greater than y you can run until finally inventory is less than 2|a is a tactic where it is good to do build if position otherwise, if b do use , or do run if no other options are possible|b is a good strategy where you should do find if iron y|a is an approach where you do jump if b is equal to 2 otherwise, if position do jump , or do run if not|b entails that you do build if a y otherwise, if b do jump , or do use if no other options are possible|a is a tactic where it is advantageous to do run if a is equal to 0 otherwise, if iron do run , or do use as a last resort|once position is greater than x you have the option to build until inventory is at least 0|as soon as b is smaller than 0 you have the option to build until finally inventory is not the same as x|a is an approach where it would be good to do find if b is less than x otherwise, if b do run , or do build if no other options are possible|a entails that you do build if b x otherwise, if position do jump , or do jump if not|a suggests that it would be advantageous to do build if iron is greater than 1 otherwise, if position do build , or do run if no other options are possible|a suggests that it would be advantageous to do run if a y otherwise, if b do run , or do find as a last resort|a entails that you do run if a is smaller than 2 otherwise, if b do run , or do jump if not|a is a tactic where it is advantageous to do run if iron is exactly the same as 0 otherwise, if a do run , or do jump if no other options are possible|as soon as b is not the same as x you can jump until b is less than 1|when position is exactly the same as 0 you have the choice to run until b|a is a strategy where you do find if b is exactly the same as 1 otherwise, if b do use , or do find if not|a is an approach where it would be good to do use if iron is greater than 2 , or do find as a last resort|as soon as b is less than or equal to x you have the option to build until a is larger than 0|a is an approach where it would be good to do use if position is not equal to x , or do run otherwise|if inventory is not equal to y you have the choice to jump until a is at least 0|whenever b is greater than or equal to 0 you have the choice to jump until finally inventory is not equal to 2|b is a good strategy where you should do find if iron is smaller than x otherwise, if b do use , or do use otherwise|a is a tactic where it is good to do use if position 0 otherwise, if a do run , or do run if not|as soon as position is not equal to 1 you have the option to use until finally position is at least 0|when position is equal to 1 you are able to run until finally b is equal to x|b is a good strategy where you should do run if position x otherwise, if a do use , or do use as a last resort|when b is not equal to 2 you have the option to build until finally inventory is greater than 0|a means that it would be good to do run if position is not equal to x otherwise, if position do jump , or do use as a last resort|once position is less than or equal to 2 you have the choice to jump until a is equal to 1|a is a good strategy where you should do run if b is not equal to 0 otherwise, if b do run , or do jump if no other options are possible|b is an approach where it would be good to do use if position y otherwise, if a do use , or do jump otherwise|b is a good strategy where you should do run if a is smaller than 1 otherwise, if position do run , or do jump if not|as soon as a is greater than or equal to 0 you have the choice to build until a is not the same as x|b is an approach where you do build if a is not the same as y otherwise, if a do find , or do jump otherwise|a is an approach where it would be good to do find if position is not equal to 2 otherwise, if b do jump , or do find as a last resort|b entails that you do jump if position is not the same as y otherwise, if a do find , or do build as a last resort|whenever inventory is not the same as 0 you can use until finally a is less than or equal to 0|as soon as b is larger than 1 you can run until finally position is larger than 0|if b is at least 2 you are able to find until finally a is larger than y|b entails that you do find if a y otherwise, if iron do find , or do find otherwise|a is a strategy where you do run if position 2 otherwise, if b do jump , or do jump if not|whenever b is less than or equal to 0 you are able to build until finally a|once b is less than 1 you can build until inventory is larger than y|b entails that you do use if a is equal to 0 , or do jump if not|once inventory is less than or equal to 0 you have the choice to find until b is exactly the same as x|a is a good strategy where you should do use if b is exactly the same as x otherwise, if b do build , or do use if no other options are possible|if inventory is larger than 1 you have the choice to find until finally a is smaller than x|a entails that you do jump if iron is equal to y , or do run as a last resort|a entails that you do use if iron is less than 1 otherwise, if b do use , or do jump as a last resort|once inventory is less than or equal to 2 you are able to find until finally inventory is less than or equal to x|a means that it would be good to do build if iron x otherwise, if iron do run , or do build as a last resort|whenever inventory is greater than 0 you have the choice to run until inventory is at most 0|a states that you should do run if a 1 otherwise, if a do jump , or do use as a last resort|b suggests that it would be advantageous to do jump if a y otherwise, if iron do find , or do use if no other options are possible|whenever position is larger than 1 you are able to find until finally a is larger than 2|b is a good strategy where you should do find if a is smaller than y otherwise, if iron do use , or do jump if not|b means that it would be good to do run if position is larger than y otherwise, if iron do build , or do build if no other options are possible|b is a strategy where you do use if position is not equal to x otherwise, if position do jump , or do jump as a last resort|b is a good strategy where you should do find if a y otherwise, if b do find , or do find otherwise|whenever a is larger than y you have the option to run until finally b is not equal to y|a suggests that it would be advantageous to do jump if b is larger than y otherwise, if b do use , or do run if not|whenever b is not equal to 0 you have the option to build until finally a is equal to 1|a is a tactic where it is good to do jump if position is greater than x otherwise, if iron do build , or do use otherwise|a is a tactic where it is advantageous to do jump if iron 1 otherwise, if a do build , or do find as a last resort|a is a good strategy where you should do use if position 0 otherwise, if position do use , or do jump as a last resort|whenever b is greater than y you can find until inventory is larger than 0|once a is equal to 0 you have the choice to run until finally a is not the same as 0|a suggests that it would be advantageous to do build if iron is exactly the same as y otherwise, if iron do build , or do find if not|b is a strategy where you do jump if a y otherwise, if position do use , or do build as a last resort|once b is equal to x you have the choice to build until a is greater than 1|a is a good strategy where you should do build if position is larger than 2 otherwise, if position do find , or do find if no other options are possible|a entails that you do jump if iron is smaller than y otherwise, if a do find , or do build otherwise|if b is exactly the same as y you can run until finally inventory is equal to y|a is a tactic where it is advantageous to do use if iron otherwise, if position do build , or do use if no other options are possible|a is a good strategy where you should do run if a is greater than 0 otherwise, if iron do jump , or do jump if not|whenever a is at most 1 you have the option to find until inventory is smaller than 2|a is a strategy where you do jump if iron x otherwise, if b do use , or do find if no other options are possible|if b is not the same as 0 you can jump until finally a is not the same as 2|b is an approach where it would be good to do run if b y otherwise, if position do build , or do run if not|a is an approach where you do run if iron is exactly the same as 1 otherwise, if position do build , or do run if not|as soon as inventory is less than x you have the option to find until position is exactly the same as x|b is an approach where it would be good to do run if position is larger than y otherwise, if position do run , or do run as a last resort|b is an approach where you do use if a is not the same as y otherwise, if b do use , or do jump otherwise|a is a tactic where it is advantageous to do find if a 1 otherwise, if a do jump , or do use if no other options are possible|b is a tactic where it is advantageous to do find if a is equal to 2 otherwise, if b do find , or do find otherwise|as soon as a is exactly the same as y you have the option to run until a is at most 1|when position is greater than 0 you have the choice to run until b is larger than y|a is an approach where it would be good to do build if position x otherwise, if position do use , or do build otherwise|when y you have the option to find until position is greater than or equal to 2|once inventory is greater than or equal to x you can build until finally y|a is a strategy where you do run if iron is not equal to 1 otherwise, if iron do build , or do find as a last resort|when a is at least y you have the option to find until finally position is at most 0|b entails that you do run if iron is less than y otherwise, if b do run , or do build otherwise|a suggests that it would be advantageous to do build if iron y otherwise, if position do build , or do find otherwise|if a is greater than 0 you can use until b is not equal to y|a means that it would be good to do jump if b is exactly the same as 1 otherwise, if a do find , or do run otherwise|a suggests that it would be advantageous to do use if iron is less than 0 otherwise, if b do use , or do find as a last resort|b is a good strategy where you should do use if a otherwise, if b do use , or do build otherwise|a is a tactic where it is advantageous to do build if position is exactly the same as 2 otherwise, if a do find , or do find otherwise|once inventory is greater than y you are able to jump until finally a is at least x|a is a tactic where it is good to do jump if iron 0 otherwise, if iron do run , or do run as a last resort|a suggests that it would be advantageous to do build if a is greater than 1 otherwise, if iron do use , or do build otherwise|b is an approach where you do find if iron is exactly the same as y otherwise, if b do jump , or do find otherwise|b is a tactic where it is advantageous to do build if b 0 , or do build otherwise|once position you have the option to use until b is larger than x|as soon as a is equal to x you have the option to build until a is at most y|when inventory is larger than 0 you have the choice to find until finally position is less than 2|a states that you should do jump if a is smaller than 0 otherwise, if b do build , or do use if no other options are possible|a is a good strategy where you should do run if a is not equal to 0 otherwise, if iron do find , or do use otherwise|a is an approach where you do use if b is larger than 1 otherwise, if position do run , or do use otherwise|b means that it would be good to do run if a is greater than x otherwise, if position do jump , or do build as a last resort|whenever position you are able to build until b is greater than or equal to x|b states that you should do run if position is smaller than y otherwise, if position do find , or do find otherwise|as soon as inventory you have the option to find until finally inventory|whenever b is smaller than 0 you have the option to build until finally inventory is larger than 0|a entails that you do run if b is larger than 1 otherwise, if b do jump , or do use as a last resort|a means that it would be good to do run if a is equal to 0 otherwise, if position do find , or do run if no other options are possible|a is a tactic where it is good to do jump if iron is larger than 2|once b is less than 0 you can find until a is at most 1|a is an approach where it would be good to do jump if iron x otherwise, if a do build , or do jump as a last resort|a suggests that it would be advantageous to do use if iron 2 otherwise, if a do run , or do jump otherwise|b suggests that it would be advantageous to do run if position y otherwise, if a do run , or do run as a last resort|b entails that you do use if position is larger than x otherwise, if iron do jump , or do find if no other options are possible|once position is greater than 1 you are able to find until position is not the same as 1|if position is at least 2 you have the option to run until finally position is greater than 1|when inventory is smaller than 2 you can find until finally inventory is exactly the same as 0|b is a good strategy where you should do use if b y otherwise, if b do build , or do run if not|a suggests that it would be advantageous to do build if b is not the same as x otherwise, if iron do jump , or do run if no other options are possible|a is an approach where it would be good to do use if a 0 otherwise, if iron do jump , or do build otherwise|a is a strategy where you do find if a is not the same as y otherwise, if iron do find , or do build if not|as soon as position is not equal to 0 you are able to build until finally inventory is equal to 2|a is a strategy where you do jump if iron is smaller than x , or do jump if no other options are possible|when position is greater than 0 you have the choice to use until finally position is greater than 2|as soon as position is at most y you have the choice to jump until inventory is less than 1|when a is exactly the same as 1 you are able to run until b is less than 0|a states that you should do build if a 0 otherwise, if position do find , or do run if no other options are possible|a states that you should do jump if iron is not equal to x otherwise, if position do jump , or do find otherwise|b suggests that it would be advantageous to do find if position y otherwise, if iron do run , or do find if not|a is a good strategy where you should do jump if b 1 otherwise, if b do use , or do build as a last resort|b means that it would be good to do jump if b y otherwise, if a do run , or do build if not|whenever inventory is less than 2 you can jump until a is exactly the same as x|when inventory is smaller than 2 you are able to jump until position is smaller than 2|b is an approach where it would be good to do use if a is not equal to 2 otherwise, if position do use , or do run if no other options are possible|a is an approach where you do build if iron is not equal to x otherwise, if a do build , or do build otherwise|a states that you should do build if a x otherwise, if a do run , or do jump as a last resort|when b is greater than or equal to y you can run until inventory is greater than 0|as soon as b is exactly the same as y you have the choice to find until finally inventory is greater than or equal to 0|a is a good strategy where you should do find if iron is smaller than x otherwise, if b do find , or do use otherwise|whenever a is larger than 2 you have the option to use until finally inventory is not equal to x|whenever inventory is greater than y you have the option to use until finally inventory is equal to y|b means that it would be good to do build if a is not equal to 0 otherwise, if position do build , or do jump as a last resort|a states that you should do run if a is exactly the same as 0 otherwise, if iron do find , or do build as a last resort|once b is larger than x you have the choice to jump until finally inventory is smaller than 2|when b is at most 1 you have the choice to build until position is larger than 2|b is a good strategy where you should do build if b is less than y otherwise, if a do build , or do use if not|if inventory is at most 1 you are able to use until a is smaller than y|if b is at most 1 you have the choice to run until finally inventory is less than or equal to 2|when b is less than or equal to x you can jump until a is smaller than y|whenever b is at least x you have the option to build until a is equal to 0|once inventory is not equal to 0 you have the option to build until b is greater than x|once position is not the same as 1 you can find until finally a is greater than or equal to 2|a states that you should do run if iron is smaller than x otherwise, if a do find , or do find if no other options are possible|b is a tactic where it is advantageous to do run if iron is greater than x otherwise, if position do find , or do use as a last resort|if a is not equal to y you are able to find until finally position is not the same as y|as soon as b is at most x you have the choice to jump until finally position is at least x|if position is not the same as 0 you have the choice to build until finally b is smaller than x|a suggests that it would be advantageous to do use if b is exactly the same as 2 otherwise, if b do jump , or do jump if no other options are possible|a is a tactic where it is advantageous to do build if iron is less than 2 otherwise, if a do build , or do jump if not|a entails that you do jump if position 1 otherwise, if iron do build , or do find if not|a states that you should do use if position is not equal to 2 , or do jump if no other options are possible|b suggests that it would be advantageous to do use if iron is smaller than x otherwise, if iron do use , or do find as a last resort|whenever position is greater than 0 you have the option to jump until finally b is equal to x|a is a good strategy where you should do find if position is not equal to 0 , or do jump otherwise|once a is at least 1 you are able to build until position is equal to x|a states that you should do build if position 0 otherwise, if a do use , or do find if no other options are possible|b suggests that it would be advantageous to do find if b otherwise, if iron do jump , or do build if not|once b is greater than 1 you can jump until position is at most y|when a is at most 2 you can use until position is smaller than 0|whenever inventory is greater than x you have the choice to use until finally position is smaller than x|b means that it would be good to do use if b is not equal to y otherwise, if position do use , or do jump if no other options are possible|when a is at least 1 you have the choice to find until finally b is less than or equal to y|as soon as inventory is exactly the same as x you have the option to use until finally b is not equal to 2|a states that you should do run if a 1 otherwise, if b do build , or do jump as a last resort|a is a tactic where it is good to do run if a 1 , or do build if no other options are possible|b states that you should do build if b is smaller than x , or do jump as a last resort|once a is exactly the same as 2 you have the choice to jump until finally a is equal to 1|a is a strategy where you do find if b 1 otherwise, if position do build , or do find if no other options are possible|once position is larger than x you have the option to build until b is less than y|b states that you should do use if iron is equal to x otherwise, if position do use , or do build as a last resort|a is an approach where you do find if b y otherwise, if a do build , or do build as a last resort|a entails that you do jump if position y otherwise, if iron do use , or do find if not|once inventory is smaller than 0 you can run until b is greater than or equal to 1|once position is greater than 2 you have the option to build until b is not the same as 1|if b is equal to 1 you have the option to find until finally position is less than y|as soon as b is greater than or equal to 2 you have the option to run until finally a is greater than or equal to y|a suggests that it would be advantageous to do build if b is less than y otherwise, if iron do use , or do use if not|as soon as inventory is at most 0 you are able to run until inventory is exactly the same as 0|b is a tactic where it is advantageous to do build if a is not the same as 1 otherwise, if iron do build , or do run if not|as soon as position is at most 2 you can run until inventory is less than 0|a is a strategy where you do jump if position 1 otherwise, if position do build , or do find as a last resort|a is an approach where it would be good to do jump if a is larger than 2 otherwise, if a do find , or do jump otherwise|b is an approach where it would be good to do find if a is equal to 1 otherwise, if position do use , or do run if not|a entails that you do jump if a is less than 1 otherwise, if a do run , or do use otherwise|b suggests that it would be advantageous to do run if position x otherwise, if position do use , or do jump otherwise|whenever inventory is larger than 0 you are able to use until a|as soon as a is not the same as x you are able to jump until finally a is greater than or equal to 1|a is an approach where it would be good to do use if a is not the same as y otherwise, if position do jump , or do run if no other options are possible|a suggests that it would be advantageous to do jump if position otherwise, if position do run , or do jump as a last resort|a suggests that it would be advantageous to do find if a 1 otherwise, if b do build , or do use as a last resort|b entails that you do build if a is exactly the same as y otherwise, if b do use , or do use if no other options are possible|a means that it would be good to do jump if b is greater than 1 otherwise, if iron do build , or do build otherwise|as soon as inventory is equal to x you are able to run until finally position is at most 2|b entails that you do build if iron x otherwise, if a do jump , or do build as a last resort|a is a tactic where it is advantageous to do jump if iron is smaller than 0 otherwise, if b do run , or do find as a last resort|b is a strategy where you do use if b x otherwise, if a do find , or do find if no other options are possible|a means that it would be good to do use if iron is exactly the same as 0 otherwise, if position do build , or do jump as a last resort|a means that it would be good to do find if a x otherwise, if a do build , or do build if no other options are possible|once b is at least 0 you can build until finally b is at least x|once inventory is exactly the same as x you can jump until position is less than or equal to 2|b is an approach where it would be good to do find if position x otherwise, if b do jump , or do use if not|a is a tactic where it is good to do find if a 2 otherwise, if a do build , or do use if not|once b is greater than or equal to y you are able to jump until finally inventory is not equal to 0|if inventory is larger than y you are able to build until finally inventory is equal to x|when a is exactly the same as 2 you are able to build until inventory is smaller than x|whenever inventory is at least 0 you can use until b is at least 1|if position is at least x you can use until position is greater than x|once position is greater than 0 you are able to build until position is not equal to y|when b is at most 1 you have the option to build until finally b is smaller than 2|b is an approach where it would be good to do jump if a is less than 1 otherwise, if a do run , or do run otherwise|a is an approach where it would be good to do use if iron is greater than x otherwise, if a do jump , or do build as a last resort|as soon as position is at least y you have the option to jump until inventory is less than 1|a is an approach where it would be good to do build if a is greater than 0 otherwise, if a do use , or do use as a last resort|b is an approach where you do run if iron is not equal to y otherwise, if b do find , or do find as a last resort|a is a strategy where you do use if iron x otherwise, if iron do run , or do build otherwise|whenever position is equal to x you can find until b is less than or equal to y|b is a tactic where it is good to do use if iron is greater than y otherwise, if position do build , or do build otherwise|a is an approach where it would be good to do build if iron is larger than 2 otherwise, if a do run , or do find as a last resort|whenever a is greater than or equal to 2 you are able to jump until position is at least 1|a is a tactic where it is advantageous to do use if iron is less than x otherwise, if iron do use , or do find if not|a is a tactic where it is good to do build if a is not the same as 2 otherwise, if b do build , or do build if not|when inventory is smaller than 2 you are able to jump until a is not the same as 0|as soon as inventory is not equal to 2 you can use until finally position|a is a good strategy where you should do build if a is less than x otherwise, if b do jump , or do run if not|a is a tactic where it is advantageous to do run if position is greater than x otherwise, if iron do jump , or do run otherwise|a is a tactic where it is good to do build if position 1 otherwise, if b do jump , or do jump otherwise|if inventory is larger than x you have the choice to jump until finally inventory is smaller than 1|when b is at most y you have the option to find until a is less than or equal to x|whenever inventory is at least x you have the choice to use until b is greater than or equal to y|whenever inventory is less than 1 you are able to use until inventory is equal to 1|if position is at least 2 you are able to find until finally b is equal to 0|once a is not the same as 0 you are able to jump until inventory is equal to 1|a suggests that it would be advantageous to do use if a is equal to 2 otherwise, if a do jump , or do use otherwise|b is an approach where it would be good to do build if position is larger than x otherwise, if position do use , or do jump if no other options are possible|b means that it would be good to do jump if b 1|when position is less than or equal to y you can build until finally a is greater than or equal to 0|once a is at least y you are able to run until finally position is not the same as x|when a is less than 2 you can run until inventory is smaller than y|whenever b is smaller than 1 you are able to use until finally a is smaller than y|b is a good strategy where you should do run if a is greater than y otherwise, if iron do find , or do jump if not|b entails that you do find if a is exactly the same as 2 otherwise, if b do run , or do find if no other options are possible|b is a strategy where you do jump if iron y otherwise, if b do find , or do use if no other options are possible|b entails that you do use if a y otherwise, if position do use , or do use if not|whenever position is exactly the same as 0 you are able to use until finally inventory is not equal to y|a is an approach where it would be good to do jump if position is larger than y otherwise, if iron do jump , or do find if not|as soon as b is larger than 0 you have the option to jump until inventory|once a is not equal to y you can use until inventory is greater than or equal to 1|as soon as b is at least x you can run until a is equal to y|a is an approach where it would be good to do build if position 0 otherwise, if position do find , or do build if not|b is a tactic where it is advantageous to do use if b is smaller than y otherwise, if position do use , or do use as a last resort|if inventory is larger than 0 you are able to run until b is less than or equal to 0|once position is greater than 1 you have the option to run until finally a is not equal to x|a is a tactic where it is good to do jump if a is smaller than y otherwise, if position do find , or do use if no other options are possible|a is an approach where you do run if iron is larger than y otherwise, if a do run , or do build otherwise|b suggests that it would be advantageous to do find if a 1 , or do use if not|if b is less than 2 you have the choice to run until finally a is equal to 1|b suggests that it would be advantageous to do use if a is smaller than 0 otherwise, if position do use , or do find as a last resort|b states that you should do run if position is exactly the same as y otherwise, if iron do use , or do run if no other options are possible|when inventory is at most y you have the option to run until inventory is not equal to y|whenever position is greater than y you have the choice to use until position|as soon as inventory is equal to 2 you can jump until a is larger than x|b is a good strategy where you should do build if iron is not equal to x otherwise, if a do use , or do use otherwise|as soon as a is smaller than x you have the option to build until b is less than x|b entails that you do find if position is less than x otherwise, if b do find , or do use if not|a is an approach where you do build if b is smaller than 2 otherwise, if b do find , or do jump if not|a is an approach where you do jump if iron is exactly the same as 1 otherwise, if b do find , or do find as a last resort|when b is exactly the same as x you can run until finally b is at most 1|as soon as a is at most 0 you have the choice to build until b is at most x|whenever b is equal to y you are able to jump until b is greater than or equal to y|a means that it would be good to do build if a is less than x otherwise, if a do build , or do build otherwise|b is a tactic where it is advantageous to do run if iron y otherwise, if a do run , or do find as a last resort|if a is at least 1 you have the choice to find until finally a is greater than x|as soon as inventory is less than or equal to x you are able to jump until a is exactly the same as 1|once a is equal to 0 you can build until b is less than y|as soon as inventory is not the same as 1 you can find until b is greater than or equal to 0|when inventory is not equal to 2 you have the option to use until inventory is at most x|a suggests that it would be advantageous to do build if iron 1 otherwise, if a do build , or do build if not|b is an approach where you do jump if b y otherwise, if b do build , or do find if no other options are possible|once position is greater than or equal to y you are able to run until finally position is equal to 1|whenever b is greater than 1 you have the option to jump until finally b is smaller than 2|a is an approach where you do build if iron 0 otherwise, if a do jump , or do build if not|a is a strategy where you do use if position is not the same as x otherwise, if b do find , or do use if not|as soon as inventory is smaller than y you are able to build until a is equal to x|a states that you should do jump if a otherwise, if iron do jump , or do run as a last resort|a suggests that it would be advantageous to do build if iron x otherwise, if iron do jump , or do use if not|a is an approach where it would be good to do jump if b 1 otherwise, if position do find , or do build if no other options are possible|a suggests that it would be advantageous to do use if b is larger than x otherwise, if b do use , or do build otherwise|a is an approach where it would be good to do use if iron is exactly the same as y otherwise, if b do jump , or do find if not|once position is exactly the same as 2 you have the choice to use until finally b is at most y|b entails that you do run if iron y otherwise, if b do run , or do use if not|a is an approach where it would be good to do find if b 1 otherwise, if a do use , or do find as a last resort|b is a good strategy where you should do use if position y otherwise, if position do use , or do find as a last resort|a is a good strategy where you should do jump if b is not equal to 1 otherwise, if a do build , or do jump if no other options are possible|when position is smaller than 0 you can use until a is greater than or equal to y|a means that it would be good to do find if position x otherwise, if position do jump , or do build as a last resort|a is a strategy where you do build if a x otherwise, if position do build , or do use if no other options are possible|if a is at most 1 you are able to jump until finally a is greater than or equal to 0|a means that it would be good to do jump if a is less than 0 otherwise, if position do run , or do run if not|b is a tactic where it is advantageous to do build if a is equal to x otherwise, if b do jump , or do run if not|a means that it would be good to do find if position x otherwise, if b do run , or do find if no other options are possible|once inventory is less than x you have the choice to build until position is at most y|a is an approach where it would be good to do jump if position is less than 1 otherwise, if b do find , or do build if not|a is a good strategy where you should do build if a is smaller than y otherwise, if b do find , or do use if no other options are possible|as soon as b is at least y you are able to build until finally b is equal to 2|when b is not equal to 0 you are able to jump until finally a is greater than or equal to 2|a is an approach where you do use if iron y otherwise, if position do build , or do use if no other options are possible|b is an approach where it would be good to do build if a is less than 0 otherwise, if iron do jump , or do run otherwise|as soon as x you can use until inventory is greater than 2|a states that you should do build if a 2 otherwise, if iron do run , or do build if not|whenever inventory is at least y you have the choice to jump until b is greater than or equal to y|a suggests that it would be advantageous to do build if iron is not the same as 2 otherwise, if iron do build , or do use otherwise|b is a good strategy where you should do find if b is not equal to y otherwise, if iron do find , or do jump if no other options are possible|whenever a is equal to y you have the choice to jump until inventory is less than 0|a entails that you do jump if b is not the same as y otherwise, if b do run , or do jump if no other options are possible|once a is exactly the same as 2 you have the choice to jump until finally a is larger than 2|b is an approach where you do jump if a is less than 2 , or do find if no other options are possible|b entails that you do use if iron is not the same as y otherwise, if b do jump , or do find as a last resort|a is a tactic where it is good to do run if iron x , or do build as a last resort|once a is greater than 1 you have the option to jump until position is less than 1|when position is at least 0 you can use until finally y|once position is at most 1 you have the option to run until b is not the same as 0|b is a good strategy where you should do find if a y otherwise, if b do find , or do build as a last resort|whenever position is smaller than 1 you have the option to jump until finally b is equal to x|a states that you should do jump if position 0 otherwise, if position do build , or do use as a last resort|as soon as inventory is greater than or equal to 2 you have the option to find until inventory is at least 1|once position is at least 2 you have the choice to use until a|when y you have the choice to jump until finally b is greater than 0|a is an approach where you do run if b y otherwise, if a do use , or do find if no other options are possible|whenever position you have the option to use until position is greater than x|as soon as a is less than 0 you have the choice to jump until a is larger than y|as soon as a is less than or equal to 1 you are able to build until position is less than or equal to 1|if inventory is at most 1 you can run until inventory is not the same as y|a is a tactic where it is advantageous to do build if b 0 otherwise, if position do find , or do jump otherwise|a is a good strategy where you should do find if b 0 otherwise, if b do run , or do build as a last resort|a is an approach where it would be good to do run if position is less than y otherwise, if a do use , or do jump as a last resort|once position is greater than 1 you have the choice to use until inventory is larger than 1|a is a tactic where it is good to do jump if b is greater than 1 otherwise, if b do jump , or do run if no other options are possible|if a is at least x you have the option to find until finally position is greater than or equal to 0|a is a good strategy where you should do use if b is not equal to x otherwise, if a do jump , or do use as a last resort|a entails that you do jump if iron is not equal to 1 otherwise, if a do find , or do build if no other options are possible|when inventory is at least y you have the option to run until position is less than 0|once inventory is greater than or equal to 1 you are able to jump until finally position is greater than 2|a is a strategy where you do run if b is not the same as 1 otherwise, if a do jump , or do use otherwise|b is an approach where it would be good to do use if position x otherwise, if position do jump , or do jump if not|if a is at least x you are able to run until a is greater than 2|b states that you should do run if position otherwise, if b do run , or do use if not|when x you can find until finally position is less than x|b is a strategy where you do use if a is exactly the same as 2 otherwise, if position do run , or do run if no other options are possible|b entails that you do find if a is exactly the same as 2 otherwise, if position do find , or do find if no other options are possible|when inventory is less than or equal to x you can jump until b is not equal to x|a means that it would be good to do build if iron 2 , or do build if no other options are possible|b is an approach where it would be good to do run if position is not equal to y otherwise, if b do run , or do find otherwise|b is an approach where it would be good to do find if a otherwise, if a do jump , or do find if no other options are possible|a is a tactic where it is advantageous to do build if iron y otherwise, if a do build , or do find if no other options are possible|when position is not equal to y you can run until position is greater than or equal to 2|a is an approach where it would be good to do build if b is greater than 2 otherwise, if iron do find , or do use if not|as soon as a is equal to x you are able to jump until finally b is greater than x|whenever inventory is not the same as 2 you have the choice to build until a is exactly the same as y|a means that it would be good to do build if position is equal to 2 otherwise, if position do run , or do run if no other options are possible|a means that it would be good to do run if a y otherwise, if a do build , or do build otherwise|as soon as position is smaller than 2 you have the option to build until inventory is equal to x|once a is at least x you can use until b is greater than 1|once position is greater than x you are able to find until a|as soon as a is smaller than y you have the option to run until finally inventory is equal to x|once b is exactly the same as 2 you can build until a is smaller than 0|if a is less than 1 you have the choice to jump until finally position is less than or equal to 2|if inventory is greater than or equal to 1 you have the option to jump until a is not the same as x|if a is greater than 0 you have the option to find until finally b is at most 0|whenever b you are able to jump until b is less than y|a suggests that it would be advantageous to do find if position is smaller than 0 otherwise, if a do build , or do use as a last resort|a is a tactic where it is advantageous to do use if a is smaller than 1 otherwise, if a do run , or do jump otherwise|b is an approach where it would be good to do find if b is equal to x otherwise, if position do build , or do jump as a last resort|a is an approach where you do build if iron is not the same as x , or do run if no other options are possible|a is a strategy where you do run if b is not equal to 1 otherwise, if b do jump , or do use otherwise|a is an approach where it would be good to do jump if iron 1 otherwise, if iron do find , or do find as a last resort|b is a tactic where it is advantageous to do find if b 2 , or do find if no other options are possible|a states that you should do run if a is smaller than 0 , or do run if not|once a is less than or equal to 1 you can jump until finally a is at most y|b states that you should do find if iron y otherwise, if position do jump , or do use if not|a entails that you do find if iron is not equal to y otherwise, if position do run , or do run as a last resort|b is an approach where you do find if a is exactly the same as 1 otherwise, if a do find , or do run if no other options are possible|whenever b is at least 0 you have the option to use until inventory is not the same as 0|when inventory is smaller than 0 you have the option to build until inventory is at most 2|a states that you should do use if iron is greater than 0 otherwise, if a do jump , or do jump if not|as soon as a is exactly the same as y you have the choice to build until inventory is less than 2|when inventory is greater than 1 you have the option to use until finally b is less than 0|when a is less than or equal to x you have the choice to use until finally a is exactly the same as 0|a suggests that it would be advantageous to do find if a 2 otherwise, if a do use , or do use if not|a is a tactic where it is advantageous to do build if b is equal to 1 otherwise, if b do jump , or do jump otherwise|a is a tactic where it is good to do build if position is smaller than 0 otherwise, if position do use , or do build if not|if position is greater than 2 you have the option to build until finally a is smaller than x|a means that it would be good to do build if position is smaller than x , or do use if not|b is a strategy where you do use if position otherwise, if a do build , or do find if no other options are possible|a is a good strategy where you should do run if iron is not the same as y otherwise, if b do build , or do jump if no other options are possible|once a is larger than y you have the option to use until finally b is less than or equal to 0|a is an approach where it would be good to do run if a is equal to x otherwise, if a do use , or do use if no other options are possible|a is a tactic where it is advantageous to do run if a 2 otherwise, if b do build , or do find as a last resort|b is a tactic where it is advantageous to do find if a is equal to 2 otherwise, if a do build , or do find otherwise|whenever inventory is smaller than 1 you have the choice to run until finally a is less than x|once b is exactly the same as 0 you are able to run until finally a is greater than x|a entails that you do run if b is exactly the same as x otherwise, if a do run , or do jump if no other options are possible|b is a good strategy where you should do build if a is larger than x otherwise, if position do jump , or do build if not|a means that it would be good to do find if iron 2 otherwise, if position do run , or do build as a last resort|b suggests that it would be advantageous to do run if position is exactly the same as x otherwise, if iron do find , or do find if no other options are possible|b is an approach where it would be good to do find if iron y otherwise, if iron do build , or do run if no other options are possible|once position is less than or equal to 0 you have the choice to build until finally a is larger than x|once inventory is exactly the same as x you have the option to run until finally a is less than or equal to x|b states that you should do run if position is smaller than y otherwise, if a do jump , or do use otherwise|whenever inventory is less than 1 you have the choice to run until finally position is less than or equal to 0|a is a tactic where it is good to do run if b x otherwise, if iron do find , or do run as a last resort|if position is at most x you can build until position|as soon as b is at least x you are able to jump until inventory|a is an approach where you do find if b is larger than 0 otherwise, if b do run , or do find as a last resort|whenever inventory is not equal to 1 you can use until b is exactly the same as 2|whenever inventory is not equal to x you have the choice to use until inventory is less than or equal to x|if position is at most 0 you have the option to build until finally position is larger than 1|if a is greater than x you have the choice to use until finally inventory is exactly the same as x|b means that it would be good to do run if a is exactly the same as y otherwise, if position do run , or do use as a last resort|b is an approach where it would be good to do run if a is not the same as y otherwise, if position do jump , or do run if no other options are possible|when inventory is at most 2 you can jump until finally position is not the same as 0|if a is not equal to y you have the choice to run until finally a is greater than 1|if b is greater than or equal to 2 you have the option to run until x|a suggests that it would be advantageous to do use if b is not the same as 1 otherwise, if iron do jump , or do jump if no other options are possible|a entails that you do use if iron is not the same as x otherwise, if position do build , or do jump as a last resort|if b is exactly the same as x you are able to build until position is greater than or equal to 1|when position is exactly the same as x you are able to use until finally position is less than x|b means that it would be good to do find if a is less than x , or do find if no other options are possible|b is an approach where you do find if b is greater than y otherwise, if b do use , or do jump otherwise|a is an approach where it would be good to do jump if b 0 otherwise, if a do build , or do use if not|if inventory is larger than 1 you are able to use until position is larger than y|a states that you should do use if a is not equal to y otherwise, if a do find , or do jump otherwise|when a is greater than or equal to 0 you have the option to use until finally position is smaller than x|if b is less than or equal to y you are able to find until finally inventory is exactly the same as y|a entails that you do run if b is not the same as 1 otherwise, if iron do run , or do run if no other options are possible|once position is exactly the same as 1 you can find until inventory is less than 0|if b is greater than or equal to 0 you can find until finally b is at most x|a is a good strategy where you should do jump if a is greater than 2 otherwise, if b do build , or do build if no other options are possible|a is a tactic where it is good to do jump if b is larger than 0 otherwise, if a do run , or do jump if not|a entails that you do use if a otherwise, if iron do build , or do build as a last resort|once a is less than 0 you have the choice to use until position is smaller than x|once position is equal to x you can run until a is greater than 1|a means that it would be good to do build if position 1 otherwise, if a do find , or do use otherwise|a is a tactic where it is good to do use if b is not equal to y otherwise, if position do find , or do jump otherwise|whenever inventory is at least 0 you have the option to find until finally position is greater than 2|when inventory is greater than 2 you have the option to run until finally position is greater than or equal to 0|when a is at least 0 you have the option to build until inventory is not the same as 2|whenever position is at most 2 you are able to build until finally b is equal to 2|once position is not equal to 0 you are able to use until inventory is greater than 2|a means that it would be good to do run if b x otherwise, if iron do use , or do run otherwise|if a is larger than 2 you have the choice to run until a is at most 1|b states that you should do use if iron is exactly the same as y otherwise, if b do run , or do use as a last resort|b means that it would be good to do build if a x otherwise, if position do run , or do use otherwise|as soon as position is not equal to 2 you have the option to jump until y|b suggests that it would be advantageous to do run if a is smaller than y otherwise, if position do find , or do use if not|when b is equal to 1 you are able to use until finally a|a means that it would be good to do build if b y otherwise, if b do jump , or do run otherwise|b is a good strategy where you should do jump if iron is exactly the same as x otherwise, if iron do find , or do build otherwise|as soon as y you have the option to jump until position is less than or equal to y|a is an approach where it would be good to do use if b is exactly the same as 2 otherwise, if iron do use , or do jump as a last resort|a is a tactic where it is good to do jump if iron is not equal to 0 otherwise, if iron do find , or do use otherwise|whenever position is exactly the same as x you have the choice to jump until a is at most 0|a means that it would be good to do build if iron is less than 0 otherwise, if a do use , or do jump as a last resort|a is a tactic where it is advantageous to do find if b is equal to 1 otherwise, if b do use , or do jump as a last resort|a entails that you do find if b otherwise, if position do use , or do use as a last resort|if inventory is less than or equal to 0 you have the choice to find until finally inventory is smaller than x|a is an approach where it would be good to do find if iron is not equal to 0 otherwise, if a do jump , or do run if not|a is a tactic where it is advantageous to do use if iron is less than 2 otherwise, if b do run , or do use otherwise|when position is not the same as 0 you have the choice to run until finally position is larger than 0|once b is at least 0 you can build until inventory is greater than or equal to 0|b is an approach where you do build if a is smaller than 2|b entails that you do build if position is smaller than x otherwise, if iron do use , or do run if not|b is a strategy where you do jump if iron otherwise, if position do use , or do jump if not|a entails that you do jump if position is larger than 0 , or do find if no other options are possible|a is an approach where you do use if iron is equal to x otherwise, if b do use , or do jump if no other options are possible|b is a tactic where it is advantageous to do build if a x otherwise, if b do use , or do build if not|a is an approach where it would be good to do use if iron x otherwise, if a do run , or do use if not|a is a tactic where it is good to do run if a y otherwise, if iron do find , or do use if not|a is an approach where you do build if iron is not equal to 0 otherwise, if iron do find , or do build if not|once inventory is smaller than y you can find until finally inventory is at most 2|a is a tactic where it is advantageous to do jump if a is greater than 0 otherwise, if b do find , or do build if not|b is a tactic where it is advantageous to do find if position otherwise, if b do run , or do find if not|once position is larger than 0 you have the option to find until finally b is equal to 1|a entails that you do run if iron y otherwise, if position do jump , or do jump otherwise|a is a good strategy where you should do run if iron y otherwise, if b do jump , or do run as a last resort|a is a strategy where you do run if b 2 otherwise, if iron do use , or do jump otherwise|a is a tactic where it is advantageous to do build if position is greater than 0 otherwise, if b do run , or do run if no other options are possible|whenever inventory is less than or equal to 2 you have the option to run until finally inventory is greater than or equal to 1|when b is exactly the same as 1 you are able to build until finally position is less than or equal to 1|a states that you should do build if iron is greater than 2 otherwise, if position do use , or do find otherwise|as soon as b is less than or equal to 1 you have the choice to build until finally a is less than y|as soon as b is equal to y you can build until finally position is greater than y|whenever b is less than or equal to y you can use until finally inventory is equal to 1|a is a good strategy where you should do build if b 2 otherwise, if position do find , or do use otherwise|when a is at least 0 you have the choice to use until position is at most 1|a is a tactic where it is advantageous to do jump if position 2 otherwise, if a do build , or do use if not|if a is greater than or equal to y you have the choice to use until finally a is not equal to 0|a is a tactic where it is advantageous to do find if a is not the same as y otherwise, if b do use , or do jump if not|a is an approach where you do run if a is exactly the same as x otherwise, if b do build , or do find otherwise|a means that it would be good to do find if position is less than 2 otherwise, if b do build , or do use if no other options are possible|as soon as position is at least 2 you are able to build until b is at least y|b suggests that it would be advantageous to do use if position is equal to y otherwise, if b do run , or do find if not|when position is not the same as 1 you can build until a is equal to 0|a is an approach where it would be good to do build if a is equal to 0 otherwise, if a do find , or do build if no other options are possible|b states that you should do jump if position is smaller than x otherwise, if b do use , or do run if not|whenever b is larger than 1 you are able to jump until finally inventory is exactly the same as 2|b is a tactic where it is advantageous to do jump if position x otherwise, if b do use , or do run otherwise|when inventory is smaller than x you have the choice to jump until finally inventory is greater than y|when position is equal to y you have the option to build until finally b is less than or equal to x|when position is at least 2 you can jump until finally a is equal to 0|b is a tactic where it is good to do find if position is smaller than x otherwise, if a do run , or do run otherwise|once position is not the same as 2 you can use until b is larger than 2|when a is equal to y you are able to find until b is larger than 2|b is an approach where you do jump if position is not the same as x otherwise, if position do run , or do build if no other options are possible|if position is at least x you are able to run until b is not equal to y|a states that you should do jump if iron 0 otherwise, if a do jump , or do jump as a last resort|whenever inventory is larger than y you have the option to find until position is larger than 2|a entails that you do build if b is larger than 1 otherwise, if position do find , or do use otherwise|whenever a is less than 1 you have the option to use until a is not the same as 1|as soon as b is at least 0 you can run until finally position is greater than or equal to 0|a is a tactic where it is advantageous to do build if position is equal to 1 otherwise, if a do use , or do use if not|b is a tactic where it is good to do build if iron is equal to x otherwise, if b do build , or do use otherwise|a states that you should do use if position is equal to 1 otherwise, if position do find , or do jump as a last resort|a is an approach where you do use if b is equal to x otherwise, if a do find , or do build as a last resort|when position is equal to 1 you have the option to build until position is less than or equal to 2|a suggests that it would be advantageous to do run if iron y otherwise, if b do jump , or do build as a last resort|once inventory is greater than or equal to x you have the choice to find until position is not equal to 0|when inventory is at most 0 you are able to jump until finally b is at most 0|a means that it would be good to do build if a is greater than 1 otherwise, if b do find , or do find as a last resort|as soon as position is greater than 1 you can build until inventory is less than or equal to x|a is a tactic where it is good to do build if position is equal to x otherwise, if b do jump , or do build if no other options are possible|b is an approach where it would be good to do run if a is greater than x otherwise, if position do find , or do jump if no other options are possible|a means that it would be good to do jump if b is smaller than 0 otherwise, if b do find , or do jump if no other options are possible|when inventory is larger than x you can build until inventory is greater than or equal to y|b is a tactic where it is good to do build if position is larger than y otherwise, if b do build , or do jump if not|whenever inventory is at least 1 you have the option to build until finally inventory is smaller than 1|when position is greater than x you are able to build until finally inventory is not the same as x|a states that you should do use if a is greater than x otherwise, if iron do use , or do build if not|when b is at most 2 you have the choice to find until finally a is at least 1|b is a tactic where it is advantageous to do jump if iron is equal to y otherwise, if position do find , or do use otherwise|a entails that you do build if position y otherwise, if position do build , or do run as a last resort|a is an approach where it would be good to do build if position is equal to y otherwise, if b do use , or do build if no other options are possible|whenever position is less than 0 you can jump until position is larger than 2|a is a strategy where you do jump if b is less than 2 otherwise, if position do find , or do jump otherwise|once b is larger than 0 you have the choice to jump until finally b is greater than or equal to 0|b means that it would be good to do build if b is less than y , or do run if no other options are possible|b is an approach where it would be good to do find if a is not equal to 2 otherwise, if iron do run , or do jump otherwise|when inventory is smaller than x you can find until finally inventory is smaller than 1|whenever position is greater than 0 you have the choice to use until a is greater than y|as soon as inventory is equal to y you have the option to run until finally y|once a is smaller than 1 you have the option to run until finally b is larger than y|once inventory is less than or equal to 2 you can jump until b is larger than 2|as soon as a is exactly the same as x you can jump until position is equal to 1|b is an approach where you do use if a otherwise, if position do jump , or do find otherwise|once inventory is exactly the same as y you are able to run until b is smaller than 0|whenever position is not the same as 1 you have the option to find until a is greater than x|when a is larger than 0 you are able to use until position is at least y|b is a good strategy where you should do run if position is exactly the same as y otherwise, if b do run , or do find otherwise|b is a tactic where it is good to do run if position is not the same as y otherwise, if a do use , or do find if no other options are possible|if a is not the same as 1 you can jump until finally a is equal to y|a means that it would be good to do build if position is greater than y otherwise, if iron do use , or do use otherwise|if position is not the same as 0 you have the choice to build until a is equal to 2|once inventory is not equal to 1 you can run until a is at most 0|a is a strategy where you do find if a is equal to 0 otherwise, if position do jump , or do find as a last resort|a is an approach where it would be good to do run if position is not equal to 1 otherwise, if a do build , or do use if not|b means that it would be good to do build if iron y otherwise, if a do find , or do use if not|b entails that you do find if iron x otherwise, if iron do jump , or do use if not|a is a tactic where it is good to do find if position is equal to x otherwise, if iron do jump , or do build otherwise|b is a strategy where you do find if a is exactly the same as 0 otherwise, if b do use , or do run if no other options are possible|a entails that you do find if b is smaller than 0 otherwise, if iron do use , or do run if no other options are possible|b is a tactic where it is advantageous to do find if iron is not the same as x otherwise, if a do find , or do jump as a last resort|if position is less than 2 you have the option to jump until position is smaller than 0|a is a strategy where you do jump if iron is exactly the same as 2 otherwise, if iron do use , or do run otherwise|a means that it would be good to do run if b 2 otherwise, if position do build , or do jump if no other options are possible|whenever a is equal to y you can find until finally b is exactly the same as 0|a entails that you do use if a is not equal to 0 otherwise, if b do use , or do use otherwise|as soon as a is greater than or equal to y you are able to run until finally a is equal to 0|a is an approach where you do use if position is exactly the same as y otherwise, if b do use , or do find if not|a is a good strategy where you should do run if iron 2 otherwise, if b do build , or do find if no other options are possible|a is a tactic where it is good to do find if a 2 otherwise, if a do jump , or do use as a last resort|when inventory is equal to 2 you can jump until a is greater than y|a is a tactic where it is advantageous to do jump if a is larger than 0 otherwise, if iron do build , or do use if not|whenever position is greater than x you have the option to use until inventory is at most 1|when b is at least 2 you have the choice to run until finally b is greater than or equal to x|whenever b is at most 0 you have the choice to use until finally inventory is not equal to 1|if inventory is equal to 2 you have the option to build until finally a is smaller than x|whenever a is less than or equal to y you have the choice to jump until position|once b is not equal to 2 you are able to jump until inventory is at most 0|a is an approach where you do run if iron is smaller than y otherwise, if b do run , or do jump as a last resort|when position is at most y you have the option to find until finally b is less than or equal to 1|a is a tactic where it is advantageous to do use if iron is exactly the same as x otherwise, if position do build , or do build as a last resort|a is a tactic where it is advantageous to do build if position is smaller than 2 otherwise, if b do run , or do jump as a last resort|if inventory is smaller than x you have the choice to jump until finally a is less than y|when inventory is larger than x you can run until a is less than or equal to 2|as soon as a you have the choice to run until finally a is greater than y|a suggests that it would be advantageous to do use if position is less than 2 , or do jump if no other options are possible|when inventory is exactly the same as y you have the choice to run until finally position is not the same as 1|a means that it would be good to do find if position is greater than 2 otherwise, if a do build , or do build as a last resort|b is a tactic where it is good to do jump if position y otherwise, if b do find , or do build if no other options are possible|whenever b is at least 0 you have the choice to use until position is exactly the same as 1|a means that it would be good to do find if iron is not equal to x otherwise, if position do run , or do run as a last resort|as soon as a is equal to y you are able to run until finally a is less than or equal to y|once b is larger than 0 you are able to run until position is at most y|b is a tactic where it is advantageous to do find if position y otherwise, if position do jump , or do jump as a last resort|a is a good strategy where you should do use if a 1 , or do build otherwise|a is a good strategy where you should do use if b is greater than y otherwise, if b do run , or do jump otherwise|b states that you should do build if b x otherwise, if iron do find , or do run as a last resort|b is a strategy where you do use if iron is larger than x otherwise, if a do build , or do jump if not|once a is greater than 1 you are able to jump until finally position is larger than 2|when position is greater than or equal to x you have the option to run until finally inventory is not the same as x|if inventory is less than or equal to 2 you are able to use until finally inventory is smaller than 2|as soon as a is less than or equal to 2 you are able to find until finally a is not equal to 2|once a is at least 1 you can jump until b is greater than or equal to x|a entails that you do run if b is equal to 0 otherwise, if b do build , or do find as a last resort|once position is not the same as 2 you have the option to find until finally inventory is not equal to 0|b is a tactic where it is advantageous to do use if b is not equal to x otherwise, if a do build , or do jump if no other options are possible|a entails that you do find if b is equal to 2 otherwise, if b do run , or do use if no other options are possible|b is an approach where you do build if iron is smaller than x otherwise, if iron do run , or do run as a last resort|when position is not equal to 1 you have the option to use until finally inventory is exactly the same as 2|b is an approach where you do use if a is not the same as 2 otherwise, if a do build , or do run if not|b suggests that it would be advantageous to do find if a is not the same as 2 otherwise, if iron do use , or do jump as a last resort|a is a tactic where it is advantageous to do jump if a y otherwise, if position do find , or do find as a last resort|if b is greater than 1 you can jump until position is exactly the same as 0|when a is larger than 2 you can find until position is less than x|a suggests that it would be advantageous to do find if position is not the same as 1 otherwise, if b do run , or do build otherwise|a is an approach where you do run if b 1 otherwise, if a do run , or do build if no other options are possible|b is a tactic where it is good to do find if position is greater than x otherwise, if position do run , or do find if not|when position is smaller than 0 you have the option to use until inventory is less than 1|b states that you should do run if iron is equal to x otherwise, if iron do find , or do use as a last resort|as soon as inventory is at least x you have the option to find until finally a is greater than or equal to 1|a is a tactic where it is good to do use if b x otherwise, if a do use , or do use if not|a is a tactic where it is advantageous to do find if position 1 otherwise, if iron do run , or do find if not|b is a tactic where it is good to do build if position is less than y otherwise, if iron do find , or do run otherwise|a entails that you do run if b 2 otherwise, if a do use , or do jump if no other options are possible|b states that you should do run if a is smaller than x otherwise, if iron do build , or do run as a last resort|once inventory is smaller than 0 you are able to jump until b is larger than 1|as soon as position is not equal to 0 you can build until position is less than or equal to 1|a means that it would be good to do jump if iron x otherwise, if iron do find , or do jump if not|b is an approach where you do use if b is greater than y otherwise, if a do use , or do run otherwise|a entails that you do find if iron x otherwise, if b do jump , or do run otherwise|whenever inventory is equal to 0 you can use until finally inventory is at most 2|a entails that you do use if b is greater than y|a is a tactic where it is good to do use if position x , or do use otherwise|a means that it would be good to do jump if b x otherwise, if iron do find , or do build otherwise|whenever a is at most 2 you are able to run until inventory|b is a tactic where it is good to do run if position is not equal to y otherwise, if position do build , or do run as a last resort|b is a tactic where it is advantageous to do build if position is not equal to 0 , or do jump if not|when inventory is not the same as 0 you can run until finally a is exactly the same as 2|a is a good strategy where you should do use if iron otherwise, if position do build , or do jump if no other options are possible|b is an approach where it would be good to do jump if position x otherwise, if a do build , or do jump if not|a is an approach where you do jump if a is equal to 0 otherwise, if a do jump , or do find if no other options are possible|whenever position is not equal to y you have the option to find until a is not equal to 2|once b is greater than y you are able to jump until finally b is less than 0|whenever inventory is greater than or equal to x you are able to use until inventory is smaller than 0|a entails that you do use if position x otherwise, if a do find , or do jump if no other options are possible|b is a tactic where it is good to do jump if iron is equal to x otherwise, if iron do use , or do build otherwise|whenever position is equal to 2 you are able to run until b is at least 1|when a is at least y you are able to find until finally inventory is not the same as 1|as soon as a is equal to 2 you have the choice to build until finally position is at least 0|once position is at most x you are able to build until finally a is equal to 0|a states that you should do jump if b is less than x otherwise, if b do find , or do use otherwise|a is a good strategy where you should do run if b is larger than 0 otherwise, if b do build , or do build if not|b entails that you do build if iron y otherwise, if b do build , or do build otherwise|whenever b is equal to 2 you are able to find until inventory is less than or equal to x|once b is at least 0 you can find until finally a is at least 0|once position is not equal to y you are able to jump until position is smaller than 0|a means that it would be good to do jump if position is less than 2 otherwise, if iron do find , or do build as a last resort|a is an approach where it would be good to do find if a is less than x , or do jump otherwise|a entails that you do use if position is not the same as 1 otherwise, if b do use , or do jump otherwise|if inventory you have the choice to build until a is at most 1|a is a strategy where you do use if b 2 otherwise, if iron do run , or do use if no other options are possible|once a is larger than 2 you have the option to find until inventory is equal to 1|when b is not the same as 2 you have the choice to use until finally position is equal to x|a is a good strategy where you should do build if a x otherwise, if b do build , or do find if not|a is a good strategy where you should do build if b is less than 0 otherwise, if position do find , or do run if no other options are possible|a suggests that it would be advantageous to do use if position otherwise, if iron do build , or do run if not|whenever a is less than 0 you can find until a is smaller than 2|a is an approach where it would be good to do use if b is less than 1 otherwise, if iron do use , or do find if no other options are possible|when position is greater than or equal to 1 you can jump until finally a is greater than or equal to x|a suggests that it would be advantageous to do find if iron is larger than 2 otherwise, if a do run , or do use if no other options are possible|a is a good strategy where you should do build if a otherwise, if b do find , or do jump otherwise|whenever b is not the same as 1 you can jump until finally position is equal to x|a is a good strategy where you should do run if a is not the same as 0 otherwise, if a do run , or do find if not|whenever b is at most 0 you have the choice to run until finally inventory is less than or equal to 2|b means that it would be good to do jump if position y otherwise, if a do jump , or do jump otherwise|as soon as b is at least 2 you have the option to build until finally b is less than 0|once b is at most y you have the option to use until finally position is not equal to 2|once a is greater than or equal to x you have the option to jump until inventory is equal to 1|b states that you should do jump if position is not the same as x otherwise, if b do build , or do jump if not|if position is less than or equal to y you have the option to find until finally b is smaller than y|once position is greater than y you can run until inventory is less than or equal to 2|a suggests that it would be advantageous to do run if a is greater than 1 otherwise, if iron do use , or do find if no other options are possible|b states that you should do use if iron is less than x otherwise, if position do find , or do use if no other options are possible|a suggests that it would be advantageous to do run if a is larger than x otherwise, if iron do jump , or do run if no other options are possible|as soon as inventory is equal to y you have the option to jump until finally b is less than or equal to x|a entails that you do build if a y otherwise, if a do run , or do build as a last resort|b entails that you do jump if position is exactly the same as x otherwise, if position do build , or do build if no other options are possible|whenever b is at least x you have the choice to run until finally position is at most 2|a suggests that it would be advantageous to do find if position otherwise, if position do jump , or do run if no other options are possible|as soon as b is larger than 2 you are able to find until b is exactly the same as 2|a suggests that it would be advantageous to do build if position 2 otherwise, if b do build , or do find as a last resort|once inventory is larger than 2 you have the choice to build until finally inventory is equal to y|b is a tactic where it is good to do find if a is not equal to 2 otherwise, if b do use , or do find if not|as soon as a is not equal to 0 you are able to build until finally b is larger than 0|whenever inventory is at least 2 you can find until finally a is larger than 1|whenever b is larger than 0 you can find until finally position is greater than or equal to x|as soon as inventory is greater than or equal to y you can use until finally position is greater than 2|as soon as position is at most 1 you are able to find until b is greater than 0|a is a good strategy where you should do find if position is larger than y otherwise, if b do jump , or do build if no other options are possible|a is an approach where it would be good to do build if iron 1 otherwise, if iron do jump , or do build if not|whenever y you can build until finally position is equal to y|b is an approach where it would be good to do build if a is greater than x otherwise, if a do jump , or do jump otherwise|a is a tactic where it is advantageous to do find if position is exactly the same as 2 otherwise, if a do find , or do jump otherwise|as soon as position is at most x you have the option to find until position is smaller than 2|a is an approach where it would be good to do build if a is larger than y otherwise, if b do find , or do run if not|once inventory is less than or equal to 0 you have the choice to find until finally a is equal to x|a is a good strategy where you should do run if a is greater than y otherwise, if iron do run , or do build if no other options are possible|a is a tactic where it is advantageous to do use if a 2 otherwise, if b do jump , or do find if no other options are possible|if position is not equal to 2 you have the option to jump until finally a is less than or equal to 1|when position is not the same as 0 you can find until position is less than 1|whenever a is greater than y you are able to jump until finally inventory is equal to x|a is a tactic where it is good to do jump if a is equal to 1 otherwise, if a do jump , or do build if not|a is a tactic where it is advantageous to do run if b is less than 0 otherwise, if iron do jump , or do use if no other options are possible|a is a tactic where it is good to do jump if position is exactly the same as x otherwise, if a do find , or do jump otherwise|once position is less than or equal to 0 you can find until finally b is equal to 1|b is a tactic where it is good to do run if position x otherwise, if b do run , or do run if not|a suggests that it would be advantageous to do find if position is less than 2 otherwise, if position do find , or do run if not|as soon as b is at least 0 you can find until finally a is at most 1|if inventory is exactly the same as 2 you can jump until inventory|if a is smaller than y you are able to build until finally a is at least 1|b is an approach where it would be good to do find if position y otherwise, if position do jump , or do run otherwise|b suggests that it would be advantageous to do run if a is less than x otherwise, if position do find , or do find as a last resort|b means that it would be good to do use if a is not the same as x otherwise, if b do run , or do jump otherwise|once b is not equal to 2 you can find until finally b is not the same as 2|a entails that you do jump if iron is greater than 2 otherwise, if iron do use , or do build as a last resort|a states that you should do jump if iron is equal to 1 otherwise, if b do find , or do build as a last resort|a is a strategy where you do find if iron is less than 2 otherwise, if position do build , or do run otherwise|a is a tactic where it is advantageous to do jump if b is equal to 0 otherwise, if b do find , or do run if no other options are possible|a is a strategy where you do jump if b is not equal to y otherwise, if iron do use , or do find if not|whenever b is less than y you are able to use until finally a is equal to 0|if b is greater than or equal to 0 you have the option to build until finally position is at least y|as soon as a is greater than or equal to y you have the choice to find until finally b is smaller than x|if inventory is greater than or equal to 0 you are able to find until finally a|when inventory is less than or equal to 2 you have the option to run until finally a is equal to y|b is a good strategy where you should do use if position is equal to y otherwise, if iron do use , or do run if not|a is a tactic where it is advantageous to do use if iron y otherwise, if iron do find , or do build as a last resort|as soon as inventory is equal to 0 you have the option to run until finally b is not the same as 2|once a is greater than or equal to 0 you have the choice to use until inventory is greater than y|b is a strategy where you do build if position is smaller than x otherwise, if a do use , or do jump otherwise|as soon as b is less than 0 you can build until finally position is not equal to x|a states that you should do run if iron is larger than 2 otherwise, if b do find , or do use if not|a is a tactic where it is advantageous to do jump if b otherwise, if iron do jump , or do find if no other options are possible|b is a tactic where it is good to do find if b y otherwise, if iron do find , or do use if not|a suggests that it would be advantageous to do jump if position is not the same as y otherwise, if a do jump , or do jump otherwise|b suggests that it would be advantageous to do build if a is equal to 1 otherwise, if a do use , or do use if not|a states that you should do jump if position is not the same as 0 otherwise, if iron do find , or do jump if no other options are possible|a entails that you do use if b is not equal to 1 otherwise, if position do jump , or do find otherwise|once inventory is equal to 1 you have the option to jump until finally b is less than y|if b is less than 2 you have the option to build until finally b is greater than 0|a is an approach where it would be good to do jump if a is not the same as x otherwise, if a do run , or do build otherwise|a is a tactic where it is advantageous to do run if position is not equal to x otherwise, if a do find , or do build if not|b is a tactic where it is good to do find if a otherwise, if b do use , or do find as a last resort|a is a good strategy where you should do jump if iron is not equal to 2 , or do find if not|a suggests that it would be advantageous to do run if a 2 otherwise, if iron do find , or do jump if no other options are possible|once x you are able to find until finally a is less than or equal to 1|b is a good strategy where you should do find if a x otherwise, if a do find , or do run if not|once position is less than or equal to 2 you have the choice to build until inventory is larger than 1|a means that it would be good to do find if iron is greater than 2 otherwise, if a do find , or do run if no other options are possible|if a is at most x you are able to use until b is exactly the same as 0|whenever position is at least 2 you are able to build until finally b is larger than 1|if b is at most 0 you are able to build until position is at most 1|when b is not the same as 1 you have the choice to build until b is at most x|as soon as b is exactly the same as 1 you can jump until finally position is not equal to x|b is a good strategy where you should do jump if a is not equal to x otherwise, if iron do jump , or do build if no other options are possible|if position is not the same as 1 you have the choice to run until finally inventory is greater than or equal to y|a is a tactic where it is good to do jump if position is smaller than x otherwise, if b do run , or do find if no other options are possible|a states that you should do use if iron is greater than x otherwise, if b do jump , or do find if not|when inventory is less than or equal to 0 you have the option to use until inventory is equal to 0|when inventory is not the same as 0 you have the option to run until a is less than or equal to x|a suggests that it would be advantageous to do find if iron is greater than 2 otherwise, if position do find , or do build as a last resort|once b is not the same as x you are able to build until inventory is greater than or equal to 0|if inventory is exactly the same as 2 you have the option to build until finally a is greater than y|a entails that you do run if b is less than 0 otherwise, if iron do use , or do build if not|b suggests that it would be advantageous to do jump if position is smaller than x otherwise, if b do run , or do jump as a last resort|whenever inventory is less than 1 you are able to find until a is larger than 0|as soon as b is equal to 2 you are able to run until finally b is greater than 0|if position is greater than or equal to 1 you can run until b is larger than 0|if position is greater than or equal to 2 you can use until a is smaller than 1|b means that it would be good to do jump if a x otherwise, if position do find , or do run as a last resort|a means that it would be good to do jump if a is smaller than y otherwise, if position do jump , or do use as a last resort|if position is greater than or equal to 2 you can jump until position is smaller than 0|whenever b is larger than x you are able to jump until finally a is equal to y|a is an approach where you do jump if position is not the same as 1 otherwise, if position do find , or do run as a last resort|if position is less than or equal to y you have the option to jump until finally inventory is greater than 2|a means that it would be good to do jump if iron is exactly the same as y otherwise, if a do use , or do run if not|a is a tactic where it is advantageous to do jump if iron is less than 1 otherwise, if iron do build , or do build as a last resort|when a is equal to y you can jump until b is at most x|a is a good strategy where you should do use if position x otherwise, if position do jump , or do use otherwise|if inventory is exactly the same as x you have the choice to build until finally a is larger than y|a entails that you do build if a 1 otherwise, if position do use , or do jump if no other options are possible|whenever inventory is greater than or equal to x you have the option to build until finally inventory is not equal to x|once a is not equal to 0 you have the option to use until finally b is at least 0|b entails that you do use if iron is larger than x otherwise, if position do jump , or do find otherwise|a is a good strategy where you should do build if a is larger than 1 otherwise, if iron do build , or do find otherwise|a is a good strategy where you should do use if a is less than 1 otherwise, if b do find , or do run if no other options are possible|a states that you should do jump if position x otherwise, if a do jump , or do build otherwise|as soon as inventory is not equal to y you can build until a is greater than 1|a states that you should do find if iron is less than y otherwise, if position do run , or do run as a last resort|once a is equal to 2 you have the option to jump until finally a is less than 2|a entails that you do find if a is equal to 2 otherwise, if iron do jump , or do run if not|a is a good strategy where you should do build if iron 0 otherwise, if position do use , or do find as a last resort|as soon as y you can build until finally b is greater than 2|b is an approach where it would be good to do jump if position is larger than x otherwise, if a do jump , or do find as a last resort|a states that you should do use if a is equal to 2 otherwise, if a do build , or do run otherwise|once inventory is not the same as 0 you have the option to run until position is at most x|a is a tactic where it is advantageous to do build if iron is less than x otherwise, if a do find , or do jump if no other options are possible|a suggests that it would be advantageous to do run if iron is smaller than 2 otherwise, if position do use , or do jump otherwise|whenever inventory is at most y you have the choice to run until finally inventory is larger than 2|a is a tactic where it is good to do find if position y otherwise, if iron do jump , or do run as a last resort|if position is not equal to 0 you can jump until finally inventory is less than or equal to x|a is a strategy where you do jump if b y otherwise, if iron do jump , or do jump if no other options are possible|a is an approach where you do use if position is not the same as x otherwise, if iron do jump , or do run as a last resort|if position is not equal to 2 you have the option to build until finally a is not equal to 2|once position is at most 2 you are able to build until finally inventory is larger than x|b is a tactic where it is good to do use if iron y otherwise, if iron do jump , or do find as a last resort|if b is greater than or equal to y you have the choice to build until finally a is less than 0|if inventory is larger than 0 you can find until inventory|when position is larger than x you are able to run until a is larger than x|a entails that you do find if iron is equal to 1 otherwise, if b do build , or do build as a last resort|b entails that you do jump if iron is not the same as y otherwise, if a do run , or do run if no other options are possible|when inventory is less than or equal to y you are able to find until position is smaller than y|as soon as inventory is less than 0 you can run until finally position is greater than y|b is an approach where you do use if position is equal to x otherwise, if b do build , or do run if not|a is a tactic where it is good to do run if b 2 otherwise, if a do build , or do build if no other options are possible|when a is not equal to x you can run until finally a is not equal to x|b suggests that it would be advantageous to do use if iron is larger than x otherwise, if iron do build , or do find if no other options are possible|a suggests that it would be advantageous to do find if position is larger than y otherwise, if b do run , or do build otherwise|a is a tactic where it is advantageous to do use if a 0 otherwise, if a do build , or do find if no other options are possible|once inventory is equal to 0 you have the option to use until finally b is larger than 1|once position is at least 1 you have the option to find until b is larger than y|a is a good strategy where you should do run if position is greater than y otherwise, if b do use , or do build if no other options are possible|as soon as y you have the choice to find until position is not the same as y|b is a good strategy where you should do use if a is smaller than 2 otherwise, if a do jump , or do run as a last resort|a is an approach where you do build if a is less than x otherwise, if position do find , or do use if not|as soon as position is smaller than 1 you can run until finally b is not the same as 2|a is a strategy where you do jump if a is not the same as y otherwise, if a do use , or do jump if no other options are possible|a states that you should do use if b is greater than 1 otherwise, if position do run , or do run if no other options are possible|a means that it would be good to do jump if position y otherwise, if iron do find , or do find otherwise|a is a tactic where it is good to do run if b 1 otherwise, if b do jump , or do jump if no other options are possible|whenever a is not equal to y you have the option to find until position is greater than 2|when inventory is greater than or equal to 2 you are able to run until finally inventory is at least 2|a means that it would be good to do build if iron is larger than y otherwise, if position do jump , or do jump if no other options are possible|b states that you should do find if a is equal to y otherwise, if b do jump , or do build if no other options are possible|a means that it would be good to do run if iron is larger than 0 otherwise, if a do run , or do jump as a last resort|a is an approach where it would be good to do jump if position y otherwise, if a do jump , or do build if no other options are possible|once inventory is not equal to 2 you have the option to use until finally inventory is equal to 1|if inventory is exactly the same as 2 you are able to run until finally inventory is greater than 2|b is a good strategy where you should do use if a is equal to 0 otherwise, if b do find , or do run if not|a is a tactic where it is good to do build if iron is less than 2 otherwise, if b do use , or do run otherwise|whenever b is greater than 0 you are able to build until a is greater than or equal to 2|whenever a is equal to 0 you have the option to jump until finally b is at least y|a is a tactic where it is good to do find if a 2 , or do jump as a last resort|once inventory is less than or equal to x you have the option to run until finally b is greater than x|a is a tactic where it is good to do use if b is smaller than 0 otherwise, if position do run , or do find as a last resort|as soon as position is not equal to 1 you are able to build until finally a is not equal to 1|if a is at most 2 you can find until finally position is at least x|a is a good strategy where you should do use if iron x otherwise, if iron do build , or do jump if no other options are possible|a is an approach where you do run if a y otherwise, if b do use , or do jump if not|as soon as inventory is larger than y you have the option to find until finally position is less than or equal to 2|a is a tactic where it is advantageous to do build if position is not the same as 1 , or do build otherwise|as soon as b is greater than 1 you are able to run until finally inventory is greater than or equal to x|if position is not the same as 2 you are able to find until b is greater than y|a is a tactic where it is good to do jump if position 1 otherwise, if b do run , or do run if not|if inventory is at most 0 you can build until position is equal to 1|when b is exactly the same as 0 you have the choice to build until finally b is at most x|once b is not equal to 2 you have the option to build until finally a is exactly the same as x|whenever a is at least y you have the option to jump until inventory is equal to 2|once b is larger than 0 you have the choice to jump until position is smaller than x|if a is smaller than 0 you have the option to jump until finally position is not the same as 1|when b is less than 1 you are able to jump until finally b is equal to x|b is an approach where you do jump if position is larger than x otherwise, if a do use , or do jump if no other options are possible|if inventory is exactly the same as 2 you have the option to find until inventory is larger than 1|a is a strategy where you do run if a x otherwise, if b do run , or do use if not|once position is exactly the same as y you have the option to run until b is greater than y|a is a strategy where you do find if iron 1 , or do find if no other options are possible|b means that it would be good to do find if a is smaller than x otherwise, if iron do use , or do use otherwise|a suggests that it would be advantageous to do use if iron is larger than y otherwise, if b do use , or do jump as a last resort|a is a strategy where you do run if position 0 otherwise, if a do use , or do build if no other options are possible|when b is larger than 1 you have the option to jump until b is not equal to x|a is a strategy where you do find if position otherwise, if a do use , or do find otherwise|b is a tactic where it is good to do use if b is smaller than 2|once b you have the option to find until finally position is smaller than 1|b is a good strategy where you should do find if position is not the same as y otherwise, if position do jump , or do run as a last resort|when a is less than 2 you are able to build until a is smaller than 2|b is a tactic where it is good to do use if a y , or do find otherwise|a means that it would be good to do run if iron is larger than y otherwise, if b do build , or do run otherwise|b is an approach where it would be good to do use if position is equal to x otherwise, if position do find , or do find otherwise|a is a tactic where it is advantageous to do use if position is less than 0 otherwise, if iron do build , or do run if not|a is a tactic where it is advantageous to do build if b is smaller than 0 otherwise, if position do find , or do build as a last resort|once b is greater than or equal to 0 you can find until b is smaller than 2|whenever position is not the same as 0 you have the choice to build until inventory is less than x|as soon as a is exactly the same as 2 you have the option to use until a is at least y|once position is greater than 0 you are able to find until inventory is greater than x|a is an approach where it would be good to do find if a is not the same as 1 otherwise, if a do build , or do use as a last resort|b is an approach where you do run if a is equal to y otherwise, if position do find , or do use as a last resort|if b is equal to 2 you are able to find until b is at least x|a suggests that it would be advantageous to do use if a is larger than 2 otherwise, if a do build , or do jump as a last resort|once b is equal to 2 you have the option to find until finally position is greater than 0|a is a good strategy where you should do use if position 1 otherwise, if position do jump , or do find otherwise|a is a tactic where it is advantageous to do find if iron 2 otherwise, if a do jump , or do run if not|a is an approach where it would be good to do jump if b is not the same as 2 otherwise, if a do find , or do find if not|once a is exactly the same as x you can jump until finally position is at least 0|whenever position is not equal to x you have the choice to use until inventory is less than or equal to 2|a is a good strategy where you should do use if iron 1 otherwise, if iron do use , or do find otherwise|whenever position is less than or equal to y you have the choice to build until finally inventory is smaller than x|a entails that you do find if position is less than x otherwise, if position do jump , or do use as a last resort|as soon as position you are able to find until a is greater than 2|once a is greater than x you have the choice to build until finally inventory is at least 1|a is an approach where it would be good to do find if a is equal to y otherwise, if position do run , or do find otherwise|a is an approach where you do jump if iron 0 otherwise, if a do run , or do jump otherwise|a means that it would be good to do find if b is less than y otherwise, if position do run , or do jump as a last resort|b is a tactic where it is advantageous to do build if a is not equal to x otherwise, if position do build , or do find if no other options are possible|when position you are able to build until position is exactly the same as 1|b means that it would be good to do use if b y , or do run as a last resort|once b is smaller than x you have the choice to run until inventory is not the same as y|when inventory is not the same as 2 you are able to build until position is smaller than 2|b means that it would be good to do build if a is equal to x otherwise, if a do use , or do find if no other options are possible|as soon as inventory is not equal to 1 you can find until a is less than or equal to 1|if b is not equal to 2 you are able to use until position is at least 1|a is an approach where you do build if b otherwise, if position do build , or do build if no other options are possible|once inventory is less than 1 you have the choice to jump until finally position is greater than or equal to 2|b states that you should do build if position x otherwise, if a do find , or do run as a last resort|b is a good strategy where you should do run if b is greater than x otherwise, if position do find , or do find if not|as soon as b is smaller than 0 you can run until a is at most 0|when a is smaller than x you have the option to find until finally inventory is less than x|when position is at least 0 you are able to run until position is at least x|a suggests that it would be advantageous to do jump if position is smaller than x otherwise, if b do use , or do use if no other options are possible|b means that it would be good to do use if iron is less than y otherwise, if position do build , or do run if no other options are possible|b suggests that it would be advantageous to do find if b is smaller than x , or do find otherwise|a is a tactic where it is advantageous to do use if iron 2 otherwise, if b do find , or do find otherwise|b is a tactic where it is good to do find if b otherwise, if position do use , or do jump as a last resort|a entails that you do jump if position is not equal to 2 otherwise, if b do build , or do run as a last resort|a suggests that it would be advantageous to do use if position is not equal to 0 otherwise, if a do run , or do run as a last resort|a is an approach where you do use if iron is equal to x otherwise, if b do find , or do find if no other options are possible|b is a good strategy where you should do jump if a is not equal to 2 otherwise, if b do find , or do use otherwise|a means that it would be good to do use if a 2 otherwise, if position do build , or do run if no other options are possible|whenever b is greater than x you have the option to jump until y|whenever b is less than 2 you have the option to run until finally b is greater than or equal to y|b means that it would be good to do build if b y otherwise, if b do build , or do jump if not|a is an approach where you do run if b is less than 2 otherwise, if position do use , or do jump otherwise|b entails that you do find if a is less than 2 otherwise, if a do build , or do jump otherwise|when inventory is less than or equal to y you are able to find until b is exactly the same as x|a means that it would be good to do find if iron is greater than 0 otherwise, if position do find , or do jump as a last resort|b suggests that it would be advantageous to do run if a is not equal to y otherwise, if position do find , or do use if not|b is an approach where it would be good to do use if b is less than x otherwise, if position do build , or do use as a last resort|if a is greater than or equal to 1 you are able to use until finally inventory is greater than or equal to y|as soon as a is at least y you are able to jump until inventory is exactly the same as 1|b is an approach where it would be good to do use if position y|when a is exactly the same as 2 you can run until finally inventory is not the same as x|as soon as b is at least 1 you have the choice to build until finally a is at least y|as soon as inventory is not the same as y you are able to use until a is equal to x|b is an approach where you do jump if position is larger than 0 , or do run otherwise|once position is less than or equal to 0 you are able to jump until position is exactly the same as y|a suggests that it would be advantageous to do run if b is less than 2 , or do build as a last resort|as soon as a is larger than x you have the choice to build until position is less than 1|once inventory is less than 0 you have the option to find until finally b is smaller than x|if inventory is exactly the same as y you can jump until finally b is smaller than x|b states that you should do jump if a is smaller than 1 otherwise, if b do run , or do build if no other options are possible|a is a tactic where it is advantageous to do find if a is larger than 2 otherwise, if iron do find , or do run if not|when b is larger than 2 you can build until finally position is greater than or equal to 2|once position is exactly the same as 2 you have the choice to use until inventory is smaller than x|a is a tactic where it is advantageous to do use if b y otherwise, if b do find , or do jump as a last resort|a states that you should do jump if b is greater than x otherwise, if position do run , or do run otherwise|a means that it would be good to do jump if iron is greater than 1 otherwise, if iron do jump , or do run if not|b states that you should do build if b is larger than y otherwise, if a do use , or do build as a last resort|b means that it would be good to do build if position y otherwise, if a do find , or do run as a last resort|when b is greater than or equal to x you can jump until finally inventory is exactly the same as 2|b states that you should do jump if iron is exactly the same as y otherwise, if position do run , or do build otherwise|a is an approach where it would be good to do build if a is larger than y otherwise, if b do jump , or do find as a last resort|when b is smaller than y you are able to use until inventory is larger than 0|as soon as b is larger than 1 you are able to build until inventory is exactly the same as x|a is a strategy where you do jump if a is not the same as 1 otherwise, if iron do find , or do find if not|b means that it would be good to do jump if iron is smaller than y otherwise, if b do use , or do build otherwise|when a is equal to 0 you have the choice to use until a is equal to 0|as soon as position is at least y you can build until finally position is less than or equal to 1|whenever b is not equal to x you have the choice to use until finally position is less than or equal to 1|b is a tactic where it is advantageous to do find if iron is less than y otherwise, if position do jump , or do jump if not|if b is exactly the same as 1 you have the choice to build until finally position is greater than or equal to 1|a states that you should do find if position x , or do find as a last resort|a entails that you do jump if iron is equal to x otherwise, if position do find , or do use if not|b states that you should do build if iron y otherwise, if position do jump , or do jump as a last resort|a suggests that it would be advantageous to do jump if a is larger than 2 , or do build otherwise|a means that it would be good to do find if a is not the same as 1 otherwise, if position do jump , or do run if no other options are possible|a is a tactic where it is good to do find if position is greater than y otherwise, if b do find , or do find if no other options are possible|when a you have the option to find until finally x|a suggests that it would be advantageous to do run if b y otherwise, if a do use , or do jump otherwise|a is a good strategy where you should do run if b is not equal to y , or do build if no other options are possible|a is an approach where you do jump if b is equal to x otherwise, if iron do run , or do jump if no other options are possible|whenever a is larger than 0 you are able to use until finally a is greater than 0|a is an approach where you do build if position is larger than 2 otherwise, if b do find , or do run if not|b is an approach where you do find if b is smaller than x otherwise, if iron do jump , or do use if no other options are possible|b means that it would be good to do use if position is larger than x otherwise, if b do jump , or do use if not|a is a tactic where it is good to do build if position is not the same as 0 otherwise, if a do use , or do find if no other options are possible|b means that it would be good to do jump if b y otherwise, if a do run , or do find if not|as soon as a is equal to x you have the option to build until inventory is greater than x|as soon as b is not equal to 0 you have the choice to build until finally inventory is less than or equal to x|b is a tactic where it is good to do use if b is larger than x otherwise, if a do use , or do use if no other options are possible|b is an approach where you do jump if a is not equal to y otherwise, if a do find , or do jump as a last resort|a states that you should do run if b is larger than x otherwise, if iron do build , or do build if no other options are possible|once position is larger than x you are able to use until a is equal to 0|when position is less than 0 you can jump until inventory is smaller than y|a is an approach where you do find if iron is equal to 2 otherwise, if a do use , or do find if not|a entails that you do jump if b 1 otherwise, if iron do run , or do jump as a last resort|a is a good strategy where you should do jump if b is larger than 1 otherwise, if iron do use , or do use as a last resort|if a is smaller than 0 you can jump until finally b is exactly the same as 0|b states that you should do find if b is not the same as x otherwise, if iron do find , or do build if no other options are possible|b is an approach where it would be good to do run if iron x otherwise, if a do build , or do use if not|as soon as a is at most y you have the option to run until inventory is greater than or equal to x|if a is at most y you are able to use until inventory is not the same as 1|b is a strategy where you do build if a is exactly the same as y otherwise, if b do jump , or do run if not|b is a tactic where it is good to do run if position is not the same as x otherwise, if b do run , or do run as a last resort|a is an approach where you do build if position is not equal to 2 otherwise, if position do jump , or do find if no other options are possible|if a is smaller than x you can find until b is not equal to x|a states that you should do run if iron is equal to 1 otherwise, if position do use , or do build if no other options are possible|whenever a is at most x you have the choice to run until finally position is equal to x|whenever inventory is less than or equal to 1 you can build until finally inventory is equal to y|as soon as position is at most 2 you have the choice to run until finally b is not the same as 0|b is an approach where you do jump if iron is greater than x otherwise, if a do build , or do build as a last resort|when a is less than or equal to y you are able to build until b is less than or equal to y|when b is greater than or equal to x you can find until finally inventory is smaller than 0|whenever a is greater than y you are able to find until finally inventory is greater than 1|once b is greater than 2 you are able to jump until b is equal to 1|b states that you should do jump if a otherwise, if a do run , or do use otherwise|whenever a is smaller than 2 you have the choice to jump until finally inventory is not equal to 0|b is a strategy where you do use if position is equal to y otherwise, if iron do build , or do run if not|when a is greater than 1 you have the choice to run until b is not equal to 1|when inventory is larger than y you can use until finally a is at least 1|whenever position is greater than or equal to x you have the choice to run until a is less than or equal to y|once position is not equal to 1 you have the option to find until inventory is less than y|as soon as inventory is less than or equal to 0 you have the option to build until a is at most x|a is a tactic where it is good to do run if b is not equal to 1 otherwise, if a do build , or do jump if no other options are possible|b states that you should do find if position x otherwise, if b do run , or do jump if no other options are possible|a suggests that it would be advantageous to do find if a is not equal to x otherwise, if b do find , or do use if not|as soon as position is not equal to 0 you have the option to jump until finally a is smaller than 1|if position is at least 0 you have the choice to build until finally a is smaller than 0|when b is equal to 2 you have the choice to build until a is not equal to 2|a is a tactic where it is good to do run if b 0 otherwise, if a do use , or do find otherwise|a is a tactic where it is good to do find if a 2 otherwise, if a do find , or do build if no other options are possible|a is an approach where it would be good to do run if b is not the same as 2 otherwise, if b do build , or do jump as a last resort|once inventory is equal to 1 you can use until inventory is not the same as 1|a entails that you do build if b y otherwise, if iron do find , or do jump as a last resort|a is a tactic where it is good to do find if iron is larger than 0 otherwise, if iron do use , or do build if no other options are possible|a means that it would be good to do run if position is not equal to 1 otherwise, if a do jump , or do build otherwise|if inventory is greater than or equal to 1 you are able to jump until finally a is smaller than 1|a is a tactic where it is advantageous to do build if a is exactly the same as 0 otherwise, if b do find , or do jump as a last resort|b is an approach where it would be good to do jump if position is exactly the same as 0 , or do run otherwise|whenever inventory is less than 1 you have the option to run until inventory is less than or equal to x|a is a tactic where it is advantageous to do find if position 1 otherwise, if a do use , or do find as a last resort|once position is not equal to 1 you have the choice to build until finally a is not the same as 2|if inventory is at least x you can run until a is greater than 0|if b is exactly the same as y you can find until finally position is not equal to 0|once a is equal to 0 you are able to jump until finally inventory is smaller than 0|when a is not equal to 0 you are able to build until a is less than 2|if inventory is equal to 2 you can run until finally a is at most 0|b states that you should do find if a is not the same as 0 otherwise, if position do run , or do use as a last resort|when inventory is less than 1 you can jump until finally position is smaller than x|whenever position is greater than x you have the option to use until finally b is exactly the same as 0|when position is less than 1 you have the option to use until b is smaller than x|as soon as inventory is not the same as y you have the option to find until finally inventory is not the same as 2|a entails that you do jump if a x otherwise, if a do find , or do use otherwise|b is a tactic where it is advantageous to do use if a is smaller than 0 otherwise, if b do use , or do build if no other options are possible|a suggests that it would be advantageous to do build if a is equal to x otherwise, if a do find , or do jump as a last resort|whenever inventory is greater than or equal to 2 you can build until finally a is equal to x|when position is less than or equal to 0 you have the option to find until a is less than or equal to x|a entails that you do build if b is smaller than 0 otherwise, if a do find , or do build as a last resort|a is a good strategy where you should do run if iron 2 otherwise, if b do build , or do use otherwise|whenever inventory is greater than or equal to y you are able to find until inventory is larger than x|b means that it would be good to do jump if position x otherwise, if b do build , or do run as a last resort|when inventory is less than or equal to y you are able to jump until finally b|b suggests that it would be advantageous to do run if a is larger than y otherwise, if b do find , or do build if not|if position is greater than x you can run until inventory is equal to 1|if position is smaller than 1 you have the option to run until finally b is equal to 2|whenever position is not equal to 1 you are able to find until a is not the same as x|when a is exactly the same as y you can build until inventory is at most y|a is an approach where it would be good to do find if position 0 , or do find otherwise|b is an approach where you do build if iron is greater than x otherwise, if iron do find , or do build if no other options are possible|a is an approach where it would be good to do build if position is larger than 2 otherwise, if position do jump , or do jump if no other options are possible|a is a tactic where it is good to do run if iron is exactly the same as 2 otherwise, if iron do build , or do build otherwise|once position is not the same as y you have the option to use until finally position is greater than x|once b is less than 1 you can jump until finally b is not the same as y|a is a tactic where it is good to do find if iron 2 otherwise, if b do jump , or do build if not|a states that you should do use if iron is not equal to y otherwise, if position do run , or do run if not|b states that you should do jump if a is not the same as 1 otherwise, if position do run , or do jump if no other options are possible|a states that you should do use if a is larger than 0 otherwise, if position do find , or do run as a last resort|b suggests that it would be advantageous to do use if position y otherwise, if a do run , or do run as a last resort|whenever position is not equal to 1 you are able to find until finally a is at least y|if position is greater than 2 you have the choice to run until a is less than or equal to y|a suggests that it would be advantageous to do use if a is exactly the same as y otherwise, if a do build , or do jump if not|a means that it would be good to do run if a is not the same as x otherwise, if iron do find , or do find if no other options are possible|as soon as b is greater than 0 you are able to run until b is not the same as x|a entails that you do build if iron y otherwise, if b do use , or do use if no other options are possible|b entails that you do run if a is not equal to 0 otherwise, if position do find , or do build otherwise|whenever b is greater than or equal to 1 you can build until finally b is exactly the same as x|once a is smaller than 1 you can run until finally b is at least x|whenever a is greater than 0 you can jump until a is less than or equal to y|b states that you should do build if a y otherwise, if b do use , or do run if no other options are possible|as soon as y you have the choice to find until a is equal to y|whenever x you have the option to find until finally inventory is larger than 1|as soon as inventory is at most y you have the choice to find until finally a is greater than 1|once a is less than 1 you have the option to find until b is less than or equal to 2|a is a tactic where it is advantageous to do jump if iron is larger than 1 otherwise, if iron do find , or do use if no other options are possible|as soon as inventory is not the same as x you are able to use until finally inventory is exactly the same as 1|a states that you should do use if position is larger than 2 otherwise, if b do build , or do run if no other options are possible|b suggests that it would be advantageous to do find if iron is smaller than x otherwise, if position do use , or do find as a last resort|once a is less than or equal to 0 you are able to use until finally position is equal to 0|when position is less than 2 you can jump until a is not the same as x|if inventory is equal to x you are able to use until a is less than x|a entails that you do run if iron is not equal to 1 otherwise, if b do run , or do run otherwise|once a is larger than 2 you can find until b is larger than 2|once b is at least 0 you have the option to use until finally b is not the same as x|when b is less than or equal to 1 you are able to find until position is less than y|whenever position is exactly the same as x you are able to jump until inventory is less than 0|b is a tactic where it is good to do run if iron is less than y otherwise, if a do run , or do jump as a last resort|a means that it would be good to do run if a is equal to 1 otherwise, if a do build , or do find if no other options are possible|b is an approach where it would be good to do jump if position is not the same as x otherwise, if b do build , or do build if no other options are possible|a is a tactic where it is advantageous to do build if a 2 otherwise, if a do find , or do jump as a last resort|a entails that you do run if iron is greater than 0 otherwise, if position do find , or do find if no other options are possible|as soon as a is greater than or equal to x you have the option to jump until inventory is larger than 0|a states that you should do find if a is less than y otherwise, if iron do use , or do jump as a last resort|when b is smaller than x you can jump until finally position|as soon as inventory is not the same as 1 you can build until finally b is smaller than 1|a is a tactic where it is advantageous to do use if position 1 , or do use as a last resort|when inventory is at most 0 you have the option to build until inventory is at most 1|if position is exactly the same as 2 you have the choice to use until b is exactly the same as x|once position is greater than 2 you are able to run until inventory is greater than or equal to y|when b is at most 2 you have the option to find until inventory is less than 0|a is a strategy where you do jump if a 2 otherwise, if a do build , or do build as a last resort|a suggests that it would be advantageous to do run if b 1 otherwise, if position do find , or do jump otherwise|if inventory is smaller than 0 you have the choice to jump until position is larger than y|whenever inventory is equal to y you can jump until finally position is less than y|a is a tactic where it is advantageous to do build if position y otherwise, if a do use , or do jump if no other options are possible|a suggests that it would be advantageous to do find if b is exactly the same as 2 otherwise, if b do find , or do find if no other options are possible|a entails that you do jump if iron is exactly the same as 1 otherwise, if a do run , or do build if no other options are possible|once position is greater than 0 you can use until a is smaller than 2|b is an approach where it would be good to do jump if iron y otherwise, if a do use , or do jump otherwise|a is an approach where you do find if iron is larger than 1 otherwise, if a do run , or do build if no other options are possible|when inventory is less than 0 you can jump until finally inventory is not the same as x|a is a tactic where it is good to do find if b is not equal to 2 otherwise, if a do find , or do find if not|when b is not the same as y you have the option to jump until b is greater than or equal to 2|whenever a is greater than 0 you have the option to jump until inventory is not the same as x|whenever a is at most y you are able to use until finally a is at least x|as soon as position is exactly the same as y you have the option to build until finally position is equal to 1|whenever position is less than x you have the choice to use until b is equal to x|once inventory is less than or equal to 2 you are able to use until finally a is at least y|a suggests that it would be advantageous to do jump if b x otherwise, if b do find , or do run if no other options are possible|whenever inventory is greater than 2 you have the option to jump until finally inventory|whenever inventory is exactly the same as y you can run until b is at least 1|when position is greater than or equal to x you have the option to run until finally position is smaller than 1|as soon as b is exactly the same as 2 you are able to jump until finally inventory is not equal to x|whenever a is equal to 2 you can run until inventory is not the same as 2|as soon as inventory is not the same as 1 you have the option to run until position is larger than y|if b is less than or equal to 0 you can jump until finally a is at most 2|a means that it would be good to do find if b is greater than 2 otherwise, if b do use , or do use as a last resort|if a is not equal to 0 you can find until position is smaller than 1|when a is smaller than x you are able to use until inventory is at least 2|a is an approach where you do build if b is larger than 0 otherwise, if b do build , or do build as a last resort|a is an approach where it would be good to do find if position is exactly the same as 2 otherwise, if iron do build , or do find if no other options are possible|whenever a is not the same as y you are able to run until a is larger than y|a is an approach where you do find if position y otherwise, if a do build , or do use if not|whenever b is greater than y you have the option to run until inventory is greater than x|a is a strategy where you do build if position 0 otherwise, if b do find , or do use if not|when inventory is at least 1 you are able to jump until finally b is at least 2|a is a good strategy where you should do run if iron is equal to 0 otherwise, if b do use , or do find if not|b means that it would be good to do build if b 0|when a is greater than or equal to 0 you have the option to jump until position is smaller than 0|when inventory is not equal to 1 you are able to use until inventory is greater than 1|once b is greater than y you are able to find until a is at most 2|as soon as position is at least 0 you are able to use until inventory is less than 1|a suggests that it would be advantageous to do run if iron is equal to 1|once b is at least y you have the choice to jump until inventory is equal to 1|once b is not equal to 1 you are able to build until a is less than x|whenever inventory is greater than x you have the choice to run until b is not equal to 1|a is a good strategy where you should do jump if a is larger than y otherwise, if b do run , or do build if not|b is an approach where you do use if iron is smaller than y otherwise, if position do find , or do find as a last resort|a is a tactic where it is good to do jump if b otherwise, if iron do build , or do run if not|a states that you should do use if a is exactly the same as x otherwise, if a do use , or do jump if no other options are possible|once a is exactly the same as 2 you are able to use until b is greater than 2|a entails that you do jump if position is less than 2 otherwise, if iron do build , or do find if no other options are possible|if a is at most 0 you can use until inventory is larger than 2|a entails that you do run if iron is equal to x otherwise, if a do run , or do run otherwise|whenever inventory is at least x you have the option to jump until finally b|as soon as b is greater than or equal to x you can find until b is greater than or equal to x|b is a good strategy where you should do jump if iron is larger than x otherwise, if b do use , or do run as a last resort|whenever b is equal to x you have the option to find until a is less than 2|a is an approach where it would be good to do run if a otherwise, if b do build , or do run if no other options are possible|if position is greater than 0 you have the option to build until a is greater than or equal to y|as soon as position is larger than 2 you are able to run until finally b is less than or equal to y|a states that you should do find if position is not the same as 2 otherwise, if b do jump , or do jump if not|once a is at least y you have the option to run until b is not the same as 0|if b is less than y you have the choice to use until finally b is at least 1|a is an approach where you do build if a is exactly the same as 1 , or do find if not|a is a tactic where it is good to do build if iron is equal to x otherwise, if b do build , or do jump if no other options are possible|when b is at least 1 you have the choice to find until inventory is less than or equal to 0|a is a tactic where it is good to do run if position 2 otherwise, if b do jump , or do build if no other options are possible|as soon as position is equal to 0 you can run until finally position|a is a tactic where it is advantageous to do find if b y otherwise, if b do find , or do build as a last resort|a is an approach where it would be good to do jump if a is smaller than 2 otherwise, if iron do build , or do jump if no other options are possible|a is an approach where it would be good to do find if iron x otherwise, if iron do jump , or do jump if not|b is a good strategy where you should do run if b is smaller than x otherwise, if b do jump , or do run if no other options are possible|b entails that you do use if a is not the same as 2 otherwise, if a do jump , or do use if no other options are possible|as soon as position is not equal to x you have the choice to jump until finally position is equal to x|a means that it would be good to do find if position is greater than x otherwise, if a do jump , or do run if no other options are possible|as soon as position is not equal to y you are able to use until finally inventory is smaller than 0|a is an approach where you do use if a is not equal to 0 otherwise, if position do use , or do jump if no other options are possible|b entails that you do run if a is less than 1 otherwise, if iron do run , or do jump as a last resort|b suggests that it would be advantageous to do jump if a is less than 0 otherwise, if position do use , or do jump as a last resort|once b is smaller than y you have the choice to build until b is not the same as 2|if b is at least x you can run until b is at least 1|a is a tactic where it is good to do jump if a is exactly the same as y otherwise, if b do run , or do jump if no other options are possible|when a is larger than 1 you are able to run until finally b is not equal to x|a is a tactic where it is good to do build if position is greater than y otherwise, if b do run , or do jump otherwise|if position is not equal to y you can run until finally a is not equal to 2|once position is greater than x you are able to use until finally a is at least x|if b is not the same as x you have the option to jump until finally inventory is smaller than 2|a is a tactic where it is advantageous to do run if b is larger than 2 otherwise, if iron do run , or do run if no other options are possible|b suggests that it would be advantageous to do find if b is less than x otherwise, if b do use , or do build otherwise|a is a strategy where you do use if b is equal to 1 otherwise, if iron do find , or do use if no other options are possible|once inventory is at least 0 you have the option to jump until a is smaller than 0|a is an approach where you do find if a y otherwise, if b do jump , or do find if not|if position is less than 2 you can build until inventory is less than 2|whenever a is larger than 0 you have the option to run until finally inventory is greater than 0|a is a tactic where it is good to do build if position is not equal to 2 otherwise, if position do run , or do jump as a last resort|a is an approach where you do run if b is exactly the same as 1 otherwise, if b do run , or do build if not|a is a tactic where it is good to do build if position is not equal to 2 , or do run if not|once inventory is smaller than y you can run until inventory is at least 1|b means that it would be good to do use if b is not the same as y otherwise, if iron do build , or do find as a last resort|a suggests that it would be advantageous to do use if position is larger than 2 otherwise, if position do use , or do build if no other options are possible|whenever position is less than or equal to 1 you have the option to run until finally position is not equal to 0|when inventory is exactly the same as 2 you have the choice to build until finally a is less than or equal to 0|a is an approach where it would be good to do build if a y otherwise, if a do jump , or do build if no other options are possible|a entails that you do run if b is exactly the same as y otherwise, if iron do jump , or do find otherwise|b is a tactic where it is advantageous to do build if iron is smaller than x otherwise, if a do build , or do jump if not|b is a good strategy where you should do build if position otherwise, if iron do find , or do find if not|a is a tactic where it is good to do find if b is not equal to 2 otherwise, if b do build , or do find otherwise|a entails that you do run if a 2 otherwise, if position do use , or do find as a last resort|as soon as a is not the same as x you have the option to build until inventory is smaller than 2|a is an approach where it would be good to do run if b x otherwise, if position do run , or do find if no other options are possible|whenever a is less than or equal to y you have the option to run until finally b is exactly the same as 0|when b is at least 1 you have the choice to use until finally b is larger than 2|whenever b is larger than 2 you can build until finally inventory is smaller than 2|a is a tactic where it is advantageous to do use if b is greater than 2 otherwise, if b do find , or do use if no other options are possible|when b is less than or equal to 2 you can run until a is greater than or equal to 0|a states that you should do find if iron is not equal to 0 otherwise, if a do find , or do build as a last resort|when b is larger than 0 you have the choice to find until finally inventory is smaller than 1|if inventory is exactly the same as 0 you are able to use until finally b is smaller than 0|as soon as inventory is at most 0 you have the option to find until finally a is exactly the same as y|a states that you should do build if b y , or do find as a last resort|as soon as b is less than or equal to y you have the choice to build until finally a is larger than 2|a suggests that it would be advantageous to do jump if b 1 otherwise, if iron do jump , or do run if not|once b is smaller than 1 you are able to jump until position is at most 1|a states that you should do jump if b 1 otherwise, if b do run , or do run as a last resort|when b is not the same as 1 you are able to run until finally a is less than or equal to 1|if a is at most y you have the option to build until finally a is equal to x|when a is less than or equal to 0 you can build until b is not equal to 2|a entails that you do build if a 0 otherwise, if position do find , or do jump otherwise|whenever b is less than 2 you can jump until finally inventory is at least y|once b is less than x you have the choice to build until inventory is equal to 2|a means that it would be good to do run if a y otherwise, if position do find , or do build if not|a suggests that it would be advantageous to do use if a is less than 2 otherwise, if b do find , or do run otherwise|as soon as a is at least 1 you have the choice to jump until finally a is less than 2|a states that you should do use if position is less than 1 otherwise, if b do run , or do find as a last resort|a entails that you do run if position is equal to y otherwise, if a do use , or do run if not|a is an approach where you do use if iron is not the same as y otherwise, if position do build , or do run otherwise|b states that you should do find if b y otherwise, if iron do build , or do jump if not|a entails that you do run if b x otherwise, if iron do find , or do jump otherwise|once a is exactly the same as 0 you have the option to find until a is greater than 2|when inventory is not the same as 1 you have the choice to build until finally b is at least y|once position is at most 0 you are able to run until inventory is at least y|whenever inventory is smaller than y you can run until inventory is larger than 2|a suggests that it would be advantageous to do jump if a 0 , or do use if no other options are possible|a means that it would be good to do find if position is less than 0 otherwise, if iron do run , or do build otherwise|when a is exactly the same as y you can jump until finally a is greater than or equal to 1|when b is exactly the same as x you are able to run until finally position is not the same as 0|a is a good strategy where you should do run if iron is not equal to x otherwise, if a do use , or do build as a last resort|a entails that you do build if a is not the same as x otherwise, if iron do use , or do build otherwise|as soon as a is at most 1 you have the option to build until inventory is at least 2|as soon as a is larger than 1 you have the choice to use until inventory|if a is at least 1 you are able to jump until b is not equal to y|a is a tactic where it is good to do build if b is smaller than x otherwise, if position do run , or do run if no other options are possible|when inventory is at least 1 you have the choice to build until finally x|b suggests that it would be advantageous to do find if a is not equal to y otherwise, if iron do jump , or do build otherwise|b is a tactic where it is good to do use if a is equal to 2 otherwise, if position do jump , or do build if no other options are possible|b means that it would be good to do use if a is not equal to 1 otherwise, if iron do use , or do jump otherwise|a is a strategy where you do use if iron is greater than y otherwise, if iron do build , or do jump if no other options are possible|b is a tactic where it is advantageous to do use if position is greater than 2 , or do jump otherwise|a suggests that it would be advantageous to do use if a is not equal to 1 otherwise, if position do find , or do find if no other options are possible|a is a good strategy where you should do find if iron 2 otherwise, if b do find , or do find if not|a entails that you do build if b is equal to 0 otherwise, if b do use , or do run if no other options are possible|a means that it would be good to do use if iron is less than y otherwise, if a do use , or do run if not|a is a tactic where it is good to do build if position 0 otherwise, if position do jump , or do jump if not|a is an approach where it would be good to do build if position 1 otherwise, if a do build , or do use as a last resort|a is an approach where you do find if b is greater than y otherwise, if position do run , or do build if not|when b is larger than x you have the option to find until finally inventory is exactly the same as 0|whenever a is smaller than x you have the choice to build until a is not equal to 1|whenever inventory is greater than or equal to 0 you are able to run until a is at most x|when position you have the option to run until inventory is greater than 1|a is an approach where you do use if position is not equal to 1 otherwise, if a do jump , or do build if no other options are possible|a is a strategy where you do find if a is less than x otherwise, if iron do use , or do build as a last resort|when inventory is not the same as 1 you can build until inventory is smaller than x|a is an approach where it would be good to do build if a is not equal to x otherwise, if position do use , or do find if not|once inventory is greater than 2 you have the choice to run until finally inventory is at most 2|as soon as b is less than or equal to 0 you have the option to jump until finally position is less than 0|a is a good strategy where you should do use if b is greater than 0 otherwise, if position do run , or do use as a last resort|whenever a is equal to 2 you can use until finally inventory is greater than or equal to 1|whenever inventory is less than 0 you have the option to find until finally a|a suggests that it would be advantageous to do build if iron is not the same as y otherwise, if a do find , or do find if not|once a is not the same as y you have the choice to use until finally a is exactly the same as 1|b is a good strategy where you should do use if b is not equal to y otherwise, if iron do jump , or do build if not|b means that it would be good to do run if iron x otherwise, if b do run , or do jump otherwise|b means that it would be good to do jump if a x otherwise, if position do find , or do find as a last resort|b is a tactic where it is advantageous to do jump if iron is less than x otherwise, if iron do use , or do jump if no other options are possible|whenever b is not the same as 1 you can find until a is not equal to y|b entails that you do jump if a is exactly the same as 0 otherwise, if b do jump , or do run if not|whenever a is equal to 2 you can build until b is not equal to 2|a entails that you do use if b is larger than 1 otherwise, if iron do build , or do run as a last resort|whenever b is less than or equal to x you are able to run until b is exactly the same as 0|b entails that you do build if a is equal to 0 otherwise, if a do use , or do build as a last resort|a states that you should do build if a is not the same as 1 otherwise, if a do use , or do build if not|b is a strategy where you do jump if position is exactly the same as y otherwise, if iron do use , or do build as a last resort|when inventory is smaller than 1 you are able to use until finally a is greater than or equal to 0|b is an approach where it would be good to do use if iron y|when a you have the choice to use until finally position is not the same as x|a is a strategy where you do jump if position is larger than 2 otherwise, if iron do build , or do find as a last resort|as soon as b is not the same as x you have the option to jump until finally inventory is greater than 0|b is an approach where you do use if a is not the same as 2 , or do use if not|b is a good strategy where you should do run if a is larger than x otherwise, if b do find , or do find as a last resort|whenever inventory is greater than or equal to y you are able to use until b is at least x|a is an approach where you do build if a x otherwise, if b do jump , or do run as a last resort|whenever b you have the option to jump until b is exactly the same as 0|when inventory is less than x you can jump until b is smaller than y|b means that it would be good to do jump if iron y otherwise, if b do jump , or do use otherwise|b means that it would be good to do use if a otherwise, if a do use , or do run if no other options are possible|as soon as position is at least 1 you can find until b is larger than 1|whenever a is not the same as 0 you are able to build until finally position is at most 1|b is a good strategy where you should do jump if a is not the same as 0 otherwise, if a do find , or do jump as a last resort|a is a good strategy where you should do jump if position is smaller than 1 otherwise, if b do build , or do build if not|as soon as b is less than y you can use until inventory is not equal to 1|when inventory is not equal to 1 you can jump until finally a is equal to 2|whenever position is exactly the same as y you are able to use until finally a is greater than 1|whenever inventory is at least 2 you have the option to build until finally inventory|as soon as inventory is not the same as 0 you have the option to find until finally inventory is equal to 1|b is a strategy where you do build if b otherwise, if iron do use , or do use as a last resort|a is a tactic where it is advantageous to do build if a 1 otherwise, if a do jump , or do use if no other options are possible|a is a tactic where it is advantageous to do build if a is smaller than y otherwise, if a do build , or do build as a last resort|once position is larger than 0 you have the choice to jump until position is equal to 1|a is a strategy where you do build if position is smaller than 0 , or do run otherwise|once position is greater than 1 you are able to jump until finally b is at least 0|a is an approach where it would be good to do jump if position y otherwise, if a do jump , or do run if no other options are possible|whenever inventory is equal to 0 you have the option to build until finally position is not the same as 2|b is a tactic where it is good to do use if a x otherwise, if iron do find , or do jump otherwise|a is an approach where you do use if iron 1 otherwise, if a do find , or do find as a last resort|whenever a is exactly the same as 2 you can jump until finally b is greater than or equal to 0|a states that you should do use if a is less than 1 , or do use otherwise|when b is smaller than 2 you have the choice to build until finally b is less than or equal to 1|whenever a is greater than or equal to y you have the choice to use until finally a is greater than 0|when inventory you can run until b is not equal to 1|once a is less than or equal to x you are able to run until finally a is smaller than 1|b is a tactic where it is good to do build if position is exactly the same as y otherwise, if a do find , or do jump as a last resort|b states that you should do find if a otherwise, if a do run , or do jump as a last resort|if a is equal to 2 you have the option to use until finally b is greater than or equal to x|a is a tactic where it is advantageous to do use if iron 0 otherwise, if b do find , or do run otherwise|a suggests that it would be advantageous to do use if b y , or do build otherwise|b is a tactic where it is good to do build if a 0 , or do run if no other options are possible|a states that you should do run if iron is less than y otherwise, if iron do find , or do find if not|if b is less than x you have the choice to build until inventory is at most y|a is an approach where you do use if b is less than 0 otherwise, if b do build , or do build if not|a is an approach where it would be good to do use if a is smaller than 1 otherwise, if position do build , or do run as a last resort|a is a tactic where it is good to do run if position is not the same as y otherwise, if b do find , or do use if no other options are possible|b is a tactic where it is advantageous to do run if a x otherwise, if iron do use , or do run if not|whenever inventory is equal to y you have the option to run until finally a is at most 0|a entails that you do run if b 1 otherwise, if a do run , or do jump if no other options are possible|b states that you should do use if position x otherwise, if iron do build , or do jump otherwise|b states that you should do find if iron y otherwise, if iron do build , or do build if no other options are possible|a suggests that it would be advantageous to do build if b is not equal to x otherwise, if a do build , or do jump as a last resort|as soon as inventory is smaller than 2 you have the choice to run until a is greater than 0|a is a tactic where it is advantageous to do build if position 1 otherwise, if position do run , or do run as a last resort|if a is less than or equal to 2 you have the option to jump until inventory is less than or equal to x|a states that you should do jump if a is larger than 2 otherwise, if iron do jump , or do run otherwise|as soon as inventory is at least y you can build until finally b is greater than 0|as soon as b is not the same as 1 you have the option to build until finally position is exactly the same as x|when position is less than y you are able to find until inventory is greater than or equal to 1|if b is smaller than y you can build until position is greater than 1|when position is larger than y you can use until b is at most 2|when inventory is smaller than 2 you have the option to use until inventory is greater than or equal to 2|a is a tactic where it is advantageous to do run if b 0 otherwise, if position do use , or do run otherwise|if position is at most 2 you have the option to jump until finally a is exactly the same as y|when b is not equal to x you can use until finally position is equal to 2|whenever position is at least 0 you have the option to run until a is not the same as 1|as soon as inventory is not the same as x you have the choice to jump until finally a is larger than x|b means that it would be good to do jump if a is smaller than 2 otherwise, if position do find , or do use if no other options are possible|if a is smaller than x you are able to jump until finally a is larger than 2|a is a strategy where you do find if a is exactly the same as 0 otherwise, if b do find , or do find otherwise|if inventory is not the same as y you have the choice to jump until b is smaller than y|whenever a is exactly the same as x you have the choice to jump until b is at most 2|whenever b is not the same as 0 you have the choice to run until finally b is exactly the same as 0|a is an approach where you do jump if b is not equal to x otherwise, if a do build , or do use if not|once b is greater than or equal to 1 you have the option to build until finally inventory is equal to 1|a is an approach where you do use if a is exactly the same as y otherwise, if position do use , or do use otherwise|a is an approach where you do build if position is not equal to 2 otherwise, if position do find , or do build otherwise|once b is equal to 0 you have the choice to run until finally position is at least y|whenever inventory is less than 2 you are able to build until position is not equal to x|as soon as inventory is less than 0 you have the choice to run until finally b is not equal to x|whenever a is less than or equal to 1 you have the option to find until finally position is at least 2|when b is at least 1 you have the option to build until finally a is at most x|if inventory is equal to 0 you have the choice to build until b is less than or equal to 2|whenever a is greater than 1 you can use until finally a is exactly the same as 2|a is a strategy where you do use if b 2 otherwise, if b do find , or do build if not|a entails that you do use if position is not equal to x otherwise, if position do use , or do jump if no other options are possible|b is an approach where it would be good to do build if b x otherwise, if position do find , or do use otherwise|a is a tactic where it is advantageous to do find if a is exactly the same as y otherwise, if a do use , or do use if no other options are possible|a states that you should do jump if iron is larger than 0 otherwise, if position do run , or do use if no other options are possible|b is an approach where it would be good to do use if a is greater than y otherwise, if iron do build , or do jump if not|b suggests that it would be advantageous to do build if iron is smaller than y otherwise, if iron do build , or do find as a last resort|once inventory is larger than 1 you have the option to find until finally b is equal to x|a is a tactic where it is good to do use if b is exactly the same as x otherwise, if a do run , or do find if not|a entails that you do find if iron is smaller than x otherwise, if iron do run , or do run otherwise|whenever inventory is greater than 2 you are able to find until position is at least y|b is a tactic where it is advantageous to do jump if b otherwise, if a do build , or do jump otherwise|a is a good strategy where you should do jump if position is not the same as 2 otherwise, if iron do jump , or do jump if not|a is a strategy where you do jump if iron is exactly the same as y otherwise, if iron do jump , or do run if no other options are possible|b is an approach where you do build if b otherwise, if b do run , or do run otherwise|if position you are able to find until finally position is not the same as x|a states that you should do use if b is not the same as 0 otherwise, if position do jump , or do find if no other options are possible|b is a tactic where it is good to do run if position is exactly the same as y , or do jump as a last resort|if inventory is not the same as y you can use until a is exactly the same as y|a is a strategy where you do use if a is larger than x otherwise, if b do use , or do find as a last resort|whenever b is exactly the same as 0 you are able to build until finally b|as soon as b is greater than 1 you have the option to run until finally position is not equal to 0|a is a tactic where it is advantageous to do build if iron is not the same as y otherwise, if position do run , or do find if not|a suggests that it would be advantageous to do find if b is not equal to 1 otherwise, if b do use , or do jump otherwise|b states that you should do use if position otherwise, if b do use , or do jump as a last resort|a is an approach where it would be good to do build if position y otherwise, if b do run , or do build if not|as soon as b is larger than 2 you have the option to run until finally b is greater than 0|a entails that you do run if iron is not the same as 0 otherwise, if a do build , or do find as a last resort|b is a good strategy where you should do use if b otherwise, if a do build , or do build if not|b is a tactic where it is advantageous to do find if b is greater than x otherwise, if position do use , or do build as a last resort|when a is less than 0 you have the option to build until finally position|b is a tactic where it is good to do build if b x otherwise, if b do run , or do run as a last resort|whenever a is equal to 2 you have the option to build until finally inventory is not equal to 1|a is a tactic where it is good to do find if position otherwise, if a do use , or do build if no other options are possible|as soon as b is less than 0 you are able to use until finally a is equal to y|as soon as b is smaller than 2 you can build until finally a is larger than 2|whenever b is greater than y you can find until finally position is not equal to y|if inventory is greater than 1 you have the option to use until finally position|a is a tactic where it is advantageous to do find if a is greater than 0 otherwise, if iron do run , or do build if not|whenever a is exactly the same as 0 you can use until finally position is greater than or equal to y|a is an approach where you do build if iron is larger than 0 otherwise, if a do jump , or do jump as a last resort|b means that it would be good to do use if a x otherwise, if iron do jump , or do find as a last resort|when a is not equal to 1 you can run until finally inventory is less than x|whenever inventory is larger than 0 you are able to build until inventory is less than y|a is a good strategy where you should do jump if a y , or do use as a last resort|if b is at least 1 you can build until position is at least x|once b is larger than y you can find until a is greater than 2|a is an approach where you do use if b is greater than 1 , or do run otherwise|if a is not equal to 0 you have the choice to build until finally a is at most y|a is a tactic where it is advantageous to do jump if iron x otherwise, if b do jump , or do run if not|whenever a is smaller than 2 you can jump until b is greater than x|whenever position is less than 1 you can run until position is larger than 2|a means that it would be good to do run if position 0 otherwise, if a do jump , or do find otherwise|a is a strategy where you do use if b x otherwise, if a do build , or do run otherwise|b is an approach where it would be good to do run if a is exactly the same as y otherwise, if position do build , or do run if not|once inventory is greater than or equal to 2 you are able to find until finally inventory is greater than or equal to x|a is an approach where you do find if position y otherwise, if a do run , or do run otherwise|b is a strategy where you do build if a is equal to x otherwise, if a do build , or do jump otherwise|a is a strategy where you do use if b is less than y otherwise, if a do jump , or do find if no other options are possible|a suggests that it would be advantageous to do build if position is exactly the same as 2 otherwise, if b do use , or do jump if not|whenever position is equal to 0 you can use until b is at least 0|a is an approach where it would be good to do find if a is less than 0 otherwise, if b do jump , or do build as a last resort|a is a strategy where you do use if a 0 otherwise, if a do build , or do use as a last resort|whenever inventory is at most 0 you have the choice to find until finally position is not equal to y|a is a good strategy where you should do build if b x otherwise, if position do find , or do run as a last resort|b is a strategy where you do find if a is larger than y otherwise, if position do find , or do use otherwise|once inventory is at most 2 you have the option to build until finally a is equal to 1|a is an approach where it would be good to do jump if a is exactly the same as 1 otherwise, if iron do jump , or do find otherwise|as soon as b is exactly the same as 0 you have the option to jump until finally a is exactly the same as 2|a is a strategy where you do jump if iron is less than 2 otherwise, if position do run , or do find if not|once b is not the same as 1 you have the choice to jump until finally inventory is not the same as x|once a is less than 2 you are able to use until position is equal to 1|a is a tactic where it is advantageous to do build if b is less than 1 , or do jump as a last resort|a entails that you do build if iron 2 otherwise, if b do find , or do jump otherwise|whenever b is at most 2 you can run until finally b is equal to 1|a is a strategy where you do build if b y otherwise, if a do find , or do use otherwise|whenever b is exactly the same as 1 you have the option to use until inventory is at least 0|a is an approach where it would be good to do jump if a x otherwise, if position do run , or do find if not|b is an approach where it would be good to do use if a is less than y , or do jump as a last resort|if a is less than or equal to 0 you have the choice to build until b is greater than 0|a suggests that it would be advantageous to do build if position 0 otherwise, if a do run , or do build if no other options are possible|as soon as position is not the same as x you have the option to find until b is at least x|as soon as a is greater than or equal to x you can use until finally inventory is at least 2|once position is greater than y you can jump until finally inventory is at most x|b is an approach where you do find if position x otherwise, if iron do use , or do find as a last resort|a is an approach where you do jump if a is larger than y otherwise, if iron do run , or do build if not|when a is less than 0 you can use until position is larger than 2|b is a tactic where it is good to do use if position is larger than x otherwise, if position do build , or do jump if no other options are possible|a entails that you do use if position is not the same as x otherwise, if position do find , or do use as a last resort|a is a strategy where you do find if iron is not equal to x otherwise, if b do find , or do find if no other options are possible|a is a tactic where it is good to do run if a is larger than 2 , or do run otherwise|as soon as inventory is at most 2 you are able to find until b is less than 2|a is an approach where you do jump if position is not equal to 1 otherwise, if b do jump , or do build if not|b is a strategy where you do use if b is not equal to y otherwise, if position do build , or do build if no other options are possible|whenever position is not the same as 2 you have the choice to run until inventory is equal to x|once b is greater than or equal to x you have the option to run until finally a is smaller than 1|when x you have the option to find until b is not equal to 1|b is an approach where you do find if a is less than 1 otherwise, if iron do find , or do run if no other options are possible|if a is at most x you have the option to find until finally position is at least 1|a is a strategy where you do use if b is greater than 0 otherwise, if position do jump , or do run as a last resort|as soon as a is equal to x you have the choice to run until a is greater than 2|a is a good strategy where you should do jump if iron 2 otherwise, if b do find , or do jump if not|a is a good strategy where you should do find if position is not equal to y otherwise, if position do find , or do run if no other options are possible|if a is at most 1 you have the choice to use until a is less than 1|a is an approach where you do find if position is equal to x otherwise, if iron do use , or do find otherwise|a is a tactic where it is good to do run if position is greater than 0 otherwise, if position do jump , or do build if not|a is a strategy where you do jump if b 0 otherwise, if iron do use , or do run as a last resort|a is an approach where you do use if a 2 otherwise, if a do jump , or do jump if no other options are possible|a entails that you do build if iron 2 otherwise, if iron do find , or do use if no other options are possible|whenever position is smaller than 0 you are able to jump until finally inventory is at most 1|a is a good strategy where you should do find if position is greater than x otherwise, if b do use , or do jump otherwise|when inventory is smaller than 1 you are able to jump until position is greater than or equal to x|a means that it would be good to do use if a is larger than x otherwise, if iron do use , or do run otherwise|whenever position is greater than or equal to x you have the choice to build until position is not the same as 2|when inventory is equal to y you have the choice to find until finally b is not the same as 1|when position is less than 2 you are able to build until a is equal to 2|b is a strategy where you do build if iron is exactly the same as y otherwise, if a do use , or do find if no other options are possible|a states that you should do use if position is greater than 0 otherwise, if iron do jump , or do jump if not|as soon as position is larger than y you have the choice to use until finally inventory is greater than 1|if a is less than or equal to y you have the option to build until b is at least y|a is a tactic where it is good to do find if iron 2 otherwise, if a do build , or do use if no other options are possible|as soon as position is greater than x you are able to use until finally position is not the same as x|a is a tactic where it is advantageous to do build if b is exactly the same as x otherwise, if position do use , or do run otherwise|b suggests that it would be advantageous to do use if b y otherwise, if a do run , or do run if no other options are possible|if inventory is greater than or equal to 1 you have the choice to use until finally a is larger than 2|if position you can use until inventory|when a is exactly the same as x you have the option to run until finally position is at most y|a is a tactic where it is good to do jump if a is greater than y otherwise, if a do jump , or do find if not|b states that you should do jump if a is exactly the same as y otherwise, if a do use , or do build as a last resort|a entails that you do jump if a is equal to y otherwise, if position do run , or do jump if not|when position is exactly the same as x you are able to use until position is larger than y|b is an approach where it would be good to do run if position is greater than x otherwise, if position do build , or do use otherwise|a entails that you do run if position otherwise, if b do build , or do jump otherwise|a entails that you do find if iron is equal to y otherwise, if iron do run , or do run as a last resort|as soon as inventory is larger than x you have the choice to run until position is equal to y|a states that you should do use if b is greater than x otherwise, if position do run , or do jump otherwise|once inventory is less than 1 you have the choice to use until a is exactly the same as 0|a is an approach where you do run if b is not equal to y otherwise, if a do jump , or do use if no other options are possible|a suggests that it would be advantageous to do find if position y otherwise, if iron do run , or do build otherwise|b is a good strategy where you should do run if position is not equal to x otherwise, if iron do find , or do use otherwise|b states that you should do build if position is less than x otherwise, if iron do find , or do build if no other options are possible|b is a good strategy where you should do find if b y otherwise, if a do find , or do build otherwise|as soon as b is equal to 2 you have the option to run until position is at least x|b is an approach where it would be good to do find if b is greater than y otherwise, if a do build , or do find as a last resort|if b is smaller than x you have the choice to jump until a is equal to 0|a means that it would be good to do build if position 2 otherwise, if iron do build , or do run otherwise|b is a strategy where you do use if b y otherwise, if b do run , or do build as a last resort|b is an approach where it would be good to do find if position x otherwise, if position do build , or do jump if not|once a is not equal to y you have the choice to use until b is at most y|b means that it would be good to do build if a is equal to y otherwise, if a do jump , or do run if not|if inventory is at most x you can build until a is not the same as 0|a is a tactic where it is advantageous to do build if a is equal to y otherwise, if b do find , or do build if no other options are possible|b suggests that it would be advantageous to do jump if iron y otherwise, if position do build , or do build as a last resort|as soon as inventory is smaller than x you are able to find until finally a is exactly the same as 1|b means that it would be good to do use if iron otherwise, if a do find , or do find as a last resort|a is a tactic where it is good to do run if b is not the same as 1 otherwise, if position do jump , or do run as a last resort|a states that you should do jump if position is greater than x otherwise, if iron do use , or do run if not|b is an approach where it would be good to do use if position y otherwise, if position do find , or do jump otherwise|a is a tactic where it is good to do run if a 0 otherwise, if b do build , or do find otherwise|b is a tactic where it is good to do run if a y otherwise, if position do jump , or do run otherwise|when inventory is less than x you have the choice to use until finally b is larger than y|a is a strategy where you do run if iron is greater than 2 otherwise, if a do use , or do find as a last resort|when a is at most x you have the option to use until finally b is smaller than 0|if a is less than y you can build until a is not the same as 1|if inventory is less than or equal to x you can run until a is not the same as 2|b means that it would be good to do find if b 1 , or do jump as a last resort|a means that it would be good to do jump if b is larger than y otherwise, if b do find , or do use if not|a means that it would be good to do use if a is not the same as 2 otherwise, if a do build , or do build if not|b is a strategy where you do jump if b is equal to y , or do jump otherwise|b is an approach where it would be good to do build if b otherwise, if a do build , or do build if not|a is a strategy where you do find if position is less than 1 otherwise, if a do use , or do jump otherwise|a is a strategy where you do run if b y otherwise, if a do build , or do run as a last resort|as soon as inventory is greater than 1 you have the option to run until finally position is smaller than 1|b states that you should do build if position is smaller than x otherwise, if iron do run , or do run otherwise|a entails that you do run if b is equal to 1 otherwise, if a do jump , or do jump if not|as soon as b is greater than or equal to x you are able to jump until b is larger than y|when position is greater than x you are able to find until a is at least 1|a is a tactic where it is good to do jump if a is larger than 1 otherwise, if position do jump , or do build if no other options are possible|b is a tactic where it is advantageous to do run if position otherwise, if b do run , or do run if no other options are possible|a is a good strategy where you should do jump if position is not equal to x otherwise, if iron do run , or do find if not|b entails that you do run if b is not equal to x otherwise, if iron do build , or do use as a last resort|if position is equal to 1 you are able to jump until finally inventory is equal to x|as soon as b is smaller than 2 you have the choice to find until finally b is exactly the same as 0|b states that you should do use if iron is larger than x otherwise, if b do build , or do use otherwise|b is a strategy where you do use if iron is smaller than x otherwise, if a do run , or do use as a last resort|b is an approach where it would be good to do find if iron is greater than y otherwise, if b do use , or do find as a last resort|a is a tactic where it is good to do build if position 1 otherwise, if a do use , or do run if not|as soon as inventory is exactly the same as 2 you have the choice to find until finally a is exactly the same as y|a suggests that it would be advantageous to do run if iron is greater than 0 otherwise, if b do run , or do run as a last resort|as soon as a is at least 1 you are able to build until finally a is not equal to 2|b suggests that it would be advantageous to do jump if position is equal to x otherwise, if b do use , or do find otherwise|a is an approach where it would be good to do find if iron is not the same as y otherwise, if iron do build , or do run otherwise|when b is greater than 0 you have the choice to jump until finally a is greater than y|b means that it would be good to do find if a is exactly the same as 1 otherwise, if position do use , or do use as a last resort|a means that it would be good to do run if iron is equal to y otherwise, if b do find , or do jump if no other options are possible|a is an approach where it would be good to do find if position is exactly the same as 2 otherwise, if b do find , or do run as a last resort|b means that it would be good to do use if a is larger than x otherwise, if iron do build , or do find if no other options are possible|b entails that you do build if position 2 , or do find if not|whenever a is greater than or equal to y you have the choice to jump until position is exactly the same as y|b is an approach where it would be good to do use if b x otherwise, if b do use , or do run otherwise|a entails that you do find if iron is less than y otherwise, if a do find , or do run otherwise|a suggests that it would be advantageous to do find if position 2 otherwise, if a do find , or do run if no other options are possible|as soon as inventory is at most x you can find until finally position is larger than 2|b states that you should do run if a is not equal to 2 otherwise, if a do jump , or do use as a last resort|a states that you should do build if b is not the same as y otherwise, if a do build , or do jump if no other options are possible|as soon as position is at least 1 you can jump until finally b is not the same as y|a suggests that it would be advantageous to do run if position is exactly the same as 0 otherwise, if iron do run , or do use if no other options are possible|if a is less than 0 you have the option to use until inventory is equal to y|b is a strategy where you do run if iron is greater than y otherwise, if b do run , or do use if no other options are possible|b is a good strategy where you should do use if a is equal to x otherwise, if iron do use , or do use otherwise|a suggests that it would be advantageous to do find if b is equal to 0 otherwise, if b do build , or do use if no other options are possible|b entails that you do use if a is less than 0 otherwise, if position do jump , or do run if not|a is a tactic where it is advantageous to do run if b 2 otherwise, if a do build , or do jump as a last resort|a is an approach where it would be good to do run if iron x otherwise, if a do run , or do run if no other options are possible|whenever position is larger than 1 you have the choice to build until finally b is less than or equal to 0|when position is greater than x you have the option to run until a is smaller than 0|b is a tactic where it is advantageous to do jump if a is smaller than x otherwise, if a do find , or do use otherwise|b means that it would be good to do find if position is exactly the same as x otherwise, if b do build , or do run if no other options are possible|once position is larger than y you have the option to jump until position is exactly the same as y|a is a tactic where it is advantageous to do use if b otherwise, if b do use , or do use if not|a is a tactic where it is advantageous to do build if iron x otherwise, if b do use , or do build if not|if inventory is smaller than 1 you have the choice to run until inventory is not the same as 2|whenever position is less than 1 you are able to find until inventory is larger than x|when inventory is exactly the same as 2 you have the choice to find until a is at least x|as soon as b is not the same as x you have the option to build until inventory is greater than 2|a is a good strategy where you should do build if a y , or do build otherwise|a states that you should do use if iron is smaller than y otherwise, if b do run , or do find as a last resort|a states that you should do jump if iron is less than x otherwise, if a do jump , or do jump if not|as soon as a is at least x you can find until finally inventory is less than or equal to 2|a means that it would be good to do build if a is smaller than 2 otherwise, if a do build , or do build otherwise|when position is not equal to 1 you can find until finally a is less than x|a states that you should do run if position is not the same as 2 otherwise, if position do build , or do use if no other options are possible|b is an approach where it would be good to do use if position otherwise, if position do run , or do build as a last resort|once a is less than 0 you have the option to jump until b is exactly the same as y|whenever inventory is less than or equal to x you have the option to run until a is less than 2|b is an approach where you do build if position x otherwise, if a do jump , or do use if not|b is a good strategy where you should do build if a is exactly the same as 1 otherwise, if b do find , or do jump otherwise|b is a tactic where it is good to do find if b is not the same as y otherwise, if iron do build , or do run as a last resort|b is an approach where it would be good to do build if b is not equal to y , or do jump if not|a is a strategy where you do use if iron y otherwise, if position do use , or do run otherwise|b entails that you do find if b otherwise, if position do find , or do build if not|a is a tactic where it is advantageous to do find if b is not equal to 1 otherwise, if b do jump , or do run otherwise|a is a good strategy where you should do build if b y otherwise, if b do run , or do find if not|as soon as inventory you are able to find until position is not the same as 0|a is a tactic where it is advantageous to do run if b 0 otherwise, if position do jump , or do build if no other options are possible|a is a strategy where you do build if a x otherwise, if iron do jump , or do run if not|a is a tactic where it is good to do use if iron is not the same as 1 otherwise, if b do jump , or do find if no other options are possible|when b is exactly the same as x you have the option to build until finally position is greater than 2|b is an approach where it would be good to do build if position is greater than y otherwise, if position do jump , or do run otherwise|a is a tactic where it is good to do use if iron 2 otherwise, if a do build , or do run if no other options are possible|a is a strategy where you do use if position is less than 0 otherwise, if position do use , or do build if no other options are possible|b entails that you do use if iron is larger than y otherwise, if position do jump , or do run if not|once b is less than or equal to 0 you have the choice to build until finally a is greater than or equal to x|a entails that you do jump if a is exactly the same as y otherwise, if b do run , or do build as a last resort|b entails that you do find if position is greater than y otherwise, if a do find , or do find otherwise|a suggests that it would be advantageous to do build if iron is greater than 1 otherwise, if b do build , or do build if not|when b is at least 1 you can use until b is exactly the same as y|a is an approach where it would be good to do use if position is not the same as y otherwise, if a do build , or do find otherwise|if inventory is not the same as 0 you have the option to jump until finally position is greater than or equal to x|once x you have the choice to run until a is at least 1|b is a good strategy where you should do jump if position x otherwise, if position do build , or do jump as a last resort|a is an approach where you do find if a is not equal to 1 otherwise, if position do use , or do use if not|a states that you should do use if position is equal to 2 otherwise, if position do jump , or do build if not|once position is exactly the same as 2 you have the option to build until position is smaller than y|a is a tactic where it is good to do run if iron is greater than y otherwise, if iron do run , or do jump if no other options are possible|a means that it would be good to do jump if a x|as soon as inventory is not equal to y you are able to find until finally inventory is greater than or equal to 0|a is a tactic where it is advantageous to do jump if iron is not the same as 0 otherwise, if a do find , or do jump otherwise|as soon as inventory is at least 2 you are able to find until finally inventory is exactly the same as y|whenever inventory is greater than or equal to 0 you have the option to build until b is less than 1|as soon as a is at least 2 you can run until inventory|as soon as inventory is at least 1 you have the choice to run until finally inventory|b is a tactic where it is advantageous to do build if b x otherwise, if b do run , or do run if not|once b is not equal to 0 you are able to run until b is equal to 1|b means that it would be good to do jump if iron is smaller than x otherwise, if iron do run , or do jump if not|whenever a is not the same as x you can use until b is larger than 1|b states that you should do jump if iron is less than x otherwise, if iron do run , or do build otherwise|b is an approach where it would be good to do run if position is equal to x otherwise, if position do build , or do jump otherwise|a states that you should do run if b is not the same as 1 otherwise, if b do run , or do build if no other options are possible|as soon as b is at least y you are able to find until position is greater than or equal to 0|whenever b is less than or equal to y you have the choice to run until position is not the same as 2|once position is greater than y you have the option to build until b is equal to 1|a is an approach where it would be good to do run if position is not the same as y otherwise, if a do use , or do find otherwise|if position is at most 1 you have the option to run until finally inventory is at most 1|a is an approach where you do use if iron is larger than y otherwise, if a do find , or do jump as a last resort|a is a tactic where it is good to do use if iron is greater than x otherwise, if position do build , or do find otherwise|once inventory is greater than or equal to 0 you have the option to run until finally a is not the same as 0|a is a tactic where it is advantageous to do use if b y otherwise, if iron do build , or do build if no other options are possible|a entails that you do run if position is not equal to 0 otherwise, if position do build , or do jump if not|b is a strategy where you do run if position is not the same as 0 , or do jump as a last resort|b is an approach where it would be good to do jump if iron is equal to y otherwise, if a do use , or do build if not|whenever a is at most 1 you can use until position is smaller than y|b is a good strategy where you should do build if position is not equal to y otherwise, if iron do use , or do run if not|a states that you should do use if a is smaller than x , or do run if no other options are possible|b suggests that it would be advantageous to do jump if b is greater than y otherwise, if position do find , or do run if no other options are possible|once inventory is larger than 0 you have the option to run until finally a is smaller than 0|if inventory is not the same as 0 you have the option to build until position is exactly the same as 1|when a is less than x you have the option to build until inventory is not the same as 2|when position is exactly the same as 1 you can find until finally b is greater than or equal to 2|a is a strategy where you do use if iron is equal to x otherwise, if b do build , or do use as a last resort|a is an approach where it would be good to do use if position is smaller than x otherwise, if a do build , or do jump as a last resort|when position is greater than or equal to 2 you are able to find until position is equal to 2|once b is not equal to x you can build until finally b is not the same as 2|a is an approach where it would be good to do run if b 0 otherwise, if b do use , or do jump otherwise|b states that you should do run if iron otherwise, if b do run , or do use as a last resort|b is an approach where you do run if a is exactly the same as y otherwise, if b do find , or do jump otherwise|once inventory is greater than or equal to y you have the choice to use until finally inventory is greater than 2|if b is exactly the same as 1 you are able to run until finally b is not the same as y|once b is at least 0 you are able to use until finally a is exactly the same as x|as soon as inventory is smaller than y you have the option to jump until finally b is less than or equal to 0|when b is greater than or equal to x you are able to use until finally b is larger than x|when position is larger than x you can build until finally inventory is larger than 2|a is an approach where it would be good to do run if position is smaller than x otherwise, if position do use , or do use as a last resort|when b is greater than 1 you can run until position is exactly the same as 1|b entails that you do run if iron x otherwise, if position do jump , or do jump otherwise|a states that you should do build if b is equal to 1 otherwise, if position do use , or do run if not|a is a tactic where it is advantageous to do use if position is equal to y otherwise, if iron do find , or do build otherwise|b is a tactic where it is advantageous to do run if a is equal to x otherwise, if iron do find , or do use if no other options are possible|when inventory is smaller than 0 you have the option to use until b is greater than 1|once inventory is less than or equal to 0 you can find until finally b is not equal to 0|a is a good strategy where you should do jump if b is less than x otherwise, if iron do find , or do run otherwise|a suggests that it would be advantageous to do use if position y otherwise, if b do use , or do jump as a last resort|as soon as position is at least y you have the choice to jump until inventory is less than 0|a is an approach where it would be good to do find if position 2 otherwise, if position do jump , or do jump if not|b states that you should do run if a otherwise, if b do use , or do use if not|as soon as a is greater than x you are able to run until a is less than or equal to 2|b means that it would be good to do use if position is not the same as y|when b is larger than 2 you can jump until finally b is exactly the same as 2|once position is exactly the same as 1 you are able to build until inventory is less than 2|a is an approach where it would be good to do run if a is greater than 0 otherwise, if iron do jump , or do run if no other options are possible|a is an approach where you do find if b is larger than 0 otherwise, if iron do find , or do build otherwise|a states that you should do jump if iron is larger than x otherwise, if iron do run , or do build if no other options are possible|b means that it would be good to do find if iron y otherwise, if a do build , or do run as a last resort|as soon as a you have the option to find until position is less than or equal to x|b is a strategy where you do find if position y otherwise, if b do run , or do find if no other options are possible|whenever position is at most y you are able to find until a|a is an approach where you do use if a 2 otherwise, if position do jump , or do find as a last resort|a is a strategy where you do use if a 0 otherwise, if iron do build , or do build as a last resort|a entails that you do jump if position is less than 2 otherwise, if b do use , or do find if no other options are possible|once inventory is less than or equal to y you are able to find until a is not the same as 2|as soon as b is greater than 1 you have the option to jump until finally a is at most 1|if inventory is greater than 1 you can build until finally b is less than or equal to 0|whenever position is smaller than 0 you have the choice to build until finally a is less than y|when a is not the same as 0 you have the option to jump until finally a is not the same as x|a entails that you do use if b otherwise, if position do jump , or do run otherwise|b is an approach where it would be good to do find if iron otherwise, if position do find , or do run as a last resort|once inventory is smaller than 1 you have the choice to use until finally inventory is greater than or equal to x|as soon as inventory is not the same as 1 you have the option to use until inventory is less than 2|a is a strategy where you do use if a is exactly the same as x otherwise, if position do find , or do build if not|a is a tactic where it is good to do use if b otherwise, if a do find , or do find if no other options are possible|b entails that you do use if a is not the same as 1 otherwise, if position do find , or do run if no other options are possible|when inventory is greater than y you have the choice to run until finally inventory is at least x|b is an approach where you do jump if a is not equal to 1 otherwise, if position do build , or do build if not|if b is at most y you are able to run until position is not the same as x|a is an approach where you do build if iron is exactly the same as y otherwise, if position do build , or do jump otherwise|whenever b is exactly the same as 0 you are able to run until finally position is less than 0|once b is less than or equal to 1 you can build until position is less than or equal to 1|b is an approach where it would be good to do run if iron is larger than y otherwise, if iron do run , or do find if not|a is an approach where you do jump if b is larger than 2 otherwise, if a do jump , or do use if no other options are possible|a means that it would be good to do jump if a is greater than 2 otherwise, if b do jump , or do jump otherwise|as soon as a is at most 0 you are able to use until inventory is not equal to 0|a is an approach where it would be good to do find if b is less than x otherwise, if iron do find , or do find otherwise|a entails that you do find if position is greater than x otherwise, if b do find , or do run as a last resort|once b is not the same as 2 you are able to build until inventory is at least 0|when x you are able to jump until inventory is not the same as 0|a is a good strategy where you should do find if b is larger than 2 otherwise, if iron do use , or do use as a last resort|a is a strategy where you do find if a is equal to y otherwise, if position do run , or do build if no other options are possible|as soon as inventory is exactly the same as 0 you have the option to find until a is larger than 1|if position is greater than x you have the choice to use until finally b is not equal to 0|a is a strategy where you do jump if a 1 otherwise, if b do jump , or do use otherwise|if b is less than or equal to 0 you can build until finally position is not the same as 0|b means that it would be good to do jump if b y otherwise, if a do find , or do find as a last resort|a means that it would be good to do jump if position is greater than 1 otherwise, if b do find , or do find as a last resort|a is a good strategy where you should do jump if b 1 otherwise, if a do jump , or do build as a last resort|a is a tactic where it is advantageous to do build if iron x otherwise, if a do use , or do build if no other options are possible|a is an approach where you do find if a y otherwise, if position do run , or do find if not|when position is larger than 1 you are able to build until finally b is at most 1|b entails that you do build if a is smaller than 0 otherwise, if position do find , or do jump otherwise|b is an approach where it would be good to do run if b is not equal to x otherwise, if position do run , or do find if no other options are possible|once a is less than x you have the choice to jump until a is less than or equal to 2|once b is equal to y you have the option to run until b is at most 2|as soon as a is larger than x you have the option to run until finally b is exactly the same as x|if position is equal to 1 you can use until a is not equal to 2|as soon as inventory is equal to 1 you are able to jump until position is greater than y|whenever a is less than y you can use until a is not the same as 2|a entails that you do run if b is not equal to 1 otherwise, if position do use , or do use if not|a is a good strategy where you should do build if iron is exactly the same as 2 otherwise, if iron do run , or do find as a last resort|if a is at least x you have the option to jump until finally b is equal to 1|b is an approach where it would be good to do run if iron is smaller than y otherwise, if a do use , or do find if not|when position is at least 0 you have the option to find until b is at least 1|whenever a is exactly the same as y you are able to find until position is not the same as 1|a is an approach where you do jump if b is not equal to 0 otherwise, if iron do use , or do find otherwise|as soon as a is smaller than 0 you are able to build until position is not equal to 1|a is a good strategy where you should do find if iron is greater than x otherwise, if a do jump , or do build if no other options are possible|a is a good strategy where you should do build if a 1 otherwise, if b do find , or do build otherwise|b entails that you do build if position is less than 1 , or do jump if not|a entails that you do find if iron is larger than y otherwise, if a do use , or do use if not|b is an approach where you do build if b is smaller than x otherwise, if a do find , or do jump if no other options are possible|as soon as b is not the same as 1 you can build until position|when a is less than 0 you have the option to use until b is greater than or equal to 1|when inventory is larger than y you have the option to find until finally inventory is not equal to 0|if a is less than or equal to x you are able to use until finally inventory is at most 1|when inventory is exactly the same as x you can build until a is exactly the same as 0|as soon as a is greater than x you are able to build until finally position is not equal to 2|once b you are able to jump until finally b is smaller than 1|as soon as a is less than 1 you have the option to use until a is at least x|when a is less than or equal to x you can jump until finally position is less than 1|when a is smaller than 1 you are able to jump until finally a is less than y|a is an approach where you do find if position is greater than 0 otherwise, if a do use , or do run if not|a entails that you do use if position is exactly the same as 1 otherwise, if b do use , or do build otherwise|a is an approach where you do jump if iron is greater than 0 otherwise, if iron do run , or do jump otherwise|a is an approach where it would be good to do find if iron is equal to y otherwise, if a do run , or do build if no other options are possible|b means that it would be good to do use if a is equal to 0 otherwise, if position do jump , or do run if no other options are possible|a is a strategy where you do run if a is not the same as y otherwise, if position do use , or do find if not|whenever inventory is less than 0 you are able to run until finally b is less than or equal to 2|a suggests that it would be advantageous to do find if position is not the same as 2 otherwise, if b do use , or do run as a last resort|once position is not equal to y you can jump until finally b is greater than or equal to y|as soon as inventory is greater than or equal to 0 you can find until position is smaller than 1|b means that it would be good to do run if b is smaller than x , or do run as a last resort|if b is smaller than y you have the option to build until finally position is not the same as 1|b is a tactic where it is advantageous to do build if position is less than y otherwise, if b do use , or do build if not|as soon as a is at least 2 you have the choice to build until finally a is larger than 0|if inventory is at least 0 you can build until finally inventory is less than x|once b is smaller than 0 you are able to find until a is smaller than 0|a is a tactic where it is good to do build if b 1 otherwise, if position do use , or do jump if not|when inventory is less than or equal to 1 you can run until finally position|b is a strategy where you do jump if a is equal to x otherwise, if iron do run , or do find otherwise|a means that it would be good to do jump if position is not the same as 0 otherwise, if a do run , or do run as a last resort|b is a strategy where you do find if position 1 , or do find if no other options are possible|b is a good strategy where you should do build if a is smaller than y otherwise, if position do jump , or do run if not|a is a tactic where it is good to do build if iron is larger than 0 otherwise, if b do build , or do find if no other options are possible|a is a tactic where it is advantageous to do run if iron 1 otherwise, if position do build , or do build as a last resort|as soon as a is larger than x you are able to find until finally a is not the same as 1|a entails that you do build if b is not the same as x otherwise, if a do find , or do run if not|a is a strategy where you do use if iron is less than y otherwise, if position do build , or do use if not|a states that you should do find if a is less than 1 otherwise, if a do find , or do jump otherwise|as soon as a is not the same as 0 you can jump until b is less than or equal to 1|whenever position is not equal to x you can find until a is greater than 0|if position is greater than y you are able to find until finally a is greater than or equal to 2|a is an approach where you do jump if position y otherwise, if a do find , or do jump if no other options are possible|whenever position is smaller than 2 you have the choice to run until inventory is not the same as 0|a is a good strategy where you should do use if position is exactly the same as 1 otherwise, if a do find , or do jump if not|when a is exactly the same as 2 you have the option to find until finally inventory is greater than 0|b is a tactic where it is advantageous to do run if a is not equal to 1 otherwise, if a do find , or do jump otherwise|a is an approach where you do build if iron x otherwise, if a do jump , or do jump if not|a is a strategy where you do find if b x otherwise, if b do find , or do build if not|once b is not the same as 1 you have the choice to jump until position is smaller than x|a is an approach where it would be good to do run if iron 1 otherwise, if position do use , or do find if no other options are possible|as soon as position is less than 0 you can jump until position is equal to 2|a is a tactic where it is good to do build if a y otherwise, if position do build , or do run as a last resort|as soon as inventory is less than or equal to y you are able to find until finally a is at least x|if position is greater than 0 you have the choice to jump until finally position is smaller than 2|b is a tactic where it is advantageous to do run if position x otherwise, if b do jump , or do use otherwise|a entails that you do jump if position is less than 1 otherwise, if position do jump , or do find if not|a is a strategy where you do run if b is not equal to 0 otherwise, if a do jump , or do build if no other options are possible|a suggests that it would be advantageous to do build if position otherwise, if a do use , or do find if not|b entails that you do jump if position otherwise, if iron do jump , or do find if not|once position is exactly the same as 0 you have the option to jump until finally inventory is greater than or equal to y|as soon as b is equal to 0 you are able to run until inventory is greater than y|if b is less than or equal to 2 you are able to find until inventory is greater than or equal to 1|whenever position is greater than 2 you have the option to run until a is at least 0|if b you are able to use until finally inventory is at least 0|as soon as position is not the same as x you have the option to use until finally a is at most y|b suggests that it would be advantageous to do use if a is less than x otherwise, if iron do build , or do run if no other options are possible|as soon as a is less than 0 you have the choice to run until position is at least x|a is a good strategy where you should do build if a is not the same as 0 otherwise, if position do find , or do find otherwise|a is a strategy where you do use if b is less than 1 otherwise, if iron do build , or do jump if not|as soon as a is smaller than 0 you are able to run until b is at most 2|if inventory is smaller than 2 you are able to jump until b is larger than 2|if a is larger than 2 you are able to jump until finally position is equal to 1|a is a tactic where it is good to do run if position is greater than 2 otherwise, if iron do jump , or do jump if not|whenever inventory is at least y you have the option to run until finally inventory is at least y|if b is greater than 2 you have the option to find until y|a entails that you do build if b y otherwise, if position do build , or do use otherwise|once inventory is at most y you are able to build until finally position is greater than y|b is a strategy where you do find if a x otherwise, if position do find , or do find as a last resort|if b is at most 0 you have the option to build until finally inventory is at least x|as soon as a is not equal to 1 you have the choice to build until position is smaller than 0|a entails that you do find if b y otherwise, if iron do find , or do use as a last resort|a is an approach where you do find if iron is larger than 1 otherwise, if a do run , or do jump otherwise|a is an approach where it would be good to do run if a is equal to y otherwise, if iron do build , or do jump if not|a is a tactic where it is good to do run if a is smaller than 0 otherwise, if position do use , or do find if no other options are possible|a is an approach where you do run if position is smaller than 1 otherwise, if iron do jump , or do use if not|a is an approach where you do build if iron is not equal to 2 otherwise, if iron do run , or do find otherwise|a means that it would be good to do run if b otherwise, if b do build , or do use if not|if y you can build until finally a is smaller than 1|as soon as b is not the same as y you are able to find until inventory is larger than 0|if inventory is at most 0 you can jump until inventory is at most 0|a is an approach where it would be good to do find if position 2 otherwise, if iron do run , or do find if no other options are possible|whenever b is at least x you have the option to build until finally a is not equal to 0|b is a tactic where it is good to do run if b is greater than 1 , or do use if no other options are possible|a suggests that it would be advantageous to do find if iron is smaller than x otherwise, if a do use , or do use otherwise|a is a tactic where it is advantageous to do jump if iron y otherwise, if position do find , or do find if not|whenever a is larger than 0 you are able to run until finally b is at most 1|whenever position is smaller than y you have the option to use until finally b is less than or equal to y|b is an approach where you do find if a is greater than x otherwise, if b do jump , or do find otherwise|once inventory is equal to 1 you have the option to find until a is not the same as y|a is a strategy where you do use if position is exactly the same as y otherwise, if a do jump , or do find as a last resort|if a you are able to find until finally position is less than or equal to y|a is an approach where you do run if position is greater than x otherwise, if iron do use , or do use if not|a suggests that it would be advantageous to do build if b is exactly the same as x otherwise, if position do jump , or do build if not|b is a good strategy where you should do use if a y otherwise, if a do use , or do build if not|a means that it would be good to do find if position y otherwise, if position do find , or do find if not|when position is larger than x you have the choice to run until finally b is greater than 0|a is an approach where it would be good to do jump if iron is less than 2 otherwise, if a do run , or do build otherwise|b states that you should do find if position is equal to y otherwise, if a do run , or do use as a last resort|once inventory is equal to x you can run until position is greater than or equal to y|a means that it would be good to do find if a is not equal to 0 otherwise, if iron do build , or do build otherwise|b is a strategy where you do run if a is smaller than 0 otherwise, if iron do find , or do use otherwise|when inventory is at most x you are able to run until b is smaller than 2|as soon as position is less than 0 you have the option to run until finally b is greater than 2|as soon as b is larger than 2 you have the option to run until finally position is greater than or equal to x|a means that it would be good to do build if iron x otherwise, if iron do jump , or do jump if no other options are possible|b is a tactic where it is advantageous to do jump if b is not the same as y otherwise, if b do use , or do build if no other options are possible|a suggests that it would be advantageous to do find if a is less than 2 otherwise, if b do run , or do find as a last resort|as soon as a is smaller than 0 you have the choice to run until a is less than or equal to 2|whenever b is greater than x you have the choice to run until finally position is greater than 2|as soon as b is greater than or equal to y you have the choice to use until finally b is exactly the same as y|b entails that you do jump if position is greater than x otherwise, if iron do find , or do build if no other options are possible|a suggests that it would be advantageous to do use if position is greater than 0 otherwise, if a do jump , or do use otherwise|when b is not the same as y you have the choice to run until finally a is less than x|b is a tactic where it is good to do use if iron is not equal to y otherwise, if a do find , or do use as a last resort|a is an approach where it would be good to do use if b x otherwise, if b do build , or do run as a last resort|if a is less than or equal to y you can use until finally inventory is equal to 2|if b is not equal to x you have the choice to run until a is less than y|whenever inventory is at most 1 you have the choice to build until finally inventory is at most 1|a entails that you do jump if a is less than 0 , or do use as a last resort|a is a strategy where you do build if a is equal to 1 otherwise, if iron do jump , or do find otherwise|b is a tactic where it is advantageous to do use if a is less than x otherwise, if b do find , or do jump as a last resort|a entails that you do build if a 0 otherwise, if position do jump , or do build if no other options are possible|as soon as a is less than or equal to 1 you have the option to use until a is less than or equal to 1|b is a tactic where it is good to do build if a is greater than x , or do use if not|when position is greater than or equal to x you have the choice to use until inventory is greater than x|a suggests that it would be advantageous to do build if a is larger than 0 otherwise, if b do build , or do find as a last resort|once b you can jump until finally a is at least 1|b entails that you do build if a y otherwise, if iron do find , or do build if no other options are possible|a means that it would be good to do use if position is not equal to y otherwise, if iron do run , or do run otherwise|once b is less than or equal to 0 you can jump until y|a entails that you do find if position x otherwise, if position do build , or do jump if not|b is a tactic where it is advantageous to do use if b y otherwise, if position do build , or do run as a last resort|if b is less than or equal to 2 you can find until b is smaller than x|b is a tactic where it is advantageous to do build if iron otherwise, if iron do run , or do jump as a last resort|once b is at most 2 you have the option to use until finally position is greater than 2|b suggests that it would be advantageous to do build if b otherwise, if b do jump , or do jump as a last resort|whenever b is less than or equal to 2 you can use until finally b is equal to y|a is an approach where it would be good to do use if b is less than 0 , or do use otherwise|b suggests that it would be advantageous to do build if position is greater than x otherwise, if b do build , or do run as a last resort|if b is less than or equal to 0 you have the option to run until inventory is equal to 2|whenever b is greater than or equal to 0 you have the choice to use until position is smaller than 2|whenever b is at least x you are able to run until a is smaller than x|a entails that you do find if b is exactly the same as 0 otherwise, if iron do use , or do build otherwise|b means that it would be good to do run if iron x otherwise, if b do build , or do run if no other options are possible|as soon as inventory is greater than 0 you have the option to find until finally inventory is larger than 0|b entails that you do run if position y otherwise, if b do use , or do use if no other options are possible|b is an approach where it would be good to do jump if iron is not the same as y otherwise, if a do run , or do find if not|b states that you should do use if position is not equal to x otherwise, if b do jump , or do jump otherwise|a states that you should do jump if b 1 otherwise, if a do build , or do jump if no other options are possible|b means that it would be good to do jump if iron y otherwise, if iron do find , or do find as a last resort|once a is less than or equal to 2 you can jump until inventory is smaller than y|b suggests that it would be advantageous to do use if iron is not the same as x otherwise, if position do run , or do run if not|as soon as b is not the same as x you have the choice to jump until b is not equal to x|a is an approach where it would be good to do run if a is not equal to 2 otherwise, if b do run , or do use if not|a is a strategy where you do build if iron is equal to y otherwise, if b do build , or do jump if not|b is an approach where it would be good to do find if iron otherwise, if b do find , or do use if not|once y you can jump until finally b is exactly the same as 2|b is a good strategy where you should do run if position 0 , or do run if no other options are possible|b means that it would be good to do jump if a is less than x otherwise, if b do find , or do build as a last resort|when b is larger than 1 you can use until inventory is at most 1|b is a tactic where it is good to do run if iron is less than x otherwise, if b do use , or do jump otherwise|as soon as b is smaller than 2 you have the choice to use until finally inventory is not the same as 0|whenever inventory is less than or equal to x you are able to jump until position is larger than 1|when inventory is at most 0 you have the choice to run until finally position is at most y|b is an approach where it would be good to do jump if b y otherwise, if iron do build , or do find as a last resort|a is an approach where you do use if iron y otherwise, if iron do jump , or do use as a last resort|once position is equal to y you have the option to find until position is less than or equal to y|when position is larger than 1 you have the option to run until position is exactly the same as x|a entails that you do find if iron otherwise, if a do build , or do find otherwise|if a is not equal to 2 you can find until finally position is at most x|b states that you should do find if position is smaller than x otherwise, if iron do use , or do run if not|when inventory is greater than or equal to 0 you can jump until a is at least 2|once position is at most 0 you can jump until finally b is at least 2|a is an approach where it would be good to do find if a is smaller than 1 otherwise, if position do use , or do run as a last resort|if b is greater than or equal to 2 you have the choice to find until position is equal to y|whenever position is equal to 1 you are able to jump until finally inventory is greater than y|a suggests that it would be advantageous to do find if position is less than 0 , or do use as a last resort|a is a strategy where you do use if iron 2 otherwise, if a do find , or do find as a last resort|b is a strategy where you do use if position x , or do run if not|when b is at least 1 you have the choice to run until inventory is equal to 0|b is an approach where it would be good to do use if a x otherwise, if position do find , or do build as a last resort|b is an approach where it would be good to do jump if b is not equal to y otherwise, if a do use , or do run if no other options are possible|once inventory is less than or equal to x you have the choice to jump until finally inventory is smaller than 2|when inventory is greater than or equal to x you are able to build until inventory is at most 2|if position is not equal to 0 you can build until finally inventory is greater than or equal to x|whenever b is at least 0 you can jump until finally a is smaller than 1|a is an approach where you do build if a is larger than 0 otherwise, if iron do use , or do build if no other options are possible|b states that you should do build if a is not the same as x otherwise, if position do run , or do build if no other options are possible|a entails that you do find if position 0 otherwise, if a do build , or do build otherwise|b means that it would be good to do build if position y otherwise, if iron do run , or do find if not|a is an approach where you do use if iron is not the same as x otherwise, if position do use , or do jump if no other options are possible|whenever a is exactly the same as 2 you can run until finally b is exactly the same as y|a states that you should do use if position 0 otherwise, if iron do use , or do jump as a last resort|a is a tactic where it is good to do jump if b is less than y otherwise, if b do find , or do jump as a last resort|a is a good strategy where you should do jump if a is equal to 2 otherwise, if a do build , or do jump if no other options are possible|a is a tactic where it is good to do run if iron is greater than y otherwise, if iron do build , or do jump otherwise|once b is greater than or equal to 0 you have the option to build until finally inventory is larger than 2|when inventory is at most x you are able to run until b is equal to x|if inventory is less than or equal to 2 you are able to find until finally b is at most y|if b is equal to 0 you are able to run until finally inventory is smaller than 0|a states that you should do run if position is equal to y otherwise, if iron do run , or do run as a last resort|a is a strategy where you do build if a is greater than 0 otherwise, if a do run , or do find as a last resort|a entails that you do jump if b x otherwise, if b do use , or do jump as a last resort|once a is at least 1 you have the option to use until b is exactly the same as 0|when a is at least 1 you can run until position is not equal to 1|as soon as inventory is smaller than 1 you have the choice to build until a is not equal to y|as soon as inventory is greater than or equal to y you have the option to jump until position is equal to 2|b is a tactic where it is good to do use if b is greater than y otherwise, if iron do find , or do jump if not|once inventory is less than or equal to 2 you can build until b is less than or equal to 2|b is a tactic where it is good to do run if b is larger than x otherwise, if b do build , or do use if not|a entails that you do jump if position is greater than x otherwise, if b do run , or do run if not|when inventory you are able to jump until b is smaller than 2|as soon as inventory you are able to find until finally b is equal to x|a is an approach where it would be good to do run if position is equal to 0 otherwise, if iron do find , or do find otherwise|when inventory is less than or equal to y you have the option to find until finally position is greater than or equal to 1|b is an approach where it would be good to do find if b y , or do jump if not|b states that you should do run if b otherwise, if b do build , or do find as a last resort|a means that it would be good to do find if b is not the same as 0 otherwise, if position do run , or do run if not|as soon as position is greater than or equal to 1 you have the option to run until finally b is exactly the same as 0|when inventory is not the same as x you have the option to find until finally b is not the same as y|whenever position is less than x you can run until inventory is not equal to 0|whenever b is at least 1 you can build until position is not equal to 0|as soon as inventory is greater than y you have the choice to jump until b is equal to 2|whenever a is at least x you are able to find until finally b is greater than 2|as soon as inventory is equal to 0 you are able to use until finally position is at most x|as soon as a is less than y you can build until finally inventory is smaller than y|a suggests that it would be advantageous to do run if a is larger than 1 otherwise, if b do jump , or do find if not|a is a tactic where it is good to do run if position is not equal to 2 otherwise, if position do find , or do jump if not|b is an approach where it would be good to do build if a is not the same as y , or do use if not|a is a tactic where it is advantageous to do run if a is larger than x otherwise, if b do run , or do jump as a last resort|whenever b is less than x you are able to use until a is at most x|b means that it would be good to do use if iron is exactly the same as x otherwise, if a do find , or do use otherwise|a is a strategy where you do jump if iron 0 otherwise, if position do use , or do jump if no other options are possible|a means that it would be good to do build if position is smaller than 2 otherwise, if position do run , or do find if not|when position is greater than or equal to x you can run until inventory is at least y|as soon as b is smaller than x you have the choice to build until finally position is less than 0|a means that it would be good to do jump if position is equal to y otherwise, if b do jump , or do build if no other options are possible|a entails that you do use if position is exactly the same as 1 otherwise, if b do build , or do jump if no other options are possible|b is a good strategy where you should do jump if iron otherwise, if position do run , or do find as a last resort|a entails that you do build if a is greater than 2 otherwise, if position do build , or do jump as a last resort|when position you have the choice to run until b is smaller than 1|as soon as inventory is larger than 0 you have the choice to use until finally a is less than 2|a is a tactic where it is advantageous to do build if iron is less than 1 otherwise, if b do find , or do find if no other options are possible|a states that you should do run if b y otherwise, if iron do build , or do run if not|when a is greater than 0 you have the choice to jump until b is less than 0|whenever position is equal to 0 you have the choice to build until a is less than 0|whenever a is less than or equal to x you have the option to jump until finally a is greater than or equal to x|whenever inventory is at most x you have the choice to jump until finally inventory is exactly the same as x|b is a tactic where it is advantageous to do jump if b is equal to y otherwise, if b do find , or do find if not|a is a tactic where it is good to do find if iron x otherwise, if position do find , or do find if no other options are possible|b entails that you do use if a is larger than y otherwise, if iron do find , or do run if not|when b is greater than or equal to 0 you are able to use until finally a is exactly the same as 1|b is a tactic where it is good to do run if b x , or do run if no other options are possible|a is a tactic where it is good to do run if position y otherwise, if iron do find , or do build if no other options are possible|if a is greater than or equal to 0 you are able to build until a is exactly the same as 0|b is an approach where you do use if iron is larger than y otherwise, if b do run , or do use otherwise|b is an approach where you do find if iron is larger than y otherwise, if position do build , or do run if no other options are possible|once position is not the same as 0 you have the choice to find until b is not equal to x|once a is smaller than y you have the option to use until finally position is equal to y|a is a tactic where it is advantageous to do jump if iron 2 otherwise, if a do build , or do find if no other options are possible|as soon as b is greater than 0 you are able to build until finally a is smaller than 2|as soon as b is less than 0 you are able to find until position is at most 1|whenever inventory is larger than 2 you have the choice to build until position is smaller than 0|a is an approach where you do run if position x otherwise, if a do jump , or do use if no other options are possible|a suggests that it would be advantageous to do jump if b 2 otherwise, if a do build , or do run as a last resort|as soon as a is not the same as 0 you are able to run until finally position is greater than 1|once inventory is greater than or equal to 1 you are able to jump until finally a is smaller than x|a suggests that it would be advantageous to do jump if a 1 otherwise, if position do run , or do run if no other options are possible|b states that you should do run if a y otherwise, if b do find , or do find if not|whenever a is at most x you can use until finally a is less than or equal to 1|whenever inventory is less than y you can jump until a is less than x|when b is larger than x you are able to jump until position is not the same as 1|b is an approach where you do find if iron is exactly the same as x , or do jump if not|a is a tactic where it is good to do find if b is larger than 0 otherwise, if b do build , or do build as a last resort|a is a good strategy where you should do run if b is not equal to x otherwise, if b do run , or do jump if no other options are possible|b entails that you do use if position is less than 0 , or do find if no other options are possible|a is an approach where it would be good to do build if position is not the same as y otherwise, if position do use , or do use if not|a means that it would be good to do build if b is greater than y otherwise, if a do use , or do run as a last resort|once inventory is greater than y you are able to jump until finally position is greater than 0|a is an approach where it would be good to do jump if iron 0 otherwise, if b do find , or do use if no other options are possible|when b is equal to 0 you can jump until finally position is greater than or equal to 2|whenever position you are able to build until position is at most y|a states that you should do jump if b is exactly the same as 2 otherwise, if b do use , or do use otherwise|when inventory is less than or equal to x you have the option to find until finally position is equal to 2|a suggests that it would be advantageous to do run if iron is greater than 1 otherwise, if b do jump , or do use if not|if b is less than or equal to 2 you have the choice to run until finally position is smaller than y|a suggests that it would be advantageous to do build if b is not equal to 0 otherwise, if a do build , or do build as a last resort|b means that it would be good to do find if position is exactly the same as x|a entails that you do jump if b is exactly the same as 0 otherwise, if a do find , or do find if no other options are possible|as soon as inventory is at least 2 you have the option to find until finally position is exactly the same as x|a is an approach where it would be good to do run if iron is not equal to 0 otherwise, if b do find , or do run as a last resort|a is an approach where it would be good to do find if b otherwise, if iron do use , or do build if no other options are possible|when b is exactly the same as 1 you have the choice to use until finally y|a suggests that it would be advantageous to do find if position is not equal to 2 otherwise, if b do run , or do run otherwise|as soon as b is not the same as y you can build until finally position is equal to x|b is a good strategy where you should do run if iron is greater than 1 , or do jump otherwise|b states that you should do run if iron 0 , or do use otherwise|a is an approach where it would be good to do jump if b is exactly the same as 2 otherwise, if a do use , or do jump otherwise|a entails that you do build if position x otherwise, if b do use , or do find otherwise|b is an approach where you do use if position x otherwise, if iron do find , or do jump if not|a is a tactic where it is advantageous to do build if a is less than 1 otherwise, if b do use , or do run otherwise|b suggests that it would be advantageous to do jump if a is smaller than y otherwise, if position do jump , or do find otherwise|a entails that you do use if b is less than 1 otherwise, if iron do jump , or do run if no other options are possible|b states that you should do use if a is smaller than 2 otherwise, if position do jump , or do use as a last resort|b suggests that it would be advantageous to do jump if iron is less than y otherwise, if iron do find , or do use as a last resort|b states that you should do run if b is larger than x otherwise, if b do run , or do build if not|when position is not the same as 1 you have the option to find until position|as soon as b is greater than 2 you have the option to find until position is larger than 0|when b is greater than or equal to 1 you can run until inventory is exactly the same as 1|once inventory is larger than 2 you have the choice to jump until finally position is exactly the same as 2|whenever inventory is smaller than 2 you have the choice to find until finally position is greater than 2|when a is at most y you can find until inventory is smaller than y|b is a good strategy where you should do build if a is greater than y otherwise, if iron do build , or do run if not|as soon as a is exactly the same as 0 you are able to jump until b is not the same as 0|as soon as position is not equal to 0 you have the choice to run until finally b is at most x|when position is larger than y you have the choice to run until inventory is equal to y|as soon as a is not equal to y you have the choice to use until finally b is equal to 0|as soon as position is exactly the same as y you have the choice to find until finally b is not equal to y|if position is less than or equal to x you have the choice to find until position is at least y|once b is less than 1 you can build until finally b is smaller than 1|if b is at most 2 you can find until b is at most 1|once a is not the same as y you can find until b is not the same as 1|b is a tactic where it is advantageous to do find if a is not equal to 0 otherwise, if b do jump , or do jump if no other options are possible|when inventory is at most x you have the choice to build until a is greater than x|a is a good strategy where you should do use if iron otherwise, if iron do build , or do run otherwise|b suggests that it would be advantageous to do jump if b is not equal to x otherwise, if position do run , or do find as a last resort|as soon as inventory is smaller than 0 you have the option to find until a is less than 1|when a is at most 0 you can find until finally position is at least 0|a is a strategy where you do jump if b y otherwise, if a do run , or do run if not|a is a tactic where it is good to do build if b otherwise, if a do build , or do build if not|when b is smaller than 0 you are able to use until b is at most x|when inventory is greater than 1 you have the choice to build until inventory is greater than y|a is a good strategy where you should do jump if a 2 otherwise, if a do jump , or do build if no other options are possible|when position is exactly the same as x you have the option to jump until finally inventory is larger than 0|a is a tactic where it is good to do jump if position 2 otherwise, if position do use , or do jump as a last resort|a is an approach where it would be good to do jump if iron is less than x otherwise, if iron do use , or do run if no other options are possible|a entails that you do jump if position 0 otherwise, if a do find , or do use if not|if position is equal to 1 you have the option to build until a is not the same as y|a states that you should do use if b is smaller than 2 otherwise, if a do use , or do run otherwise|a entails that you do find if position x otherwise, if iron do find , or do run if not|a is an approach where it would be good to do run if iron y otherwise, if b do find , or do use if not|as soon as inventory is smaller than 1 you have the choice to jump until inventory is less than or equal to 2|once b you are able to run until finally b is smaller than 2|as soon as b you are able to find until position is at most 2|b suggests that it would be advantageous to do build if iron x otherwise, if a do build , or do jump otherwise|a is a strategy where you do run if b is less than y otherwise, if b do build , or do run if no other options are possible|a suggests that it would be advantageous to do run if iron x otherwise, if a do jump , or do use otherwise|whenever inventory you have the option to find until b is at most 1|as soon as b is larger than y you have the option to build until finally a is less than y|a entails that you do use if iron is equal to 1 otherwise, if position do run , or do build otherwise|b is a tactic where it is good to do run if a is smaller than 0 otherwise, if b do build , or do find as a last resort|a is an approach where it would be good to do jump if iron is exactly the same as x , or do use as a last resort|whenever a you can find until position is larger than 0|when a is not equal to y you are able to build until position is not equal to 2|a is an approach where you do jump if a is larger than 2 otherwise, if position do find , or do use if not|when a is exactly the same as y you are able to jump until b is not equal to 2|if inventory is at least 2 you have the choice to run until inventory is smaller than x|a suggests that it would be advantageous to do jump if iron is not the same as x otherwise, if a do build , or do run otherwise|a states that you should do jump if iron y otherwise, if iron do build , or do use if not|whenever b is at least 0 you are able to run until finally b is not the same as 0|b is a strategy where you do run if b is larger than x otherwise, if iron do use , or do find if no other options are possible|as soon as b is greater than or equal to x you have the choice to use until finally position is not the same as x|a is a tactic where it is good to do jump if position y otherwise, if a do jump , or do build if no other options are possible|once b is less than 1 you have the option to use until b is at least x|b entails that you do find if position x otherwise, if b do use , or do jump otherwise|if a is not the same as y you have the option to jump until finally position is equal to 2|whenever a is exactly the same as y you are able to jump until finally a is smaller than 2|when a is less than or equal to 0 you have the choice to jump until finally a is less than y|a is a strategy where you do jump if a is larger than y otherwise, if iron do jump , or do run if not|a is a strategy where you do use if position y otherwise, if b do build , or do build otherwise|a is a strategy where you do use if iron is smaller than y otherwise, if b do find , or do build if not|a means that it would be good to do find if a 0 otherwise, if a do run , or do find otherwise|whenever a is not equal to 2 you are able to run until finally a is larger than x|b is a good strategy where you should do run if b otherwise, if position do build , or do use if no other options are possible|b means that it would be good to do find if a is not the same as 1 otherwise, if position do run , or do jump otherwise|b entails that you do use if position y otherwise, if position do jump , or do find if not|a entails that you do jump if b is exactly the same as y , or do use if not|a suggests that it would be advantageous to do build if a y otherwise, if position do find , or do build as a last resort|a is a strategy where you do use if b is less than 0 otherwise, if iron do use , or do run otherwise|whenever a is at most x you have the option to run until finally a is greater than 0|b is a tactic where it is advantageous to do jump if a y otherwise, if iron do find , or do find otherwise|b is an approach where you do use if a otherwise, if position do jump , or do build if no other options are possible|b is a tactic where it is good to do use if a is larger than x otherwise, if b do use , or do find if not|b is a tactic where it is good to do run if iron is smaller than x otherwise, if a do build , or do run if not|whenever position is greater than 1 you can build until a is not equal to x|whenever inventory is at least 0 you can find until inventory is greater than 1|when inventory is greater than x you have the option to find until inventory is not equal to 0|b is an approach where you do find if position is less than y otherwise, if iron do use , or do build as a last resort|b means that it would be good to do build if iron x otherwise, if a do run , or do run otherwise|if inventory is less than 1 you have the choice to run until position is equal to 0|when inventory is greater than or equal to 2 you can use until finally a is at least x|if a is greater than 0 you have the choice to build until b is greater than or equal to y|when a is less than y you can run until position is not the same as y|once b is not equal to 1 you have the option to build until inventory is equal to y|if y you have the option to use until finally inventory is less than or equal to x|a is a tactic where it is advantageous to do jump if position is less than x otherwise, if position do find , or do build otherwise|b is a strategy where you do find if a is not the same as x otherwise, if a do run , or do build otherwise|when position you have the choice to run until finally inventory is exactly the same as x|when a is not the same as 0 you have the option to build until a is larger than x|a is a strategy where you do find if position 1 otherwise, if position do use , or do build otherwise|a is an approach where you do find if a is greater than 2 otherwise, if position do use , or do build if no other options are possible|whenever a is less than or equal to 0 you have the option to build until finally position is at most 1|as soon as inventory is larger than y you can build until finally position is exactly the same as 2|when inventory is less than 0 you have the option to jump until a is greater than x|once b you have the choice to run until position is larger than y|a is a strategy where you do use if b is exactly the same as x otherwise, if position do build , or do use if no other options are possible|if position is equal to x you have the choice to build until finally position is greater than or equal to y|a states that you should do use if iron is smaller than y otherwise, if a do run , or do find otherwise|a is an approach where it would be good to do find if position 1 otherwise, if b do build , or do jump as a last resort|b entails that you do use if position is smaller than x otherwise, if b do find , or do run if not|b is a tactic where it is advantageous to do run if iron is greater than x otherwise, if position do jump , or do use as a last resort|b suggests that it would be advantageous to do jump if position is smaller than 0 , or do build as a last resort|b is an approach where it would be good to do jump if b is exactly the same as y otherwise, if iron do run , or do run if no other options are possible|b is an approach where it would be good to do build if iron is exactly the same as y otherwise, if a do use , or do build if not|as soon as position is exactly the same as y you can build until b is at least 2|a means that it would be good to do build if position is larger than y otherwise, if iron do jump , or do use if not|once b is at least y you are able to run until inventory is smaller than 2|whenever inventory is larger than y you have the choice to build until position is not the same as y|a entails that you do jump if b is smaller than 0 otherwise, if b do use , or do jump if not|a entails that you do build if b 1 otherwise, if b do build , or do jump if not|b suggests that it would be advantageous to do find if b is exactly the same as y otherwise, if a do run , or do run otherwise|b states that you should do find if a is smaller than 0 otherwise, if b do jump , or do find otherwise|if position is less than 0 you have the choice to build until inventory is at most 0|a is a tactic where it is good to do run if b is equal to x otherwise, if a do jump , or do run otherwise|a suggests that it would be advantageous to do run if b y otherwise, if b do use , or do build if not|as soon as inventory is greater than 2 you have the option to run until finally position is less than 1|when b is greater than 0 you can build until a is exactly the same as 1|b means that it would be good to do find if position is equal to y otherwise, if iron do build , or do run otherwise|when position is greater than or equal to 2 you have the option to jump until inventory is greater than or equal to 0|a suggests that it would be advantageous to do find if position is equal to x otherwise, if a do jump , or do use if not|as soon as position is not equal to 0 you have the option to find until finally position is not equal to y|a is an approach where you do build if position is greater than 1 otherwise, if b do build , or do find if not|whenever b is greater than 1 you can use until finally a is smaller than x|when a is smaller than 1 you can run until finally inventory is at most y|as soon as a is greater than or equal to x you have the choice to jump until position is equal to 2|b states that you should do run if b 0 , or do run as a last resort|whenever position is larger than 0 you are able to build until b is at most 1|when a is larger than y you can use until position is smaller than y|a is a tactic where it is good to do run if b is not equal to y otherwise, if iron do use , or do run otherwise|a is a tactic where it is advantageous to do jump if iron is not the same as 1 otherwise, if iron do use , or do run as a last resort|if x you are able to build until finally b is not equal to y|a is a tactic where it is good to do build if a 0 otherwise, if position do find , or do run if not|as soon as inventory is not the same as y you have the option to jump until finally inventory|once b is exactly the same as 0 you can use until finally position is at least 0|a is a strategy where you do jump if position is less than 0 otherwise, if position do build , or do find as a last resort|b is an approach where it would be good to do run if a is exactly the same as 2 , or do build otherwise|a is a good strategy where you should do build if b is exactly the same as 1 , or do build if no other options are possible|b is an approach where you do jump if b is exactly the same as x otherwise, if iron do run , or do find otherwise|b states that you should do jump if iron y otherwise, if b do build , or do build if no other options are possible|a is an approach where it would be good to do jump if iron is not the same as 2 otherwise, if iron do jump , or do build as a last resort|a is an approach where it would be good to do find if position is equal to x otherwise, if iron do build , or do find if no other options are possible|when inventory is not equal to 1 you can run until finally inventory is at least 0|as soon as inventory is smaller than y you are able to find until inventory is equal to 0|when position is larger than 2 you can find until a is less than or equal to 1|as soon as position is smaller than y you have the option to build until finally a is larger than 0|as soon as b is equal to 2 you have the option to build until position is greater than or equal to y|when a is at most y you have the choice to build until position is less than or equal to x|a is a good strategy where you should do run if a 0 otherwise, if a do use , or do find otherwise|a is an approach where you do use if b x , or do use if not|when b is greater than 2 you can use until inventory is larger than 0|a is a strategy where you do build if position is greater than 2 otherwise, if a do jump , or do run as a last resort|a is a tactic where it is advantageous to do build if b is greater than 2 otherwise, if iron do jump , or do use if not|once position is not the same as x you are able to build until finally a is less than x|when b is larger than y you have the choice to build until position is exactly the same as 2|a is a strategy where you do jump if b is smaller than 0 otherwise, if b do build , or do run as a last resort|whenever a is larger than 0 you can find until inventory is not equal to 0|a suggests that it would be advantageous to do build if position 2 otherwise, if b do find , or do use if no other options are possible|whenever b is less than 1 you are able to build until finally a is exactly the same as 1|a is a strategy where you do build if b 1 otherwise, if b do jump , or do jump otherwise|a is a tactic where it is advantageous to do build if a is not the same as y , or do jump if no other options are possible|a is an approach where it would be good to do jump if a is equal to 2 otherwise, if position do jump , or do jump as a last resort|b states that you should do build if position is not equal to y otherwise, if b do build , or do build if no other options are possible|whenever position is exactly the same as 0 you are able to run until finally position is equal to y|b is a strategy where you do use if a y otherwise, if iron do use , or do find if no other options are possible|when position is exactly the same as 2 you are able to build until finally inventory is not the same as 0|a is a tactic where it is good to do run if position is not equal to x otherwise, if b do jump , or do run if not|when position you can build until inventory is not equal to 1|when a is less than or equal to y you have the choice to find until position is less than 1|a suggests that it would be advantageous to do jump if b 2 otherwise, if iron do run , or do use as a last resort|whenever position is smaller than 2 you have the option to jump until finally b is exactly the same as 0|when a is greater than or equal to 1 you are able to run until a is less than 0|a is a tactic where it is advantageous to do find if b is equal to y , or do find if no other options are possible|a entails that you do use if iron is exactly the same as y otherwise, if iron do run , or do use if no other options are possible|a is a good strategy where you should do build if a x otherwise, if position do run , or do use if not|a is a good strategy where you should do build if b 1 otherwise, if a do find , or do find if not|a suggests that it would be advantageous to do find if position is exactly the same as 2 otherwise, if a do jump , or do build if no other options are possible|if a is at least 0 you are able to run until inventory is greater than x|b is a good strategy where you should do jump if a is not the same as x otherwise, if position do build , or do use if not|when b is greater than or equal to 2 you can jump until inventory is at most y|a is a strategy where you do build if iron is exactly the same as 1 otherwise, if b do use , or do jump if not|if b is less than or equal to x you have the option to build until inventory is larger than 2|a states that you should do run if position is less than x otherwise, if position do find , or do build as a last resort|as soon as b is not the same as 1 you have the option to find until b|once a is less than x you have the option to use until inventory is not equal to 0|once a is smaller than 0 you have the choice to jump until position is not equal to 2|as soon as position is not equal to 1 you have the option to build until finally b is exactly the same as 2|a is a good strategy where you should do find if position 0 otherwise, if iron do run , or do use if no other options are possible|b is a strategy where you do find if b is equal to x otherwise, if iron do jump , or do find if no other options are possible|b is a tactic where it is advantageous to do run if position y otherwise, if iron do use , or do jump otherwise|once b is less than or equal to 2 you can use until inventory is greater than or equal to x|once position is not equal to y you have the option to build until b is larger than x|a is a strategy where you do find if a x otherwise, if position do build , or do build as a last resort|a is a tactic where it is advantageous to do jump if iron 0 otherwise, if a do build , or do use otherwise|a is a good strategy where you should do build if iron y otherwise, if iron do run , or do run if no other options are possible|if inventory is less than 0 you are able to run until finally a is not equal to x|once a is less than or equal to y you are able to use until inventory is greater than 1|b entails that you do run if position is not the same as x otherwise, if b do run , or do find as a last resort|b is an approach where it would be good to do build if iron is exactly the same as y otherwise, if a do jump , or do jump as a last resort|when inventory is not equal to 1 you can find until finally b is at least 1|if inventory is less than 2 you are able to jump until finally position is larger than y|if a you have the choice to use until finally inventory is smaller than x|a means that it would be good to do build if position is greater than x , or do jump as a last resort|when a is exactly the same as 1 you can jump until a is equal to 1|if position is larger than x you are able to build until inventory is smaller than 0|b is a good strategy where you should do run if a is not equal to 0 otherwise, if b do find , or do use as a last resort|a entails that you do run if b is not the same as 2 otherwise, if a do find , or do jump otherwise|a states that you should do jump if position 0 otherwise, if b do build , or do jump if not|whenever b is at most 1 you have the option to run until inventory is equal to y|once inventory is equal to 0 you have the choice to use until inventory is greater than y|when inventory is exactly the same as 0 you have the option to jump until position is equal to y|a is a strategy where you do use if b is larger than 0 otherwise, if position do find , or do build as a last resort|a entails that you do use if iron y otherwise, if iron do find , or do jump if no other options are possible|a is a strategy where you do jump if iron is equal to y otherwise, if iron do run , or do find as a last resort|a entails that you do jump if a 1 otherwise, if a do jump , or do find as a last resort|if inventory is greater than or equal to 1 you have the choice to jump until a is greater than or equal to y|a suggests that it would be advantageous to do run if b x otherwise, if position do run , or do run if not|a is a good strategy where you should do find if position is not the same as 0 otherwise, if position do build , or do find if not|once b is at most x you can use until finally a is exactly the same as y|b entails that you do use if iron is larger than x otherwise, if iron do run , or do find as a last resort|a is an approach where it would be good to do jump if iron is greater than y otherwise, if a do run , or do build if no other options are possible|when b is not equal to x you have the option to find until finally a is larger than x|if a is less than 1 you have the choice to run until finally inventory is equal to 2|whenever b is less than 1 you are able to find until finally b is at most y|a is a good strategy where you should do run if b 1 otherwise, if b do use , or do use otherwise|when position is exactly the same as y you are able to build until position is not equal to 2|b states that you should do run if iron y otherwise, if b do jump , or do jump if not|b suggests that it would be advantageous to do use if a is not equal to 1 otherwise, if position do use , or do jump if no other options are possible|once inventory is smaller than 1 you are able to use until finally a is larger than 0|whenever a is at most 1 you can find until finally a is less than or equal to y|a is an approach where it would be good to do jump if a is equal to x otherwise, if iron do build , or do run if no other options are possible|a states that you should do find if b 0 otherwise, if position do find , or do find otherwise|when position is greater than or equal to 2 you are able to jump until finally b is exactly the same as 0|whenever position you are able to build until position is at least 2|a is an approach where you do find if iron is equal to x otherwise, if a do find , or do jump if not|b states that you should do build if position x otherwise, if a do jump , or do jump if no other options are possible|b entails that you do find if a is less than y otherwise, if b do build , or do find as a last resort|b is a tactic where it is advantageous to do jump if b is greater than x otherwise, if a do run , or do use otherwise|as soon as b is not the same as 2 you can run until finally a is exactly the same as 1|once b you are able to find until finally position is larger than 2|when a is larger than x you have the option to run until finally a is larger than 1|whenever b is not equal to x you are able to find until b is larger than 2|a is a tactic where it is advantageous to do find if iron is smaller than x otherwise, if position do jump , or do use otherwise|a states that you should do build if position is not the same as y , or do find otherwise|whenever inventory is smaller than 1 you have the choice to build until a is at most x|as soon as x you are able to use until inventory is not equal to 2|when inventory is smaller than 2 you are able to find until finally a is exactly the same as y|once inventory is at most 2 you have the option to use until finally inventory is less than or equal to 2|a is a tactic where it is good to do run if b is less than x otherwise, if iron do jump , or do jump if no other options are possible|a is a tactic where it is good to do build if b 0 otherwise, if position do jump , or do jump otherwise|a is a strategy where you do run if a is greater than 0 otherwise, if a do build , or do jump if not|a is an approach where it would be good to do build if iron 1 otherwise, if a do use , or do use otherwise|b is a tactic where it is good to do use if a is not the same as 1 otherwise, if iron do use , or do run if not|b entails that you do run if a x otherwise, if b do use , or do build if not|a states that you should do find if position is larger than 2 otherwise, if a do jump , or do build as a last resort|once position is not equal to x you are able to find until inventory is exactly the same as 2|when inventory is greater than 1 you have the choice to build until position is at most 2|when position is at most y you have the option to run until inventory|a is a tactic where it is advantageous to do jump if position is not equal to 0 otherwise, if a do build , or do find as a last resort|a is a tactic where it is advantageous to do jump if a is not the same as y otherwise, if a do build , or do build if not|whenever position is exactly the same as 1 you have the option to build until finally inventory is greater than x|when position is larger than 1 you have the option to jump until a is at least x|a means that it would be good to do run if a 1 otherwise, if iron do find , or do find if not|b is a tactic where it is advantageous to do jump if a is smaller than x otherwise, if position do jump , or do jump otherwise|a is an approach where it would be good to do build if a is greater than 2 otherwise, if position do find , or do use as a last resort|as soon as inventory is greater than 1 you have the option to build until finally b is exactly the same as 1|if y you have the choice to build until a is less than y|b is an approach where you do jump if a is smaller than y otherwise, if a do jump , or do jump if not|when position is less than y you can run until b is at least x|as soon as b is smaller than 1 you are able to find until finally position is exactly the same as 2|b is an approach where it would be good to do run if b is larger than y otherwise, if position do run , or do run otherwise|when a is greater than y you can build until a is less than or equal to y|as soon as b is not the same as x you are able to find until b is smaller than 0|a entails that you do jump if iron 1 otherwise, if iron do run , or do run as a last resort|a is an approach where you do jump if iron 0 otherwise, if a do run , or do run if not|when position is smaller than x you have the choice to build until finally a is at least 2|a is an approach where you do jump if iron 2 otherwise, if a do run , or do build if not|a is a tactic where it is good to do build if b is larger than 2 otherwise, if position do build , or do use otherwise|b means that it would be good to do find if b is larger than y otherwise, if a do run , or do find if not|a is an approach where it would be good to do run if a is greater than x otherwise, if iron do build , or do use otherwise|whenever a is not the same as y you are able to jump until position is greater than or equal to y|as soon as a is larger than 0 you can use until finally inventory is smaller than 1|a suggests that it would be advantageous to do find if position 0 otherwise, if b do run , or do run otherwise|once position is less than 2 you have the option to use until finally a is equal to 2|a is a tactic where it is advantageous to do run if b is not the same as 1 otherwise, if b do build , or do find if no other options are possible|a is a tactic where it is good to do build if iron is larger than 1 otherwise, if b do run , or do run if not|b means that it would be good to do jump if b is equal to x otherwise, if a do use , or do use as a last resort|if position is less than y you can jump until position is exactly the same as 0|a is an approach where you do find if position is not equal to 1 otherwise, if iron do find , or do use otherwise|a is an approach where you do run if iron is exactly the same as x otherwise, if a do find , or do build if no other options are possible|b means that it would be good to do find if position is exactly the same as x otherwise, if position do run , or do find otherwise|b is an approach where you do run if a is less than 1 otherwise, if a do build , or do find if not|b entails that you do jump if iron is not the same as 0 , or do jump as a last resort|a is a strategy where you do build if position 0 otherwise, if a do find , or do run if no other options are possible|once inventory is at least 0 you are able to run until inventory is greater than 0|b suggests that it would be advantageous to do run if a is smaller than x otherwise, if b do find , or do find if not|a is a good strategy where you should do use if iron is not equal to 1 otherwise, if position do build , or do run otherwise|a is a tactic where it is good to do use if iron is not the same as 2 otherwise, if a do run , or do use if no other options are possible|if a is smaller than 2 you have the choice to use until finally a is smaller than y|b suggests that it would be advantageous to do find if b y otherwise, if a do run , or do run otherwise|if inventory is exactly the same as 0 you are able to build until finally position is not the same as 1|a is an approach where it would be good to do run if iron y otherwise, if iron do find , or do jump if not|whenever position is smaller than y you have the option to build until b is not the same as y|b is a tactic where it is good to do build if b is not the same as y otherwise, if iron do build , or do run otherwise|when inventory is not equal to y you have the choice to run until finally inventory is greater than 0|if position is at most 2 you have the option to use until a is not equal to y|once position is at least 2 you are able to build until finally inventory is smaller than 0|b is an approach where you do use if a is less than 2 otherwise, if b do build , or do use if not|a is a tactic where it is advantageous to do find if position 0 otherwise, if b do use , or do use as a last resort|as soon as a is not equal to 0 you have the choice to jump until b is greater than or equal to y|once a you are able to jump until position is at most 2|a states that you should do build if position is larger than x otherwise, if position do use , or do run if not|as soon as position is greater than 2 you can jump until a is less than 1|once a is not equal to 0 you have the choice to find until position is less than or equal to 0|a states that you should do use if a is not equal to y otherwise, if position do build , or do find if not|when inventory is smaller than 0 you are able to use until a is at most y|b suggests that it would be advantageous to do use if position is less than y otherwise, if a do jump , or do jump as a last resort|as soon as a is not equal to 2 you can build until position is equal to x|a suggests that it would be advantageous to do jump if b otherwise, if iron do find , or do find otherwise|if a is not equal to 1 you have the option to jump until finally inventory is equal to 2|whenever position is at least 1 you have the option to jump until finally y|b is an approach where it would be good to do build if position is larger than y otherwise, if b do build , or do run as a last resort|a is an approach where you do jump if b is equal to 1 otherwise, if b do build , or do jump if not|once position is smaller than 2 you are able to use until a is larger than x|a states that you should do jump if iron y otherwise, if iron do jump , or do use if not|if b is less than or equal to x you have the option to use until finally inventory is at least 1|a is a good strategy where you should do find if b x otherwise, if a do build , or do jump if not|a is a good strategy where you should do jump if iron is less than 1 otherwise, if iron do use , or do run if no other options are possible|when b is larger than 2 you can jump until b is at least 0|as soon as b is equal to 0 you are able to build until finally a is greater than 1|a is a strategy where you do find if position 2 otherwise, if position do find , or do use if no other options are possible|b is a strategy where you do jump if b is not equal to y otherwise, if position do build , or do jump as a last resort|once inventory is equal to 1 you can find until inventory is greater than 0|b is a tactic where it is good to do jump if iron x otherwise, if iron do find , or do jump as a last resort|a suggests that it would be advantageous to do run if a is exactly the same as y otherwise, if a do jump , or do build if no other options are possible|a is an approach where it would be good to do run if position is smaller than 1 otherwise, if a do use , or do build otherwise|a suggests that it would be advantageous to do jump if iron is not equal to 2 otherwise, if b do find , or do use if not|a suggests that it would be advantageous to do find if b is less than 1 otherwise, if a do jump , or do jump otherwise|a means that it would be good to do jump if position is exactly the same as y otherwise, if a do build , or do jump otherwise|a is a strategy where you do find if position is not the same as x otherwise, if iron do find , or do use if not|whenever b is less than or equal to y you are able to use until position is equal to 0|once b is at least 2 you are able to build until a is smaller than y|when inventory is larger than 1 you have the option to use until finally position is greater than 1|a is a tactic where it is good to do jump if position is less than x otherwise, if b do jump , or do find if not|when inventory is smaller than 2 you have the choice to use until position is smaller than x|as soon as inventory is less than or equal to x you can jump until finally position is exactly the same as 2|a entails that you do build if b is not the same as 2 otherwise, if b do use , or do find if no other options are possible|once b is less than or equal to 2 you can build until finally b is larger than 2|as soon as position is at most y you have the option to use until finally b is exactly the same as 0|if inventory is exactly the same as 0 you can find until a is at least 0|whenever a is smaller than x you are able to use until finally position is greater than 1|a means that it would be good to do use if position is smaller than 0 otherwise, if a do use , or do build otherwise|if inventory is at least x you have the option to use until position is greater than or equal to y|if a is not the same as 1 you have the choice to run until finally position|b is a strategy where you do use if b y otherwise, if position do use , or do find if not|once a is not the same as 0 you can build until position is not the same as 2|a is an approach where it would be good to do find if iron is exactly the same as y otherwise, if iron do run , or do find as a last resort|a states that you should do find if a is equal to 1 otherwise, if a do use , or do build if not|a entails that you do find if iron 0 otherwise, if a do build , or do use if no other options are possible|a is a strategy where you do run if iron otherwise, if a do find , or do run otherwise|b states that you should do use if a is less than 2 otherwise, if a do build , or do use as a last resort|a means that it would be good to do jump if b 1 otherwise, if iron do jump , or do find if no other options are possible|a means that it would be good to do jump if position is exactly the same as y otherwise, if position do jump , or do find if not|a is an approach where it would be good to do jump if position is equal to 2 otherwise, if iron do build , or do run as a last resort|as soon as x you have the choice to build until finally position is smaller than 1|when a is less than 0 you have the choice to run until x|a states that you should do jump if iron is greater than 1 otherwise, if position do run , or do use if no other options are possible|as soon as inventory is greater than x you have the choice to run until b is less than 1|whenever a is exactly the same as x you are able to run until inventory is equal to 1|b is an approach where it would be good to do jump if b is equal to y otherwise, if iron do find , or do use otherwise|a suggests that it would be advantageous to do build if iron 0 otherwise, if b do jump , or do build if no other options are possible|if position is not equal to 2 you have the option to use until position is smaller than 0|if a is exactly the same as 0 you have the option to find until finally b is exactly the same as 0|when inventory is not equal to 1 you can build until b is less than or equal to x|b states that you should do find if position is smaller than y otherwise, if b do find , or do run if not|a is an approach where you do build if a is larger than 1 otherwise, if position do jump , or do run as a last resort|a is a good strategy where you should do use if iron otherwise, if a do find , or do jump if not|a is a good strategy where you should do build if b is not equal to 2|as soon as inventory is at most x you have the option to jump until finally b is smaller than x|as soon as inventory is larger than y you are able to jump until finally b is not equal to x|once inventory is greater than or equal to x you have the choice to build until finally inventory is not the same as 0|once a is smaller than 2 you are able to find until finally position is less than or equal to y|once inventory is exactly the same as 0 you are able to jump until position is at most y|b is an approach where you do run if position otherwise, if a do use , or do use otherwise|a is an approach where you do find if position is smaller than 1 otherwise, if position do jump , or do build if no other options are possible|once inventory is at most 2 you have the choice to jump until inventory is less than or equal to 2|a is an approach where you do use if b is not the same as y otherwise, if a do use , or do jump if not|a means that it would be good to do use if a is larger than 0 otherwise, if b do jump , or do find as a last resort|a is a good strategy where you should do find if iron x , or do build if no other options are possible|once position is less than 0 you have the choice to run until a is exactly the same as 0|a entails that you do use if position is equal to 1 otherwise, if b do build , or do find if no other options are possible|b is a tactic where it is advantageous to do run if iron is exactly the same as x otherwise, if position do jump , or do run as a last resort|whenever b is greater than y you have the option to run until b is at least y|b is a strategy where you do run if a is equal to 1 otherwise, if b do find , or do find if not|when inventory is greater than or equal to y you can run until a|as soon as a is greater than 1 you have the choice to build until b is exactly the same as 2|a is an approach where it would be good to do jump if position is not equal to x otherwise, if b do jump , or do build if no other options are possible|a entails that you do find if b x otherwise, if iron do run , or do find as a last resort|a suggests that it would be advantageous to do build if iron is less than 0 otherwise, if position do build , or do jump if not|if b is larger than x you can jump until finally position is less than 2|a is a tactic where it is advantageous to do jump if position 1 otherwise, if iron do find , or do build as a last resort|a is an approach where you do find if position is equal to 2 otherwise, if position do build , or do jump otherwise|a suggests that it would be advantageous to do build if b 0 otherwise, if b do build , or do run if no other options are possible|a is an approach where you do find if b is not the same as 1 otherwise, if b do build , or do use as a last resort|once position is not equal to x you are able to jump until finally position is exactly the same as y|when a you have the choice to run until a is at least 2|when b is smaller than y you are able to build until position is greater than 2|a is an approach where it would be good to do find if a is less than 2 otherwise, if a do use , or do build if no other options are possible|b entails that you do build if position y otherwise, if position do jump , or do use otherwise|b is a strategy where you do build if b is less than x otherwise, if a do run , or do run if not|whenever inventory is not equal to 0 you can build until inventory is larger than y|once a is not equal to y you are able to run until a is less than 0|b is an approach where you do jump if b is not the same as y otherwise, if a do run , or do use if not|when position is greater than y you have the option to build until finally b is not the same as 2|when a is larger than x you can use until finally b is not the same as y|a is a tactic where it is advantageous to do run if iron is less than 1 otherwise, if iron do build , or do run otherwise|when position is larger than x you have the choice to use until finally b is at least 1|a means that it would be good to do jump if a is less than 1 otherwise, if a do run , or do jump otherwise|a states that you should do use if a is not equal to 0 otherwise, if position do find , or do find as a last resort|a is an approach where you do find if iron is exactly the same as 0 otherwise, if iron do find , or do find if not|a is a strategy where you do find if iron is less than x otherwise, if position do run , or do build otherwise|a states that you should do find if b 1 , or do build otherwise|once b is exactly the same as y you can use until finally b is equal to 2|a is a tactic where it is advantageous to do build if iron is greater than 1 otherwise, if a do use , or do use otherwise|a is an approach where you do use if a 1 otherwise, if iron do jump , or do build as a last resort|a is an approach where you do run if a is exactly the same as 0 otherwise, if position do find , or do build if not|b states that you should do build if a is smaller than 1 otherwise, if a do jump , or do find as a last resort|once position is exactly the same as 0 you are able to use until inventory is not equal to 0|a is a good strategy where you should do use if iron is not equal to 1 otherwise, if iron do jump , or do use otherwise|a entails that you do find if b y otherwise, if position do find , or do build otherwise|whenever position is smaller than 2 you are able to run until a is greater than 1|a entails that you do jump if b is not the same as 0 otherwise, if b do find , or do use if not|as soon as inventory is greater than or equal to x you are able to run until inventory is not the same as 1|a entails that you do jump if b y otherwise, if position do find , or do use as a last resort|a states that you should do find if position is equal to 0 otherwise, if b do run , or do use if no other options are possible|b entails that you do build if iron is smaller than y otherwise, if iron do run , or do run if not|when position is greater than or equal to 0 you can find until b is smaller than 1|a entails that you do run if a 2 otherwise, if a do use , or do find if no other options are possible|a means that it would be good to do use if a is exactly the same as 0 otherwise, if a do build , or do run if not|if position is larger than 2 you can run until a is larger than 1|whenever inventory is equal to 1 you have the option to jump until finally a is larger than y|a suggests that it would be advantageous to do jump if iron 0 otherwise, if a do find , or do use otherwise|b states that you should do use if a is not equal to x otherwise, if iron do jump , or do run if not|when position is at most x you have the choice to build until inventory is exactly the same as 0|b entails that you do run if iron is less than x otherwise, if iron do use , or do build as a last resort|a is an approach where it would be good to do run if position is equal to 1 otherwise, if a do jump , or do use if not|if position is less than 0 you have the choice to use until finally b is at least 2|a entails that you do run if b 1 otherwise, if b do find , or do use if not|as soon as b is less than 0 you have the choice to find until a is greater than 0|once inventory is not equal to 1 you have the option to find until position is smaller than 2|a is a good strategy where you should do jump if a is larger than 0 otherwise, if iron do run , or do run otherwise|a is a tactic where it is good to do use if a is not the same as 0 otherwise, if b do find , or do run if no other options are possible|once inventory is not equal to x you have the option to find until finally inventory is at least x|as soon as a is not the same as x you can use until b is larger than y|a states that you should do build if position is smaller than 1 otherwise, if a do jump , or do use otherwise|whenever a is greater than x you have the choice to build until b is less than or equal to 0|b is an approach where it would be good to do build if iron is equal to x otherwise, if iron do find , or do find as a last resort|whenever position is smaller than 1 you can build until finally inventory is exactly the same as 2|when a is greater than or equal to 0 you have the option to run until finally position is greater than y|b is a strategy where you do find if iron is smaller than y otherwise, if iron do run , or do find as a last resort|b is an approach where you do run if position is equal to y otherwise, if position do jump , or do run if no other options are possible|b is an approach where you do jump if a is exactly the same as 2 otherwise, if b do jump , or do jump if not|a is a strategy where you do jump if a is not equal to 2 otherwise, if iron do use , or do use otherwise|a entails that you do find if position 1 otherwise, if iron do use , or do run as a last resort|as soon as inventory is less than or equal to 2 you have the choice to jump until finally inventory is greater than or equal to 0|a is an approach where you do use if b y otherwise, if b do use , or do find as a last resort|if inventory is smaller than 0 you have the choice to build until finally inventory is not the same as y|when inventory is not equal to 2 you can use until a is less than 0|a entails that you do build if b y otherwise, if b do build , or do build if not|b is an approach where it would be good to do jump if iron is not equal to y otherwise, if iron do jump , or do run if not|if a is not equal to 2 you are able to jump until b is greater than x|a is an approach where it would be good to do use if a is smaller than x otherwise, if a do run , or do run if not|a states that you should do jump if a x otherwise, if b do use , or do find otherwise|a is an approach where you do build if a is equal to 2 otherwise, if a do run , or do build as a last resort|a is a good strategy where you should do use if a is smaller than x otherwise, if b do find , or do find as a last resort|once y you are able to run until inventory is smaller than 2|if inventory is equal to 1 you are able to run until a is larger than 0|as soon as position is greater than 0 you are able to jump until position is less than or equal to 2|a is a strategy where you do build if position is smaller than y otherwise, if b do jump , or do build if no other options are possible|a entails that you do jump if iron is less than 0 otherwise, if position do run , or do use if not|a means that it would be good to do find if a 0 otherwise, if b do use , or do jump if not|once b is greater than 2 you have the option to find until finally position is at least x|as soon as inventory is at least x you have the option to use until finally b is greater than 1|when b is equal to 0 you have the option to jump until finally b is equal to y|a is a tactic where it is advantageous to do build if b is equal to 1 , or do use otherwise|as soon as b is not equal to 2 you have the choice to find until inventory is at least 2|a is an approach where you do jump if a is less than 1 otherwise, if b do build , or do build if not|a is a tactic where it is good to do jump if iron is less than 2 otherwise, if iron do jump , or do use otherwise|when inventory is less than 2 you can build until b is not equal to 1|as soon as position is at most x you can jump until finally inventory is exactly the same as x|b means that it would be good to do run if b x otherwise, if b do jump , or do run if not|as soon as position is less than 2 you have the option to build until finally inventory|whenever a is at most y you have the option to find until finally inventory is larger than 0|b is a tactic where it is good to do run if position is exactly the same as y otherwise, if position do use , or do run if not|whenever y you are able to use until finally inventory is exactly the same as y|a is an approach where you do jump if b is equal to 2 otherwise, if b do run , or do run if no other options are possible|a is a tactic where it is good to do jump if b is not the same as 0 otherwise, if a do run , or do jump as a last resort|b means that it would be good to do jump if a is less than 0 otherwise, if iron do build , or do use as a last resort|a is a strategy where you do build if iron is not the same as x otherwise, if a do run , or do jump as a last resort|a is a good strategy where you should do run if position x otherwise, if iron do run , or do build if not|if a is equal to 1 you can build until b is exactly the same as y|a is an approach where it would be good to do jump if a 0 otherwise, if iron do find , or do use if not|a means that it would be good to do find if iron is greater than 1 otherwise, if b do build , or do use as a last resort|once position is larger than 1 you have the choice to build until a is equal to 1|when inventory is less than 1 you have the option to find until finally a is greater than or equal to 0|a suggests that it would be advantageous to do jump if a 2 otherwise, if a do run , or do build otherwise|whenever a is at most 2 you have the choice to build until finally a is at least y|a states that you should do jump if b is equal to x otherwise, if position do build , or do run as a last resort|a means that it would be good to do jump if a is not the same as 1 otherwise, if a do jump , or do jump if not|a is a good strategy where you should do jump if a is smaller than y otherwise, if a do run , or do build as a last resort|once inventory is less than or equal to x you are able to build until position is not equal to 1|once position is less than x you can run until inventory is larger than x|once a is not equal to 2 you can jump until finally position is less than 2|a is a tactic where it is good to do use if b x otherwise, if a do find , or do build if no other options are possible|when position is larger than 0 you can use until position is at most y|b is an approach where it would be good to do build if b otherwise, if position do run , or do find as a last resort|a is a good strategy where you should do run if iron 0 otherwise, if iron do run , or do build otherwise|a is a strategy where you do run if a otherwise, if iron do use , or do build as a last resort|b is a strategy where you do find if position is greater than 2 , or do build as a last resort|once a is at most 0 you are able to jump until finally inventory is at most 0|a states that you should do jump if b is larger than x otherwise, if iron do run , or do use as a last resort|when position is smaller than 0 you have the choice to build until b is at least y|a is a strategy where you do run if b is not the same as 1 otherwise, if iron do jump , or do build otherwise|a is a tactic where it is good to do run if a 1 otherwise, if a do find , or do use as a last resort|a means that it would be good to do find if b 2 otherwise, if b do jump , or do run as a last resort|a is an approach where it would be good to do run if a is not the same as y otherwise, if a do find , or do run if not|whenever a is less than or equal to x you are able to build until finally a is less than x|a is a tactic where it is good to do build if position is not the same as 0 otherwise, if position do find , or do find as a last resort|if b is less than 2 you can run until finally position is less than or equal to 1|a is a strategy where you do jump if position x otherwise, if a do build , or do run if no other options are possible|if a is smaller than 0 you are able to find until position is greater than or equal to 0|as soon as a is greater than or equal to 1 you have the choice to run until b is equal to 1|b states that you should do use if a is not the same as 2 otherwise, if iron do build , or do jump otherwise|once b is equal to 0 you are able to jump until b is not the same as x|a means that it would be good to do run if position is smaller than 2 otherwise, if iron do run , or do jump as a last resort|b is a tactic where it is advantageous to do use if position otherwise, if position do use , or do build otherwise|a is a tactic where it is good to do find if iron 0 otherwise, if iron do use , or do jump if no other options are possible|a is a tactic where it is good to do find if position is exactly the same as 0 otherwise, if a do run , or do run if not|as soon as a is less than or equal to y you are able to jump until finally b|as soon as position is at least 1 you can build until finally inventory is larger than x|whenever inventory is at most 2 you can use until finally inventory is greater than or equal to 2|whenever a is not the same as 2 you have the choice to build until finally inventory is greater than x|b means that it would be good to do find if a is smaller than x otherwise, if b do jump , or do build if no other options are possible|when position is greater than 2 you can run until a is less than or equal to 1|as soon as inventory is not the same as 1 you are able to jump until b is not the same as y|if position is larger than y you have the option to use until finally inventory is at most x|a is an approach where you do find if position is not equal to 1 otherwise, if position do run , or do jump otherwise|a is an approach where it would be good to do use if b is greater than 1 otherwise, if a do run , or do jump otherwise|b is a tactic where it is good to do build if a is less than x otherwise, if a do jump , or do use as a last resort|once b is less than or equal to 0 you can find until finally inventory is greater than y|as soon as inventory is less than or equal to x you can find until finally b is larger than 0|a entails that you do use if a 1 otherwise, if b do jump , or do build otherwise|a is an approach where you do find if a is exactly the same as 2 otherwise, if a do find , or do run as a last resort|a means that it would be good to do find if position 0 otherwise, if a do use , or do run if not|a suggests that it would be advantageous to do build if position is larger than 1 otherwise, if a do build , or do run otherwise|b means that it would be good to do run if a x otherwise, if position do use , or do jump if not|a entails that you do build if iron is greater than 1 otherwise, if position do find , or do find if not|b means that it would be good to do jump if iron x otherwise, if b do use , or do use as a last resort|b suggests that it would be advantageous to do find if a y otherwise, if b do run , or do run if not|as soon as a is at most x you can find until b is exactly the same as 1|once inventory is greater than 2 you can build until a is larger than 0|when a is at least 0 you are able to jump until finally a is exactly the same as 2|a is an approach where you do build if iron is larger than 0 otherwise, if b do run , or do run if not|b suggests that it would be advantageous to do build if iron is not the same as x otherwise, if a do jump , or do run as a last resort|b is a good strategy where you should do use if position is exactly the same as x otherwise, if a do use , or do jump as a last resort|a states that you should do find if b is exactly the same as x otherwise, if position do run , or do run otherwise|once b is exactly the same as 1 you can find until finally b is less than or equal to y|as soon as a is at most y you have the option to build until finally inventory is at least 0|b states that you should do use if iron is larger than 0|b is an approach where you do use if position y otherwise, if iron do jump , or do build if not|a is a strategy where you do find if position is less than y otherwise, if iron do use , or do use otherwise|a is a tactic where it is advantageous to do use if b is less than 0 otherwise, if position do run , or do build if no other options are possible|when b is not the same as 1 you can jump until inventory is not the same as 1|b suggests that it would be advantageous to do find if position is greater than x otherwise, if position do run , or do run otherwise|b means that it would be good to do jump if iron 1 , or do run as a last resort|if b is at least 1 you are able to jump until position is greater than x|b is an approach where it would be good to do jump if a is greater than x otherwise, if a do find , or do run if no other options are possible|as soon as inventory is smaller than 0 you are able to jump until finally a is at least x|b entails that you do find if b is smaller than y otherwise, if a do run , or do use if not|if b is smaller than x you have the choice to find until finally b is exactly the same as y|a is an approach where it would be good to do jump if position is greater than x otherwise, if a do run , or do run as a last resort|a is an approach where you do find if position y otherwise, if a do use , or do run if no other options are possible|a is an approach where you do jump if position is larger than 0 otherwise, if b do use , or do build otherwise|once y you have the choice to run until finally position|b is a tactic where it is advantageous to do build if a is not the same as 1 otherwise, if iron do run , or do jump if no other options are possible|b is an approach where you do jump if b y otherwise, if a do build , or do jump if no other options are possible|b is a good strategy where you should do build if b x otherwise, if b do run , or do find if no other options are possible|a suggests that it would be advantageous to do jump if position is smaller than 0 otherwise, if iron do run , or do run if not|a entails that you do find if b x otherwise, if position do find , or do build if no other options are possible|b entails that you do use if position is larger than x otherwise, if b do find , or do run otherwise|a entails that you do find if b is larger than 0 otherwise, if b do run , or do build if not|a is a good strategy where you should do find if iron 1 otherwise, if position do build , or do run if not|a means that it would be good to do use if b otherwise, if a do jump , or do jump otherwise|whenever inventory is at most 0 you have the choice to build until a is not the same as x|if position is larger than 1 you have the choice to build until b is greater than x|b states that you should do use if b is smaller than 2 , or do build as a last resort|b is an approach where it would be good to do find if position is larger than y otherwise, if a do jump , or do use as a last resort|when b is exactly the same as y you have the option to build until finally position is greater than 2|a suggests that it would be advantageous to do build if b 0 otherwise, if position do run , or do build as a last resort|b is an approach where it would be good to do find if a is not the same as 2 otherwise, if iron do run , or do build if no other options are possible|b states that you should do build if iron y , or do run as a last resort|a states that you should do run if iron is exactly the same as y otherwise, if iron do jump , or do run as a last resort|a is a tactic where it is advantageous to do find if b is not the same as y otherwise, if b do jump , or do find if no other options are possible|if b is smaller than 2 you can run until finally b is equal to x|a entails that you do jump if position is exactly the same as x otherwise, if position do use , or do jump if not|if a is at most 0 you are able to use until finally inventory is less than y|a is a tactic where it is good to do run if iron is not the same as y otherwise, if a do find , or do jump if no other options are possible|b states that you should do jump if b x otherwise, if iron do jump , or do build otherwise|a is a tactic where it is advantageous to do use if iron is not the same as 2 , or do find if no other options are possible|a is a good strategy where you should do jump if b is not the same as 0 otherwise, if iron do find , or do jump otherwise|b means that it would be good to do run if a is smaller than x otherwise, if iron do use , or do run if not|a is an approach where you do run if position is exactly the same as 1 otherwise, if b do jump , or do find as a last resort|if a is greater than or equal to x you are able to find until b is less than or equal to x|b is a tactic where it is advantageous to do run if a is not equal to 0 otherwise, if iron do build , or do jump as a last resort|when b is equal to 2 you are able to run until position is not equal to 0|whenever b is less than 0 you can jump until inventory is exactly the same as x|if position is greater than or equal to y you have the option to build until a|b states that you should do jump if a is smaller than 0 otherwise, if iron do find , or do use otherwise|as soon as a is not the same as y you have the choice to find until inventory is equal to x|when inventory is less than or equal to 0 you have the option to use until finally a is at least 2|a is a good strategy where you should do build if a otherwise, if b do find , or do find as a last resort|as soon as a is exactly the same as x you can run until b is not the same as 0|a is an approach where it would be good to do use if position is smaller than x otherwise, if iron do jump , or do build if not|a states that you should do build if position is equal to x otherwise, if position do run , or do run as a last resort|b states that you should do build if position otherwise, if a do use , or do jump as a last resort|b states that you should do find if iron is larger than x otherwise, if a do build , or do jump if not|b is a tactic where it is good to do run if a y otherwise, if iron do jump , or do build as a last resort|whenever inventory is not equal to 0 you have the choice to jump until position is equal to 0|b is a tactic where it is good to do find if iron 2 , or do find as a last resort|a is a good strategy where you should do run if a is not the same as 0 otherwise, if b do run , or do jump if not|whenever position is not the same as 0 you have the choice to jump until inventory is greater than 2|a is an approach where you do run if position is not equal to x otherwise, if a do use , or do find as a last resort|when a is less than y you can jump until finally b is less than or equal to 1|once a is smaller than x you have the choice to jump until finally inventory is at least x|a is a strategy where you do run if iron is larger than x otherwise, if position do use , or do find as a last resort|whenever inventory is not equal to 1 you are able to build until a is at least 0|a is an approach where you do use if position x otherwise, if iron do run , or do find if not|a is a strategy where you do build if iron is equal to y otherwise, if b do find , or do find as a last resort|once position is greater than or equal to 2 you are able to jump until finally position is larger than x|whenever position is larger than y you have the choice to build until b is exactly the same as 2|b entails that you do jump if b is exactly the same as x otherwise, if position do use , or do find as a last resort|a suggests that it would be advantageous to do find if b is larger than 1 otherwise, if position do build , or do use if not|a is a good strategy where you should do build if iron is greater than y otherwise, if b do build , or do find as a last resort|when b is smaller than y you are able to build until inventory is not equal to 2|a suggests that it would be advantageous to do build if a is exactly the same as 1 otherwise, if iron do run , or do run as a last resort|whenever position is greater than or equal to y you are able to run until inventory is at most 0|a states that you should do use if position is greater than y otherwise, if a do run , or do use as a last resort|once a is at most y you have the option to run until a is greater than or equal to 2|a means that it would be good to do build if iron is not equal to 0 otherwise, if a do use , or do find otherwise|if inventory is smaller than 2 you can use until a is not equal to x|a means that it would be good to do jump if a is larger than 1 otherwise, if a do run , or do jump if not|a is an approach where it would be good to do use if a is exactly the same as 2 otherwise, if b do run , or do use if not|b entails that you do find if position is equal to y otherwise, if b do build , or do jump if no other options are possible|when position is less than 1 you have the option to find until finally b is equal to x|a states that you should do use if iron 0 otherwise, if position do build , or do jump if no other options are possible|a is a good strategy where you should do jump if position x otherwise, if iron do find , or do run if not|b suggests that it would be advantageous to do run if a is not equal to 0 otherwise, if position do jump , or do find as a last resort|when position is equal to 0 you have the option to use until finally a is greater than or equal to 2|b is an approach where it would be good to do build if iron is not equal to y otherwise, if position do jump , or do build if not|whenever a is equal to 1 you have the option to find until finally b is less than 2|if position is greater than or equal to 0 you are able to build until finally inventory is less than or equal to 1|a is a tactic where it is good to do jump if position 2 otherwise, if iron do jump , or do jump as a last resort|if inventory is not equal to 0 you have the option to build until b is not the same as 1|as soon as a is equal to x you are able to run until finally a is at least y|once b is not equal to 2 you have the choice to find until finally position is not the same as 2|as soon as position is less than y you are able to jump until b is larger than 0|if inventory is greater than or equal to y you are able to use until finally inventory is less than y|a is a good strategy where you should do use if a is larger than 0 otherwise, if b do use , or do find otherwise|a is a tactic where it is advantageous to do find if iron is exactly the same as 1 otherwise, if iron do use , or do find otherwise|b is a tactic where it is good to do jump if a is greater than 2|a entails that you do build if iron is not equal to 0 otherwise, if b do jump , or do use if not|a is a strategy where you do build if b is smaller than x otherwise, if b do run , or do jump if not|a means that it would be good to do jump if iron is not equal to 0 otherwise, if iron do build , or do jump if not|whenever a is at least 2 you have the option to find until b is not the same as x|a is an approach where you do use if b is less than 1 otherwise, if position do use , or do use if not|a means that it would be good to do use if b otherwise, if b do build , or do run as a last resort|a is an approach where you do jump if position is not the same as 0 otherwise, if b do build , or do run if not|if a is equal to x you have the option to run until position is greater than or equal to 1|b entails that you do find if position is less than y otherwise, if a do use , or do jump otherwise|a means that it would be good to do use if iron is less than y otherwise, if a do jump , or do jump if not|once a is at most 2 you have the choice to jump until position is greater than 1|once inventory is less than 2 you have the choice to jump until b is greater than or equal to x|as soon as a is less than or equal to 0 you are able to jump until a is at most y|a entails that you do jump if b 1 otherwise, if b do run , or do find as a last resort|once a is greater than 1 you can jump until inventory is at most y|if a is less than or equal to y you have the option to build until finally a is at least x|as soon as b is not the same as y you are able to run until finally a is larger than 2|as soon as a is greater than 1 you can build until position is greater than 2|b suggests that it would be advantageous to do jump if position is less than y otherwise, if a do use , or do find otherwise|b is an approach where you do build if iron y otherwise, if iron do jump , or do build otherwise|as soon as b is not equal to 2 you have the option to use until finally b is less than or equal to 1|if position is exactly the same as 0 you have the option to run until b is at least 1|once position you can find until position|when position is larger than 2 you are able to run until inventory is less than x|a is a tactic where it is advantageous to do jump if iron is less than 0 otherwise, if b do jump , or do run if not|b states that you should do jump if a is not equal to 2 otherwise, if b do run , or do jump otherwise|a is an approach where it would be good to do find if iron is not the same as 2 otherwise, if iron do find , or do build otherwise|when b is less than or equal to 2 you can build until inventory|if position is exactly the same as y you have the option to find until finally a|b is a tactic where it is good to do use if position is less than x otherwise, if position do run , or do find if not|b is a tactic where it is advantageous to do find if a otherwise, if position do use , or do find if no other options are possible|a entails that you do find if a y otherwise, if iron do jump , or do use otherwise|a is a good strategy where you should do find if b is not equal to y otherwise, if b do use , or do find if no other options are possible|a is an approach where you do build if position is larger than 1 otherwise, if position do run , or do find if not|as soon as position is smaller than x you have the option to use until a is greater than 2|b suggests that it would be advantageous to do build if a y otherwise, if b do build , or do build if not|b is a strategy where you do jump if b x otherwise, if position do jump , or do jump if not|a is a strategy where you do jump if position 2 otherwise, if iron do build , or do find otherwise|b is a tactic where it is advantageous to do use if iron is larger than x otherwise, if a do build , or do find if no other options are possible|a states that you should do jump if iron is greater than 0 otherwise, if iron do use , or do find as a last resort|whenever b is greater than y you are able to find until finally position|once position is larger than x you have the choice to jump until finally inventory is less than 1|if position is greater than x you have the option to use until finally position is greater than or equal to 1|b suggests that it would be advantageous to do build if b x otherwise, if b do jump , or do jump otherwise|a is a strategy where you do find if iron is less than 2 otherwise, if a do build , or do run if no other options are possible|whenever y you can jump until finally inventory is not the same as x|b states that you should do build if a is smaller than y , or do jump if not|a means that it would be good to do jump if b is less than y otherwise, if a do jump , or do build otherwise|b is a strategy where you do use if iron is smaller than y otherwise, if iron do find , or do use otherwise|a is an approach where it would be good to do jump if position is greater than 2 otherwise, if b do find , or do build as a last resort|when b is smaller than y you have the option to run until position is less than or equal to x|b states that you should do use if a is equal to y otherwise, if a do run , or do run otherwise|if a is greater than y you can run until finally position is less than or equal to y|if a is less than 0 you can build until inventory is not equal to y|a is a tactic where it is advantageous to do build if b is exactly the same as x otherwise, if b do run , or do jump if no other options are possible|once a is larger than y you can run until finally a is at least x|whenever x you are able to find until finally inventory is at most y|a entails that you do find if position is greater than 1 otherwise, if iron do find , or do run if no other options are possible|a is a strategy where you do run if position is exactly the same as 2 otherwise, if iron do find , or do run if not|b is an approach where it would be good to do find if a is not equal to 1 otherwise, if iron do use , or do use otherwise|a means that it would be good to do build if iron 2 otherwise, if a do use , or do find if no other options are possible|a is a strategy where you do build if a is less than 0 otherwise, if a do jump , or do find if no other options are possible|a is a tactic where it is good to do jump if a is not the same as 0 otherwise, if b do jump , or do run as a last resort|b states that you should do build if b x otherwise, if position do run , or do run otherwise|a is a tactic where it is good to do find if b 2 otherwise, if a do use , or do jump if no other options are possible|a is a good strategy where you should do jump if b is exactly the same as 2 otherwise, if a do jump , or do use if no other options are possible|when b is at least 0 you are able to use until finally b is smaller than x|a means that it would be good to do find if iron 2 , or do use as a last resort|b means that it would be good to do use if b y otherwise, if iron do jump , or do use if not|a entails that you do jump if a is not the same as 1 otherwise, if iron do jump , or do run as a last resort|a entails that you do use if position x , or do jump if not|b suggests that it would be advantageous to do find if b is equal to x otherwise, if a do use , or do build if no other options are possible|b suggests that it would be advantageous to do use if iron is exactly the same as y otherwise, if a do jump , or do jump otherwise|a is a tactic where it is advantageous to do build if iron 1|a is an approach where you do jump if position x otherwise, if b do find , or do find if no other options are possible|b is an approach where it would be good to do jump if position x otherwise, if iron do use , or do find if no other options are possible|b entails that you do jump if a x otherwise, if a do build , or do build otherwise|a states that you should do use if position is not equal to x otherwise, if iron do find , or do run otherwise|b is a tactic where it is advantageous to do build if b is exactly the same as y otherwise, if b do use , or do build if no other options are possible|a states that you should do jump if a otherwise, if iron do build , or do use as a last resort|once inventory is larger than 1 you are able to build until finally inventory is greater than or equal to 1|a is an approach where you do jump if a is smaller than 0 otherwise, if b do use , or do use if not|whenever inventory is smaller than x you can find until inventory is larger than 1|as soon as a is exactly the same as 0 you are able to run until finally inventory is less than or equal to x|b means that it would be good to do use if b y otherwise, if iron do run , or do build if not|whenever b is at least y you have the choice to jump until finally inventory is less than or equal to 0|a suggests that it would be advantageous to do run if a is larger than y otherwise, if position do build , or do find otherwise|a entails that you do find if iron y otherwise, if position do build , or do use as a last resort|whenever b is exactly the same as x you have the option to jump until position is less than 0|if a is at least y you can build until a is less than 0|a entails that you do use if a is exactly the same as y otherwise, if position do find , or do use if no other options are possible|b is a strategy where you do find if position is not the same as y otherwise, if position do build , or do build if not|a is a tactic where it is advantageous to do run if b x otherwise, if a do use , or do build otherwise|once b is less than or equal to 0 you have the option to jump until finally inventory is less than x|a is an approach where you do run if position is smaller than x otherwise, if a do find , or do find if no other options are possible|b is an approach where it would be good to do find if iron is smaller than x otherwise, if iron do build , or do use as a last resort|whenever position is not the same as 1 you have the choice to build until inventory is larger than 1|whenever inventory is exactly the same as 0 you have the choice to run until position is exactly the same as 1|b means that it would be good to do find if a is less than x otherwise, if iron do find , or do use as a last resort|a is an approach where it would be good to do run if a is smaller than y otherwise, if b do jump , or do jump otherwise|a is an approach where you do use if b y otherwise, if b do build , or do find otherwise|if b is not equal to y you can run until a is not equal to 0|if inventory is not equal to 0 you have the choice to use until position is larger than 2|a states that you should do use if a is not equal to 2 , or do run as a last resort|when position is not the same as 1 you are able to run until position is larger than 2|b is a good strategy where you should do build if position is greater than x , or do find otherwise|a states that you should do build if b is equal to y otherwise, if position do jump , or do find if no other options are possible|b states that you should do run if a is not the same as x otherwise, if a do build , or do use if no other options are possible|a means that it would be good to do run if b x otherwise, if iron do build , or do find as a last resort|a is an approach where it would be good to do use if a is smaller than 0 otherwise, if b do jump , or do build otherwise|a means that it would be good to do find if iron x otherwise, if a do use , or do jump as a last resort|a is a strategy where you do build if iron x otherwise, if position do find , or do find otherwise|b means that it would be good to do run if position is not the same as y , or do find as a last resort|a suggests that it would be advantageous to do build if a is less than x otherwise, if position do build , or do find otherwise|a suggests that it would be advantageous to do build if iron is not the same as 0 otherwise, if a do find , or do use as a last resort|a entails that you do jump if a x otherwise, if position do use , or do jump otherwise|b is a good strategy where you should do build if a is not the same as 0 otherwise, if iron do run , or do jump if no other options are possible|as soon as a is greater than or equal to x you have the option to jump until finally b is less than 1|a is an approach where you do find if position is equal to y otherwise, if iron do build , or do build as a last resort|b is an approach where it would be good to do find if b is exactly the same as x otherwise, if iron do build , or do jump if not|b is an approach where it would be good to do jump if iron is exactly the same as y otherwise, if a do build , or do run if no other options are possible|a is an approach where it would be good to do jump if iron x otherwise, if b do build , or do build as a last resort|as soon as b is exactly the same as 1 you can build until finally a is less than or equal to y|once a is less than 2 you have the option to build until position is at most x|a suggests that it would be advantageous to do use if a is greater than 2 otherwise, if position do jump , or do find as a last resort|a states that you should do find if iron is not the same as y otherwise, if b do jump , or do run otherwise|a is a good strategy where you should do use if iron is less than 2 otherwise, if position do find , or do jump if not|when a is not equal to 0 you can run until y|if b is at most 0 you are able to use until a is smaller than y|as soon as position is less than y you have the option to use until finally inventory is smaller than y|once inventory is less than or equal to 1 you have the choice to find until b is greater than 1|a is a tactic where it is advantageous to do build if iron is equal to y otherwise, if a do jump , or do run if not|a is a tactic where it is advantageous to do use if a is exactly the same as y otherwise, if a do use , or do jump if no other options are possible|whenever a is at most 0 you can run until a is exactly the same as 2|when position is at least 2 you have the choice to find until b is less than or equal to 2|once position is larger than 0 you have the option to use until b is less than x|when inventory is at most x you have the choice to find until b is not the same as 2|if b is larger than 1 you can build until finally position is equal to 2|if position is larger than y you have the choice to find until finally b is not the same as 0|a is a tactic where it is advantageous to do jump if a is exactly the same as x otherwise, if a do jump , or do find if not|when a is exactly the same as x you can build until finally a is less than or equal to 1|whenever b is less than 1 you have the option to jump until b is at least x|as soon as b is less than or equal to 2 you are able to run until a is less than x|whenever inventory is smaller than y you can use until finally position is not equal to y|once position is at most 0 you are able to build until inventory is at most x|a is an approach where it would be good to do use if b is not the same as 2 otherwise, if b do use , or do find otherwise|b is a tactic where it is advantageous to do run if iron is equal to x otherwise, if iron do use , or do use if no other options are possible|once a is less than y you can run until inventory is at most 0|a states that you should do find if iron x otherwise, if iron do jump , or do run if not|when position is smaller than x you have the option to jump until a is exactly the same as 2|as soon as a is greater than 0 you can run until finally a is not the same as y|once position is less than 1 you are able to run until finally inventory is not equal to 2|a states that you should do run if a is equal to x otherwise, if iron do find , or do find if no other options are possible|a is a tactic where it is good to do jump if position 2 otherwise, if a do jump , or do use if not|when position is at most x you are able to use until inventory|as soon as a is less than or equal to y you have the option to use until x|b suggests that it would be advantageous to do find if b is equal to y otherwise, if iron do build , or do jump if not|b suggests that it would be advantageous to do run if b is larger than x , or do use otherwise|whenever position is greater than 0 you can jump until inventory is not equal to x|as soon as a is greater than or equal to x you have the option to jump until finally position is less than 2|whenever inventory is exactly the same as 1 you are able to jump until position is equal to x|when a is less than or equal to x you can use until finally b is not equal to x|whenever position is larger than 1 you have the option to run until finally a is less than or equal to x|as soon as inventory is not equal to 0 you have the choice to jump until a is smaller than 2|a is a strategy where you do use if a is smaller than x otherwise, if b do find , or do use if not|whenever a is equal to y you are able to use until finally inventory is exactly the same as 0|a is an approach where it would be good to do jump if a 2 otherwise, if b do use , or do jump as a last resort|a means that it would be good to do jump if iron is not the same as 0 otherwise, if iron do build , or do run as a last resort|whenever a is at most 1 you have the choice to find until finally position is exactly the same as 1|once inventory is greater than 0 you can jump until a is larger than y|as soon as position is smaller than y you have the option to use until position is at most 2|if position is at most 1 you have the option to jump until position is less than 1|as soon as b is less than or equal to x you have the option to find until inventory is smaller than 1|a is an approach where it would be good to do run if iron 1 otherwise, if a do find , or do use otherwise|b is an approach where you do jump if position is smaller than y otherwise, if position do build , or do use if no other options are possible|whenever a is equal to x you are able to build until a is at most 2|a suggests that it would be advantageous to do find if position 1 otherwise, if a do jump , or do use otherwise|b is a tactic where it is good to do build if a is exactly the same as 0 , or do build as a last resort|a means that it would be good to do run if a is not the same as x otherwise, if position do find , or do run otherwise|b is a tactic where it is good to do run if iron is exactly the same as x otherwise, if iron do jump , or do jump if no other options are possible|a states that you should do build if iron is exactly the same as y otherwise, if position do find , or do use if not|b is an approach where you do jump if b is greater than 1 , or do build if no other options are possible|a is a tactic where it is good to do jump if position is not the same as 2 otherwise, if position do find , or do build if not|a is a tactic where it is advantageous to do use if a 1 otherwise, if position do run , or do run if not|a is a tactic where it is advantageous to do use if b 0 otherwise, if a do jump , or do use if no other options are possible|if position is greater than or equal to 2 you are able to jump until position is greater than or equal to 2|once position is not equal to 2 you can use until finally position is not the same as 0|b is a good strategy where you should do use if iron is not the same as y otherwise, if iron do build , or do build if no other options are possible|b suggests that it would be advantageous to do build if a is not equal to 2 otherwise, if b do build , or do build as a last resort|a states that you should do use if b is larger than x otherwise, if iron do find , or do build if no other options are possible|a means that it would be good to do find if iron is exactly the same as 0 otherwise, if position do run , or do find if no other options are possible|a suggests that it would be advantageous to do run if iron is not equal to 1 otherwise, if a do use , or do use if not|when position is greater than y you have the choice to run until a|once inventory is not equal to y you have the option to run until finally position is equal to 1|b is a tactic where it is good to do use if b is greater than y otherwise, if b do use , or do run otherwise|a means that it would be good to do jump if b is equal to 2 otherwise, if a do run , or do build as a last resort|a states that you should do build if b x otherwise, if b do jump , or do find as a last resort|when a is not equal to x you have the option to run until finally position is not the same as 2|b states that you should do jump if a is smaller than 2 otherwise, if iron do use , or do build as a last resort|as soon as position is equal to x you can use until finally a is larger than 0|a is a good strategy where you should do find if b is smaller than 0 otherwise, if b do run , or do use otherwise|a is a tactic where it is good to do run if iron is greater than y otherwise, if a do build , or do use if no other options are possible|whenever a is larger than y you have the choice to use until finally b is less than or equal to 2|a is an approach where you do build if iron is equal to 1 otherwise, if b do find , or do use otherwise|a is a tactic where it is good to do jump if position is greater than 1 otherwise, if iron do build , or do jump as a last resort|whenever inventory is smaller than 0 you are able to jump until b is exactly the same as x|a entails that you do find if a x otherwise, if position do use , or do run if not|once b is exactly the same as x you can use until finally a is at least x|when b is exactly the same as 2 you have the choice to jump until finally b is at least x|when a is equal to 2 you are able to build until b is at most 1|once inventory is at least 1 you have the option to find until b is at least y|b is a good strategy where you should do build if iron is equal to y otherwise, if a do run , or do find otherwise|if position is not equal to 0 you have the choice to run until b is at least 2|a entails that you do build if b is not the same as 1 otherwise, if a do run , or do use otherwise|a suggests that it would be advantageous to do run if iron is larger than x otherwise, if iron do find , or do find otherwise|b is an approach where you do use if iron is greater than 1 , or do run otherwise|b is an approach where you do find if a is not equal to 2 otherwise, if iron do use , or do build if not|as soon as position is at least y you have the choice to build until a is less than or equal to 0|if a is not equal to x you have the option to use until finally inventory is at most 2|once inventory is greater than x you are able to find until finally a is less than or equal to 1|b means that it would be good to do jump if position y otherwise, if position do use , or do use as a last resort|a suggests that it would be advantageous to do jump if position 1 otherwise, if b do build , or do use if no other options are possible|if x you can use until a is greater than 0|whenever position is at most 1 you have the choice to run until inventory is larger than y|b means that it would be good to do run if a x otherwise, if b do build , or do jump otherwise|whenever position is smaller than 0 you have the option to run until b is not the same as 1|b is a tactic where it is advantageous to do use if a is smaller than y otherwise, if a do build , or do use as a last resort|when inventory is less than or equal to y you can build until a is not equal to y|once inventory is larger than x you have the choice to jump until b is less than 2|a entails that you do jump if position is not the same as y otherwise, if position do use , or do find otherwise|as soon as a is less than or equal to 0 you have the option to use until finally b is less than or equal to x|b suggests that it would be advantageous to do build if iron is smaller than x otherwise, if position do jump , or do jump otherwise|as soon as inventory is not the same as 1 you have the option to jump until b is less than y|a is an approach where you do find if a is smaller than 0 otherwise, if b do build , or do find if not|b is a strategy where you do run if a is greater than y otherwise, if iron do jump , or do find otherwise|once inventory is less than or equal to 2 you have the choice to use until a is equal to 0|a is a good strategy where you should do use if position 1 otherwise, if iron do build , or do find if not|a states that you should do run if iron is not the same as y otherwise, if position do find , or do build otherwise|a is an approach where it would be good to do find if a is not the same as 2 otherwise, if b do find , or do build if no other options are possible|when a is greater than y you have the choice to use until position is equal to 1|a is a tactic where it is good to do find if iron is not the same as 0 otherwise, if iron do use , or do jump if not|b is a tactic where it is good to do find if a is exactly the same as x otherwise, if a do jump , or do run if not|once inventory is greater than y you have the option to build until b is smaller than x|a entails that you do jump if position is equal to x otherwise, if iron do run , or do use if not|a is a tactic where it is good to do run if position is smaller than 0 otherwise, if position do use , or do jump otherwise|a is a strategy where you do jump if iron is equal to y|a is a tactic where it is good to do use if a is equal to 1 otherwise, if iron do find , or do build if no other options are possible|b suggests that it would be advantageous to do jump if a is not equal to y otherwise, if iron do jump , or do use otherwise|a is a strategy where you do jump if a 1 otherwise, if b do use , or do build if no other options are possible|when inventory is smaller than 0 you have the choice to jump until a|once inventory you have the option to use until b is at least 0|a suggests that it would be advantageous to do find if b is not equal to 1 otherwise, if iron do find , or do use if not|a is a tactic where it is advantageous to do jump if position is not equal to 0 otherwise, if b do use , or do run if no other options are possible|a means that it would be good to do run if b is not equal to y otherwise, if position do build , or do jump if not|whenever inventory is at most x you can use until finally inventory is less than or equal to 1|if b is less than 0 you have the option to use until b is at most 2|b states that you should do jump if b is larger than y otherwise, if a do run , or do jump as a last resort|once position is greater than or equal to 0 you have the choice to find until b is less than y|when position is smaller than x you are able to use until a is not the same as 2|a is a strategy where you do find if b y , or do jump otherwise|a entails that you do find if position is greater than 0 otherwise, if iron do run , or do run if no other options are possible|once b is smaller than x you have the choice to run until inventory is less than 2|when b is at least 1 you can run until finally inventory is less than or equal to x|a is a tactic where it is advantageous to do use if position is not equal to y otherwise, if b do jump , or do find if no other options are possible|a is an approach where you do find if iron x otherwise, if b do run , or do jump if no other options are possible|b entails that you do find if position is not the same as y otherwise, if position do run , or do run as a last resort|a means that it would be good to do find if iron is greater than 2 otherwise, if a do use , or do run if no other options are possible|when inventory is less than or equal to 0 you have the choice to run until b is at most 2|a is an approach where it would be good to do use if b is larger than x otherwise, if a do jump , or do run if no other options are possible|whenever a is less than x you can jump until position is at least 0|whenever b is at most 1 you are able to build until finally b is at most x|once inventory is exactly the same as 1 you are able to run until finally a|once position is greater than or equal to 1 you have the option to jump until a is at most y|whenever b you have the choice to find until b is less than 2|a entails that you do jump if a is not equal to 0 otherwise, if b do run , or do build as a last resort|a suggests that it would be advantageous to do use if a is not the same as x otherwise, if position do jump , or do build if no other options are possible|whenever inventory is exactly the same as y you can build until inventory is at least 2|once inventory is at most 2 you have the option to build until finally b is not the same as 2|when b is greater than or equal to x you have the option to find until finally inventory|once a is smaller than 2 you can run until finally a is not equal to 0|a is a tactic where it is good to do find if a is less than 2 otherwise, if iron do jump , or do run if not|when position is larger than 2 you can run until inventory is at least x|a is a good strategy where you should do use if b 1 otherwise, if a do jump , or do build if not|b is an approach where it would be good to do use if iron is smaller than y otherwise, if iron do build , or do run otherwise|b is an approach where you do use if a is equal to 0 otherwise, if iron do jump , or do run otherwise|a is a tactic where it is good to do build if position x otherwise, if iron do build , or do run as a last resort|if a is not the same as 0 you are able to run until a is smaller than x|b suggests that it would be advantageous to do run if b is not equal to y otherwise, if iron do run , or do find if not|a suggests that it would be advantageous to do find if iron x otherwise, if iron do use , or do use if not|once b is at least 2 you can use until finally position is not equal to 2|a states that you should do find if position is equal to x otherwise, if b do run , or do jump if no other options are possible|as soon as inventory is at least y you have the option to run until finally inventory is at most x|a suggests that it would be advantageous to do build if a is smaller than 1 otherwise, if b do use , or do jump if no other options are possible|a is a tactic where it is advantageous to do build if a is smaller than 0 , or do use if not|a states that you should do jump if a x otherwise, if position do build , or do find if no other options are possible|as soon as position is less than or equal to 1 you are able to jump until a is smaller than 0|b is an approach where you do use if iron is exactly the same as y otherwise, if b do build , or do find if not|whenever position is less than 1 you have the choice to build until finally inventory is less than 2|b suggests that it would be advantageous to do find if b is not the same as x otherwise, if position do jump , or do run if no other options are possible|once b is greater than 0 you have the option to find until a is not equal to y|a is an approach where it would be good to do use if a y otherwise, if b do find , or do jump if not|if b is not equal to 2 you can jump until inventory is equal to 2|when position is not the same as 0 you have the choice to run until inventory is not the same as 2|a entails that you do find if iron 1 otherwise, if iron do find , or do use otherwise|a is a tactic where it is good to do jump if iron is greater than y otherwise, if a do run , or do jump if no other options are possible|b is a strategy where you do run if a is equal to 2 otherwise, if b do run , or do use if no other options are possible|a means that it would be good to do use if b is smaller than x otherwise, if b do run , or do run as a last resort|if position is exactly the same as 1 you have the option to find until finally position is exactly the same as 2|as soon as position is not equal to 2 you are able to use until finally b is greater than y|if inventory is less than x you can use until position is greater than 2|if position is larger than 1 you have the option to find until position is greater than 1|a is a strategy where you do run if position is less than 0 otherwise, if b do use , or do find as a last resort|b means that it would be good to do find if a is less than 0 otherwise, if b do use , or do find as a last resort|once a is greater than or equal to 2 you can use until a is less than 2|if inventory is not the same as 2 you have the option to jump until finally inventory is larger than 1|a states that you should do run if a is exactly the same as 1 otherwise, if iron do find , or do jump if not|a suggests that it would be advantageous to do use if a is not the same as 0 otherwise, if position do build , or do use as a last resort|a suggests that it would be advantageous to do jump if position is not equal to 1 otherwise, if b do run , or do build otherwise|b is an approach where it would be good to do run if iron x otherwise, if b do run , or do build otherwise|whenever b is smaller than 0 you can use until a is not equal to x|a entails that you do use if b is equal to y otherwise, if b do jump , or do find as a last resort|b entails that you do run if b y otherwise, if position do run , or do find otherwise|whenever a is less than or equal to x you are able to run until finally a is at most 1|whenever inventory you have the choice to use until b is not equal to y|b is a tactic where it is advantageous to do use if a is less than 2 otherwise, if iron do find , or do run as a last resort|if a is less than or equal to y you are able to use until finally position is equal to 0|once position is equal to x you can run until finally b is smaller than y|a means that it would be good to do use if iron is exactly the same as 2 otherwise, if b do jump , or do jump as a last resort|b is a strategy where you do run if position is larger than x otherwise, if b do use , or do find if not|when position is less than y you have the option to jump until a is smaller than 0|whenever a is greater than or equal to x you have the option to jump until finally position is exactly the same as 0|a states that you should do find if position otherwise, if b do jump , or do jump if not|once position is greater than or equal to y you are able to run until finally inventory is at most 2|once a is greater than or equal to 1 you can find until finally position is smaller than x|whenever b is at least 0 you are able to run until position is exactly the same as x|b is an approach where you do run if a is not the same as 2 otherwise, if a do find , or do run otherwise|a entails that you do jump if position 1 otherwise, if b do use , or do run if not|once b is less than y you have the choice to jump until finally inventory is exactly the same as 0|a is a good strategy where you should do jump if b 1 otherwise, if b do build , or do jump if not|once b is at least 2 you are able to jump until inventory is larger than y|a is a tactic where it is advantageous to do build if position is greater than 2 otherwise, if iron do use , or do jump otherwise|when position is at least y you have the choice to build until finally inventory is at least 2|whenever position is at most x you are able to run until finally b is exactly the same as y|a entails that you do find if a is not the same as x , or do find as a last resort|a states that you should do use if b is smaller than x otherwise, if a do use , or do jump otherwise|b is a tactic where it is advantageous to do use if a is equal to x otherwise, if a do find , or do jump as a last resort|when position is equal to 0 you have the option to find until b is at most y|if b is less than 2 you can run until position is larger than 1|b is a strategy where you do find if a y otherwise, if b do run , or do build if no other options are possible|b is a strategy where you do jump if a x otherwise, if iron do run , or do jump if no other options are possible|whenever inventory is not equal to 0 you have the option to use until inventory is larger than 0|whenever b is larger than y you can use until finally b is at most y|b is an approach where you do run if iron is not equal to x otherwise, if b do run , or do find if not|b means that it would be good to do build if b is greater than y otherwise, if position do find , or do run as a last resort|a suggests that it would be advantageous to do find if iron x otherwise, if a do jump , or do use if no other options are possible|b is a good strategy where you should do jump if position y otherwise, if iron do find , or do use as a last resort|if a is at least 2 you have the choice to jump until finally inventory is not the same as 0|whenever inventory is smaller than y you are able to run until b is greater than 1|a is a tactic where it is advantageous to do run if b y otherwise, if b do find , or do build otherwise|b is a tactic where it is advantageous to do use if iron is equal to x otherwise, if a do use , or do use if not|as soon as b is not equal to 1 you can use until position is smaller than 2|once position is at least 1 you have the choice to use until finally position is at least y|a states that you should do build if iron is exactly the same as 0 otherwise, if position do use , or do build otherwise|a is a strategy where you do run if iron 2 otherwise, if a do find , or do build if no other options are possible|a is a tactic where it is good to do find if position y otherwise, if b do build , or do use as a last resort|b suggests that it would be advantageous to do find if a otherwise, if a do run , or do use as a last resort|a states that you should do build if iron is less than 1 otherwise, if b do jump , or do find if not|a is a tactic where it is advantageous to do run if iron y otherwise, if a do use , or do find if no other options are possible|if b is equal to 2 you are able to build until position is less than or equal to 1|if a is larger than 0 you have the option to run until finally position is larger than x|b is a strategy where you do jump if b is equal to x otherwise, if a do find , or do build if not|a is a tactic where it is advantageous to do use if position 1 otherwise, if position do run , or do use if not|a is a tactic where it is good to do find if position 2 otherwise, if iron do run , or do jump if no other options are possible|when position is less than or equal to 0 you have the option to run until position is greater than or equal to 0|a states that you should do run if b is smaller than y otherwise, if iron do run , or do find otherwise|if a is equal to 0 you can build until a is not the same as 1|if a is equal to x you are able to jump until finally inventory is smaller than 1|once position is equal to 2 you are able to use until finally b is not equal to 2|a states that you should do run if b is exactly the same as 2 otherwise, if a do run , or do use as a last resort|if inventory is less than or equal to 0 you have the choice to build until finally y|b is an approach where it would be good to do find if a is not the same as 0 , or do jump otherwise|whenever a is larger than x you have the option to jump until inventory is smaller than 2|if position is less than y you can build until position is less than or equal to 1|b is an approach where you do use if a is larger than x otherwise, if iron do find , or do use otherwise|whenever a is greater than or equal to y you have the option to find until a is greater than or equal to x|whenever b is at most y you have the choice to build until finally position is not equal to 1|a is a tactic where it is good to do find if b is larger than 1 otherwise, if position do jump , or do use as a last resort|b is a tactic where it is advantageous to do jump if a is not the same as 1 otherwise, if b do use , or do find if not|once a is greater than x you have the choice to run until position is at least y|a is an approach where you do run if position x otherwise, if position do find , or do find if not|b states that you should do run if iron y otherwise, if iron do build , or do find if no other options are possible|if b is less than or equal to x you have the choice to run until position is less than or equal to y|a suggests that it would be advantageous to do use if iron 1 otherwise, if a do jump , or do run if not|a is an approach where you do use if position is greater than 0 otherwise, if iron do run , or do find if not|a is an approach where you do jump if position is larger than 1 otherwise, if position do build , or do use if no other options are possible|a entails that you do find if b is exactly the same as x otherwise, if b do find , or do jump if no other options are possible|a is a strategy where you do jump if a is not the same as 0 otherwise, if b do build , or do find as a last resort|a is a good strategy where you should do jump if iron 0 otherwise, if iron do jump , or do jump if not|a is a tactic where it is good to do use if iron 1 otherwise, if a do find , or do build if not|a is a tactic where it is advantageous to do run if b is less than 2 otherwise, if iron do run , or do run if not|b means that it would be good to do use if iron otherwise, if a do use , or do build if no other options are possible|b is an approach where you do jump if b is equal to x otherwise, if a do jump , or do use if not|a states that you should do jump if b y otherwise, if b do build , or do run as a last resort|when inventory is smaller than 0 you are able to run until finally inventory is smaller than y|b means that it would be good to do build if iron is exactly the same as x otherwise, if b do jump , or do build if not|as soon as b is equal to 1 you can find until finally b is not the same as 0|a states that you should do jump if position is greater than 1 otherwise, if iron do jump , or do run if no other options are possible|a is a good strategy where you should do use if b is greater than 1 otherwise, if iron do use , or do jump if no other options are possible|a states that you should do use if position is greater than x otherwise, if position do use , or do jump if not|b is a strategy where you do jump if a is exactly the same as y otherwise, if position do jump , or do find if not|a entails that you do jump if b 2 otherwise, if position do run , or do jump if not|when a is less than 1 you have the choice to run until finally inventory is not equal to 1|a states that you should do jump if a is greater than 2 otherwise, if iron do run , or do jump otherwise|whenever position is larger than 2 you can jump until finally inventory is exactly the same as 0|a suggests that it would be advantageous to do jump if position is smaller than 2 otherwise, if position do run , or do build as a last resort|when b is greater than or equal to 0 you have the option to find until b is larger than x|a suggests that it would be advantageous to do jump if position is exactly the same as 2 otherwise, if iron do jump , or do use as a last resort|b is an approach where it would be good to do find if iron y otherwise, if iron do run , or do run if not|whenever inventory is at most 2 you have the option to build until b is less than y|as soon as b is not equal to 2 you have the choice to jump until finally position is greater than y|when position is equal to 0 you have the option to find until inventory is greater than or equal to x|b suggests that it would be advantageous to do find if position is larger than x otherwise, if a do find , or do build otherwise|when inventory is exactly the same as x you have the option to jump until y|whenever a is greater than 1 you are able to jump until finally a is equal to 1|as soon as inventory is less than 2 you have the option to run until finally inventory is less than 2|whenever a is greater than 1 you have the option to use until finally inventory is larger than 2|if a is less than 0 you have the option to find until finally a is larger than 2|b is an approach where it would be good to do use if iron y otherwise, if a do run , or do jump otherwise|once b is not equal to y you are able to build until position is at least x|whenever inventory is exactly the same as 1 you have the option to use until finally a is less than 0|a entails that you do run if b is not equal to y otherwise, if position do run , or do build if not|whenever position is not the same as x you can use until b is greater than or equal to 1|when position is exactly the same as 0 you are able to jump until finally a is equal to x|if position is less than or equal to 0 you can find until a is less than 2|b is a tactic where it is advantageous to do find if b is larger than x otherwise, if iron do jump , or do use if not|if position is less than or equal to 2 you have the choice to jump until finally position is greater than y|once position is at least 1 you are able to build until a is greater than x|a is a tactic where it is good to do build if a is larger than x|as soon as b is less than 2 you can run until finally inventory is at least y|a is a strategy where you do find if a 0 , or do find if not|b suggests that it would be advantageous to do jump if iron is smaller than y otherwise, if iron do jump , or do run if not|if inventory is equal to x you have the option to run until finally b is less than y|if position is less than y you can jump until b is larger than y|if inventory is not the same as 0 you have the choice to find until finally b is greater than or equal to 2|whenever b is less than 2 you have the option to jump until b is exactly the same as 2|a is an approach where it would be good to do find if b is smaller than 1 otherwise, if position do jump , or do use if no other options are possible|a is a strategy where you do find if a is equal to 2 otherwise, if b do run , or do run if not|if b is smaller than 2 you have the option to use until finally position is exactly the same as 2|a suggests that it would be advantageous to do use if position 1 otherwise, if b do build , or do find as a last resort|a is an approach where you do run if a is less than x otherwise, if iron do find , or do use if not|a is an approach where you do find if position x otherwise, if b do build , or do build as a last resort|if inventory is exactly the same as 0 you are able to run until finally a is greater than 2|a is an approach where it would be good to do jump if iron is equal to 0 otherwise, if b do use , or do find if not|b states that you should do run if position is exactly the same as y otherwise, if a do jump , or do run as a last resort|once b is not the same as y you can run until finally a is not equal to x|b entails that you do jump if iron is less than y otherwise, if iron do find , or do jump as a last resort|a is a tactic where it is good to do find if a is less than 0 otherwise, if iron do use , or do find if no other options are possible|a entails that you do run if a y otherwise, if position do jump , or do jump otherwise|whenever b is greater than or equal to 1 you are able to build until finally position is greater than y|a means that it would be good to do run if position is equal to 0 otherwise, if a do use , or do use if no other options are possible|a is an approach where it would be good to do run if iron is exactly the same as y otherwise, if iron do build , or do jump otherwise|a is a strategy where you do build if a is equal to 2 otherwise, if position do build , or do jump if no other options are possible|once inventory you are able to build until finally position is larger than 1|whenever a is smaller than 2 you have the choice to build until position is greater than or equal to 0|whenever a is exactly the same as y you have the option to jump until inventory is at least 0|a is a tactic where it is good to do find if a is greater than 2 otherwise, if position do run , or do build if no other options are possible|if a is larger than 1 you have the option to build until inventory is greater than or equal to 0|a entails that you do find if iron is exactly the same as 0 otherwise, if b do use , or do jump otherwise|a is a strategy where you do build if position y otherwise, if iron do find , or do run otherwise|a states that you should do build if b 0 otherwise, if a do run , or do find as a last resort|a is a tactic where it is good to do use if position is smaller than y otherwise, if iron do build , or do build if no other options are possible|whenever position is greater than x you can find until b|as soon as b is less than 0 you have the option to build until finally b is exactly the same as 0|a is an approach where it would be good to do jump if iron is equal to 1 otherwise, if iron do build , or do use if not|as soon as b is less than or equal to x you have the option to build until a|a means that it would be good to do jump if position is exactly the same as y otherwise, if position do run , or do jump otherwise|b is an approach where it would be good to do build if position is not equal to y otherwise, if iron do find , or do use as a last resort|once a is greater than 1 you have the option to use until finally x|b is a good strategy where you should do use if iron is exactly the same as y otherwise, if iron do build , or do find otherwise|as soon as inventory is equal to y you are able to build until finally position is at least 2|as soon as position is less than x you can use until finally y|when position you have the option to run until position is less than or equal to 2|a is a tactic where it is advantageous to do jump if iron is equal to y otherwise, if b do run , or do jump as a last resort|b is an approach where it would be good to do jump if b is not the same as y otherwise, if iron do find , or do find as a last resort|if position is exactly the same as 0 you have the option to jump until finally a is not equal to 1|a is an approach where you do run if iron y otherwise, if iron do build , or do run if not|when position is smaller than 0 you can use until a is not equal to 1|a is an approach where it would be good to do jump if a 0 otherwise, if iron do find , or do use if no other options are possible|once position is greater than or equal to 2 you have the choice to use until finally b is not the same as 0|if a is equal to 2 you have the choice to use until b is not the same as 1|a is a tactic where it is good to do use if iron is equal to 1 otherwise, if b do use , or do jump if not|a is a strategy where you do jump if iron is less than 1 otherwise, if b do use , or do find as a last resort|a is a tactic where it is advantageous to do jump if iron is smaller than x otherwise, if iron do build , or do use otherwise|a is a good strategy where you should do jump if iron is equal to y otherwise, if iron do use , or do find otherwise|a is a tactic where it is good to do run if position is equal to 1 otherwise, if iron do use , or do use as a last resort|a is a good strategy where you should do find if a is not the same as y otherwise, if iron do build , or do run otherwise|b is a strategy where you do jump if a is not equal to 2 otherwise, if a do run , or do find if not|a is an approach where you do jump if position is exactly the same as 0 otherwise, if b do use , or do jump otherwise|a is an approach where it would be good to do find if a 2 otherwise, if a do jump , or do build otherwise|when a is at least 2 you can find until finally inventory is at least 0|whenever b is smaller than 0 you can jump until finally b is not the same as x|as soon as inventory is less than or equal to x you have the option to find until inventory is not the same as 1|b is an approach where it would be good to do find if b is not the same as y otherwise, if b do jump , or do use if no other options are possible|b is a tactic where it is good to do find if iron y otherwise, if a do use , or do build if no other options are possible|a is an approach where you do jump if a is exactly the same as 1 otherwise, if iron do use , or do use if not|when b is exactly the same as x you have the choice to build until finally inventory is less than 2|whenever inventory is smaller than 0 you have the option to use until finally b is exactly the same as 0|whenever position is less than y you have the choice to build until finally inventory is exactly the same as x|when b is less than or equal to y you have the choice to build until finally position is at least 0|b means that it would be good to do use if b is less than y otherwise, if iron do use , or do build otherwise|once a is smaller than x you have the choice to build until finally inventory is at least y|if b is equal to x you have the option to find until position is not the same as 1|b means that it would be good to do run if a is exactly the same as x otherwise, if iron do run , or do build if not|b is an approach where it would be good to do use if position y otherwise, if a do build , or do find as a last resort|b is a good strategy where you should do use if a is exactly the same as x otherwise, if iron do run , or do find as a last resort|a means that it would be good to do jump if b is larger than 0 otherwise, if position do build , or do run otherwise|a suggests that it would be advantageous to do use if iron is not the same as 2 otherwise, if b do run , or do find as a last resort|a entails that you do run if a 1 , or do run as a last resort|once b is smaller than 1 you are able to jump until a is greater than or equal to x|a means that it would be good to do jump if position 2 otherwise, if a do run , or do find if not|as soon as b is less than 1 you have the option to jump until finally position is greater than or equal to 2|a states that you should do find if position y otherwise, if iron do build , or do build as a last resort|whenever b is smaller than x you are able to jump until finally inventory is less than x|a is a tactic where it is good to do find if iron y otherwise, if iron do run , or do find otherwise|a is a tactic where it is advantageous to do use if b 2 otherwise, if b do run , or do use as a last resort|a states that you should do jump if position is greater than 0 otherwise, if a do build , or do jump if no other options are possible|a is an approach where you do find if a 0 , or do jump if no other options are possible|a suggests that it would be advantageous to do find if position is not equal to y otherwise, if iron do build , or do find if no other options are possible|a entails that you do build if b 0 otherwise, if iron do build , or do build as a last resort|a is a tactic where it is good to do use if position is equal to x otherwise, if a do jump , or do build otherwise|b states that you should do run if b is equal to x otherwise, if a do jump , or do find if no other options are possible|b is an approach where you do run if b x otherwise, if a do build , or do find otherwise|a states that you should do run if position is larger than 2 otherwise, if iron do find , or do build otherwise|a suggests that it would be advantageous to do find if a is less than 0 otherwise, if a do find , or do find if no other options are possible|when a is less than or equal to 0 you have the choice to build until finally position is larger than y|when inventory is less than 1 you are able to jump until finally position is greater than 2|as soon as b is at most x you can run until finally position is exactly the same as 2|a means that it would be good to do use if position x otherwise, if iron do build , or do jump if no other options are possible|b states that you should do use if position x otherwise, if position do jump , or do find as a last resort|once inventory is greater than or equal to 0 you are able to run until finally position is less than y|b suggests that it would be advantageous to do use if position is not equal to y , or do find otherwise|a is an approach where you do jump if b is less than 1 otherwise, if b do find , or do use otherwise|once inventory is greater than x you have the option to build until finally position is less than or equal to y|as soon as position is greater than or equal to 2 you are able to find until position is less than or equal to x|a is a tactic where it is good to do build if a 0 otherwise, if position do build , or do build if not|a suggests that it would be advantageous to do use if b is not the same as y otherwise, if b do use , or do build if not|whenever inventory is at least 2 you are able to run until finally a is at least 1|a entails that you do use if position is smaller than 0 otherwise, if a do jump , or do run otherwise|if inventory is greater than or equal to 2 you have the option to find until finally inventory is exactly the same as 2|if inventory is less than or equal to 2 you have the choice to jump until b is less than or equal to y|a is a tactic where it is advantageous to do find if b 0 otherwise, if b do find , or do jump as a last resort|as soon as position is less than 2 you have the option to use until finally a is exactly the same as 0|whenever position is equal to 2 you have the option to find until position is equal to x|b is an approach where you do find if b is exactly the same as x otherwise, if a do find , or do jump if not|if a is greater than y you are able to run until inventory is exactly the same as 0|if b is less than or equal to 0 you are able to run until finally b is not equal to 1|once inventory is greater than or equal to 2 you have the option to run until finally a is less than 1|as soon as position is smaller than 2 you can find until inventory is less than y|once b is equal to x you can find until b is not the same as 2|b suggests that it would be advantageous to do build if iron is less than y otherwise, if b do jump , or do find as a last resort|a is a good strategy where you should do use if iron is smaller than 2 otherwise, if iron do jump , or do find as a last resort|a is a tactic where it is advantageous to do run if iron otherwise, if position do build , or do jump as a last resort|b entails that you do build if b x otherwise, if b do build , or do jump if no other options are possible|a is a good strategy where you should do jump if iron otherwise, if b do find , or do find if not|whenever b is smaller than 1 you are able to find until finally position is greater than or equal to 0|once position is not the same as 1 you can jump until finally inventory is not the same as 1|a suggests that it would be advantageous to do build if iron is larger than x otherwise, if iron do find , or do use as a last resort|a is a strategy where you do find if iron is not the same as 1 otherwise, if a do run , or do jump as a last resort|if a is at most x you are able to use until finally a is not the same as x|once b is at least 2 you can use until position is greater than y|a entails that you do find if iron is exactly the same as 2 otherwise, if b do jump , or do find otherwise|a suggests that it would be advantageous to do build if b 0 otherwise, if iron do use , or do use otherwise|b means that it would be good to do run if position otherwise, if position do run , or do build as a last resort|whenever inventory is greater than x you can use until finally position is greater than or equal to 0|b entails that you do jump if position y otherwise, if b do jump , or do find if not|once position is at most y you can run until b is exactly the same as 0|if inventory is at most y you have the option to jump until finally b is not equal to y|b is a strategy where you do jump if b is equal to x otherwise, if iron do find , or do use if no other options are possible|a is a tactic where it is good to do find if a otherwise, if a do build , or do build as a last resort|b means that it would be good to do find if a x otherwise, if a do run , or do jump if no other options are possible|a states that you should do jump if position 1 otherwise, if iron do run , or do find if not|as soon as inventory is not equal to 0 you have the choice to build until position is at least x|once b is less than x you have the choice to run until a is less than or equal to 1|b is an approach where it would be good to do use if iron x otherwise, if a do build , or do use if not|if position is larger than y you are able to jump until finally a is greater than or equal to 2|b entails that you do use if b is equal to y , or do find if no other options are possible|if inventory is not the same as 1 you have the choice to run until finally b|a is a tactic where it is good to do run if a 1 otherwise, if iron do build , or do jump if not|b is a tactic where it is advantageous to do find if a is larger than x otherwise, if iron do find , or do jump if not|as soon as a is larger than y you are able to build until a is larger than y|as soon as b is less than or equal to 0 you are able to run until finally inventory is not the same as 0|as soon as b is greater than or equal to 2 you can use until finally b is exactly the same as 0|a is a strategy where you do run if a is not equal to 0 otherwise, if position do run , or do find otherwise|whenever y you can find until position is less than x|once position is greater than or equal to x you can jump until b is equal to 0|once a is larger than 0 you are able to use until inventory is at most x|a is a strategy where you do jump if b y otherwise, if position do use , or do use otherwise|as soon as a is not equal to x you have the choice to find until position is not the same as 2|when inventory is exactly the same as 2 you are able to use until a is greater than y|b suggests that it would be advantageous to do find if a is greater than x otherwise, if b do run , or do jump if no other options are possible|if a is smaller than y you can run until finally position is greater than y|once b is greater than or equal to 2 you have the choice to run until finally b is equal to y|whenever b is larger than x you have the choice to run until finally b is exactly the same as 0|if b is equal to 2 you have the choice to use until position is not the same as 0|if a is not the same as x you can find until finally b is at most y|b means that it would be good to do run if a is greater than 2|a is a tactic where it is advantageous to do use if b is exactly the same as y otherwise, if position do jump , or do jump as a last resort|a is an approach where you do find if iron is exactly the same as 2 otherwise, if b do build , or do find if no other options are possible|a states that you should do run if a is equal to 1 otherwise, if position do use , or do run as a last resort|a states that you should do jump if a x otherwise, if a do run , or do find if no other options are possible|a entails that you do use if a is exactly the same as 1 otherwise, if b do jump , or do use if no other options are possible|whenever position is smaller than 0 you have the choice to build until b is equal to 2|a is a tactic where it is advantageous to do build if position is greater than x otherwise, if b do find , or do run as a last resort|when b is less than x you have the option to run until inventory is greater than x|b states that you should do find if position is exactly the same as y otherwise, if a do run , or do find if not|b is a strategy where you do build if b is not equal to x otherwise, if position do build , or do use if no other options are possible|if a is not the same as x you have the option to use until b is less than 2|when b is greater than 0 you can run until finally inventory is at most 1|a entails that you do use if iron is not equal to 0 otherwise, if a do use , or do build otherwise|a means that it would be good to do run if b is exactly the same as 1 otherwise, if a do run , or do jump otherwise|b is an approach where you do jump if b is exactly the same as y otherwise, if iron do find , or do run as a last resort|once a is equal to x you can use until position is larger than 1|a states that you should do run if position is not equal to 1 otherwise, if iron do find , or do run as a last resort|a means that it would be good to do find if a is not equal to 1 otherwise, if b do build , or do find otherwise|b is a good strategy where you should do find if a is greater than x otherwise, if a do run , or do use if not|b states that you should do find if a is not equal to 2 otherwise, if b do run , or do jump if not|a is a tactic where it is good to do use if a is not the same as 1 otherwise, if position do use , or do run if no other options are possible|a suggests that it would be advantageous to do find if iron is not equal to 0 otherwise, if position do build , or do run if no other options are possible|a is an approach where you do find if b is not the same as x otherwise, if iron do use , or do find otherwise|once inventory is less than 0 you have the option to run until finally a is at least 0|once inventory is greater than or equal to 0 you have the option to build until finally a is smaller than 1|a is an approach where you do jump if position is smaller than 2 otherwise, if position do find , or do find as a last resort|whenever b is greater than or equal to 0 you can build until y|when b is at least 2 you are able to find until finally position is less than or equal to 0|a means that it would be good to do run if position 2 otherwise, if b do use , or do build as a last resort|a is a tactic where it is advantageous to do build if b is equal to x otherwise, if b do build , or do build as a last resort|a is a strategy where you do jump if position 2 otherwise, if b do find , or do run otherwise|a means that it would be good to do find if a is equal to y otherwise, if iron do build , or do run as a last resort|a is an approach where it would be good to do build if position is equal to 2 otherwise, if position do use , or do jump if no other options are possible|a means that it would be good to do build if a is not the same as x otherwise, if a do use , or do run otherwise|b is a strategy where you do run if b is equal to y|whenever a is less than y you have the option to jump until finally b is larger than 1|once b is at least 0 you have the choice to use until position is greater than or equal to 1|when position is equal to 0 you have the option to run until b is less than or equal to 2|a is a tactic where it is good to do use if a x otherwise, if a do jump , or do run as a last resort|b is a tactic where it is advantageous to do use if a is smaller than 1 otherwise, if iron do build , or do jump if no other options are possible|a is a good strategy where you should do use if iron is not equal to 1 otherwise, if a do build , or do jump as a last resort|when x you have the option to run until inventory is not the same as y|whenever inventory is less than or equal to 0 you have the choice to run until inventory is equal to 1|a is a good strategy where you should do find if a x otherwise, if b do find , or do run if no other options are possible|as soon as position is exactly the same as 0 you are able to find until position is at most 1|whenever position is not the same as 0 you can find until a is not the same as 1|a entails that you do find if b 0 otherwise, if a do find , or do jump as a last resort|once a is greater than or equal to 1 you have the option to build until a is exactly the same as 0|b is a good strategy where you should do run if position y otherwise, if iron do jump , or do jump if no other options are possible|a is an approach where you do find if a is equal to 2 otherwise, if iron do jump , or do build if not|whenever b is not equal to 2 you have the option to build until finally a is equal to 2|a states that you should do jump if b x otherwise, if a do jump , or do run if no other options are possible|b is a good strategy where you should do find if position is less than y otherwise, if a do find , or do build if not|whenever inventory is not equal to x you have the choice to build until b is equal to 0|if inventory is greater than x you have the option to run until inventory is not equal to 0|if a is not the same as 2 you can run until finally b is greater than or equal to 2|as soon as position is greater than 1 you have the option to find until finally b is equal to 2|a is an approach where you do run if position is greater than y , or do find otherwise|once inventory is less than or equal to 2 you have the option to build until b is greater than y|whenever inventory is greater than or equal to y you have the option to use until a is not the same as 0|if inventory is less than y you have the choice to run until inventory is smaller than x|when b is not equal to 1 you have the option to find until position is not the same as 0|b is a tactic where it is advantageous to do find if b is smaller than y otherwise, if iron do use , or do build as a last resort|as soon as b is greater than or equal to y you can run until inventory is smaller than 0|a is a tactic where it is advantageous to do use if b is not equal to 1 otherwise, if iron do run , or do build otherwise|a states that you should do run if b y otherwise, if position do find , or do jump as a last resort|b suggests that it would be advantageous to do build if a otherwise, if position do use , or do use if no other options are possible|when b is larger than y you are able to run until inventory is at least 0|if b is at least 2 you have the option to build until inventory is less than x|a is an approach where it would be good to do run if a is larger than y otherwise, if a do run , or do build if not|b is a tactic where it is good to do run if a is smaller than x otherwise, if position do run , or do build otherwise|b suggests that it would be advantageous to do build if iron is not the same as x otherwise, if b do use , or do jump if not|once inventory is not the same as 0 you can find until finally position is greater than x|if position is exactly the same as x you can build until finally a is not equal to y|a is a tactic where it is good to do jump if position is equal to y otherwise, if position do build , or do jump if not|as soon as position is less than or equal to y you are able to build until finally inventory is not the same as 2|a means that it would be good to do run if b y otherwise, if a do run , or do build if no other options are possible|as soon as b is at least x you have the choice to use until inventory is not the same as 1|as soon as position is at least y you have the choice to find until position is greater than or equal to 2|whenever b is less than or equal to 0 you are able to use until a is not the same as x|b is a tactic where it is advantageous to do use if position y otherwise, if a do use , or do find otherwise|b is an approach where it would be good to do jump if position is not equal to x otherwise, if position do jump , or do use as a last resort|if b is equal to y you can use until finally a is less than or equal to x|if position is equal to 0 you are able to find until a is smaller than 1|b suggests that it would be advantageous to do use if iron is less than x otherwise, if b do use , or do run as a last resort|b suggests that it would be advantageous to do run if b x otherwise, if position do build , or do build if not|once inventory is not equal to 1 you can run until finally inventory is not the same as 2|if inventory is less than or equal to x you have the choice to jump until position is at most 0|a states that you should do build if position is greater than x otherwise, if a do jump , or do use otherwise|a suggests that it would be advantageous to do jump if position is less than x otherwise, if iron do run , or do use if not|b suggests that it would be advantageous to do build if a is equal to 1 otherwise, if a do use , or do jump if not|when inventory is greater than 1 you can use until finally position is at least 2|b is a strategy where you do use if position is equal to y otherwise, if iron do use , or do use as a last resort|a entails that you do jump if position is less than 2 otherwise, if a do run , or do find if not|b is an approach where it would be good to do build if a is greater than y otherwise, if b do find , or do run as a last resort|if b is larger than 2 you have the choice to jump until position is less than or equal to 2|whenever x you have the option to build until position is smaller than y|b is an approach where you do build if position is not equal to y otherwise, if b do find , or do run otherwise|a is a strategy where you do find if iron is not the same as x otherwise, if position do jump , or do use if not|as soon as b is not the same as y you have the option to use until finally inventory is less than 0|when inventory is equal to 1 you have the choice to use until position is equal to y|a is a tactic where it is good to do run if iron 0 otherwise, if b do build , or do run if not|whenever b is at most y you can jump until b is at least 2|b entails that you do jump if iron x otherwise, if iron do use , or do build as a last resort|as soon as inventory is at most 2 you can run until finally a is greater than or equal to 2|whenever position is not the same as 1 you are able to find until inventory is less than or equal to y|a is a strategy where you do run if position is not the same as x otherwise, if b do use , or do run if not|a is a tactic where it is good to do run if iron is exactly the same as 1 otherwise, if position do find , or do build if no other options are possible|when inventory is at least 1 you are able to run until finally a is not the same as y|when b is at least 2 you can find until finally position is not equal to x|as soon as b is equal to 0 you have the option to jump until finally inventory is smaller than 0|as soon as a is exactly the same as y you have the option to build until finally inventory is at least 1|a is a good strategy where you should do jump if a is larger than 1 otherwise, if a do build , or do build if not|a means that it would be good to do run if b 0 otherwise, if a do find , or do run otherwise|as soon as b is smaller than 2 you can run until finally a is smaller than 0|a suggests that it would be advantageous to do build if a is greater than 2 otherwise, if iron do build , or do build if no other options are possible|a suggests that it would be advantageous to do build if a is not equal to 0 otherwise, if a do jump , or do run if no other options are possible|a states that you should do use if position is equal to 0 otherwise, if position do build , or do jump if not|a is a strategy where you do build if a is less than 0 otherwise, if a do find , or do find as a last resort|a is an approach where you do find if a is equal to 0 otherwise, if b do run , or do run if not|as soon as b is at most 2 you are able to run until inventory is larger than y|a entails that you do use if b is not the same as 2 otherwise, if iron do run , or do build if not|whenever inventory is larger than y you have the choice to use until finally a is less than 2|once b is smaller than 0 you can run until finally b is greater than 1|as soon as b is equal to x you have the choice to use until b is less than 0|a is an approach where it would be good to do build if a 2 otherwise, if b do build , or do jump if not|whenever b you have the option to jump until finally a is less than or equal to 0|once position is greater than 0 you have the option to use until finally a is larger than 0|if inventory is at most x you have the option to use until finally inventory is not the same as x|once b is at least 1 you can find until finally inventory is greater than 1|a is a tactic where it is advantageous to do run if iron is exactly the same as 0 otherwise, if position do build , or do jump if not|b is a tactic where it is good to do run if a is equal to x otherwise, if position do use , or do run as a last resort|a states that you should do use if a is less than x|once a is not equal to 0 you have the option to find until a is at most 1|a entails that you do find if position is less than 2 otherwise, if iron do use , or do find if not|a is a strategy where you do build if position is not the same as 0 otherwise, if b do run , or do find if not|b suggests that it would be advantageous to do jump if position is not equal to x otherwise, if iron do find , or do run otherwise|once a is at most 1 you are able to find until finally inventory is greater than 2|once a is smaller than y you are able to use until b is not the same as 0|if position you have the choice to jump until finally position is not equal to x|a means that it would be good to do run if a is not the same as 2 otherwise, if a do use , or do build if no other options are possible|a is an approach where it would be good to do run if a is equal to 2 otherwise, if b do use , or do build if not|a suggests that it would be advantageous to do jump if a y otherwise, if b do find , or do jump otherwise|a means that it would be good to do find if a is not equal to 1 otherwise, if position do run , or do use if no other options are possible|whenever inventory is smaller than 0 you are able to use until finally position is larger than 1|a is a tactic where it is advantageous to do jump if position x otherwise, if a do run , or do use if no other options are possible|if b is not the same as 1 you have the choice to use until finally a is less than or equal to 0|a entails that you do use if a is equal to 1 otherwise, if position do build , or do use as a last resort|b entails that you do find if b is larger than y otherwise, if b do build , or do build otherwise|once b is greater than x you can find until finally b is equal to 2|b means that it would be good to do jump if iron otherwise, if position do build , or do find as a last resort|once b is greater than or equal to 0 you have the option to use until finally a is larger than 2|if position is at least 2 you can run until finally position is less than 2|as soon as inventory is equal to 1 you can jump until finally b is at least 0|b means that it would be good to do use if a is equal to 2 otherwise, if b do find , or do find as a last resort|whenever a is equal to 0 you have the choice to use until finally position is greater than x|when a is greater than or equal to y you can build until position is less than 1|a is an approach where it would be good to do jump if position 0 otherwise, if position do use , or do jump otherwise|b entails that you do use if a is less than 2 otherwise, if iron do jump , or do build otherwise|b means that it would be good to do run if position is equal to y otherwise, if iron do use , or do find if no other options are possible|b is an approach where it would be good to do run if a is not the same as 0 otherwise, if position do find , or do jump if no other options are possible|b states that you should do find if iron is not the same as x otherwise, if a do use , or do build if no other options are possible|a means that it would be good to do build if b is larger than 1 otherwise, if a do run , or do jump if no other options are possible|a states that you should do build if b x otherwise, if a do run , or do jump otherwise|if a is not equal to 0 you are able to build until a is at most 2|a entails that you do find if position is not equal to 1 otherwise, if iron do run , or do find as a last resort|a states that you should do find if a 0 otherwise, if iron do find , or do build as a last resort|when a is not equal to x you have the choice to run until position is at least 1|as soon as inventory is less than or equal to 2 you can build until position is less than or equal to 2|b entails that you do build if position is greater than x otherwise, if iron do find , or do use if no other options are possible|b is a good strategy where you should do use if iron is less than y otherwise, if position do use , or do use as a last resort|a is a strategy where you do run if position is smaller than 0 , or do build if not|a is a tactic where it is good to do run if a is equal to 1 otherwise, if a do find , or do find if not|a is an approach where it would be good to do use if position 2 otherwise, if position do build , or do use if not|when position is greater than 2 you are able to use until b is smaller than 1|if inventory is at least x you have the choice to run until finally a is less than or equal to x|whenever position is at least 2 you have the choice to find until finally a is less than 2|whenever position is greater than 0 you have the choice to use until finally position is exactly the same as 0|a is a tactic where it is advantageous to do jump if iron is greater than 1 otherwise, if a do find , or do build if not|when b is not equal to 1 you can build until b is smaller than 2|if b is less than or equal to x you can run until finally position is larger than y|whenever position is greater than 1 you have the option to find until position is greater than or equal to y|b is a good strategy where you should do build if a is less than x otherwise, if position do jump , or do find otherwise|a means that it would be good to do run if a 0 otherwise, if position do jump , or do use if no other options are possible|a is a good strategy where you should do build if iron y otherwise, if iron do find , or do build as a last resort|a is a tactic where it is good to do use if a is greater than x otherwise, if position do jump , or do jump if not|a is a tactic where it is advantageous to do run if b is exactly the same as y otherwise, if iron do find , or do use as a last resort|if a is equal to x you can run until finally b is exactly the same as 1|when position is greater than or equal to 2 you have the choice to build until inventory is not equal to 2|a is a good strategy where you should do jump if iron is smaller than 2 otherwise, if position do find , or do use otherwise|a states that you should do jump if iron is less than y , or do build as a last resort|as soon as b you can use until finally a is exactly the same as y|a states that you should do use if position 2 otherwise, if a do run , or do use if not|a is an approach where it would be good to do run if a otherwise, if b do run , or do jump otherwise|as soon as inventory is less than 0 you can jump until a is not the same as 0|b is an approach where it would be good to do jump if position y otherwise, if iron do run , or do run if not|a states that you should do run if iron is equal to x otherwise, if b do find , or do run if not|a is a tactic where it is good to do run if a is larger than x otherwise, if iron do run , or do build if no other options are possible|a is a strategy where you do build if b is exactly the same as 2 otherwise, if b do run , or do run as a last resort|as soon as b is not the same as 1 you have the choice to build until finally position is greater than or equal to x|b is a tactic where it is advantageous to do find if iron is exactly the same as x otherwise, if position do run , or do use as a last resort|when b is not equal to 0 you can build until a is exactly the same as 0|a is a good strategy where you should do build if iron is less than 0 otherwise, if a do find , or do run if no other options are possible|when inventory is greater than 0 you are able to run until position is at least 2|a is a strategy where you do use if position is greater than x otherwise, if b do build , or do jump if not|a means that it would be good to do find if iron is smaller than x otherwise, if iron do jump , or do run if not|whenever inventory is larger than 2 you can run until inventory is less than 1|a is a good strategy where you should do use if position is less than 2 otherwise, if b do run , or do jump as a last resort|b is a tactic where it is good to do use if a is equal to 2 otherwise, if position do jump , or do run if no other options are possible|as soon as position is exactly the same as x you have the choice to find until inventory is larger than 0|b entails that you do use if b 2 , or do find if no other options are possible|when b is not equal to 2 you are able to use until finally b is greater than 2|if b is not the same as 1 you have the choice to find until b is at most x|a means that it would be good to do build if a 1 otherwise, if a do build , or do build if not|a is a good strategy where you should do run if position is exactly the same as y otherwise, if a do build , or do use as a last resort|a is a good strategy where you should do run if iron is less than 0 otherwise, if a do find , or do jump if no other options are possible|a states that you should do find if b is not the same as 2 otherwise, if iron do find , or do use as a last resort|as soon as b is at least x you are able to find until x|as soon as position is less than or equal to 1 you have the option to build until b is smaller than 1|whenever position is less than 2 you are able to use until finally inventory is larger than 0|b is a good strategy where you should do build if iron y otherwise, if a do build , or do build if no other options are possible|when b is at most y you have the choice to find until finally a is larger than 0|a suggests that it would be advantageous to do build if a is not the same as y otherwise, if a do jump , or do build if no other options are possible|whenever a is exactly the same as 2 you can build until position is smaller than x|when inventory is less than y you are able to jump until finally inventory is greater than 0|whenever a is smaller than 2 you are able to use until a is exactly the same as 0|once position is larger than y you can jump until finally position is at least 1|b is an approach where it would be good to do use if a is greater than x otherwise, if position do use , or do find as a last resort|as soon as a is less than 1 you have the option to find until finally inventory is equal to 1|a entails that you do jump if position is exactly the same as 0 otherwise, if b do run , or do find otherwise|a is a tactic where it is advantageous to do build if a is exactly the same as y otherwise, if position do jump , or do build if no other options are possible|b is an approach where you do jump if b is not the same as x otherwise, if position do use , or do build otherwise|a entails that you do jump if a is equal to x otherwise, if iron do use , or do build if not|a means that it would be good to do find if a is greater than y otherwise, if b do use , or do jump as a last resort|a states that you should do run if a is not equal to 0 otherwise, if a do find , or do find as a last resort|b means that it would be good to do build if a is larger than y otherwise, if b do run , or do run as a last resort|a is a tactic where it is good to do jump if b is not the same as 1 otherwise, if b do build , or do use if no other options are possible|as soon as b is less than y you have the option to jump until finally inventory is at least 2|b is an approach where it would be good to do find if iron x otherwise, if position do build , or do jump otherwise|if b is equal to x you have the option to build until finally inventory is greater than 1|when b is at most y you can build until position is less than 1|once inventory is smaller than 2 you have the option to use until inventory is greater than 1|a is a tactic where it is advantageous to do find if a is smaller than x otherwise, if position do use , or do find if not|b suggests that it would be advantageous to do use if iron is larger than x , or do build if not|whenever position is not the same as 2 you have the choice to build until finally position is not equal to y|b is a strategy where you do find if position is not equal to x otherwise, if b do build , or do build otherwise|whenever inventory is larger than 0 you can run until finally b is larger than 0|b suggests that it would be advantageous to do use if a is not the same as 2 otherwise, if iron do find , or do jump otherwise|when inventory is less than or equal to 0 you are able to jump until inventory is greater than 0|when position is exactly the same as x you are able to use until position is greater than or equal to 1|b entails that you do build if iron otherwise, if a do use , or do jump as a last resort|b entails that you do jump if a is greater than 0 , or do jump otherwise|when inventory is greater than or equal to 0 you are able to use until finally position is less than y|whenever inventory is greater than y you have the option to use until b is equal to 1|as soon as a is smaller than 0 you have the option to jump until inventory is less than or equal to 0|if position is exactly the same as 0 you have the option to build until finally inventory is not the same as 2|a is a tactic where it is good to do run if a x otherwise, if b do use , or do use otherwise|if x you are able to build until inventory is exactly the same as 1|a is a tactic where it is advantageous to do build if a is greater than 1 otherwise, if position do run , or do run if no other options are possible|whenever position is less than 2 you have the choice to jump until a is greater than 2|when inventory is less than or equal to y you are able to build until a is at least 1|a is a tactic where it is advantageous to do build if position 0 otherwise, if iron do find , or do jump if no other options are possible|a is a good strategy where you should do find if position is not the same as y otherwise, if iron do build , or do run as a last resort|a means that it would be good to do use if position is less than x otherwise, if iron do jump , or do run otherwise|a is an approach where it would be good to do use if iron 1 otherwise, if position do build , or do build otherwise|whenever position is exactly the same as 1 you have the choice to find until finally inventory is at most 0|if position is smaller than 1 you can find until finally position|once inventory is greater than x you are able to run until inventory is at least 1|when a is at most 1 you are able to use until finally position is larger than 0|b entails that you do jump if a is equal to 1 otherwise, if iron do find , or do jump if no other options are possible|a is an approach where you do build if b is exactly the same as x otherwise, if iron do run , or do use if not|if b is less than or equal to x you can build until finally inventory is less than or equal to x|once position is equal to 2 you have the option to jump until b is less than 2|if b is at most 2 you are able to run until y|a is a tactic where it is good to do run if a is smaller than 2 otherwise, if iron do build , or do use if not|a is a tactic where it is advantageous to do jump if a is not the same as y otherwise, if position do jump , or do find as a last resort|whenever b is less than x you have the option to run until a is exactly the same as 2|a is an approach where you do use if b 2 otherwise, if iron do jump , or do use otherwise|whenever position is not the same as 1 you are able to find until a is exactly the same as y|a is an approach where you do use if a is equal to 0 otherwise, if position do build , or do jump if no other options are possible|a is a tactic where it is good to do use if b is exactly the same as 1 otherwise, if position do run , or do build if not|b is a tactic where it is good to do find if a is not equal to y otherwise, if iron do build , or do build otherwise|b suggests that it would be advantageous to do use if b is not the same as y otherwise, if a do run , or do use as a last resort|as soon as position is greater than 2 you can jump until a is less than 2|as soon as b is at least x you have the option to jump until finally position is at least 1|whenever a is less than or equal to 2 you have the choice to jump until a is less than y|once inventory is exactly the same as y you have the option to find until a is exactly the same as 1|when a is at most 2 you are able to run until b is not the same as x|if inventory is larger than 1 you can jump until finally position is exactly the same as 1|as soon as position is larger than 1 you have the option to build until b is not equal to y|as soon as b is equal to x you have the choice to build until finally b is equal to 2|a states that you should do use if a 1 otherwise, if a do run , or do build otherwise|once b is not the same as 2 you have the choice to jump until b is less than or equal to y|if inventory is not equal to 1 you are able to jump until position is larger than 0|b means that it would be good to do find if b is larger than y , or do use if not|whenever inventory is larger than 0 you have the option to run until finally inventory is not equal to 2|a is a tactic where it is advantageous to do jump if b is greater than y otherwise, if iron do build , or do use otherwise|when b is less than or equal to x you have the choice to jump until finally inventory is greater than x|b suggests that it would be advantageous to do jump if b is less than x otherwise, if b do run , or do build as a last resort|a is an approach where you do run if b y otherwise, if position do use , or do jump as a last resort|a suggests that it would be advantageous to do run if a 1 otherwise, if b do use , or do use as a last resort|b is an approach where it would be good to do jump if b is larger than 2 , or do run if not|as soon as inventory is less than or equal to 0 you have the choice to build until b is smaller than x|once a is at least 0 you can jump until inventory is equal to x|a states that you should do build if iron 0 otherwise, if iron do run , or do run otherwise|a is a tactic where it is advantageous to do find if position is exactly the same as 1 otherwise, if position do use , or do build if no other options are possible|when position is larger than x you can use until position is at least x|whenever position is larger than y you can find until finally inventory is equal to y|once a is equal to y you have the option to build until finally a is not equal to 2|whenever a is exactly the same as x you have the choice to use until finally inventory is greater than or equal to 2|a is an approach where you do jump if a is equal to y otherwise, if b do jump , or do run as a last resort|b is a strategy where you do find if a is equal to y , or do build if no other options are possible|whenever b is not equal to 0 you are able to find until a is at least x|a means that it would be good to do jump if iron 0 otherwise, if position do find , or do run as a last resort|as soon as position is at most 1 you have the option to find until finally inventory is not the same as 1|b states that you should do run if position y otherwise, if a do build , or do use if no other options are possible|whenever position is less than 2 you have the option to find until inventory is less than or equal to 1|once a is smaller than x you are able to find until b is greater than y|whenever b is at least x you are able to jump until b is not equal to x|a is a strategy where you do jump if iron is not equal to y otherwise, if b do use , or do jump otherwise|b states that you should do find if iron x , or do find otherwise|once b is greater than y you can jump until finally b is at most 0|a entails that you do use if a is not the same as 1 otherwise, if position do jump , or do build otherwise|whenever a is larger than 0 you have the option to use until finally inventory is greater than or equal to 1|b is a good strategy where you should do build if iron y otherwise, if position do run , or do run if not|a is an approach where you do find if position y otherwise, if a do jump , or do find if no other options are possible|if b is at most 1 you have the choice to build until finally b is not the same as 0|a is an approach where it would be good to do find if b is exactly the same as 1 otherwise, if position do build , or do build if not|once a is not the same as y you have the choice to find until a is equal to x|as soon as inventory is less than or equal to 0 you can run until inventory is equal to 2|whenever a you have the choice to jump until finally a is smaller than 1|a is an approach where you do run if b is not equal to 2 otherwise, if position do find , or do build if no other options are possible|a is an approach where you do find if a is equal to 2|b is a strategy where you do use if a is not equal to x otherwise, if a do build , or do find if no other options are possible|as soon as position is smaller than x you can build until finally inventory is less than or equal to x|as soon as position is exactly the same as y you have the option to build until b is less than y|a entails that you do use if a 1 otherwise, if a do find , or do find if not|a is an approach where you do find if position 2 otherwise, if b do use , or do jump if no other options are possible|when a is larger than y you can use until inventory is at most x|if a is equal to x you have the option to build until b is less than 2|as soon as a is exactly the same as 2 you are able to build until inventory is smaller than y|as soon as b is equal to 0 you have the choice to use until finally b is greater than 0|a is an approach where it would be good to do run if iron is exactly the same as x otherwise, if b do use , or do find otherwise|a is a tactic where it is advantageous to do run if iron is exactly the same as 0 otherwise, if a do jump , or do jump as a last resort|b is an approach where it would be good to do run if position is equal to x otherwise, if iron do use , or do use as a last resort|when a is less than or equal to 2 you have the option to jump until finally b is equal to 2|b is an approach where it would be good to do run if a is equal to 2 otherwise, if b do find , or do find if not|a is a good strategy where you should do find if b is equal to 1 otherwise, if a do use , or do run if not|a entails that you do use if a 2 otherwise, if b do jump , or do use if not|b entails that you do use if a is not the same as 0 otherwise, if a do build , or do use if no other options are possible|a is an approach where you do find if a is smaller than 0 otherwise, if position do find , or do build if not|whenever a is not equal to 1 you have the choice to jump until position is not the same as 2|b suggests that it would be advantageous to do use if a is larger than 0 otherwise, if iron do jump , or do find otherwise|b suggests that it would be advantageous to do build if position y otherwise, if iron do use , or do jump if not|a states that you should do build if iron is not the same as 0 otherwise, if a do build , or do use if not|b states that you should do find if iron y otherwise, if b do use , or do build otherwise|a states that you should do build if a is smaller than 2 otherwise, if iron do jump , or do use as a last resort|a is an approach where it would be good to do use if position 1|once b is not equal to 0 you have the choice to run until inventory is at most 0|b is a strategy where you do use if a is larger than x otherwise, if b do use , or do run if no other options are possible|as soon as b is not the same as x you have the option to run until inventory is not equal to 2|once position is less than 0 you are able to build until finally position is equal to 2|as soon as inventory is equal to 1 you have the choice to jump until b is exactly the same as x|once b is exactly the same as 2 you have the choice to find until finally a is greater than or equal to 1|a states that you should do find if a 1 otherwise, if iron do build , or do use as a last resort|a states that you should do jump if position is larger than x otherwise, if b do jump , or do use if no other options are possible|a is a strategy where you do find if iron is not equal to 0 otherwise, if a do run , or do jump if not|b means that it would be good to do find if b is not equal to x otherwise, if iron do run , or do jump if no other options are possible|as soon as inventory is at least 0 you have the choice to jump until finally a is not equal to x|if inventory is equal to 0 you are able to use until finally position is greater than or equal to 2|a is a strategy where you do run if iron otherwise, if b do find , or do build otherwise|if inventory is at least y you have the option to use until finally inventory is less than or equal to 0|if inventory is less than 1 you can run until finally a is not the same as x|a is a tactic where it is advantageous to do build if b is smaller than 1 , or do use if not|a is a tactic where it is advantageous to do build if iron is equal to 0 otherwise, if iron do find , or do build if no other options are possible|whenever position is exactly the same as y you can find until finally a is at least 0|when x you can find until a is smaller than y|once inventory is not equal to x you are able to jump until finally a is equal to 0|whenever b is at least y you are able to find until a is greater than or equal to y|whenever position is not equal to 2 you have the option to jump until finally inventory is not equal to y|a is an approach where you do jump if a 0 otherwise, if iron do jump , or do find otherwise|once position is equal to x you have the option to use until a is less than x|b is a good strategy where you should do jump if iron is less than x otherwise, if a do use , or do build if no other options are possible|once position is equal to 0 you can use until finally b is equal to 2|a states that you should do find if a is less than 2 , or do find if not|once b is at least x you have the option to use until finally position is smaller than 0|a is an approach where you do find if iron is exactly the same as 2 otherwise, if b do find , or do build if no other options are possible|a is an approach where you do find if b is equal to x otherwise, if a do find , or do jump otherwise|as soon as position is at least 0 you have the choice to run until a is at least 0|once inventory is not equal to 2 you are able to jump until finally a is greater than or equal to 1|a entails that you do jump if position is equal to 2 otherwise, if b do find , or do run if no other options are possible|a means that it would be good to do find if a y otherwise, if iron do find , or do build if not|when x you have the choice to jump until a is at most 1|as soon as position is smaller than 2 you have the option to run until finally inventory is less than 2|whenever inventory is smaller than 1 you can use until inventory|b is an approach where you do jump if b otherwise, if a do jump , or do run if no other options are possible|as soon as position is at least x you are able to use until inventory is greater than 2|a is an approach where it would be good to do build if b otherwise, if a do use , or do find as a last resort|a is an approach where you do find if a is equal to 0 otherwise, if iron do find , or do run if no other options are possible|when a is at least y you have the choice to jump until finally inventory is at most y|b is a good strategy where you should do run if a is equal to 2 otherwise, if position do use , or do jump as a last resort|b is a tactic where it is advantageous to do jump if iron is smaller than y otherwise, if iron do jump , or do jump if no other options are possible|b is a strategy where you do use if b y otherwise, if position do run , or do use otherwise|as soon as b is not equal to x you can run until b is greater than 2|a means that it would be good to do use if a is not the same as y otherwise, if b do use , or do run otherwise|b means that it would be good to do find if a is equal to y otherwise, if a do build , or do jump otherwise|a is an approach where it would be good to do find if a is equal to x otherwise, if a do build , or do run as a last resort|b is an approach where it would be good to do find if iron x otherwise, if b do find , or do jump if no other options are possible|a is a tactic where it is advantageous to do build if position is equal to 0 otherwise, if b do build , or do run otherwise|as soon as inventory is greater than or equal to 1 you are able to run until position is exactly the same as 0|a is a tactic where it is good to do build if iron is not the same as 0 otherwise, if iron do find , or do use if not|b entails that you do run if a is equal to 1 otherwise, if iron do build , or do find as a last resort|a states that you should do use if a is not equal to 0 otherwise, if position do run , or do find if no other options are possible|a is a tactic where it is advantageous to do run if b is exactly the same as 2 otherwise, if iron do run , or do build as a last resort|a is a tactic where it is good to do run if position y otherwise, if a do jump , or do jump if not|as soon as b is greater than or equal to 1 you have the option to find until inventory is at most y|a is an approach where you do jump if b 1 otherwise, if a do use , or do run otherwise|whenever inventory is not equal to 0 you can build until position is equal to x|a suggests that it would be advantageous to do use if iron 2 otherwise, if iron do run , or do run if not|once a is less than or equal to y you are able to run until b is equal to 1|a is an approach where you do run if b is greater than 0 otherwise, if a do run , or do use otherwise|b states that you should do find if iron x otherwise, if a do run , or do use if no other options are possible|a suggests that it would be advantageous to do use if position is less than 2 otherwise, if a do use , or do use if no other options are possible|a is a tactic where it is advantageous to do use if b is smaller than 0 otherwise, if b do find , or do use as a last resort|a suggests that it would be advantageous to do jump if position is greater than x otherwise, if a do jump , or do run as a last resort|if b is greater than or equal to 0 you have the choice to find until finally b is not equal to y|a entails that you do build if iron x otherwise, if b do jump , or do jump if no other options are possible|a entails that you do build if position 2 otherwise, if iron do run , or do jump if not|once y you have the choice to run until a is less than or equal to 0|b is a strategy where you do use if a y otherwise, if b do build , or do run as a last resort|a is a good strategy where you should do find if position is less than 2 otherwise, if b do run , or do jump if not|b is a good strategy where you should do find if position y otherwise, if a do build , or do run if no other options are possible|a states that you should do run if iron is not equal to y otherwise, if iron do build , or do find otherwise|a is a strategy where you do run if a is larger than 0 otherwise, if position do jump , or do run if no other options are possible|b entails that you do run if a is smaller than 1 otherwise, if iron do build , or do find if not|whenever position is greater than or equal to 1 you have the choice to build until b is smaller than x|b entails that you do find if iron y otherwise, if a do find , or do build if not|a is a good strategy where you should do find if a is not equal to 1 otherwise, if b do use , or do jump otherwise|as soon as position is not the same as 0 you can jump until finally b is at least 0|once b is less than or equal to 0 you have the choice to build until position is greater than 2|as soon as position is exactly the same as 0 you have the choice to use until finally position is at most 0|as soon as y you can jump until b is exactly the same as 0|as soon as inventory is equal to y you have the choice to jump until finally b is not the same as 0|whenever a is not equal to 2 you have the option to use until finally b is greater than or equal to y|whenever b is greater than or equal to 2 you can jump until finally b is equal to 1|a suggests that it would be advantageous to do run if position 0 otherwise, if position do use , or do jump as a last resort|as soon as b is greater than or equal to y you are able to run until position is exactly the same as 2|b suggests that it would be advantageous to do jump if a is smaller than 2 otherwise, if position do run , or do use as a last resort|a suggests that it would be advantageous to do find if b is larger than 1 otherwise, if b do use , or do use if no other options are possible|when b is greater than 2 you have the choice to jump until finally inventory is not equal to 1|b is a good strategy where you should do jump if b is smaller than y otherwise, if a do use , or do jump if not|whenever position is greater than or equal to y you can use until finally b is not the same as 2|a is a tactic where it is advantageous to do jump if position 1 otherwise, if iron do build , or do use otherwise|once b is not the same as 0 you can use until inventory is at least 0|if a is less than 0 you have the choice to run until finally a is not equal to 1|a entails that you do find if a is less than 0 otherwise, if iron do jump , or do build as a last resort|whenever inventory is at least x you are able to run until finally position is not the same as x|if inventory is at most 2 you have the choice to find until finally position is at least y|when b is less than or equal to y you can run until finally position is not the same as 1|a is a tactic where it is advantageous to do run if a is less than y otherwise, if position do use , or do find if no other options are possible|a entails that you do find if iron y otherwise, if b do build , or do run if no other options are possible|if position is not equal to 0 you are able to jump until a is greater than 2|if b is at least 2 you have the choice to jump until position is less than x|if b is at most x you have the choice to build until b is less than 0|as soon as a is not equal to x you are able to jump until a is greater than 1|a suggests that it would be advantageous to do build if position x otherwise, if iron do build , or do build as a last resort|as soon as inventory is at most 2 you are able to find until position is larger than y|as soon as position is at least x you have the option to build until finally position is smaller than x|a is a tactic where it is good to do jump if b , or do run if not|b is a tactic where it is advantageous to do run if b is larger than 1 , or do jump as a last resort|whenever a is greater than 0 you have the choice to run until b is at most 0|if position is greater than y you are able to jump until a is smaller than x|if a is less than or equal to 2 you have the option to build until finally position is equal to 1|b entails that you do find if b x otherwise, if b do use , or do run as a last resort|a states that you should do use if b 2 otherwise, if iron do find , or do build as a last resort|b is a tactic where it is good to do jump if b x otherwise, if position do jump , or do run as a last resort|a is a tactic where it is advantageous to do find if a x otherwise, if iron do build , or do use otherwise|whenever position is not the same as x you can build until a is exactly the same as 1|b entails that you do run if position x otherwise, if iron do jump , or do run if not|a is a strategy where you do build if b is not the same as y otherwise, if a do run , or do build as a last resort|whenever y you have the choice to find until finally inventory is not the same as y|a is an approach where you do run if b x otherwise, if b do find , or do use if no other options are possible|a is an approach where you do jump if a is larger than 2 otherwise, if position do build , or do jump otherwise|when inventory is less than y you have the choice to jump until finally inventory is exactly the same as x|a is an approach where it would be good to do use if position is greater than x otherwise, if position do build , or do run if no other options are possible|b suggests that it would be advantageous to do find if b is not equal to x otherwise, if b do use , or do build if no other options are possible|once position is not equal to 2 you can run until finally inventory is at least y|when a is smaller than 1 you are able to run until position is not the same as 2|once a is at least 2 you have the option to run until inventory is larger than x|a suggests that it would be advantageous to do use if position 1 otherwise, if position do run , or do build if not|a means that it would be good to do jump if position is exactly the same as y otherwise, if b do find , or do run if not|whenever a is smaller than 2 you have the option to build until finally position is smaller than 1|a is a strategy where you do run if iron is exactly the same as x otherwise, if a do build , or do build if no other options are possible|once inventory is not the same as x you are able to jump until b is not the same as 2|a is an approach where it would be good to do run if position is equal to x otherwise, if b do run , or do find as a last resort|b is a good strategy where you should do find if a is not equal to 0 otherwise, if b do use , or do run otherwise|b is a tactic where it is good to do find if a is equal to x otherwise, if iron do run , or do use otherwise|if y you are able to run until b is equal to 1|when b is greater than or equal to 1 you can build until finally b is at least 2|if inventory is greater than y you are able to use until b is less than or equal to x|a is a tactic where it is good to do use if b 1 otherwise, if a do build , or do build as a last resort|once a is equal to x you have the option to use until finally inventory is greater than 0|a is an approach where you do jump if a is larger than x otherwise, if position do build , or do run as a last resort|if inventory is not the same as 1 you can find until b is exactly the same as 1|as soon as a is larger than 0 you have the option to use until b is at most x|a states that you should do run if position 0 otherwise, if a do find , or do use if no other options are possible|a entails that you do find if b y otherwise, if position do find , or do build as a last resort|if position is not the same as x you have the option to build until finally position is not equal to x|when a is equal to 0 you have the choice to build until finally b is exactly the same as x|b is a strategy where you do jump if a is greater than y otherwise, if b do jump , or do find otherwise|whenever inventory is smaller than x you have the option to build until finally inventory is greater than y|a is a good strategy where you should do use if iron x otherwise, if a do find , or do build if not|as soon as position is not equal to 1 you have the choice to find until finally b is at most x|b entails that you do run if a is not equal to y otherwise, if position do use , or do run as a last resort|if a is equal to 0 you are able to find until finally inventory is exactly the same as y|once inventory is smaller than 2 you are able to build until inventory is less than or equal to 1|a is a strategy where you do use if iron is smaller than 1 otherwise, if b do jump , or do run as a last resort|a is a tactic where it is good to do jump if iron 2 otherwise, if position do run , or do build if not|whenever a is exactly the same as 0 you are able to find until inventory is larger than 1|when b is not equal to x you can find until b is at most 0|a entails that you do use if position is greater than 0 otherwise, if a do use , or do find as a last resort|once a is greater than 2 you can build until finally position is less than 2|b is a tactic where it is good to do jump if b is larger than y otherwise, if position do build , or do build if not|a is a tactic where it is good to do build if a 1 otherwise, if position do find , or do build as a last resort|a is a tactic where it is good to do find if iron otherwise, if a do find , or do use if not|b suggests that it would be advantageous to do build if position is larger than y otherwise, if iron do use , or do build if not|as soon as inventory is greater than y you have the choice to run until a is less than or equal to y|once inventory is less than or equal to 1 you are able to jump until finally inventory is equal to y|when inventory is exactly the same as 1 you have the choice to run until finally b is exactly the same as 0|whenever a is at most y you have the choice to run until b is larger than y|a entails that you do build if iron is exactly the same as 0 otherwise, if b do use , or do jump if not|b is a good strategy where you should do use if a is smaller than 2 otherwise, if position do find , or do run otherwise|a is a good strategy where you should do run if b is not equal to 1 otherwise, if b do use , or do run if not|a entails that you do build if iron 2 otherwise, if b do jump , or do run if not|b suggests that it would be advantageous to do find if iron x otherwise, if a do jump , or do find as a last resort|a is an approach where you do find if a is equal to y otherwise, if iron do run , or do find if no other options are possible|as soon as position is larger than x you have the choice to build until finally inventory is less than or equal to 1|if inventory is greater than or equal to 0 you are able to use until finally b is not the same as 2|once a is less than or equal to x you have the option to build until b is smaller than 1|a suggests that it would be advantageous to do use if b is less than 1 otherwise, if iron do jump , or do jump if not|b states that you should do use if position is exactly the same as y otherwise, if b do find , or do run otherwise|b is a strategy where you do use if a is greater than 1 , or do build if no other options are possible|b is a tactic where it is good to do build if position x otherwise, if position do run , or do use as a last resort|a is a tactic where it is good to do use if a y otherwise, if position do jump , or do jump if not|a states that you should do build if position is smaller than 0 otherwise, if a do run , or do find if no other options are possible|once b is not the same as 0 you have the choice to build until a is less than 2|whenever inventory is less than 1 you can find until b is at most y|as soon as b is not the same as 1 you are able to jump until b is equal to y|whenever inventory is greater than or equal to x you can find until finally a is not the same as 2|a is a tactic where it is advantageous to do build if position is less than y otherwise, if iron do find , or do run if no other options are possible|when inventory is exactly the same as 1 you can use until finally b is smaller than 0|b is an approach where it would be good to do run if iron otherwise, if b do run , or do build if no other options are possible|a is a strategy where you do run if iron is not the same as x otherwise, if iron do run , or do jump if no other options are possible|a states that you should do find if b is exactly the same as 2 otherwise, if b do build , or do build if no other options are possible|a is a good strategy where you should do use if iron is greater than x otherwise, if position do build , or do jump if no other options are possible|b is an approach where you do use if iron is not equal to y otherwise, if position do jump , or do run if no other options are possible|once b is greater than 0 you are able to jump until finally inventory is equal to 1|a is a good strategy where you should do build if b is not equal to 0 otherwise, if a do use , or do jump if not|when position is greater than or equal to 0 you can jump until finally inventory is less than 2|if a is less than or equal to 2 you are able to run until a is greater than or equal to 2|a means that it would be good to do build if a 0 otherwise, if iron do jump , or do build if no other options are possible|a is an approach where you do build if a x otherwise, if a do build , or do find if no other options are possible|a is an approach where it would be good to do build if a 0 otherwise, if b do jump , or do jump if not|if inventory is greater than 0 you can jump until b is equal to 0|if b is greater than x you can find until finally b is smaller than x|when position is not equal to 0 you are able to jump until finally a is not equal to 2|as soon as a is greater than 1 you have the option to jump until finally b is less than y|b is a tactic where it is good to do build if position is less than x otherwise, if iron do use , or do find if not|a is a tactic where it is advantageous to do jump if position is not equal to y otherwise, if b do build , or do use otherwise|a is a good strategy where you should do run if iron is less than x otherwise, if iron do run , or do use as a last resort|whenever b is exactly the same as 0 you have the option to find until position is less than or equal to 0|b suggests that it would be advantageous to do find if a is equal to 1 otherwise, if b do use , or do build if not|once inventory is less than x you are able to jump until position is exactly the same as x|as soon as inventory is equal to 1 you have the choice to run until finally inventory is at most 1|a entails that you do run if position is greater than 2 , or do use as a last resort|a means that it would be good to do run if b y otherwise, if position do find , or do run if not|a is a strategy where you do build if iron is greater than 0 otherwise, if b do jump , or do build if not|b is a tactic where it is advantageous to do build if position is exactly the same as 2|a is an approach where you do jump if iron is not equal to 0 otherwise, if a do build , or do find if no other options are possible|when position is exactly the same as 1 you have the choice to jump until finally a is less than or equal to 1|a is an approach where it would be good to do find if a y otherwise, if b do run , or do find if no other options are possible|once position is not the same as y you are able to build until a|a states that you should do find if a is not equal to x otherwise, if b do jump , or do build if not|when a is greater than or equal to 0 you have the option to jump until position is not equal to 2|once b is larger than 1 you are able to find until finally position is not the same as 1|b is a tactic where it is advantageous to do run if position y otherwise, if iron do build , or do run otherwise|once inventory is at least x you can use until finally a is at most y|b is a good strategy where you should do find if b is not the same as y otherwise, if b do jump , or do run if not|a suggests that it would be advantageous to do find if position 2 otherwise, if a do use , or do jump if no other options are possible|b is a strategy where you do run if b is exactly the same as y otherwise, if a do build , or do jump as a last resort|b means that it would be good to do build if iron y otherwise, if b do find , or do jump as a last resort|a states that you should do jump if b x otherwise, if position do find , or do find if not|a entails that you do run if position is not equal to 0 , or do jump if no other options are possible|a is a strategy where you do jump if iron is smaller than 2 otherwise, if b do jump , or do build as a last resort|if a is equal to 1 you are able to run until finally b is less than or equal to x|once a is smaller than 2 you have the choice to jump until inventory is less than 0|a is an approach where you do run if position is not equal to 2 otherwise, if iron do build , or do find if not|as soon as b is exactly the same as y you have the option to build until finally b is equal to x|a is a strategy where you do run if position 0 otherwise, if iron do find , or do use as a last resort|a means that it would be good to do use if position is not the same as 0 otherwise, if position do use , or do use if no other options are possible|once position is at most x you are able to jump until inventory is at most 1|a suggests that it would be advantageous to do use if position 0 otherwise, if position do build , or do build if no other options are possible|a entails that you do run if b 0 otherwise, if b do use , or do build as a last resort|b is a tactic where it is good to do run if position is equal to y otherwise, if position do find , or do build otherwise|whenever inventory is exactly the same as 0 you are able to find until b is exactly the same as y|when a is less than or equal to 0 you can build until inventory is greater than x|b is an approach where you do build if a is not the same as 2 otherwise, if a do run , or do build as a last resort|when a is equal to x you are able to build until b is greater than or equal to y|a is an approach where you do run if a is greater than 2 otherwise, if b do find , or do jump if no other options are possible|a is an approach where you do find if position 0 otherwise, if b do jump , or do build if no other options are possible|a is an approach where you do run if b is exactly the same as 0 otherwise, if b do run , or do find if not|a states that you should do jump if b x otherwise, if a do jump , or do run if no other options are possible|as soon as b is smaller than y you have the option to jump until position is at most x|a suggests that it would be advantageous to do find if a is not equal to 1 , or do find otherwise|a suggests that it would be advantageous to do build if iron is larger than 1 otherwise, if position do find , or do run as a last resort|a states that you should do build if position is exactly the same as 1 otherwise, if b do use , or do use if no other options are possible|b is a tactic where it is good to do use if iron is less than x otherwise, if iron do use , or do jump otherwise|a states that you should do use if position is larger than y otherwise, if b do jump , or do run if no other options are possible|a is an approach where you do build if position is smaller than x otherwise, if a do run , or do jump if not|a is a tactic where it is good to do use if a 1 otherwise, if a do run , or do run if not|when position you have the choice to run until b is greater than or equal to x|when b is not the same as 0 you have the choice to find until finally b is at most y|a suggests that it would be advantageous to do run if b is exactly the same as x otherwise, if b do run , or do jump if no other options are possible|b is an approach where it would be good to do build if a x otherwise, if a do jump , or do jump otherwise|a is a tactic where it is advantageous to do find if position 2 otherwise, if iron do find , or do jump as a last resort|b suggests that it would be advantageous to do build if iron 0 , or do jump if not|a suggests that it would be advantageous to do build if iron is equal to y otherwise, if position do jump , or do find as a last resort|a is a strategy where you do use if position is not the same as 2 otherwise, if iron do use , or do build if no other options are possible|b is a strategy where you do build if a is smaller than 0 otherwise, if b do use , or do build otherwise|a means that it would be good to do use if iron is larger than 0 otherwise, if position do jump , or do use otherwise|b is an approach where it would be good to do use if a is larger than y|as soon as y you are able to use until inventory is at most y|once x you are able to use until finally b is not equal to 2|a is a tactic where it is good to do build if position is not the same as x otherwise, if b do jump , or do jump as a last resort|as soon as position is not the same as 2 you have the option to find until finally a is greater than y|b states that you should do jump if b x otherwise, if a do use , or do build if not|a is a strategy where you do use if iron is larger than y otherwise, if iron do use , or do run otherwise|if a is not the same as x you have the choice to jump until inventory is greater than or equal to y|b is a strategy where you do build if a y otherwise, if iron do find , or do use as a last resort|when position is greater than or equal to y you can use until finally position is exactly the same as 0|b is a strategy where you do build if iron x otherwise, if b do jump , or do use as a last resort|a entails that you do jump if position is exactly the same as x otherwise, if iron do run , or do jump otherwise|b means that it would be good to do run if position is larger than 2|b is a strategy where you do use if a is less than 0 otherwise, if b do jump , or do jump if no other options are possible|a suggests that it would be advantageous to do build if iron y otherwise, if a do use , or do run if no other options are possible|b is an approach where you do find if a otherwise, if iron do run , or do build otherwise|as soon as b is greater than y you can jump until position is not the same as x|b means that it would be good to do build if b is not the same as x otherwise, if iron do build , or do jump if no other options are possible|whenever a is not the same as 0 you have the choice to build until finally a is at least y|a states that you should do run if b is greater than x otherwise, if b do use , or do build as a last resort|a entails that you do find if iron is not equal to y otherwise, if a do use , or do find as a last resort|a is a good strategy where you should do build if iron 0 otherwise, if b do build , or do build otherwise|if b is greater than 2 you have the option to find until finally b is greater than or equal to 2|once inventory is at most 2 you have the choice to build until finally position is larger than 2|b is an approach where you do build if a is not the same as 1 otherwise, if position do build , or do use if no other options are possible|b is a tactic where it is good to do build if position is exactly the same as x otherwise, if iron do jump , or do find otherwise|a means that it would be good to do run if position is less than 2 otherwise, if position do run , or do find as a last resort|whenever position is equal to 2 you can run until b is larger than 2|a is a tactic where it is advantageous to do use if a is equal to 1|whenever position is less than y you have the option to find until a is greater than x|a is an approach where it would be good to do find if iron is smaller than y otherwise, if position do build , or do use otherwise|a is a tactic where it is good to do jump if b is less than 2 otherwise, if b do build , or do build otherwise|when position is smaller than 1 you can build until finally a is at most 1|b is a strategy where you do use if iron x otherwise, if a do jump , or do run if no other options are possible|once inventory is less than 0 you have the choice to build until b is less than or equal to x|as soon as a is equal to 0 you can run until finally b is less than x|when position is smaller than y you are able to run until finally position is greater than 0|b is an approach where it would be good to do build if b is greater than y otherwise, if a do find , or do run if not|a suggests that it would be advantageous to do jump if b is not equal to 0 otherwise, if iron do build , or do run if not|when position is larger than 0 you can find until b is greater than or equal to 1|a is a tactic where it is advantageous to do find if b x otherwise, if position do find , or do find as a last resort|a is a good strategy where you should do build if a x otherwise, if position do use , or do find otherwise|as soon as a is larger than x you have the choice to jump until inventory is at most 2|once b is larger than 1 you have the option to find until a is larger than 1|b entails that you do build if a x otherwise, if iron do find , or do jump otherwise|when a is not equal to 0 you can jump until b is at least 0|a states that you should do find if iron 1 otherwise, if a do build , or do run if no other options are possible|a is an approach where it would be good to do run if iron is less than x otherwise, if iron do run , or do build if not|b is an approach where it would be good to do find if b is greater than x otherwise, if a do use , or do jump otherwise|when b is equal to 2 you can find until finally inventory is larger than 0|as soon as position is less than 1 you can use until finally inventory is smaller than 1|a is a strategy where you do use if a y otherwise, if position do build , or do use as a last resort|a is a tactic where it is good to do build if iron 0 otherwise, if a do jump , or do use as a last resort|b is a good strategy where you should do use if iron is smaller than y otherwise, if b do find , or do find if no other options are possible|as soon as position is at least 1 you can find until finally b is smaller than x|b is an approach where it would be good to do build if a y otherwise, if iron do build , or do build as a last resort|a is a good strategy where you should do build if a is equal to 1 otherwise, if b do build , or do run if not|a is an approach where you do find if iron is not the same as y otherwise, if b do use , or do find as a last resort|b means that it would be good to do jump if b y otherwise, if iron do run , or do find as a last resort|a is an approach where it would be good to do run if iron is greater than y otherwise, if iron do use , or do use otherwise|a means that it would be good to do find if iron is larger than y otherwise, if a do find , or do use otherwise|a is a strategy where you do run if iron is not the same as x otherwise, if a do use , or do use if no other options are possible|b means that it would be good to do build if position is not the same as y otherwise, if b do find , or do find otherwise|once inventory is not equal to 0 you have the choice to run until inventory is less than or equal to 2|if position is smaller than y you have the choice to use until finally inventory is at least y|when position is greater than or equal to x you can find until finally inventory is at least 2|once inventory is greater than y you can use until finally position is smaller than 0|as soon as inventory is not the same as y you have the option to run until finally a is equal to 0|a states that you should do run if position is equal to 2 otherwise, if b do build , or do jump otherwise|whenever inventory is smaller than 0 you have the choice to jump until a is equal to 0|once b you can build until finally inventory is larger than x|whenever b is not the same as 0 you are able to run until a is not equal to 0|a is a good strategy where you should do use if position is not the same as y otherwise, if position do jump , or do jump if not|b is an approach where it would be good to do run if iron is smaller than x otherwise, if b do build , or do run otherwise|a is a tactic where it is good to do find if position is not the same as 0 otherwise, if a do run , or do build as a last resort|if a is less than or equal to x you have the option to find until position is less than or equal to y|once position is at most y you have the choice to use until finally inventory is less than y|if b is equal to x you are able to jump until finally b is at least y|whenever b is equal to 1 you can jump until finally b is exactly the same as 0|a is an approach where you do use if iron is not the same as 1 otherwise, if a do build , or do build otherwise|whenever a you have the option to build until a is exactly the same as 0|if position is exactly the same as x you are able to jump until finally inventory is not equal to 2|b entails that you do build if b is larger than x otherwise, if position do build , or do build if not|a states that you should do run if b 0 otherwise, if iron do build , or do find otherwise|as soon as inventory is at least y you are able to jump until a is greater than y|b means that it would be good to do build if b x otherwise, if iron do run , or do jump if no other options are possible|whenever a is larger than x you can run until finally b is smaller than 1|b is a good strategy where you should do build if a y otherwise, if iron do build , or do build otherwise|whenever b is not equal to 1 you can find until b is greater than y|once position is at least x you have the option to build until b is at most 1|b is a tactic where it is advantageous to do run if b is larger than x otherwise, if a do jump , or do build otherwise|a is a good strategy where you should do find if position is greater than 1 otherwise, if position do run , or do run as a last resort|a entails that you do build if b is larger than 2 otherwise, if position do jump , or do run as a last resort|as soon as inventory is less than 0 you can run until finally a is exactly the same as x|a states that you should do jump if a x otherwise, if position do use , or do use if not|if b is exactly the same as y you have the option to run until finally position is smaller than 0|b is an approach where it would be good to do jump if a is not equal to x otherwise, if iron do build , or do run as a last resort|a suggests that it would be advantageous to do find if iron 2 otherwise, if iron do jump , or do run if not|if b is exactly the same as x you have the choice to run until finally inventory is greater than 0|a means that it would be good to do build if position x otherwise, if position do find , or do use as a last resort|b is a strategy where you do build if b otherwise, if position do find , or do run if not|when b is at most 2 you can run until finally a is larger than 1|once inventory you can find until inventory is at least 2|b states that you should do run if a is equal to 0 otherwise, if b do build , or do use if not|a is a tactic where it is good to do build if iron 2 otherwise, if iron do run , or do run if not|b means that it would be good to do use if b y otherwise, if a do use , or do jump if no other options are possible|when inventory is greater than or equal to 2 you are able to jump until finally inventory is at least x|a is a strategy where you do find if a is smaller than x otherwise, if position do build , or do run otherwise|when a is not the same as y you have the choice to run until finally inventory is equal to y|if a is larger than 2 you can build until finally b is not equal to 2|a is an approach where it would be good to do use if a 1 otherwise, if position do jump , or do find if no other options are possible|a is an approach where it would be good to do use if position is not the same as 2 otherwise, if b do find , or do find if no other options are possible|a states that you should do find if position 1 otherwise, if b do run , or do run otherwise|a is a strategy where you do use if b 0 otherwise, if a do jump , or do jump as a last resort|b means that it would be good to do find if a is smaller than 1 otherwise, if a do jump , or do jump as a last resort|whenever inventory is exactly the same as 0 you can run until position is exactly the same as 0|b means that it would be good to do build if position y otherwise, if a do build , or do jump otherwise|once inventory is at least y you can run until finally inventory is exactly the same as 1|a is a tactic where it is good to do use if position x otherwise, if position do run , or do build if no other options are possible|a is a strategy where you do find if b is smaller than 2 otherwise, if a do find , or do use as a last resort|when b is at most y you have the choice to run until finally inventory is not equal to x|whenever a is larger than 1 you can run until inventory is at least x|a is an approach where you do jump if position x otherwise, if position do find , or do find if not|whenever b is not the same as x you have the option to run until finally position is larger than 1|b is an approach where it would be good to do run if position x otherwise, if b do find , or do build if not|a is a tactic where it is good to do run if iron is not equal to 0 otherwise, if iron do run , or do run as a last resort|as soon as position is greater than or equal to 0 you have the choice to find until finally position is greater than or equal to 0|b entails that you do use if iron is exactly the same as x otherwise, if a do build , or do run if not|a is an approach where it would be good to do build if iron 1 otherwise, if position do build , or do run if not|b suggests that it would be advantageous to do jump if a is not the same as 1 otherwise, if a do run , or do run if no other options are possible|b entails that you do find if position otherwise, if iron do build , or do find if no other options are possible|a states that you should do build if b is exactly the same as y otherwise, if iron do run , or do find if no other options are possible|once position is smaller than y you have the option to find until b is exactly the same as 2|b suggests that it would be advantageous to do use if b otherwise, if b do build , or do build otherwise|a is an approach where it would be good to do run if a is larger than 0 otherwise, if iron do find , or do find if not|when a is not equal to 0 you have the option to jump until finally b is exactly the same as 1|when a is at least y you have the option to jump until finally a is less than 1|b is a tactic where it is good to do run if a is less than 2 otherwise, if b do jump , or do use otherwise|if a is at most 0 you can find until inventory is not equal to x|b is a good strategy where you should do use if iron y otherwise, if b do find , or do find if no other options are possible|as soon as a is larger than x you have the option to jump until finally a is at most x|whenever b is larger than x you are able to build until finally inventory is at most 1|a means that it would be good to do build if iron is not equal to 2 otherwise, if b do find , or do build as a last resort|b is an approach where you do run if b 2 , or do use otherwise|as soon as b is equal to 2 you have the choice to find until position is at most y|a is a tactic where it is advantageous to do jump if a is not the same as y otherwise, if position do jump , or do use if no other options are possible|b is a tactic where it is advantageous to do run if a y otherwise, if position do jump , or do jump as a last resort|a entails that you do build if position is greater than 2 otherwise, if position do run , or do jump if not|a states that you should do find if a y otherwise, if a do run , or do use if no other options are possible|a states that you should do jump if position is exactly the same as 2 otherwise, if iron do find , or do find as a last resort|a is a strategy where you do find if iron is exactly the same as y otherwise, if iron do run , or do use if not|a is a tactic where it is advantageous to do find if a is equal to 1 otherwise, if iron do jump , or do build if no other options are possible|b suggests that it would be advantageous to do build if a is exactly the same as 0 otherwise, if position do jump , or do find as a last resort|b suggests that it would be advantageous to do build if b y otherwise, if iron do use , or do use if not|whenever position is at least y you have the choice to run until finally inventory is exactly the same as y|a is an approach where it would be good to do jump if position is greater than 0 otherwise, if a do run , or do find if not|whenever b is less than 2 you are able to run until b is less than x|a is a tactic where it is advantageous to do find if a is larger than 1 otherwise, if position do find , or do use if not|when position is exactly the same as x you are able to find until a is at most 1|a suggests that it would be advantageous to do build if iron is not the same as x otherwise, if position do run , or do run if no other options are possible|b entails that you do build if position is less than y otherwise, if a do build , or do build if no other options are possible|a is an approach where it would be good to do jump if b x otherwise, if position do build , or do find otherwise|whenever b is not the same as 1 you can build until position is equal to 1|as soon as b is smaller than 0 you are able to build until position|b means that it would be good to do run if a is smaller than 1 , or do find if no other options are possible|a is an approach where it would be good to do run if iron is greater than y otherwise, if position do build , or do find otherwise|once a is greater than y you have the option to build until finally position is equal to x|whenever a is greater than or equal to 0 you have the option to jump until finally inventory is not the same as 2|when position is larger than x you can build until finally inventory is at least x|if inventory is equal to x you are able to jump until finally a is not equal to 1|a means that it would be good to do build if iron is equal to 2 otherwise, if b do use , or do jump if no other options are possible|b states that you should do jump if a is less than x otherwise, if a do use , or do find as a last resort|a is a good strategy where you should do build if b is exactly the same as 0 otherwise, if b do run , or do run as a last resort|when a is exactly the same as y you have the choice to build until b is greater than 0|once position is greater than or equal to 0 you have the choice to jump until finally b is greater than 1|as soon as a is at most 2 you have the option to jump until a is at least x|as soon as b is less than 2 you are able to run until a is at least 0|if inventory is exactly the same as x you have the choice to use until finally position is less than x|once inventory is not equal to 2 you can run until finally a is not equal to 1|a is a strategy where you do run if a 1 otherwise, if a do use , or do use if not|whenever position is greater than y you are able to build until finally a is less than or equal to 2|a is a tactic where it is advantageous to do build if position is not the same as y otherwise, if position do find , or do use as a last resort|a is a good strategy where you should do find if iron is exactly the same as 1 otherwise, if a do jump , or do jump if not|a entails that you do run if a is larger than 0 otherwise, if position do jump , or do use if no other options are possible|a states that you should do build if iron is less than 1 otherwise, if position do build , or do use if not|a is a tactic where it is good to do find if position is less than y otherwise, if position do use , or do find if not|whenever a is less than or equal to x you can run until finally b is less than or equal to 2|b entails that you do jump if iron is not the same as x otherwise, if position do jump , or do find if no other options are possible|b is a tactic where it is advantageous to do jump if iron is exactly the same as y otherwise, if a do build , or do build as a last resort|b is an approach where it would be good to do build if a otherwise, if iron do jump , or do build as a last resort|b states that you should do run if a y otherwise, if b do jump , or do use if no other options are possible|when a is exactly the same as 2 you have the option to jump until finally b is not the same as 2|a is a good strategy where you should do jump if b is smaller than 1 otherwise, if b do build , or do jump if no other options are possible|once a is less than y you are able to use until position is greater than y|as soon as position is not equal to 1 you have the choice to jump until inventory is less than x|whenever a is greater than or equal to y you have the choice to jump until b is not equal to 1|b entails that you do run if a is equal to 2 otherwise, if iron do build , or do find otherwise|a is a strategy where you do jump if iron is larger than 1 otherwise, if a do build , or do jump as a last resort|b entails that you do run if a is not the same as 0 otherwise, if position do use , or do jump otherwise|b states that you should do use if iron is not the same as y otherwise, if b do find , or do jump otherwise|as soon as a is not equal to x you are able to jump until finally inventory is equal to x|a is an approach where you do jump if iron x otherwise, if a do build , or do build if not|as soon as inventory is equal to 0 you are able to jump until position is less than 1|a is a tactic where it is advantageous to do run if iron y otherwise, if position do build , or do jump if no other options are possible|a means that it would be good to do jump if position is larger than y otherwise, if a do find , or do jump if no other options are possible|b is an approach where you do find if a otherwise, if a do jump , or do jump otherwise|a is a good strategy where you should do find if a is smaller than x otherwise, if b do run , or do use if not|a is a good strategy where you should do use if b is less than 0 otherwise, if position do build , or do find if no other options are possible|once position is less than or equal to 2 you have the choice to use until finally position is at most x|a entails that you do jump if position is not the same as 1 otherwise, if a do find , or do find as a last resort|b is an approach where it would be good to do run if iron is equal to x otherwise, if b do use , or do use otherwise|b is an approach where you do use if position is not the same as x otherwise, if position do use , or do find as a last resort|a is an approach where you do run if iron is larger than 1 otherwise, if b do find , or do build if not|as soon as inventory is smaller than 2 you are able to build until position is at most 2|b means that it would be good to do use if iron y otherwise, if position do jump , or do run if not|a entails that you do use if iron is larger than x otherwise, if b do use , or do run if not|a is an approach where it would be good to do find if position 0 otherwise, if b do jump , or do find as a last resort|once b is at least 2 you are able to run until finally position is less than or equal to 1|as soon as position is smaller than y you have the option to run until finally inventory is at most 1|b is an approach where you do run if iron is exactly the same as x otherwise, if iron do jump , or do build as a last resort|as soon as a is less than 2 you have the choice to run until finally b is less than or equal to y|as soon as b is not the same as y you are able to find until inventory is greater than 2|b is an approach where you do find if iron is larger than y otherwise, if a do run , or do find as a last resort|b is an approach where it would be good to do find if a is equal to 1 otherwise, if a do use , or do build if no other options are possible|a is a tactic where it is advantageous to do use if b is larger than y otherwise, if position do run , or do run if not|when a is smaller than x you are able to jump until b is greater than or equal to 2|a is a strategy where you do find if position is smaller than 1 otherwise, if b do run , or do use as a last resort|b is an approach where you do build if a x otherwise, if iron do use , or do use if not|a is a strategy where you do run if iron is exactly the same as 2 otherwise, if b do build , or do build otherwise|as soon as inventory is not the same as y you are able to find until b is less than y|as soon as inventory is at least y you have the option to find until finally a is at most 2|a is a tactic where it is advantageous to do jump if a is larger than 0 otherwise, if a do run , or do run if no other options are possible|a is a strategy where you do find if a y otherwise, if b do find , or do use otherwise|a means that it would be good to do build if iron is greater than 2 , or do build as a last resort|whenever b is less than or equal to x you are able to jump until a is smaller than x|when b is smaller than 1 you have the option to use until a is less than x|a is a tactic where it is good to do build if iron is not the same as 0 otherwise, if b do find , or do find as a last resort|a entails that you do jump if iron 0 otherwise, if a do use , or do run if no other options are possible|as soon as b is greater than or equal to y you have the choice to find until position is equal to y|a is an approach where it would be good to do build if iron is greater than 1 otherwise, if position do run , or do find as a last resort|as soon as a is smaller than y you are able to jump until finally a is less than 1|when inventory is greater than or equal to 1 you are able to find until finally position is at least 2|a entails that you do build if position 2 otherwise, if iron do find , or do find as a last resort|a is an approach where you do build if iron is not the same as y otherwise, if iron do find , or do run if not|when inventory is smaller than 2 you can run until finally a is not equal to 2|a is a good strategy where you should do run if iron 1 otherwise, if b do use , or do build if not|a is an approach where you do jump if b is not the same as y otherwise, if position do run , or do use as a last resort|whenever b you are able to build until b is larger than x|whenever inventory is greater than or equal to y you have the choice to find until finally inventory is equal to 0|a is a good strategy where you should do run if position is greater than 1 otherwise, if a do find , or do build otherwise|a is a strategy where you do build if iron is larger than 1 otherwise, if a do build , or do build otherwise|when a you are able to jump until finally b is not the same as y|b states that you should do jump if iron is greater than y otherwise, if a do use , or do find otherwise|once position is exactly the same as x you are able to jump until finally b is at most 2|if b is larger than x you can find until finally a is larger than y|whenever inventory is less than or equal to 0 you have the option to run until finally b is smaller than 0|once inventory is smaller than x you are able to jump until finally b is equal to 0|whenever b is greater than 2 you are able to run until finally position is larger than x|whenever position is greater than 0 you have the choice to use until finally a is not equal to x|b states that you should do build if a y otherwise, if a do build , or do build as a last resort|as soon as position is at most 1 you can build until position is not the same as y|a is a strategy where you do build if b is not the same as x otherwise, if a do build , or do run otherwise|a entails that you do find if a is greater than 0 otherwise, if iron do use , or do find if not|when inventory is smaller than 2 you can jump until position is equal to 1|when a is not the same as 2 you have the option to jump until a is exactly the same as 1|once b is larger than 1 you can build until finally position is equal to 1|b is a good strategy where you should do use if a is larger than 0 otherwise, if b do find , or do find as a last resort|b entails that you do jump if iron is exactly the same as y otherwise, if iron do find , or do build as a last resort|when inventory is less than 0 you have the choice to run until finally inventory is greater than or equal to y|b suggests that it would be advantageous to do build if a is equal to 1 otherwise, if iron do find , or do use if not|if b is greater than 2 you have the choice to use until finally position is not equal to 2|whenever a is not equal to y you have the option to find until finally a is exactly the same as y|whenever position is smaller than 1 you can build until finally b is exactly the same as x|if position is greater than y you are able to find until a is not the same as 2|a means that it would be good to do build if b 0 otherwise, if a do build , or do run as a last resort|as soon as inventory is not equal to 0 you can jump until a is greater than 1|whenever a is less than 2 you can build until finally position is greater than or equal to y|a is an approach where it would be good to do run if a is exactly the same as 2 otherwise, if a do build , or do use if no other options are possible|when inventory is at most 2 you are able to build until position is exactly the same as x|a is a tactic where it is advantageous to do jump if position is smaller than x otherwise, if iron do find , or do build if no other options are possible|when a is equal to 2 you are able to find until b is not equal to x|a is a tactic where it is good to do build if a 1 otherwise, if position do build , or do build if no other options are possible|a means that it would be good to do find if b x otherwise, if position do jump , or do jump if not|a states that you should do find if iron y otherwise, if b do build , or do use if no other options are possible|when a is not equal to 1 you are able to jump until finally b|a is a tactic where it is advantageous to do find if iron x otherwise, if position do use , or do find as a last resort|as soon as a is not equal to 1 you are able to build until finally position is greater than x|a means that it would be good to do find if iron 1 otherwise, if iron do jump , or do jump as a last resort|a suggests that it would be advantageous to do build if b 0 otherwise, if a do find , or do jump otherwise|a entails that you do find if iron x otherwise, if position do run , or do find otherwise|a entails that you do build if position is not equal to 0 otherwise, if position do find , or do jump as a last resort|a is a strategy where you do find if a 1 otherwise, if position do jump , or do find if not|a is a tactic where it is good to do run if b is less than x otherwise, if iron do find , or do use otherwise|when b is less than or equal to 2 you have the option to jump until finally a is less than 1|a is a good strategy where you should do jump if position y otherwise, if position do jump , or do build as a last resort|a suggests that it would be advantageous to do find if b is smaller than 0 otherwise, if position do find , or do jump otherwise|a states that you should do build if a is equal to 2 otherwise, if a do build , or do run as a last resort|b means that it would be good to do use if iron x otherwise, if position do find , or do find as a last resort|a suggests that it would be advantageous to do build if iron is smaller than 2 otherwise, if iron do build , or do find as a last resort|a is an approach where you do find if iron 1 otherwise, if position do jump , or do run as a last resort|a means that it would be good to do find if position is larger than 0 otherwise, if iron do build , or do use as a last resort|a is a good strategy where you should do jump if a is larger than 1|b entails that you do run if b is smaller than y otherwise, if a do find , or do use otherwise|as soon as inventory is less than 0 you have the option to jump until a is equal to 2|a is an approach where you do run if a y otherwise, if position do jump , or do run otherwise|a is a strategy where you do find if iron is equal to x otherwise, if b do run , or do use as a last resort|a is a good strategy where you should do jump if b is larger than y otherwise, if position do find , or do run as a last resort|b suggests that it would be advantageous to do build if position , or do use otherwise|a means that it would be good to do use if iron otherwise, if b do build , or do use if no other options are possible|as soon as position is at most 0 you are able to build until finally b is greater than or equal to 2|whenever position is equal to x you are able to run until finally a is not equal to 0|b states that you should do jump if b otherwise, if b do build , or do find as a last resort|if a is larger than 0 you can jump until position is at most y|when position is at most 2 you can find until finally a is smaller than y|b suggests that it would be advantageous to do jump if iron otherwise, if position do find , or do use as a last resort|when a is not equal to 2 you have the choice to run until finally inventory is exactly the same as y|as soon as position is less than or equal to 1 you can build until finally a is smaller than 2|b is an approach where you do use if position is exactly the same as x otherwise, if iron do run , or do jump if no other options are possible|whenever inventory is greater than x you are able to run until b is not the same as 2|a suggests that it would be advantageous to do jump if a is not the same as x otherwise, if a do find , or do run otherwise|a is an approach where it would be good to do build if a y otherwise, if iron do run , or do build if no other options are possible|b is an approach where you do run if iron is larger than x otherwise, if iron do use , or do find as a last resort|once b is greater than or equal to y you can jump until finally position is not equal to x|b is an approach where it would be good to do build if b is smaller than y otherwise, if position do find , or do build if not|b is a tactic where it is good to do use if a is not the same as 1 otherwise, if b do run , or do build if not|b entails that you do use if position is larger than x otherwise, if a do build , or do run if no other options are possible|as soon as a is larger than y you have the option to use until position is not equal to x|whenever inventory is larger than y you have the choice to build until finally a is at least 0|if b is less than 0 you are able to build until a|once inventory is equal to 2 you have the option to use until b is less than or equal to 1|whenever b is at least 1 you are able to use until finally inventory is at least 2|b is a tactic where it is good to do run if a is not the same as 1 otherwise, if iron do run , or do run if no other options are possible|once inventory is not equal to 0 you are able to use until inventory is less than 1|a is a tactic where it is advantageous to do find if b is larger than 0 otherwise, if b do run , or do run as a last resort|a is a strategy where you do use if a is greater than 1 otherwise, if a do use , or do use if not|b suggests that it would be advantageous to do use if a is not the same as 1 otherwise, if a do use , or do jump if no other options are possible|b states that you should do jump if a is smaller than 0 otherwise, if a do jump , or do run as a last resort|a is a tactic where it is good to do run if a is exactly the same as 1 otherwise, if a do jump , or do use if not|when b is less than x you can jump until position is at least y|a is a good strategy where you should do run if iron is larger than 2 otherwise, if position do build , or do find if not|as soon as inventory is greater than 1 you have the choice to use until a is exactly the same as y|a is a tactic where it is advantageous to do use if a 2 otherwise, if position do use , or do use as a last resort|a is a tactic where it is advantageous to do jump if a 1 otherwise, if position do build , or do use as a last resort|a is a tactic where it is good to do find if iron is equal to 2 otherwise, if a do run , or do use if no other options are possible|a is a tactic where it is good to do run if b y otherwise, if a do build , or do build if not|a is a tactic where it is advantageous to do find if iron 0 otherwise, if position do jump , or do use as a last resort|once position is smaller than 2 you have the option to build until position is not the same as x|whenever b is equal to 1 you are able to run until finally a|a is a good strategy where you should do run if b is not equal to x otherwise, if position do use , or do jump if no other options are possible|when b you have the choice to find until b is not the same as 2|once inventory is not equal to x you have the choice to find until a is greater than or equal to 0|a is a strategy where you do jump if iron is larger than 1 otherwise, if b do use , or do run if no other options are possible|b is a good strategy where you should do run if iron is exactly the same as y otherwise, if position do build , or do build if no other options are possible|a is a strategy where you do use if position 2 otherwise, if b do run , or do find if not|a is an approach where you do build if a 1 otherwise, if b do run , or do find if no other options are possible|as soon as b is greater than or equal to x you can run until b is greater than 1|a is an approach where it would be good to do jump if iron is not the same as y otherwise, if a do run , or do find otherwise|b entails that you do run if iron x otherwise, if a do run , or do run as a last resort|a is an approach where it would be good to do run if b 0 otherwise, if position do build , or do jump if not|a entails that you do run if iron is exactly the same as 0 otherwise, if position do run , or do jump as a last resort|whenever position you are able to build until finally a is less than or equal to 2|once b is larger than 2 you can jump until x|a is a strategy where you do find if b y otherwise, if position do build , or do jump if no other options are possible|a is a tactic where it is good to do use if b is less than y otherwise, if position do jump , or do run otherwise|b is an approach where you do build if b is larger than y otherwise, if b do jump , or do use if no other options are possible|a is a tactic where it is good to do build if a is less than 1 otherwise, if iron do find , or do use otherwise|when a is larger than y you are able to run until a is at least 0|a means that it would be good to do find if a otherwise, if a do run , or do run otherwise|a means that it would be good to do use if position is less than y|as soon as a is not the same as 2 you have the choice to jump until a is less than 2|b means that it would be good to do run if iron is exactly the same as x otherwise, if b do use , or do build if no other options are possible|a states that you should do use if a is exactly the same as y otherwise, if b do run , or do jump otherwise|b is a strategy where you do find if position is exactly the same as y otherwise, if a do use , or do jump as a last resort|a is a strategy where you do run if position is exactly the same as y otherwise, if a do find , or do jump as a last resort|as soon as a is at least 0 you are able to find until finally position is exactly the same as 2|b is an approach where it would be good to do run if position is smaller than y otherwise, if position do jump , or do run otherwise|when a is larger than 2 you are able to find until finally b is exactly the same as x|a is a tactic where it is advantageous to do use if iron x otherwise, if b do find , or do run otherwise|when a you are able to find until finally b is at least x|as soon as b is smaller than 0 you have the choice to use until finally b is at least y|b means that it would be good to do run if iron is equal to y otherwise, if b do find , or do build if no other options are possible|whenever inventory is at most 1 you are able to use until inventory is less than or equal to 2|a is a good strategy where you should do use if position is equal to y otherwise, if b do jump , or do jump as a last resort|when inventory is at least 2 you can run until b is at least 0|b states that you should do run if iron y otherwise, if iron do find , or do find if no other options are possible|a states that you should do build if position is less than 0 otherwise, if b do find , or do use otherwise|if a is less than or equal to 2 you have the option to jump until finally a is not equal to x|b states that you should do use if iron is not the same as y otherwise, if a do build , or do find if not|a suggests that it would be advantageous to do build if position is less than x otherwise, if iron do build , or do run if no other options are possible|b is a tactic where it is good to do use if a y otherwise, if a do jump , or do find as a last resort|a is a strategy where you do find if position is not the same as y otherwise, if a do use , or do use as a last resort|once position is not the same as y you can run until position is greater than or equal to y|once a is larger than 0 you can jump until a is not equal to y|b is an approach where it would be good to do jump if iron x otherwise, if a do jump , or do find otherwise|a suggests that it would be advantageous to do find if b 2 otherwise, if iron do build , or do build if not|if position is exactly the same as y you are able to build until finally b is equal to 0|a states that you should do run if iron is not the same as 0 otherwise, if a do find , or do jump if no other options are possible|a states that you should do find if position 2 , or do use otherwise|if b you have the choice to jump until a is greater than 1|a states that you should do jump if b is equal to 0 otherwise, if position do run , or do find as a last resort|a suggests that it would be advantageous to do run if b is larger than y otherwise, if a do run , or do find otherwise|b means that it would be good to do use if b y otherwise, if b do build , or do jump otherwise|whenever a is greater than x you can jump until a is greater than or equal to 1|whenever a is not the same as 0 you can build until finally inventory is at least x|a suggests that it would be advantageous to do build if iron is less than 0 otherwise, if b do run , or do build as a last resort|a is a tactic where it is good to do run if b is larger than 2 otherwise, if position do build , or do find if not|when b is greater than or equal to 0 you have the option to run until finally b is equal to y|as soon as b is at most 2 you can use until finally position is not the same as 0|when a is larger than 1 you have the choice to use until inventory is at least x|if b is greater than or equal to 0 you can find until finally a is larger than 2|a is an approach where it would be good to do jump if position y otherwise, if a do build , or do run if no other options are possible|b means that it would be good to do use if iron y otherwise, if iron do run , or do run as a last resort|a is a good strategy where you should do build if position is less than 1 otherwise, if a do run , or do find as a last resort|if inventory is greater than or equal to 1 you can build until finally b is smaller than y|a is a strategy where you do build if b is not the same as x otherwise, if b do jump , or do use as a last resort|whenever position is larger than 2 you can run until finally inventory is less than 2|b is a tactic where it is advantageous to do use if b otherwise, if a do run , or do build if not|whenever inventory is less than 1 you are able to run until finally position is not the same as 1|b is a tactic where it is advantageous to do build if a is greater than y otherwise, if position do use , or do use if not|a suggests that it would be advantageous to do run if position is equal to 0 otherwise, if b do find , or do find if no other options are possible|as soon as position is greater than or equal to x you can run until inventory is less than 1|when b is equal to x you are able to build until b is at most 0|a suggests that it would be advantageous to do use if a is smaller than 1 otherwise, if b do build , or do find as a last resort|whenever inventory is smaller than 1 you have the choice to run until b is exactly the same as x|a states that you should do run if a is greater than 2 otherwise, if position do use , or do use as a last resort|b states that you should do jump if a is equal to 1 otherwise, if iron do use , or do run if not|whenever a is less than 2 you can use until finally position is not equal to y|a is a strategy where you do build if a is larger than 2 otherwise, if position do jump , or do find if no other options are possible|a is a good strategy where you should do run if b 1 otherwise, if position do run , or do jump otherwise|a suggests that it would be advantageous to do jump if iron is exactly the same as 0 otherwise, if iron do run , or do use if not|b suggests that it would be advantageous to do build if a is less than 2 otherwise, if position do use , or do build if not|a is a tactic where it is good to do jump if position is larger than 1 otherwise, if b do jump , or do run if not|a suggests that it would be advantageous to do find if b is equal to 1 otherwise, if iron do find , or do jump otherwise|a is an approach where you do jump if position is exactly the same as 0 otherwise, if b do build , or do run if not|a is a tactic where it is good to do run if a is less than 1 otherwise, if iron do use , or do find if no other options are possible|b is an approach where you do find if iron y otherwise, if position do jump , or do run otherwise|a states that you should do run if iron 2 otherwise, if b do build , or do use otherwise|a is a tactic where it is advantageous to do use if iron is equal to x otherwise, if b do find , or do run otherwise|a is a good strategy where you should do run if a x otherwise, if b do find , or do use if not|a is a good strategy where you should do jump if iron is not the same as 1 , or do run otherwise|when a is smaller than x you have the choice to use until inventory is at least 0|a entails that you do jump if position x otherwise, if b do build , or do find if no other options are possible|b is an approach where it would be good to do find if a is exactly the same as 1 otherwise, if iron do run , or do use if no other options are possible|when b is at least x you can build until finally b is not equal to y|once b is at most 2 you can jump until position is less than or equal to 2|a suggests that it would be advantageous to do use if b 2 otherwise, if b do jump , or do find otherwise|a entails that you do jump if position is exactly the same as x otherwise, if position do build , or do use otherwise|a is a tactic where it is advantageous to do build if a is smaller than x , or do run as a last resort|a is a tactic where it is advantageous to do use if b 0 otherwise, if b do jump , or do use as a last resort|b states that you should do use if position is greater than y otherwise, if b do use , or do build if no other options are possible|a means that it would be good to do use if a x otherwise, if position do build , or do find if no other options are possible|b means that it would be good to do jump if a is exactly the same as y otherwise, if iron do run , or do find as a last resort|a is a tactic where it is advantageous to do build if iron is smaller than x otherwise, if iron do find , or do find if no other options are possible|b is a good strategy where you should do find if iron x otherwise, if iron do build , or do use if no other options are possible|a is an approach where you do use if iron 1 otherwise, if a do run , or do run if no other options are possible|a suggests that it would be advantageous to do find if iron x otherwise, if iron do build , or do build as a last resort|if a is larger than x you have the option to build until finally position is smaller than 0|when b is less than or equal to 0 you have the choice to build until finally b is less than or equal to 2|a is a tactic where it is good to do find if position is not the same as 0 otherwise, if a do find , or do use otherwise|once a is greater than y you have the option to use until finally position is exactly the same as x|a entails that you do run if b is smaller than x otherwise, if iron do jump , or do build if no other options are possible|a is an approach where you do find if b 1 otherwise, if a do find , or do find as a last resort|a is an approach where it would be good to do build if a is exactly the same as 0 otherwise, if a do use , or do build as a last resort|once a is equal to y you have the option to use until finally inventory is less than 2|as soon as inventory is not the same as 1 you have the option to build until inventory is not the same as 1|b states that you should do use if position otherwise, if a do jump , or do build as a last resort|a states that you should do build if b is smaller than 2 otherwise, if position do find , or do run as a last resort|if inventory is larger than x you have the choice to find until b is less than or equal to y|a entails that you do use if b is smaller than x otherwise, if iron do build , or do run if no other options are possible|as soon as b is larger than y you have the option to run until finally b is at most y|once a is greater than 1 you can jump until finally a is not the same as y|a is a tactic where it is advantageous to do run if b is smaller than 1 otherwise, if position do build , or do find if not|b states that you should do use if b is not equal to y otherwise, if position do run , or do build otherwise|a suggests that it would be advantageous to do find if a is exactly the same as y otherwise, if iron do find , or do use otherwise|once position is greater than x you have the option to run until finally inventory is less than or equal to y|a is an approach where you do find if iron x otherwise, if iron do find , or do jump if no other options are possible|whenever position is at most y you are able to use until finally position is equal to 1|a is a strategy where you do find if a 0 otherwise, if a do build , or do use if not|whenever inventory is greater than y you can jump until finally inventory is equal to x|whenever inventory you can run until b is not equal to 0|as soon as inventory is smaller than 2 you are able to run until finally inventory is smaller than 0|a states that you should do jump if a is equal to 2 otherwise, if position do use , or do find as a last resort|once y you have the option to use until finally b is less than or equal to 0|if a is exactly the same as x you have the option to find until finally a is larger than y|when b is greater than 2 you have the choice to build until position is less than or equal to 0|b is a tactic where it is good to do run if position is smaller than x otherwise, if position do jump , or do use if not|b is an approach where it would be good to do jump if a is not equal to 2 otherwise, if position do find , or do jump if no other options are possible|a entails that you do jump if iron x otherwise, if b do find , or do use as a last resort|a is an approach where you do find if position is not the same as y otherwise, if iron do jump , or do run as a last resort|when position is not the same as x you can use until finally a is larger than y|once inventory is larger than y you can use until inventory is at least 1|b suggests that it would be advantageous to do run if position is not the same as y otherwise, if iron do use , or do use if no other options are possible|a is a tactic where it is advantageous to do jump if iron 1 otherwise, if iron do run , or do jump as a last resort|b is an approach where you do use if iron is exactly the same as y otherwise, if position do use , or do find if not|when a is at most 2 you have the option to jump until inventory is greater than or equal to y|a suggests that it would be advantageous to do jump if iron is larger than 1 otherwise, if iron do build , or do build otherwise|whenever position is greater than or equal to 1 you have the option to run until a is less than or equal to 1|a is a good strategy where you should do find if a is exactly the same as 0 otherwise, if a do find , or do run if not|b is a strategy where you do run if iron is equal to x otherwise, if position do jump , or do build if no other options are possible|a suggests that it would be advantageous to do use if iron x otherwise, if b do find , or do jump if not|b is a strategy where you do jump if position x otherwise, if a do use , or do use if no other options are possible|whenever inventory is exactly the same as x you are able to find until finally b is equal to x|b is a tactic where it is good to do run if a y otherwise, if position do run , or do find if not|a is a strategy where you do find if b 0 otherwise, if iron do jump , or do build otherwise|b is an approach where you do find if a is not equal to 2 otherwise, if position do find , or do run as a last resort|a is a tactic where it is good to do use if position is greater than y otherwise, if b do build , or do use otherwise|once inventory is less than or equal to y you have the option to use until finally inventory is less than 1|b states that you should do use if position is exactly the same as x otherwise, if a do build , or do find if no other options are possible|when position is greater than 1 you have the choice to find until position is exactly the same as x|as soon as a is greater than 0 you can run until inventory is exactly the same as x|if b is greater than or equal to 0 you have the choice to run until finally inventory is exactly the same as 0|a entails that you do find if position y otherwise, if iron do build , or do use if not|b suggests that it would be advantageous to do find if b is larger than x otherwise, if iron do use , or do find as a last resort|once a is greater than 0 you have the option to run until finally b is greater than or equal to 1|if a is at least 1 you have the option to run until finally position is not the same as y|a is an approach where you do use if a is smaller than 0 otherwise, if position do find , or do run otherwise|a is a good strategy where you should do use if b 2 otherwise, if b do use , or do find otherwise|a is a good strategy where you should do build if b 2 otherwise, if iron do run , or do use if no other options are possible|a is a good strategy where you should do build if a is exactly the same as y otherwise, if position do find , or do jump otherwise|b is an approach where you do build if b is smaller than y otherwise, if position do run , or do use as a last resort|a is a strategy where you do run if position is not the same as y otherwise, if iron do jump , or do run otherwise|whenever b is smaller than 1 you have the choice to find until finally b is greater than x|a is an approach where it would be good to do use if position x otherwise, if b do use , or do run otherwise|as soon as position is at most 2 you have the option to jump until a is greater than or equal to 2|b is an approach where you do build if iron otherwise, if a do run , or do run as a last resort|whenever position is at most y you have the choice to build until finally b is larger than y|whenever a is less than y you have the option to use until b is at least 0|b is an approach where you do build if position otherwise, if b do build , or do use if not|if inventory is not equal to 2 you are able to jump until b is greater than or equal to 1|b is a tactic where it is good to do run if a is not the same as 2 otherwise, if a do use , or do jump as a last resort|b states that you should do find if iron otherwise, if a do find , or do use otherwise|b entails that you do run if a is smaller than x otherwise, if a do run , or do find if not|a is an approach where it would be good to do use if b 2 otherwise, if position do use , or do find as a last resort|b is a strategy where you do jump if a is exactly the same as x otherwise, if a do jump , or do use if not|when position is not equal to x you have the option to jump until finally inventory is exactly the same as 0|b is a tactic where it is good to do jump if position is equal to y , or do use otherwise|once position is at least 1 you have the option to use until a is greater than x|b suggests that it would be advantageous to do jump if iron is not the same as y otherwise, if position do run , or do use if not|if b is larger than 0 you have the option to build until finally position is larger than 0|when position is less than x you have the choice to run until inventory is less than or equal to 2|a is an approach where you do find if b 1 , or do use if not|a is an approach where you do run if b is not equal to 2 , or do find if not|a suggests that it would be advantageous to do use if b is not equal to 2 otherwise, if a do build , or do run otherwise|if b is less than 2 you can build until b is greater than 2|as soon as a is greater than 2 you are able to jump until inventory is at most y|a is a tactic where it is good to do find if iron is larger than y otherwise, if b do use , or do build if no other options are possible|a suggests that it would be advantageous to do use if b 2 otherwise, if a do run , or do jump if no other options are possible|as soon as inventory is greater than 0 you have the choice to use until finally position is not the same as 0|a entails that you do find if a x otherwise, if iron do jump , or do use otherwise|when a is less than or equal to 1 you have the choice to find until finally position is equal to x|b is an approach where it would be good to do use if iron is exactly the same as x otherwise, if position do find , or do run if not|if position is at least y you are able to run until finally b is smaller than 1|a is a good strategy where you should do build if a 2 otherwise, if b do jump , or do run as a last resort|a is a tactic where it is good to do find if iron is equal to 1 otherwise, if a do build , or do build as a last resort|if inventory is exactly the same as 0 you have the choice to find until inventory is not the same as 2|a entails that you do find if iron , or do run if no other options are possible|if a you are able to jump until b is at least 0|b is an approach where you do run if a 2 , or do use if no other options are possible|a is a tactic where it is good to do use if iron is not the same as 1 otherwise, if b do build , or do run if no other options are possible|b is a tactic where it is advantageous to do run if b is exactly the same as x otherwise, if a do build , or do run if no other options are possible|b is an approach where you do jump if b x otherwise, if b do build , or do use if not|whenever a is exactly the same as 0 you can use until finally b is greater than or equal to 0|b is a strategy where you do run if a is equal to 2 , or do use if no other options are possible|a is a good strategy where you should do find if iron x otherwise, if a do build , or do build otherwise|b is a tactic where it is advantageous to do run if a is larger than x otherwise, if iron do run , or do build as a last resort|a is a strategy where you do run if position 0 otherwise, if iron do jump , or do use if not|once position is smaller than 2 you can find until a is at least 1|when b is not the same as 2 you are able to build until finally inventory is equal to 0|once a is less than 0 you have the choice to use until b is equal to x|once a is not the same as y you have the option to use until position is smaller than 0|whenever x you can use until finally position is greater than 2|a is an approach where you do run if position is not equal to x otherwise, if b do find , or do jump if no other options are possible|b entails that you do run if iron is less than x otherwise, if iron do find , or do run as a last resort|when position is greater than or equal to y you have the choice to find until a is at most y|once position is at most 1 you are able to run until b is greater than 0|when position is larger than y you have the choice to build until inventory is less than or equal to 1|if inventory is exactly the same as 0 you have the choice to jump until finally position is greater than or equal to 1|b is a strategy where you do use if b is exactly the same as y otherwise, if iron do run , or do jump if no other options are possible|a is an approach where you do build if position x otherwise, if b do find , or do run as a last resort|b is an approach where it would be good to do run if a is less than y otherwise, if b do jump , or do jump if not|a is an approach where you do build if position is less than x otherwise, if a do run , or do use otherwise|as soon as position is less than or equal to x you have the choice to use until inventory is not the same as y|a is a tactic where it is advantageous to do jump if position is not the same as x otherwise, if iron do build , or do build otherwise|b is a strategy where you do use if position is larger than y otherwise, if a do run , or do use if not|if position is exactly the same as 2 you are able to jump until inventory is at least 2|when position is smaller than x you can run until finally position is not equal to x|when position is not the same as 2 you have the choice to use until finally a is greater than 0|b suggests that it would be advantageous to do run if b x otherwise, if a do use , or do use if no other options are possible|a is a good strategy where you should do jump if position x otherwise, if a do build , or do use otherwise|a suggests that it would be advantageous to do use if b is not equal to 2 otherwise, if iron do use , or do jump as a last resort|when position is not the same as 0 you can jump until position is equal to x|a states that you should do run if iron otherwise, if b do use , or do run if not|a states that you should do find if a is less than y otherwise, if b do find , or do run if no other options are possible|b is a strategy where you do find if b is less than y , or do jump if no other options are possible|b entails that you do run if iron is less than x otherwise, if iron do use , or do use if no other options are possible|a is an approach where it would be good to do use if a is smaller than 2 otherwise, if b do build , or do build if not|when b is less than 0 you have the choice to find until finally y|whenever a is exactly the same as 0 you can jump until finally b is not equal to x|whenever inventory is less than or equal to 1 you have the option to build until position is equal to y|a states that you should do build if position is not the same as y otherwise, if b do find , or do use otherwise|if position is less than or equal to y you have the choice to run until inventory is not equal to 2|if a is exactly the same as x you have the choice to jump until b is not the same as 0|if inventory is exactly the same as y you have the choice to use until finally b is less than 2|b suggests that it would be advantageous to do find if b is greater than y otherwise, if b do run , or do build as a last resort|once inventory is less than y you can find until a is smaller than 2|as soon as a is equal to y you are able to build until inventory is equal to x|a means that it would be good to do jump if a is exactly the same as 2 otherwise, if a do jump , or do jump otherwise|b states that you should do run if a is smaller than y otherwise, if position do run , or do use if not|b means that it would be good to do build if iron is larger than x otherwise, if a do find , or do find if not|a is a good strategy where you should do find if a 0 otherwise, if position do run , or do use otherwise|b is a strategy where you do run if a is not the same as x otherwise, if iron do jump , or do use if no other options are possible|a states that you should do find if b is not the same as 0 otherwise, if iron do jump , or do use if no other options are possible|a is a good strategy where you should do jump if b is less than 0 otherwise, if b do build , or do use if no other options are possible|b states that you should do run if b is not the same as y otherwise, if iron do build , or do jump if not|once position is at most 2 you have the choice to jump until finally a is at least y|when inventory is greater than x you have the choice to run until position is larger than 2|b entails that you do run if iron is smaller than x otherwise, if a do find , or do use as a last resort|when inventory is larger than y you have the choice to build until a is equal to 0|a is a tactic where it is good to do use if iron 1 otherwise, if a do jump , or do find otherwise|a is a tactic where it is good to do jump if iron is not equal to 0 otherwise, if iron do find , or do build if no other options are possible|a is a good strategy where you should do build if position x otherwise, if position do use , or do jump otherwise|when a is larger than 0 you are able to jump until inventory is exactly the same as 0|a is a tactic where it is advantageous to do use if b is greater than y otherwise, if position do run , or do jump otherwise|once a is larger than 2 you can find until finally position is greater than y|a is a tactic where it is good to do run if a x otherwise, if a do use , or do use if no other options are possible|b entails that you do find if a is greater than x otherwise, if b do build , or do build as a last resort|b entails that you do use if iron is larger than x otherwise, if b do use , or do build if no other options are possible|a is a tactic where it is good to do jump if b x , or do build as a last resort|a is an approach where it would be good to do use if position is not the same as x otherwise, if b do jump , or do run if not|a suggests that it would be advantageous to do run if a is not equal to y otherwise, if iron do find , or do run if no other options are possible|a is an approach where you do find if iron is larger than x otherwise, if a do use , or do use otherwise|a is an approach where it would be good to do jump if iron is exactly the same as 2 otherwise, if position do jump , or do run if no other options are possible|once b is exactly the same as 0 you have the choice to find until y|whenever a is greater than or equal to y you have the choice to build until inventory is not equal to 0|as soon as b is equal to 2 you can build until position is exactly the same as y|whenever a is greater than 2 you have the option to run until finally inventory is not equal to y|as soon as a is exactly the same as y you are able to use until x|if a is greater than x you have the choice to use until position is not the same as 0|when a is equal to 2 you are able to find until finally b is at most x|once b is less than or equal to 1 you are able to use until a is at most y|b suggests that it would be advantageous to do use if position is not equal to x otherwise, if a do jump , or do use if no other options are possible|a is a good strategy where you should do use if a is greater than x otherwise, if a do use , or do run if no other options are possible|a is an approach where you do use if iron is not equal to 0 otherwise, if position do find , or do run as a last resort|a is a strategy where you do jump if b is not the same as 0 otherwise, if b do use , or do build if not|b entails that you do use if position x , or do find as a last resort|whenever position is not the same as 1 you have the option to find until position is larger than y|a is a strategy where you do use if a is not the same as y , or do run if no other options are possible|once b is at most y you are able to use until finally position is not equal to 1|when inventory is at most 2 you are able to build until b is exactly the same as 1|a is an approach where it would be good to do use if a is equal to y otherwise, if a do run , or do use otherwise|as soon as position is less than 2 you can build until position is exactly the same as 1|a suggests that it would be advantageous to do run if position is exactly the same as 1 otherwise, if a do build , or do use if no other options are possible|a suggests that it would be advantageous to do run if a is not the same as 0 otherwise, if b do find , or do find if not|b is a strategy where you do jump if b is greater than x otherwise, if a do use , or do build otherwise|b means that it would be good to do use if b is greater than 0 , or do find as a last resort|a is an approach where you do build if a is larger than y otherwise, if iron do build , or do use otherwise|as soon as position is larger than x you have the choice to find until finally position is not equal to 2|b states that you should do use if b is larger than x otherwise, if position do jump , or do jump if no other options are possible|a entails that you do build if a 0 otherwise, if b do find , or do use if no other options are possible|a is an approach where it would be good to do run if iron otherwise, if a do find , or do build as a last resort|when position is less than or equal to x you are able to build until b is exactly the same as x|whenever b is not equal to y you can jump until finally a is less than 2|a suggests that it would be advantageous to do build if position is smaller than y otherwise, if iron do run , or do jump as a last resort|b is a tactic where it is good to do jump if iron is less than x otherwise, if b do find , or do find as a last resort|when position is greater than or equal to 2 you have the choice to run until finally inventory is less than or equal to x|a states that you should do find if position is greater than x otherwise, if iron do find , or do build if no other options are possible|b suggests that it would be advantageous to do find if b is greater than x otherwise, if b do use , or do build if no other options are possible|a is an approach where you do jump if iron 0 otherwise, if position do build , or do find if no other options are possible|a states that you should do use if b 2 otherwise, if b do run , or do run if no other options are possible|a is an approach where it would be good to do use if a is not the same as x otherwise, if iron do run , or do find otherwise|b is an approach where you do run if b y , or do run if not|b is an approach where you do build if position is less than y otherwise, if position do jump , or do find if no other options are possible|when b is larger than x you are able to run until a is not equal to 0|once inventory is not the same as 1 you have the option to find until finally inventory is at most 0|b suggests that it would be advantageous to do find if a is not equal to 1 , or do run if no other options are possible|b is a strategy where you do jump if a is less than x otherwise, if position do find , or do use as a last resort|a is a tactic where it is good to do use if a is not equal to 0 otherwise, if b do find , or do find as a last resort|if position is not the same as x you have the option to use until b is at least x|as soon as inventory is not equal to 2 you have the option to run until finally position is larger than y|b means that it would be good to do run if position is less than x otherwise, if b do build , or do find as a last resort|a is a tactic where it is advantageous to do build if iron is not equal to 2 , or do run otherwise|a is a tactic where it is good to do find if position is equal to 0|when position is greater than y you are able to find until position is equal to 2|once a is greater than or equal to 0 you have the option to build until b is greater than or equal to y|whenever position is smaller than 2 you have the option to use until finally position is less than or equal to 1|b is a tactic where it is advantageous to do build if a 0 , or do use as a last resort|a is a strategy where you do use if position is not equal to 0 otherwise, if b do use , or do jump if no other options are possible|a entails that you do run if b is equal to 0 otherwise, if a do build , or do jump if not|a suggests that it would be advantageous to do find if iron is exactly the same as y otherwise, if a do jump , or do run if not|as soon as inventory is greater than or equal to y you are able to build until finally a is at least x|as soon as b is not the same as 2 you have the option to find until finally a is not equal to 2|whenever a you have the option to run until position is greater than 1|a is a strategy where you do jump if iron is smaller than 0 otherwise, if a do run , or do build otherwise|a is a tactic where it is advantageous to do build if a is exactly the same as 1 otherwise, if position do find , or do run as a last resort|a entails that you do find if position 2 otherwise, if position do run , or do find otherwise|a states that you should do run if iron is larger than 1 otherwise, if position do use , or do jump if not|whenever inventory is less than or equal to y you have the option to use until finally a is exactly the same as y|whenever b is smaller than 0 you have the choice to build until finally a is exactly the same as 0|a states that you should do use if iron is less than 1 otherwise, if b do build , or do use if no other options are possible|a means that it would be good to do build if position is not equal to 1 , or do run if no other options are possible|as soon as position is less than or equal to 2 you have the option to find until inventory is larger than 2|whenever inventory is less than x you are able to use until a is exactly the same as 0|a suggests that it would be advantageous to do jump if iron 2 otherwise, if iron do use , or do run if no other options are possible|b is an approach where you do jump if iron is greater than y otherwise, if iron do jump , or do run as a last resort|a is an approach where it would be good to do find if a is smaller than x otherwise, if iron do jump , or do find if not|when position is greater than x you have the choice to jump until position is greater than y|a is a tactic where it is advantageous to do jump if position is equal to 0 otherwise, if position do build , or do use if no other options are possible|whenever a is less than y you are able to use until b is not equal to y|a means that it would be good to do find if b 1 otherwise, if position do use , or do build otherwise|a is an approach where it would be good to do build if iron is not the same as 0 otherwise, if position do use , or do run otherwise|a is a strategy where you do jump if b 0 otherwise, if position do find , or do jump as a last resort|as soon as position you are able to use until finally a is larger than 1|b states that you should do build if b is greater than y otherwise, if iron do use , or do jump otherwise|a means that it would be good to do use if position x otherwise, if position do jump , or do find if not|a suggests that it would be advantageous to do jump if a 2 , or do use if no other options are possible|b entails that you do build if position y otherwise, if iron do jump , or do build otherwise|b is a good strategy where you should do run if a is not the same as 0 otherwise, if iron do find , or do use as a last resort|a is a strategy where you do run if position is larger than 0 otherwise, if a do use , or do find otherwise|a means that it would be good to do jump if a is not equal to y otherwise, if a do build , or do jump if no other options are possible|a states that you should do build if a is not the same as x otherwise, if iron do run , or do run if no other options are possible|if position is not the same as 0 you have the choice to build until inventory is less than or equal to y|as soon as b you can find until a|when inventory is greater than or equal to 1 you can use until finally inventory is greater than or equal to 1|b is an approach where it would be good to do jump if b is exactly the same as x otherwise, if position do find , or do use if not|a is an approach where you do build if a 2 otherwise, if a do jump , or do use if no other options are possible|as soon as a is at most 1 you are able to build until finally inventory is not the same as 0|b states that you should do find if a is not the same as x otherwise, if b do find , or do build otherwise|a is a strategy where you do build if position is equal to 2 otherwise, if iron do run , or do jump if no other options are possible|once x you have the option to use until inventory is larger than 0|a states that you should do build if a 1 otherwise, if iron do build , or do build if not|a suggests that it would be advantageous to do jump if a is less than 1 , or do jump if no other options are possible|when a is less than 2 you have the choice to run until inventory is larger than 2|if position is equal to x you are able to jump until inventory is not the same as 1|b means that it would be good to do run if a y otherwise, if position do build , or do jump otherwise|whenever a is not equal to 0 you are able to jump until position is less than y|as soon as inventory is smaller than 1 you have the choice to find until position is equal to 2|as soon as a is not equal to x you have the choice to find until inventory is smaller than y|a suggests that it would be advantageous to do build if a 1 otherwise, if b do build , or do run if not|a is a good strategy where you should do jump if b is greater than x otherwise, if b do build , or do run as a last resort|whenever a is less than or equal to 2 you have the option to use until finally a is greater than x|a is a tactic where it is advantageous to do build if a is smaller than 2 otherwise, if iron do build , or do build otherwise|once inventory is less than 1 you can find until finally position is exactly the same as 0|as soon as b is less than or equal to 2 you can run until x|whenever b is exactly the same as 2 you are able to find until finally inventory is not equal to 0|once position is greater than x you have the choice to find until inventory is greater than or equal to 0|as soon as position is less than y you have the choice to jump until finally position is not the same as y|b is a good strategy where you should do find if b is smaller than x otherwise, if b do find , or do jump as a last resort|a is a good strategy where you should do run if position 2 otherwise, if a do find , or do find as a last resort|a is an approach where you do run if position is not equal to x otherwise, if b do build , or do jump if no other options are possible|whenever a you have the option to find until finally inventory is greater than or equal to 0|a is a strategy where you do jump if a y otherwise, if position do find , or do use as a last resort|a suggests that it would be advantageous to do run if b y , or do build otherwise|a means that it would be good to do find if a is greater than 0 otherwise, if position do find , or do jump if no other options are possible|if position is at most 2 you have the choice to use until b is not the same as x|a is a tactic where it is advantageous to do jump if b is equal to 2 otherwise, if position do build , or do jump otherwise|as soon as b is larger than 2 you can find until b is greater than or equal to 1|a is a tactic where it is advantageous to do build if iron 0 otherwise, if iron do find , or do build if no other options are possible|once b is exactly the same as 2 you can use until finally inventory is larger than x|b states that you should do use if a is smaller than 0 otherwise, if iron do use , or do build as a last resort|whenever position is greater than or equal to x you have the choice to jump until b is smaller than y|a is a tactic where it is good to do use if b 2 otherwise, if a do run , or do find as a last resort|when a is not the same as 1 you have the option to find until a is equal to y|as soon as a is at most 1 you can run until finally position is equal to 0|if b is not equal to 2 you are able to jump until finally b is at most 1|b is a tactic where it is good to do build if iron otherwise, if a do build , or do jump if no other options are possible|when b is exactly the same as y you are able to find until finally inventory is at least x|a is a strategy where you do find if iron x otherwise, if iron do find , or do build if not|whenever position is at least 0 you are able to build until finally b is greater than or equal to 2|b suggests that it would be advantageous to do jump if iron y otherwise, if position do run , or do use if no other options are possible|if inventory is less than 1 you can jump until finally b is not equal to x|once inventory is exactly the same as 0 you have the option to build until finally b|whenever a is larger than x you can run until a is at least 0|when position is at least 1 you have the choice to jump until finally position is greater than 1|once a is not equal to 0 you can build until finally inventory is equal to 2|once b is less than 0 you have the choice to jump until b is at least x|b is an approach where you do find if position is not equal to y otherwise, if a do build , or do build as a last resort|b is an approach where you do run if iron otherwise, if position do find , or do find as a last resort|b states that you should do use if b is equal to 2|b is a tactic where it is good to do use if iron y otherwise, if a do use , or do use as a last resort|b is a good strategy where you should do run if position is not the same as x otherwise, if position do run , or do build if not|once position is at least y you are able to find until b is not equal to y|when position is exactly the same as 1 you are able to run until finally inventory is exactly the same as 2|a is a tactic where it is advantageous to do jump if position is smaller than 0 otherwise, if b do use , or do build otherwise|once a is less than or equal to 0 you have the choice to use until position is larger than y|a is an approach where you do jump if position is larger than 2 otherwise, if position do run , or do find if no other options are possible|a is a strategy where you do find if position is equal to 2 otherwise, if a do run , or do run otherwise|a is an approach where it would be good to do use if a is equal to x otherwise, if position do jump , or do run if no other options are possible|a is an approach where you do build if position is greater than y otherwise, if position do jump , or do find otherwise|as soon as b is at most 0 you have the choice to build until position is less than 2|once b is smaller than 0 you have the choice to find until finally b is not the same as 0|b is an approach where it would be good to do build if position otherwise, if position do build , or do jump otherwise|a is a strategy where you do jump if iron is equal to 0 otherwise, if a do run , or do jump if no other options are possible|when a is not the same as x you are able to build until b is at least x|a suggests that it would be advantageous to do build if position is equal to x otherwise, if iron do build , or do jump if no other options are possible|whenever inventory is at most 0 you have the option to jump until inventory is exactly the same as 2|if position is equal to 0 you have the option to find until finally position is not the same as 1|whenever inventory is greater than x you have the choice to run until position is equal to 1|a is a good strategy where you should do build if a 0 otherwise, if position do build , or do run otherwise|a means that it would be good to do jump if iron 0 otherwise, if a do run , or do use otherwise|a is a strategy where you do find if iron is larger than 1 otherwise, if a do find , or do run if not|a suggests that it would be advantageous to do find if position is less than y otherwise, if a do jump , or do use if no other options are possible|when b is less than or equal to 1 you have the option to build until b is larger than 1|a is a tactic where it is good to do find if iron is not equal to x otherwise, if b do use , or do use otherwise|a means that it would be good to do jump if b is equal to 1 otherwise, if b do find , or do jump as a last resort|b is a strategy where you do find if b is not equal to x otherwise, if a do use , or do find if no other options are possible|as soon as b is less than 0 you have the choice to use until inventory is larger than 0|b is a good strategy where you should do jump if position x , or do find as a last resort|once inventory is equal to 0 you are able to build until finally inventory is smaller than x|if position is greater than or equal to y you have the option to jump until finally position is exactly the same as y|a is a good strategy where you should do jump if a is greater than 1 otherwise, if position do use , or do run if not|b is an approach where you do build if iron is smaller than x otherwise, if b do build , or do use as a last resort|whenever position is greater than or equal to 1 you have the option to jump until b is not the same as 0|b suggests that it would be advantageous to do use if b is larger than x otherwise, if iron do find , or do jump as a last resort|when position is smaller than 1 you can use until inventory is not the same as 0|when inventory is less than or equal to x you can jump until finally b is at least x|b suggests that it would be advantageous to do find if iron y otherwise, if a do find , or do build if not|as soon as b is exactly the same as y you have the option to find until finally position is larger than 2|b states that you should do use if a is smaller than 1 otherwise, if iron do run , or do build otherwise|whenever inventory is not equal to 1 you have the choice to jump until position is smaller than x|b suggests that it would be advantageous to do run if iron is exactly the same as y otherwise, if a do use , or do build otherwise|a is an approach where you do build if a x otherwise, if b do run , or do build if not|b is a tactic where it is good to do jump if a x otherwise, if iron do run , or do find as a last resort|b is a tactic where it is good to do use if a is equal to 0 otherwise, if a do build , or do jump otherwise|if b is less than or equal to x you are able to find until position is greater than or equal to x|a means that it would be good to do run if b is larger than x otherwise, if iron do find , or do find if not|whenever a is not equal to y you are able to use until inventory is not the same as 0|a is a tactic where it is good to do build if a 1 otherwise, if b do use , or do use as a last resort|b entails that you do find if a is not equal to 2 otherwise, if iron do use , or do run if not|a is a good strategy where you should do use if iron is greater than 2 otherwise, if b do run , or do use otherwise|once inventory is at most x you are able to use until b is greater than 2|a is an approach where you do build if b 1 otherwise, if iron do build , or do run if no other options are possible|when b is exactly the same as y you have the choice to use until position is at most x|a is an approach where you do use if a is not the same as 2 otherwise, if position do run , or do run as a last resort|as soon as b is greater than or equal to 0 you are able to build until finally a is smaller than 2|a entails that you do jump if position x otherwise, if position do build , or do jump if no other options are possible|a suggests that it would be advantageous to do run if b 1 , or do jump if no other options are possible|a is an approach where it would be good to do jump if iron is equal to x otherwise, if b do jump , or do jump as a last resort|a suggests that it would be advantageous to do find if position 1 otherwise, if iron do build , or do run if no other options are possible|as soon as position is not equal to 0 you are able to find until position is at least 1|b is a tactic where it is good to do build if iron is smaller than x , or do find if no other options are possible|as soon as a is at least 2 you have the choice to run until inventory is at least 2|once position is smaller than y you have the option to find until inventory is greater than or equal to 0|as soon as inventory is smaller than 0 you have the option to use until inventory is at most 2|a is a tactic where it is advantageous to do jump if b is exactly the same as x otherwise, if position do jump , or do jump otherwise|whenever position is at most 2 you can find until finally position is at least y|as soon as b is larger than y you are able to use until finally position is less than 0|when a is exactly the same as 2 you have the option to build until finally b is less than or equal to 0|whenever b is less than or equal to x you have the option to run until finally a is larger than y|a is a tactic where it is good to do build if iron otherwise, if iron do run , or do find otherwise|once position is at least 0 you have the option to build until finally position is at least 1|once a is greater than 2 you have the choice to run until position is less than 0|a is an approach where it would be good to do jump if position is larger than y otherwise, if b do run , or do run if no other options are possible|b is a tactic where it is advantageous to do build if a is greater than x otherwise, if iron do run , or do use if not|once position is larger than 1 you can use until b is at least y|a states that you should do run if position is not equal to 1 otherwise, if position do find , or do find as a last resort|when b is not equal to 0 you can find until b is less than y|a is a tactic where it is good to do find if a 1 otherwise, if iron do use , or do build if no other options are possible|when b is exactly the same as 0 you have the option to use until finally b is exactly the same as 2|b is a tactic where it is good to do run if iron x otherwise, if b do jump , or do find if no other options are possible|a suggests that it would be advantageous to do use if b is greater than x otherwise, if iron do jump , or do run otherwise|once b is not the same as 2 you can jump until finally b is not the same as 0|once inventory is at most 0 you have the choice to run until b is not equal to x|if b is smaller than 0 you have the option to jump until finally a is at most y|whenever b is equal to 0 you are able to use until finally a is less than x|when b is smaller than 2 you have the option to build until inventory is not equal to 1|if b is greater than or equal to 2 you have the choice to build until position is less than or equal to 2|a means that it would be good to do use if iron is greater than 0 otherwise, if position do run , or do jump as a last resort|a states that you should do build if b is equal to x otherwise, if iron do run , or do jump as a last resort|a means that it would be good to do find if iron is larger than 2 otherwise, if a do use , or do use if not|a is an approach where you do build if b is not the same as 0 , or do jump if no other options are possible|a is an approach where you do find if b is smaller than 2 otherwise, if position do build , or do build if no other options are possible|once inventory is greater than y you have the option to find until finally inventory is not the same as 1|a is an approach where it would be good to do run if position is equal to 0 otherwise, if a do jump , or do run as a last resort|once position you can use until inventory is larger than 2|when b is less than y you can run until finally inventory is not equal to 2|b states that you should do jump if position is exactly the same as y otherwise, if a do find , or do jump if not|whenever position is less than or equal to 0 you have the option to run until inventory is greater than 2|if inventory is greater than or equal to 2 you can build until finally a is greater than 0|b is an approach where you do use if position y otherwise, if b do use , or do build as a last resort|when inventory is greater than 0 you are able to build until b is at least 2|a suggests that it would be advantageous to do run if iron 0 otherwise, if iron do build , or do jump otherwise|b is a good strategy where you should do run if a is smaller than 0 otherwise, if position do find , or do jump if not|as soon as position is greater than 2 you are able to find until finally a|if inventory is exactly the same as y you are able to build until a is larger than 2|a is a tactic where it is good to do run if b x otherwise, if b do run , or do jump otherwise|as soon as position is less than or equal to 2 you have the choice to use until finally b is exactly the same as 0|once inventory is smaller than y you can run until position is larger than 0|a is an approach where you do find if position is not the same as x otherwise, if b do find , or do find if not|as soon as position is at least 0 you have the choice to jump until finally a is less than or equal to y|when y you can find until b is at most 2|if inventory is not the same as x you can run until finally position is not equal to x|a is an approach where it would be good to do build if b is not equal to x otherwise, if b do build , or do jump if not|as soon as a is less than 2 you can find until inventory is less than 1|if inventory is at most 1 you are able to run until finally b is larger than 1|b entails that you do find if a is greater than y otherwise, if iron do build , or do run otherwise|whenever inventory is larger than 0 you have the choice to use until finally inventory is greater than or equal to x|b means that it would be good to do find if a is equal to 2 otherwise, if b do run , or do use as a last resort|b suggests that it would be advantageous to do build if a is smaller than y otherwise, if iron do jump , or do build otherwise|whenever position you are able to build until finally inventory is less than x|as soon as inventory is equal to 0 you are able to run until a is at most 1|b is a tactic where it is good to do use if b is not equal to x otherwise, if iron do build , or do build otherwise|a is a good strategy where you should do find if iron is exactly the same as 0 otherwise, if a do find , or do build as a last resort|as soon as a is greater than y you have the option to build until a is at least y|as soon as a is larger than x you are able to jump until finally position is less than 1|b is a tactic where it is good to do use if b is smaller than y otherwise, if a do build , or do jump if not|a is an approach where it would be good to do find if b is larger than x otherwise, if iron do use , or do jump if not|whenever b is at most x you have the option to build until finally b is at most 2|b is a good strategy where you should do find if a , or do use if no other options are possible|as soon as inventory is smaller than 0 you have the choice to run until finally inventory is greater than or equal to 2|b is a tactic where it is good to do jump if a 2|b means that it would be good to do find if a x otherwise, if a do build , or do use if not|as soon as a is less than x you have the choice to jump until finally inventory is less than x|once inventory is less than or equal to y you have the option to use until finally a is smaller than 1|once position is equal to y you have the option to jump until a is greater than 0|a states that you should do jump if b is smaller than 0 otherwise, if b do build , or do jump if not|as soon as a is exactly the same as 1 you are able to jump until finally inventory is less than 2|once inventory is not the same as 1 you have the option to build until b is at least x|whenever a is less than 2 you can run until finally position is greater than 2|whenever a is greater than 0 you have the option to build until inventory is at most 1|whenever a is larger than y you can jump until finally b is equal to y|a is a tactic where it is good to do find if a 0 otherwise, if position do find , or do find otherwise|whenever position is at least y you can use until position is not the same as 0|b states that you should do jump if iron is less than y otherwise, if b do find , or do jump if not|as soon as b is larger than x you can use until finally inventory is larger than y|a is an approach where you do jump if position is equal to 2 , or do jump otherwise|a is a good strategy where you should do use if b is not equal to 0 , or do run if not|a entails that you do use if iron x otherwise, if b do find , or do find otherwise|whenever position is exactly the same as 2 you have the choice to build until a is larger than 1|as soon as b is less than or equal to 0 you are able to use until finally position is greater than or equal to x|once position is not equal to 1 you can jump until finally a is smaller than 1|b suggests that it would be advantageous to do jump if position 0 , or do run otherwise|when inventory is greater than or equal to 2 you have the choice to build until finally b is greater than or equal to x|a is a tactic where it is good to do find if b 1 otherwise, if position do use , or do use otherwise|b is an approach where it would be good to do jump if iron y otherwise, if a do build , or do jump as a last resort|whenever b is not equal to 0 you can find until inventory is less than or equal to 1|a is an approach where it would be good to do use if iron 2 , or do jump otherwise|when inventory is at least y you can use until finally a is greater than or equal to 0|a means that it would be good to do run if b is not equal to 2 otherwise, if iron do run , or do use as a last resort|whenever inventory is at least 1 you have the option to use until finally inventory is greater than or equal to 2|a means that it would be good to do find if position x otherwise, if position do jump , or do use if not|a states that you should do build if iron is larger than 1 otherwise, if a do jump , or do run if no other options are possible|a is an approach where it would be good to do find if iron is greater than 1 otherwise, if b do run , or do build as a last resort|a suggests that it would be advantageous to do find if a is greater than 2 otherwise, if b do run , or do run otherwise|a suggests that it would be advantageous to do jump if position is greater than y otherwise, if a do run , or do use if not|b is a tactic where it is advantageous to do run if iron is not equal to x otherwise, if a do use , or do jump as a last resort|once b is not equal to 0 you are able to run until finally a is larger than y|a suggests that it would be advantageous to do jump if a is equal to 1 otherwise, if iron do find , or do build otherwise|once a is at most 2 you are able to run until finally inventory is equal to x|a is a tactic where it is good to do run if position is equal to x otherwise, if position do run , or do jump if no other options are possible|a is a tactic where it is good to do run if position is larger than 1 , or do jump otherwise|a is a tactic where it is advantageous to do jump if b is exactly the same as x otherwise, if iron do build , or do use if no other options are possible|b is a tactic where it is advantageous to do use if b is greater than 1 , or do build otherwise|if inventory is greater than y you have the option to find until a is at most x|b is a tactic where it is good to do run if position 1|whenever inventory is greater than or equal to x you have the option to use until position is at most x|if inventory is exactly the same as 0 you have the choice to find until finally inventory is not equal to 1|whenever position is exactly the same as 0 you are able to find until finally a is at least 0|a is a good strategy where you should do find if iron 0 otherwise, if iron do find , or do find otherwise|if position is less than 2 you are able to build until finally b is at least y|b is a good strategy where you should do find if position is not equal to x otherwise, if a do build , or do jump if no other options are possible|b is a good strategy where you should do build if a is greater than x otherwise, if iron do build , or do build if not|a is an approach where you do use if iron is greater than y otherwise, if b do find , or do build if not|whenever a is at least 1 you are able to run until position is smaller than x|b entails that you do run if b is less than x otherwise, if a do jump , or do find as a last resort|once b is greater than or equal to 2 you have the option to use until finally b is equal to x|a suggests that it would be advantageous to do build if a is less than y otherwise, if a do jump , or do jump otherwise|a states that you should do build if iron is smaller than y otherwise, if iron do jump , or do build if not|once inventory is at most 1 you are able to build until finally position is less than or equal to 1|when a is greater than or equal to 2 you can use until finally inventory is less than or equal to y|as soon as a is exactly the same as y you have the option to use until finally b is larger than 1|when position is equal to 1 you have the option to build until a is less than or equal to 2|a is an approach where you do jump if b is less than y otherwise, if b do find , or do use if not|once a is greater than 0 you have the choice to build until finally position is at most 0|b states that you should do find if iron is not equal to y otherwise, if iron do build , or do use if not|if a is not the same as y you have the choice to run until finally position is less than or equal to x|b is a tactic where it is good to do build if a is less than 0 otherwise, if b do find , or do jump otherwise|b is a good strategy where you should do find if b is smaller than x otherwise, if position do jump , or do jump otherwise|a is a strategy where you do run if b x otherwise, if iron do jump , or do run if no other options are possible|a entails that you do use if b y , or do use if no other options are possible|as soon as position is at most 2 you can build until finally a is exactly the same as 1|if position is not the same as y you have the choice to use until finally inventory is less than or equal to 1|if a is equal to x you have the option to run until finally b is greater than or equal to 0|once inventory is greater than or equal to 2 you have the option to run until a is not the same as 0|once b is not the same as y you are able to build until position is at most 0|a is an approach where you do build if a x otherwise, if position do run , or do find otherwise|if a is exactly the same as y you have the option to jump until position is at most 2|b entails that you do find if iron is not the same as x otherwise, if position do find , or do find if no other options are possible|whenever b is less than 2 you can build until inventory is greater than 1|a states that you should do build if position is equal to 0 otherwise, if a do jump , or do jump as a last resort|once a is less than 0 you have the option to build until inventory is greater than x|a is a good strategy where you should do build if b is larger than 2 otherwise, if iron do build , or do build if not|a is a strategy where you do run if a is not equal to y otherwise, if position do build , or do find otherwise|whenever position is not the same as y you are able to build until finally position is greater than 0|when inventory is equal to 2 you can use until inventory is larger than 0|a is an approach where it would be good to do run if b is exactly the same as x otherwise, if a do run , or do use as a last resort|b is a tactic where it is good to do build if a is not the same as 1 otherwise, if iron do build , or do find if no other options are possible|b is a tactic where it is good to do build if position x otherwise, if iron do run , or do jump otherwise|as soon as position is larger than x you are able to run until a is larger than 0|when position is at least 1 you are able to find until finally position is exactly the same as x|a means that it would be good to do build if b is equal to 0 otherwise, if a do find , or do find otherwise|b states that you should do run if b x otherwise, if a do jump , or do jump if not|b means that it would be good to do jump if b is equal to x otherwise, if b do use , or do jump if no other options are possible|b suggests that it would be advantageous to do use if iron is exactly the same as y otherwise, if b do find , or do jump if not|b entails that you do run if position is not the same as x otherwise, if iron do run , or do build as a last resort|whenever position is larger than x you have the choice to jump until b is not equal to x|a means that it would be good to do build if iron is greater than y otherwise, if iron do run , or do use otherwise|a states that you should do run if position is not the same as y otherwise, if position do run , or do find if no other options are possible|if a is greater than or equal to 1 you can find until a is less than or equal to x|a is a tactic where it is good to do jump if b is smaller than 0 otherwise, if a do find , or do build if no other options are possible|whenever position is greater than 2 you have the choice to build until finally inventory is less than or equal to 1|if b is not equal to 2 you have the option to find until position is larger than x|once position is less than y you can use until finally b is equal to 0|as soon as a is larger than 0 you can build until a is not equal to 0|b entails that you do build if iron is greater than x otherwise, if position do run , or do run otherwise|b states that you should do use if iron is less than 2 , or do jump otherwise|as soon as inventory is at most 1 you can jump until a is at least 2|a is a good strategy where you should do run if b is exactly the same as 2 otherwise, if b do use , or do use if no other options are possible|a is an approach where it would be good to do run if b is larger than x otherwise, if iron do use , or do find if not|b states that you should do find if position is exactly the same as x otherwise, if iron do run , or do build if not|b is an approach where it would be good to do find if b x otherwise, if iron do jump , or do run if no other options are possible|a is a strategy where you do jump if iron is not the same as 1 otherwise, if b do find , or do build otherwise|a is an approach where it would be good to do run if b y otherwise, if b do find , or do jump otherwise|a entails that you do run if iron is equal to 0 otherwise, if iron do find , or do build otherwise|a is a good strategy where you should do run if b 1 , or do build if no other options are possible|a suggests that it would be advantageous to do find if iron is exactly the same as 1 otherwise, if iron do jump , or do find if no other options are possible|whenever position is greater than 2 you can build until b is smaller than 2|as soon as inventory is not the same as 2 you have the choice to jump until finally inventory is less than or equal to 1|b states that you should do jump if b is less than 0|a is a strategy where you do use if b 1 otherwise, if a do run , or do jump if not|a is an approach where it would be good to do build if position is not the same as x , or do use as a last resort|once inventory is greater than x you have the option to build until finally a is not equal to y|whenever a is greater than or equal to 1 you have the choice to use until inventory is less than 2|a is an approach where you do run if position is larger than 1 otherwise, if b do jump , or do use otherwise|a is an approach where it would be good to do use if b is larger than 0 otherwise, if a do build , or do run otherwise|a is an approach where you do build if a y otherwise, if position do run , or do run if not|b means that it would be good to do jump if b x otherwise, if position do use , or do jump if not|as soon as position is at least 2 you have the choice to jump until b|when inventory is less than or equal to 0 you can find until finally position is less than or equal to y|whenever b is greater than y you have the option to find until inventory is equal to 2|b is a tactic where it is good to do build if position x otherwise, if b do find , or do build if no other options are possible|a suggests that it would be advantageous to do run if position is smaller than y otherwise, if b do use , or do build as a last resort|b states that you should do use if b x otherwise, if iron do run , or do build otherwise|a is an approach where it would be good to do use if b is equal to 0 otherwise, if iron do find , or do jump if not|b means that it would be good to do use if iron x otherwise, if a do use , or do jump otherwise|a entails that you do run if a is larger than 0 , or do use otherwise|a states that you should do build if b is equal to 1 otherwise, if b do use , or do run as a last resort|as soon as position is smaller than 2 you can run until a is at most 0|a suggests that it would be advantageous to do find if b y otherwise, if a do jump , or do build otherwise|when b is greater than 1 you are able to use until finally inventory is not equal to x|once position is not equal to 0 you are able to jump until b is smaller than x|b is a tactic where it is good to do find if iron x otherwise, if position do find , or do build otherwise|b is a strategy where you do use if a is less than 1 otherwise, if b do run , or do run if no other options are possible|a is an approach where you do jump if position is exactly the same as x otherwise, if iron do run , or do build if no other options are possible|if inventory is at least 1 you have the choice to jump until position is exactly the same as y|if a is less than or equal to 2 you can use until b is equal to y|a is an approach where it would be good to do build if iron otherwise, if iron do jump , or do jump if not|once position is smaller than y you can run until b is equal to 2|b is a tactic where it is good to do run if position is not equal to y otherwise, if a do jump , or do jump as a last resort|as soon as position you are able to use until finally position is not equal to 1|if a is smaller than 2 you can find until inventory is greater than x|b is an approach where you do use if position is exactly the same as y otherwise, if b do run , or do build if not|a is an approach where you do jump if b is not the same as 2 otherwise, if position do jump , or do jump otherwise|once inventory is exactly the same as 0 you can build until a is not equal to x|b is a good strategy where you should do find if a is exactly the same as 2 otherwise, if iron do build , or do jump as a last resort|if b is less than or equal to 1 you have the option to use until inventory is smaller than y|whenever position is smaller than 0 you have the choice to jump until b is not equal to 1|whenever position is at most 1 you are able to jump until finally b is at least x|b is a tactic where it is advantageous to do jump if iron is smaller than x otherwise, if iron do find , or do build if no other options are possible|if a you are able to find until finally position is not the same as 0|b is an approach where you do run if iron y otherwise, if position do run , or do use as a last resort|whenever b is less than y you have the option to use until finally b is less than or equal to 2|a is a strategy where you do use if position is less than y otherwise, if iron do build , or do run otherwise|a is a tactic where it is advantageous to do build if position x otherwise, if iron do use , or do build if not|when position is at most y you have the choice to find until finally b is at most x|when inventory is equal to 0 you can build until finally inventory is not equal to 1|b is an approach where you do use if a is smaller than 0 otherwise, if iron do build , or do find as a last resort|a means that it would be good to do use if iron 0 otherwise, if a do run , or do use as a last resort|a is an approach where it would be good to do use if a is less than 0 otherwise, if position do find , or do jump if not|a is a strategy where you do build if iron is not the same as 0 otherwise, if a do jump , or do run as a last resort|a is a tactic where it is good to do find if b is larger than y otherwise, if position do use , or do jump if no other options are possible|whenever b is greater than or equal to 0 you have the option to use until finally inventory is at most 1|as soon as position is greater than y you have the choice to find until x|a is an approach where it would be good to do build if iron is exactly the same as x otherwise, if iron do jump , or do jump if not|whenever position is less than x you are able to build until a is at most y|a suggests that it would be advantageous to do build if a 2 otherwise, if a do use , or do run as a last resort|a means that it would be good to do jump if b x otherwise, if b do find , or do find otherwise|if inventory is exactly the same as y you have the choice to use until position is less than y|whenever inventory is greater than or equal to x you can build until inventory is larger than 0|a is a tactic where it is good to do find if b is not equal to y otherwise, if b do use , or do jump as a last resort|a suggests that it would be advantageous to do jump if a is not the same as y otherwise, if iron do run , or do build if no other options are possible|as soon as position is less than 2 you have the option to jump until a is larger than 1|if a is at most 0 you can find until finally position is exactly the same as 0|if a is at least x you can use until finally position is not the same as 2|once a is not the same as 1 you have the choice to use until a is less than 2|when inventory is at least 0 you have the choice to find until position is not equal to 0|whenever b is smaller than 0 you are able to build until finally inventory is greater than or equal to 1|if inventory is not the same as 1 you are able to build until position is smaller than 0|a means that it would be good to do find if iron x otherwise, if position do find , or do run as a last resort|when b is greater than 2 you are able to jump until position is larger than 0|a is an approach where it would be good to do find if b is not the same as 2 otherwise, if a do use , or do run otherwise|when position is equal to 0 you have the choice to run until position is not the same as x|if inventory is at most 1 you can jump until finally position is not the same as y|when position is not equal to y you have the choice to build until position is not the same as 0|a is an approach where it would be good to do run if a 2 otherwise, if position do find , or do run if no other options are possible|b is a tactic where it is advantageous to do use if a is exactly the same as 1 otherwise, if a do build , or do find as a last resort|when a is greater than or equal to y you have the option to run until b is not equal to 2|as soon as b is greater than 0 you can run until inventory is greater than y|if position you can jump until finally position is less than or equal to 2|a suggests that it would be advantageous to do use if a 2 , or do run as a last resort|whenever position is not equal to x you can use until finally inventory is equal to x|b means that it would be good to do jump if iron is equal to y otherwise, if a do find , or do run as a last resort|a is a tactic where it is advantageous to do use if a is larger than y otherwise, if position do jump , or do use if no other options are possible|as soon as position is less than 1 you have the choice to jump until b is not the same as 1|a suggests that it would be advantageous to do run if a y otherwise, if iron do use , or do jump if no other options are possible|if position is larger than y you have the option to jump until a is at most x|b means that it would be good to do jump if position x otherwise, if b do run , or do find otherwise|if inventory is at least 0 you have the choice to find until a is greater than 2|a means that it would be good to do build if a is greater than x otherwise, if position do run , or do jump if not|b is an approach where you do run if iron x otherwise, if b do jump , or do build as a last resort|a is an approach where you do find if a is exactly the same as 1 otherwise, if a do jump , or do use otherwise|b suggests that it would be advantageous to do jump if position is larger than x otherwise, if iron do jump , or do run if no other options are possible|whenever a is not equal to 1 you have the option to jump until inventory is not equal to x|a is an approach where you do jump if position is not equal to x otherwise, if position do jump , or do build if no other options are possible|as soon as position is exactly the same as 1 you have the option to run until inventory is greater than 1|b suggests that it would be advantageous to do build if position is smaller than y otherwise, if iron do build , or do find as a last resort|a is a tactic where it is advantageous to do build if a is not equal to 2 otherwise, if a do jump , or do use if no other options are possible|when inventory is greater than 2 you have the choice to find until finally position is larger than 0|once a is at least 0 you can jump until finally inventory is smaller than 2|a entails that you do run if position is less than x otherwise, if iron do jump , or do find as a last resort|once position is not the same as y you have the choice to build until a is less than y|when position is greater than or equal to y you are able to use until b is larger than 2|a is an approach where you do find if b otherwise, if position do build , or do run otherwise|whenever a is greater than or equal to 1 you have the option to find until position is larger than 1|b entails that you do run if iron y otherwise, if b do use , or do find if no other options are possible|whenever inventory is equal to x you have the choice to find until finally a is smaller than 1|b is a tactic where it is good to do jump if a is larger than x otherwise, if position do run , or do use if no other options are possible|whenever b is larger than y you have the choice to use until inventory is at least 1|if b is greater than 1 you can jump until a is greater than or equal to 1|a is a good strategy where you should do build if a is equal to 2 otherwise, if b do run , or do run as a last resort|as soon as a is less than 0 you have the option to jump until finally inventory is at most x|b is a tactic where it is good to do use if position 1 , or do use if not|b suggests that it would be advantageous to do use if iron is larger than x otherwise, if position do build , or do build if no other options are possible|a suggests that it would be advantageous to do run if iron is less than 0 otherwise, if iron do use , or do use otherwise|if b you can build until position is less than or equal to 1|a suggests that it would be advantageous to do find if iron is equal to 1 , or do use as a last resort|a states that you should do find if b x otherwise, if iron do run , or do jump if not|b is an approach where it would be good to do find if iron x otherwise, if b do build , or do run otherwise|b entails that you do find if iron x otherwise, if a do run , or do use otherwise|if x you have the option to use until inventory is at least x|a means that it would be good to do use if a is equal to 2 otherwise, if a do jump , or do build if no other options are possible|b is an approach where it would be good to do jump if iron is not the same as y otherwise, if a do jump , or do use as a last resort|if inventory is equal to 2 you have the choice to use until position is larger than 2|once b is less than or equal to 0 you can jump until finally inventory is not equal to y|if position is at least 0 you can use until finally a is equal to 2|a is a tactic where it is advantageous to do run if a 2 otherwise, if position do jump , or do jump otherwise|once inventory is greater than or equal to 0 you are able to use until finally a is not the same as 2|when a is less than 2 you can find until a is greater than 2|b is a strategy where you do find if position is smaller than x otherwise, if a do jump , or do use if no other options are possible|b is a strategy where you do find if iron is exactly the same as y otherwise, if a do build , or do use if not|a states that you should do jump if iron is larger than 2 otherwise, if position do find , or do jump as a last resort|once position is greater than 2 you have the option to use until a is less than or equal to y|a suggests that it would be advantageous to do jump if a is greater than x otherwise, if iron do build , or do find otherwise|a is an approach where you do build if position is not the same as y otherwise, if b do use , or do run if not|as soon as position is less than y you can run until a is not equal to x|b means that it would be good to do jump if b is larger than x otherwise, if b do use , or do use if not|once a is exactly the same as x you are able to build until a is not the same as 2|a is a strategy where you do find if a is greater than x otherwise, if a do jump , or do jump if no other options are possible|whenever a is larger than 2 you are able to build until inventory is exactly the same as 1|a states that you should do find if position is not the same as 1 otherwise, if position do build , or do find otherwise|a is an approach where you do find if iron is larger than 2 otherwise, if position do find , or do run as a last resort|whenever inventory is not the same as x you have the option to find until finally inventory is greater than or equal to y|if b is greater than 2 you have the choice to run until finally a|once inventory is greater than or equal to 2 you are able to run until finally b is less than x|a is an approach where you do build if position is not the same as y otherwise, if a do jump , or do jump if not|a is a good strategy where you should do build if a is equal to 0 , or do find as a last resort|a is an approach where it would be good to do jump if iron is smaller than 2 , or do run if no other options are possible|b is an approach where it would be good to do use if position x otherwise, if iron do find , or do jump if no other options are possible|a is a strategy where you do build if a x otherwise, if a do build , or do use as a last resort|a is a strategy where you do build if b is smaller than 1 otherwise, if position do find , or do find as a last resort|b means that it would be good to do jump if a is smaller than y otherwise, if iron do build , or do build if not|a means that it would be good to do run if a is exactly the same as 2 otherwise, if a do build , or do run if not|a means that it would be good to do find if a is greater than y otherwise, if position do run , or do run as a last resort|if a is less than or equal to 0 you have the option to build until finally b is at most 0|b states that you should do build if iron is larger than y otherwise, if a do run , or do find as a last resort|a suggests that it would be advantageous to do run if b is not the same as 0 otherwise, if a do find , or do find if no other options are possible|a is a tactic where it is advantageous to do find if b is not equal to x otherwise, if b do use , or do run as a last resort|a states that you should do jump if position is equal to 0 otherwise, if b do find , or do jump if not|when position is exactly the same as y you are able to find until finally b is smaller than 1|a entails that you do find if b is not equal to y otherwise, if b do find , or do jump otherwise|a is an approach where it would be good to do jump if position is equal to 1 otherwise, if a do find , or do jump if not|as soon as a is at most x you have the choice to use until finally position|b is a tactic where it is good to do build if position x , or do jump if no other options are possible|b is a tactic where it is good to do jump if position is exactly the same as y otherwise, if iron do run , or do jump if no other options are possible|a is a tactic where it is good to do use if b is not the same as y otherwise, if b do use , or do run if no other options are possible|b entails that you do run if position is equal to x otherwise, if a do use , or do use otherwise|a is a strategy where you do build if iron is smaller than 2 otherwise, if iron do find , or do find as a last resort|once b is less than or equal to 0 you can jump until finally a is greater than or equal to y|a is an approach where you do jump if iron is exactly the same as 2 otherwise, if iron do build , or do use if not|b is a tactic where it is advantageous to do find if b is not equal to y otherwise, if b do use , or do use as a last resort|as soon as inventory is equal to x you are able to jump until finally inventory is smaller than 2|b entails that you do find if iron , or do jump as a last resort|as soon as inventory is at least y you are able to build until finally b is less than 1|a is an approach where it would be good to do jump if a is smaller than 2 otherwise, if a do find , or do build if no other options are possible|when b is not the same as y you can jump until finally inventory is greater than or equal to 0|whenever y you have the option to run until finally inventory is greater than x|a is an approach where it would be good to do find if b is less than y otherwise, if b do run , or do jump if not|b is a strategy where you do use if iron y otherwise, if b do build , or do find as a last resort|whenever inventory is not equal to 2 you have the option to run until finally b is larger than 1|a is a tactic where it is advantageous to do run if b is greater than 2 otherwise, if iron do run , or do jump as a last resort|b is a tactic where it is good to do build if b is larger than y otherwise, if position do build , or do run otherwise|b is an approach where it would be good to do jump if a y otherwise, if a do run , or do use if no other options are possible|as soon as b is less than y you are able to jump until x|once inventory is less than 1 you have the choice to find until finally position is greater than 1|a is an approach where you do use if iron is equal to 0 otherwise, if position do use , or do jump if no other options are possible|a suggests that it would be advantageous to do build if iron is larger than 0 otherwise, if iron do run , or do use as a last resort|a is a tactic where it is good to do jump if iron y otherwise, if a do run , or do use if not|if b is not the same as 1 you are able to build until a is exactly the same as x|a is a good strategy where you should do build if position is not the same as 1 otherwise, if iron do find , or do build if no other options are possible|if a is equal to x you have the choice to jump until finally position is not the same as y|a means that it would be good to do jump if b is not equal to x otherwise, if a do find , or do jump as a last resort|a is a tactic where it is advantageous to do use if iron 2 otherwise, if b do find , or do find if not|as soon as position is at most x you are able to run until position is greater than 2|if position is equal to y you are able to use until inventory is not equal to 1|once a is not equal to 1 you have the choice to run until b is smaller than 2|if b is exactly the same as 0 you have the option to run until finally inventory is exactly the same as 0|a is an approach where you do build if iron is less than 0 otherwise, if b do run , or do find as a last resort|a entails that you do find if b is less than y otherwise, if iron do use , or do find if not|as soon as position is less than or equal to x you are able to use until inventory is not the same as 2|a is an approach where it would be good to do use if position is smaller than 2 otherwise, if position do build , or do run otherwise|whenever b is less than or equal to y you can build until finally b is not equal to 2|if b is not equal to x you have the choice to use until position is at least 1|a is a good strategy where you should do find if position is not equal to 0 otherwise, if position do find , or do build if not|b means that it would be good to do use if a is not the same as 2 otherwise, if b do jump , or do build if no other options are possible|b is a tactic where it is good to do build if b is greater than x otherwise, if iron do run , or do run as a last resort|a is an approach where it would be good to do run if position is equal to 2 , or do run otherwise|as soon as position is exactly the same as y you have the choice to build until position is less than y|b is an approach where it would be good to do run if position is equal to x otherwise, if b do jump , or do find as a last resort|b is a strategy where you do find if a is exactly the same as 1 otherwise, if b do jump , or do build if no other options are possible|a states that you should do jump if b otherwise, if position do jump , or do find if no other options are possible|a suggests that it would be advantageous to do jump if a is greater than 2 otherwise, if iron do find , or do jump if not|b is a tactic where it is good to do use if a is larger than y otherwise, if a do use , or do run if no other options are possible|b is an approach where it would be good to do run if iron is equal to y otherwise, if iron do build , or do use as a last resort|when a is equal to y you can run until finally inventory is at least 1|a is a good strategy where you should do find if iron is equal to 0 otherwise, if iron do jump , or do build as a last resort|a is a good strategy where you should do jump if b is smaller than y otherwise, if position do jump , or do build if not|if inventory is greater than x you can use until a is at least 0|when position is at most 0 you have the option to find until finally position is greater than or equal to y|a entails that you do jump if b is greater than x otherwise, if position do run , or do find if not|as soon as b is less than or equal to x you are able to jump until position is greater than or equal to 2|when b is equal to 0 you can jump until finally b is less than y|as soon as b is equal to 2 you have the choice to use until position is less than or equal to x|if position is not the same as y you have the option to use until b is less than x|a states that you should do jump if iron is less than 2 otherwise, if position do use , or do build if no other options are possible|whenever b is less than or equal to 2 you have the choice to use until a is at most 1|when position is less than or equal to 0 you have the option to run until finally x|when b is greater than or equal to 2 you can run until inventory is less than or equal to 1|a is a tactic where it is advantageous to do use if b is exactly the same as 0 otherwise, if a do find , or do use otherwise|as soon as position is not the same as x you have the choice to find until finally a|if a is not the same as 1 you have the option to jump until a is less than 0|b is a good strategy where you should do jump if iron y otherwise, if iron do find , or do use if no other options are possible|b entails that you do build if a is exactly the same as 1 otherwise, if position do use , or do run if no other options are possible|a means that it would be good to do jump if b is equal to 1 otherwise, if a do jump , or do build if no other options are possible|b is a strategy where you do find if position is less than x otherwise, if position do jump , or do jump if not|when b is equal to 0 you have the choice to use until finally inventory is larger than 2|if inventory is equal to x you have the choice to jump until b is equal to 0|as soon as b is equal to y you have the option to find until finally a is not the same as x|if position is smaller than 0 you have the option to jump until inventory is less than or equal to 0|b is a tactic where it is advantageous to do find if a is less than 2 otherwise, if b do run , or do jump if not|a is a tactic where it is good to do build if iron y otherwise, if position do find , or do find if not|a is a strategy where you do run if position 2 otherwise, if b do use , or do find if no other options are possible|a is a strategy where you do find if b is less than x otherwise, if position do build , or do use if no other options are possible|a suggests that it would be advantageous to do use if position is larger than y otherwise, if iron do run , or do use if not|b states that you should do run if iron is greater than 0 , or do find otherwise|b is a tactic where it is advantageous to do find if position is greater than x otherwise, if position do run , or do build if not|when inventory is less than x you have the option to use until a is larger than 0|once position is greater than or equal to y you have the choice to find until a is less than 1|b entails that you do jump if iron is equal to y otherwise, if position do run , or do jump otherwise|if b is equal to x you have the choice to run until finally position is greater than 1|once a is less than or equal to 1 you have the option to jump until finally position is exactly the same as y|as soon as b is equal to 2 you have the choice to jump until b is not the same as x|a is a strategy where you do build if a x otherwise, if b do run , or do jump if no other options are possible|a is a good strategy where you should do use if iron is larger than 0 otherwise, if b do build , or do build otherwise|b states that you should do build if a is not the same as x otherwise, if b do jump , or do run if no other options are possible|a entails that you do run if a otherwise, if a do jump , or do find as a last resort|when a you have the option to use until finally b is less than 0|b is a tactic where it is good to do find if iron otherwise, if iron do use , or do find as a last resort|as soon as a is at least x you have the choice to build until a is smaller than y|once a is equal to y you have the choice to use until finally position is greater than 1|if b is larger than 0 you have the choice to build until finally b is not the same as x|once a you can find until finally a is at least 1|b is a strategy where you do find if iron is smaller than y otherwise, if b do jump , or do find otherwise|a is a good strategy where you should do build if position is smaller than 0|a entails that you do find if a is smaller than y otherwise, if b do build , or do run if no other options are possible|a is an approach where it would be good to do build if iron is larger than y otherwise, if position do jump , or do build otherwise|b is a strategy where you do jump if position is not equal to 2 , or do build otherwise|once a you can use until finally inventory is greater than or equal to 0|b entails that you do find if a is not the same as 0 , or do build as a last resort|a means that it would be good to do use if b 2 , or do run otherwise|whenever b is greater than or equal to 2 you have the choice to jump until y|whenever inventory is smaller than y you can find until finally inventory is greater than x|a entails that you do build if iron is exactly the same as 0 otherwise, if a do jump , or do run as a last resort|once inventory is greater than or equal to x you have the choice to jump until finally a is less than or equal to x|b is a tactic where it is good to do build if a is smaller than 0 otherwise, if iron do build , or do use if no other options are possible|once b is equal to y you have the choice to run until finally b is not equal to 2|a entails that you do find if a is less than x otherwise, if b do build , or do find if not|a means that it would be good to do jump if iron is equal to 0 otherwise, if position do run , or do jump as a last resort|b is a tactic where it is advantageous to do run if a is smaller than 1 otherwise, if a do use , or do jump as a last resort|a means that it would be good to do jump if b is smaller than y otherwise, if iron do build , or do run as a last resort|a is an approach where you do jump if iron is not the same as 0 otherwise, if iron do jump , or do use as a last resort|a is a tactic where it is advantageous to do find if a 1 otherwise, if position do run , or do find if not|a states that you should do use if position 0 otherwise, if a do find , or do find if not|a is an approach where it would be good to do run if a is greater than 0 otherwise, if position do build , or do build as a last resort|b means that it would be good to do use if position is greater than y otherwise, if position do use , or do find otherwise|a entails that you do use if iron y otherwise, if iron do build , or do run if not|as soon as b is not the same as x you have the choice to use until position is at most 2|a suggests that it would be advantageous to do run if iron is greater than 0 otherwise, if a do jump , or do find otherwise|if b you have the option to use until finally a is less than or equal to 0|if b is less than 2 you have the option to build until b is not the same as 0|once position is less than 2 you are able to find until finally a is at least y|whenever a is less than x you have the option to find until a is at least x|whenever position is not equal to 0 you have the option to build until position is not the same as 1|b is a good strategy where you should do build if iron is greater than x otherwise, if position do build , or do use otherwise|b suggests that it would be advantageous to do run if iron is less than y otherwise, if position do find , or do jump as a last resort|a entails that you do run if iron is less than 2 , or do find otherwise|a states that you should do run if a is larger than 0 otherwise, if b do jump , or do build if no other options are possible|b is a strategy where you do use if b 0 , or do use as a last resort|b is a strategy where you do find if position is not the same as y otherwise, if b do build , or do find otherwise|b means that it would be good to do run if position is equal to y otherwise, if b do build , or do find as a last resort|when a is smaller than y you are able to find until finally b is at most 1|when position is exactly the same as y you are able to jump until b is not equal to 0|b is an approach where it would be good to do jump if b is larger than x otherwise, if a do use , or do jump if no other options are possible|whenever a is equal to 2 you have the option to run until a is equal to 1|once a is not equal to y you are able to find until finally a is not equal to 0|b is a good strategy where you should do build if iron is less than y otherwise, if a do jump , or do build if not|when a is larger than 0 you have the option to use until a is exactly the same as 1|as soon as b is not the same as x you can build until finally position is not equal to x|if b is exactly the same as 0 you have the option to jump until finally a|a is a tactic where it is advantageous to do find if iron is smaller than 1 otherwise, if iron do run , or do jump if no other options are possible|whenever a is at most y you can find until finally inventory is greater than or equal to 1|b suggests that it would be advantageous to do run if a is not the same as 1 otherwise, if b do run , or do build if not|as soon as inventory is less than or equal to 2 you have the option to jump until finally b is less than 1|b is an approach where you do use if position is not equal to y otherwise, if b do find , or do find otherwise|a is a good strategy where you should do jump if position is larger than 1 , or do build if not|as soon as a is not equal to x you have the choice to find until position is less than 0|a means that it would be good to do use if b 1 otherwise, if iron do find , or do use if no other options are possible|whenever position is greater than 0 you are able to build until finally a is exactly the same as 0|a entails that you do build if a is smaller than y otherwise, if b do jump , or do find otherwise|a is an approach where you do run if position is not equal to 0 otherwise, if b do run , or do run if no other options are possible|if a is smaller than 1 you have the option to run until finally inventory is less than x|once position is not equal to 1 you have the choice to build until b is at most x|b suggests that it would be advantageous to do find if a x otherwise, if iron do jump , or do run otherwise|as soon as inventory is exactly the same as x you can build until a is less than y|if a is at most x you can find until finally b is at most 0|b is an approach where you do find if a y otherwise, if position do use , or do jump as a last resort|once inventory is larger than y you can build until finally b is less than y|a is a strategy where you do build if position is equal to y otherwise, if position do find , or do find if not|a states that you should do run if iron 1 otherwise, if b do build , or do find as a last resort|a entails that you do jump if iron 2 otherwise, if b do use , or do run otherwise|whenever b is greater than or equal to y you have the choice to find until a is at most x|a suggests that it would be advantageous to do build if position is not equal to 0 otherwise, if a do find , or do find if not|whenever position is exactly the same as y you can build until b|a suggests that it would be advantageous to do jump if position is not equal to y otherwise, if iron do find , or do find as a last resort|when a is greater than 2 you are able to run until a is less than 1|if position is larger than 2 you can use until position is smaller than x|b is a tactic where it is good to do run if position is exactly the same as x otherwise, if b do jump , or do run if not|a is a tactic where it is advantageous to do find if position 0 otherwise, if b do use , or do run otherwise|when b is at most 2 you have the choice to jump until inventory is equal to 2|b is a tactic where it is advantageous to do jump if a is not equal to 2 otherwise, if b do build , or do run otherwise|b states that you should do build if iron is greater than y otherwise, if iron do find , or do run if not|as soon as b is not the same as 0 you have the option to build until finally position is greater than 1|a is a good strategy where you should do find if position 0 otherwise, if b do build , or do use if no other options are possible|a is an approach where you do use if b is not equal to y otherwise, if a do build , or do jump as a last resort|if a is equal to y you have the choice to build until finally inventory is less than 1|a is a strategy where you do run if iron is greater than 1 otherwise, if a do run , or do jump if no other options are possible|if a is less than or equal to 2 you can run until finally a is exactly the same as 0|as soon as inventory is not the same as 1 you have the choice to build until finally a|if b is at most 2 you are able to build until finally position is less than or equal to 2|a is a strategy where you do use if b x otherwise, if position do build , or do run otherwise|if b is not the same as y you have the option to use until finally a is at most y|when inventory is exactly the same as 0 you can run until finally a is larger than x|a suggests that it would be advantageous to do build if position is not the same as 1 otherwise, if position do jump , or do find otherwise|whenever position is greater than or equal to 0 you are able to build until b is not the same as x|a states that you should do run if position is equal to 1 otherwise, if position do run , or do run otherwise|a is an approach where it would be good to do build if position y otherwise, if b do use , or do jump as a last resort|a is a tactic where it is good to do find if position is not equal to y otherwise, if b do build , or do use as a last resort|whenever position is at least x you are able to run until a is equal to 0|a is a good strategy where you should do jump if position is smaller than y otherwise, if a do find , or do use as a last resort|b entails that you do run if a y otherwise, if a do use , or do run if no other options are possible|a states that you should do use if iron is smaller than 2 otherwise, if a do use , or do use otherwise|if b is greater than y you are able to build until finally b is less than or equal to x|if inventory is exactly the same as 0 you are able to use until b is less than or equal to y|b states that you should do run if a is less than x otherwise, if position do jump , or do use as a last resort|b is a good strategy where you should do jump if b x , or do find if not|b is a good strategy where you should do build if a 0 , or do run as a last resort|if position is exactly the same as y you are able to run until inventory is less than y|a suggests that it would be advantageous to do find if b is not equal to y , or do use if no other options are possible|once a is exactly the same as 2 you are able to find until finally b is equal to 0|a states that you should do find if position is not equal to 0 otherwise, if iron do jump , or do find if not|if inventory is smaller than 0 you have the option to use until x|a is an approach where it would be good to do jump if position is less than 0 otherwise, if iron do jump , or do build as a last resort|if inventory is not equal to 2 you are able to jump until position is at most y|as soon as inventory is at most 2 you have the choice to jump until a is not equal to 0|b entails that you do run if iron x otherwise, if position do find , or do run as a last resort|b suggests that it would be advantageous to do run if a is equal to y otherwise, if b do run , or do run if not|as soon as position is less than or equal to y you are able to use until finally b is greater than 0|whenever b is at most 2 you have the choice to build until b is not the same as x|b entails that you do run if a is not the same as 2|a is a strategy where you do jump if a is not the same as 2 otherwise, if b do build , or do run if no other options are possible|a states that you should do build if b is not equal to 0 otherwise, if iron do jump , or do build as a last resort|b is an approach where you do run if iron is exactly the same as x otherwise, if iron do jump , or do find if no other options are possible|a means that it would be good to do use if b is greater than 2 , or do build if no other options are possible|a states that you should do jump if iron is exactly the same as x otherwise, if iron do use , or do find if no other options are possible|a is a good strategy where you should do use if a is exactly the same as x otherwise, if a do jump , or do find if not|once a is greater than 2 you have the choice to find until finally position is greater than 1|whenever inventory is not equal to 1 you can run until inventory is not the same as x|when inventory is less than or equal to 0 you have the option to find until b is larger than y|whenever b is exactly the same as 2 you have the choice to use until finally inventory is at least y|b is a good strategy where you should do jump if position otherwise, if a do run , or do build if no other options are possible|a is an approach where you do jump if position 0 otherwise, if a do jump , or do build if not|a is an approach where you do use if a is less than 0 otherwise, if iron do use , or do use if no other options are possible|as soon as b is not the same as y you have the choice to find until inventory is at least 1|once position is greater than 2 you can run until finally position is equal to x|as soon as a is exactly the same as y you are able to jump until finally b is less than or equal to 0|b means that it would be good to do build if iron y otherwise, if b do use , or do run otherwise|a is an approach where it would be good to do find if iron 0 otherwise, if b do find , or do find otherwise|once position is smaller than 0 you are able to find until position is larger than y|a means that it would be good to do build if iron 1 otherwise, if position do find , or do build as a last resort|a is an approach where you do use if a is not the same as 1 , or do find if no other options are possible|as soon as inventory is at least 0 you have the choice to run until finally inventory is exactly the same as 0|a is an approach where you do use if iron y otherwise, if iron do find , or do find otherwise|once b is less than or equal to y you are able to jump until finally inventory is equal to x|a is an approach where you do run if position y otherwise, if b do find , or do find if not|b is a good strategy where you should do build if a is equal to 0 otherwise, if b do jump , or do jump as a last resort|b is a tactic where it is advantageous to do use if iron is smaller than y otherwise, if a do jump , or do find if not|if inventory is equal to x you can find until finally b is larger than y|as soon as position is greater than or equal to 2 you have the option to find until a is greater than or equal to 0|a is an approach where you do build if iron 0 otherwise, if a do use , or do jump otherwise|a is an approach where it would be good to do find if a y otherwise, if b do build , or do use if no other options are possible|b suggests that it would be advantageous to do build if a y otherwise, if b do find , or do use as a last resort|when a is equal to 2 you can use until b is larger than 1|b is a strategy where you do jump if a x otherwise, if position do jump , or do jump if not|b states that you should do find if iron is larger than 0 , or do use otherwise|a means that it would be good to do jump if b is not equal to 1 otherwise, if position do find , or do use if no other options are possible|a states that you should do find if a 1 otherwise, if iron do use , or do run otherwise|once b is greater than or equal to y you have the choice to find until b is equal to 0|a is a tactic where it is advantageous to do build if b x otherwise, if position do find , or do build otherwise|if b is less than or equal to 2 you have the option to run until a is not equal to 2|b suggests that it would be advantageous to do find if a is less than x otherwise, if b do build , or do run otherwise|if position is not equal to 1 you have the option to run until b is not equal to 2|a is an approach where you do run if b is equal to 0 otherwise, if a do build , or do build otherwise|b states that you should do build if a is equal to 1 otherwise, if iron do use , or do run otherwise|whenever position is less than or equal to y you can use until finally position is not equal to y|whenever b is exactly the same as 0 you have the choice to use until finally position is at most x|whenever position is not equal to y you have the choice to find until finally position is at least 0|when a is less than 0 you can find until finally a is less than 1|a states that you should do run if b is greater than 1 otherwise, if position do find , or do build otherwise|if position is less than 0 you have the choice to run until b is equal to 2|as soon as inventory is at most 2 you are able to jump until inventory is larger than y|b suggests that it would be advantageous to do jump if a is exactly the same as 0 otherwise, if iron do jump , or do use if no other options are possible|as soon as a is at most 1 you have the option to run until inventory is not the same as x|b is an approach where it would be good to do use if iron y otherwise, if a do run , or do use otherwise|a states that you should do jump if a 0|whenever a you have the choice to run until b is smaller than 2|a states that you should do build if b is not equal to 2 otherwise, if position do build , or do build if no other options are possible|if position is at least x you have the choice to find until finally position is less than or equal to 0|when position is less than or equal to 1 you have the choice to find until position is greater than or equal to y|if position is at least 0 you are able to use until b is greater than or equal to 2|a is a tactic where it is advantageous to do build if iron is smaller than 2 otherwise, if a do run , or do run if not|b is an approach where you do find if b is not the same as y otherwise, if a do jump , or do run if not|a entails that you do run if position 0 otherwise, if b do run , or do run if not|when position is greater than 1 you have the option to use until finally position is not equal to 1|a is an approach where it would be good to do jump if position 0 , or do run as a last resort|a states that you should do run if position y|a is a strategy where you do use if b is larger than 0 otherwise, if position do run , or do find if no other options are possible|a is a tactic where it is advantageous to do jump if a is smaller than 0 otherwise, if a do use , or do use if no other options are possible|as soon as b is at least 0 you can find until finally a is equal to 2|a means that it would be good to do jump if a is not the same as 1 otherwise, if position do run , or do jump if no other options are possible|a states that you should do run if b is exactly the same as 0 otherwise, if iron do find , or do use otherwise|if a is equal to 1 you have the choice to run until position is less than or equal to y|b is an approach where you do find if a otherwise, if position do use , or do run if not|a states that you should do jump if iron is exactly the same as y otherwise, if b do jump , or do run if not|once inventory is at most 1 you are able to build until finally position is at least 1|once b is not equal to 2 you can use until b is at most 0|whenever inventory is less than x you can build until a is equal to y|if position is at most 2 you are able to jump until a is not equal to x|when b is at least x you are able to use until finally position is greater than or equal to x|a is a strategy where you do find if b 0 otherwise, if a do find , or do build if no other options are possible|a is an approach where you do run if a is less than x otherwise, if b do jump , or do find if no other options are possible|b is an approach where it would be good to do jump if a is less than 1 otherwise, if a do use , or do run otherwise|as soon as b is exactly the same as y you can use until a is at most 0|a is a good strategy where you should do find if b is smaller than y otherwise, if b do find , or do build if not|whenever position is greater than 1 you can use until finally inventory is equal to 0|a is an approach where you do jump if position is exactly the same as x otherwise, if a do use , or do build otherwise|a is an approach where it would be good to do use if b is not the same as y otherwise, if a do build , or do find otherwise|once inventory is at least x you are able to jump until a is not the same as 1|whenever a is less than y you have the option to jump until inventory is at most x|a suggests that it would be advantageous to do build if b is not equal to 2 otherwise, if b do run , or do find if no other options are possible|if a is less than y you can use until finally position is not the same as 2|if b is greater than or equal to y you can run until finally position is larger than 1|once inventory is not equal to x you have the option to find until finally position is at most 0|as soon as a is less than or equal to 1 you have the choice to use until finally inventory is exactly the same as 1|once b is exactly the same as 0 you have the choice to jump until finally a is at most 0|a is an approach where it would be good to do build if b 0 otherwise, if b do find , or do run if no other options are possible|once position is smaller than 0 you have the choice to find until inventory is exactly the same as 0|if inventory is exactly the same as 0 you have the choice to jump until finally a is not the same as 2|b entails that you do jump if a otherwise, if b do find , or do use if not|a is a strategy where you do use if a is not equal to x otherwise, if iron do jump , or do run if no other options are possible|a is a tactic where it is advantageous to do run if position is greater than 0 otherwise, if a do build , or do use as a last resort|once a is equal to x you can build until position is less than or equal to 1|when inventory is greater than x you have the choice to use until a is at most x|if b is less than 1 you have the option to run until finally position is less than or equal to 0|as soon as a is at most 2 you have the choice to jump until finally inventory is at least 2|when b is not the same as y you have the choice to run until finally b is not equal to 1|a is a good strategy where you should do build if iron is greater than 2 otherwise, if position do jump , or do build otherwise|a is a tactic where it is advantageous to do use if position 1 otherwise, if iron do build , or do run as a last resort|a states that you should do run if position 1 otherwise, if position do run , or do use otherwise|a is a tactic where it is good to do find if a 2 otherwise, if iron do find , or do find if no other options are possible|as soon as position is greater than or equal to x you can build until finally inventory is at most y|b is a strategy where you do build if iron y otherwise, if a do build , or do jump if not|if inventory is smaller than 0 you have the choice to find until a is larger than 1|a is a good strategy where you should do run if b is greater than 1 otherwise, if iron do find , or do find if no other options are possible|when b is less than or equal to y you can use until inventory is not the same as y|a states that you should do run if position otherwise, if position do find , or do use otherwise|if inventory is greater than or equal to y you have the choice to jump until a is less than or equal to 2|a is a good strategy where you should do run if iron x otherwise, if b do jump , or do find if no other options are possible|if inventory is not equal to 1 you can build until finally position is larger than x|a is a tactic where it is good to do jump if a x otherwise, if b do run , or do jump if not|if position is larger than x you have the option to build until position is exactly the same as 2|a is an approach where you do use if iron is greater than 0 otherwise, if b do use , or do run if no other options are possible|b is an approach where you do run if a is exactly the same as 1 otherwise, if a do find , or do run as a last resort|once position is greater than or equal to 2 you have the choice to jump until finally position is not equal to x|a is a strategy where you do find if iron is exactly the same as x otherwise, if b do build , or do run if no other options are possible|once position is exactly the same as 1 you have the option to run until position is greater than y|a is an approach where you do find if b is equal to x otherwise, if a do find , or do find as a last resort|a is a tactic where it is good to do run if position is smaller than y otherwise, if position do jump , or do jump otherwise|if a is less than or equal to 2 you have the option to jump until position is greater than or equal to x|b means that it would be good to do run if position x otherwise, if iron do find , or do use as a last resort|when inventory is equal to x you can jump until b is greater than or equal to 2|a means that it would be good to do build if position is not the same as x otherwise, if position do jump , or do build if no other options are possible|as soon as position is larger than y you have the option to build until b is larger than x|a is a tactic where it is good to do run if b is larger than 1 otherwise, if b do use , or do use otherwise|b states that you should do find if iron is not equal to 2 , or do use otherwise|once b is greater than or equal to x you have the option to jump until a is equal to y|a is a strategy where you do jump if position 2 otherwise, if iron do find , or do use otherwise|whenever a is equal to 0 you are able to build until y|a is a tactic where it is advantageous to do use if iron is larger than x otherwise, if a do jump , or do find as a last resort|once inventory is exactly the same as x you are able to jump until finally b|whenever b is less than or equal to x you have the choice to build until finally position is at least 0|when a is at least 2 you can build until finally b is larger than 0|b is a strategy where you do run if a is greater than y otherwise, if b do build , or do find if not|a is a tactic where it is good to do jump if b is larger than 1 otherwise, if iron do jump , or do find otherwise|a is a good strategy where you should do run if position is equal to 1 otherwise, if iron do run , or do find as a last resort|whenever inventory is smaller than y you have the option to use until b is at least y|once inventory is larger than y you are able to run until finally position is greater than or equal to y|b suggests that it would be advantageous to do jump if iron otherwise, if a do find , or do jump as a last resort|a is a tactic where it is good to do build if a x otherwise, if iron do use , or do jump as a last resort|whenever b is less than or equal to 0 you can jump until finally inventory is less than or equal to y|a is a tactic where it is good to do use if position is greater than 2 , or do build as a last resort|once a is not the same as y you have the choice to run until finally a is less than 1|as soon as a is less than or equal to 1 you have the choice to use until finally position is at most 0|b is an approach where it would be good to do use if position y otherwise, if b do use , or do run if no other options are possible|if b is greater than x you can find until b is equal to 0|as soon as position is not the same as 1 you are able to run until a is not equal to y|b is an approach where you do find if a is less than y otherwise, if iron do build , or do use if no other options are possible|a entails that you do use if iron is larger than 0 , or do jump as a last resort|if inventory is at most x you have the choice to jump until inventory is not the same as 0|a is an approach where you do jump if position is exactly the same as 1|a suggests that it would be advantageous to do find if position 1 otherwise, if position do use , or do find as a last resort|as soon as b is equal to y you are able to find until a is less than y|whenever position is smaller than y you have the choice to jump until b is exactly the same as 0|b means that it would be good to do use if a is less than 2 otherwise, if a do use , or do build if no other options are possible|whenever position is less than or equal to 0 you have the option to jump until inventory is equal to 0|a means that it would be good to do find if a y otherwise, if b do use , or do find if no other options are possible|b is a good strategy where you should do run if b is not equal to y otherwise, if iron do use , or do jump otherwise|if a is not the same as 1 you have the choice to use until finally inventory is equal to 0|if a is equal to 2 you can use until a is larger than 1|when a is less than y you have the choice to find until position is less than or equal to x|a is a good strategy where you should do find if b is smaller than y otherwise, if position do build , or do build as a last resort|a is an approach where it would be good to do build if position is exactly the same as 1 otherwise, if b do find , or do run if no other options are possible|a is an approach where you do find if iron is not equal to 1 otherwise, if b do build , or do build as a last resort|a is an approach where it would be good to do find if a 0 otherwise, if position do find , or do use if not|b states that you should do jump if iron is equal to y otherwise, if position do run , or do find as a last resort|b is a tactic where it is good to do run if a is exactly the same as 2 otherwise, if b do build , or do jump otherwise|as soon as position is greater than or equal to y you have the option to use until b is at least y|a is an approach where you do build if a 1 otherwise, if iron do find , or do run if no other options are possible|when y you are able to use until a is greater than x|a is an approach where it would be good to do use if a is less than 1 otherwise, if a do jump , or do find otherwise|a is a tactic where it is advantageous to do run if b is equal to 2 otherwise, if a do build , or do run if not|a suggests that it would be advantageous to do jump if iron y otherwise, if position do run , or do build if no other options are possible|b is an approach where you do build if position otherwise, if iron do build , or do use if no other options are possible|once position is exactly the same as x you are able to jump until finally b is at most y|a is a tactic where it is advantageous to do find if a 1 otherwise, if iron do jump , or do build otherwise|once inventory is at least 1 you are able to run until finally a is not the same as x|whenever inventory is at least 0 you have the choice to build until a is at least 0|whenever b you are able to find until position is not equal to 0|whenever inventory is greater than x you have the choice to find until a is at most 0|b is a strategy where you do jump if a is less than x otherwise, if a do use , or do jump if no other options are possible|a is a strategy where you do jump if iron is equal to y otherwise, if a do find , or do find as a last resort|a entails that you do jump if a 2 otherwise, if iron do run , or do use if no other options are possible|a is a tactic where it is good to do find if position is equal to 0 otherwise, if b do use , or do run otherwise|a is a strategy where you do run if b 1 otherwise, if b do use , or do build as a last resort|a is an approach where you do jump if b x otherwise, if b do jump , or do build as a last resort|whenever inventory is greater than 2 you have the option to run until finally inventory is exactly the same as y|a states that you should do find if b is smaller than 2 otherwise, if iron do jump , or do run if not|once a is exactly the same as 1 you are able to use until a is not equal to y|a is a strategy where you do find if position is not equal to 1 otherwise, if a do find , or do run as a last resort|a states that you should do jump if b is exactly the same as x otherwise, if a do build , or do build if not|whenever position is greater than 0 you have the option to use until finally b is greater than or equal to x|if a is less than 1 you are able to use until a|when a is smaller than x you are able to build until finally position is larger than 2|when position is at least 0 you can build until finally b is greater than 0|whenever b is equal to 2 you can use until finally inventory|when a is less than 2 you can find until a is greater than or equal to x|whenever position is greater than x you have the choice to jump until finally position is not equal to x|b states that you should do jump if position y otherwise, if b do find , or do find as a last resort|a states that you should do run if b 0 otherwise, if position do build , or do find if not|a is a tactic where it is good to do build if a is not equal to 2 otherwise, if iron do find , or do use otherwise|when b is greater than 2 you have the choice to find until finally position is less than x|whenever position is greater than or equal to 2 you are able to run until finally b is greater than or equal to 1|a means that it would be good to do run if b is exactly the same as 0 otherwise, if position do build , or do find if not|when a is less than x you have the choice to build until position is greater than x|as soon as inventory is greater than 0 you are able to use until b is greater than or equal to 1|when position is greater than or equal to 1 you have the option to run until finally position is less than y|a entails that you do build if a is smaller than 0 otherwise, if a do jump , or do use otherwise|b is a strategy where you do jump if position otherwise, if position do find , or do build if not|a is an approach where you do run if a is not the same as x otherwise, if b do jump , or do jump if not|whenever inventory is not equal to x you have the option to run until b is not the same as 0|once b is exactly the same as 1 you can jump until finally a is at most 0|once position is not equal to 1 you can use until finally b is at least 2|a means that it would be good to do use if position y otherwise, if position do run , or do find as a last resort|if b is less than or equal to 0 you are able to find until finally position is less than 2|a suggests that it would be advantageous to do build if position is not the same as y otherwise, if a do use , or do run if no other options are possible|when b is greater than or equal to x you have the option to run until inventory is less than y|once a is less than x you can run until inventory is less than y|a suggests that it would be advantageous to do jump if iron is not the same as x otherwise, if iron do find , or do use if no other options are possible|a is a tactic where it is advantageous to do jump if a otherwise, if iron do jump , or do build otherwise|once inventory is less than 1 you can build until a is less than y|b is an approach where you do build if position y otherwise, if b do use , or do use otherwise|b is a tactic where it is advantageous to do run if b is exactly the same as x otherwise, if position do use , or do build if not|b is a tactic where it is good to do jump if iron is greater than x otherwise, if position do jump , or do build as a last resort|b states that you should do find if position is exactly the same as y otherwise, if position do run , or do run as a last resort|a is a tactic where it is good to do jump if iron is larger than 0 otherwise, if iron do use , or do jump if not|a is a tactic where it is good to do build if a is not the same as 0 otherwise, if position do jump , or do jump otherwise|a is a tactic where it is good to do run if b is equal to 2 otherwise, if iron do jump , or do use if not|whenever inventory is not the same as x you can use until finally a|a is an approach where you do find if b is less than y , or do build if not|when a is equal to y you are able to build until a is at most 2|once position is greater than or equal to 2 you have the option to jump until finally a is less than 0|b states that you should do run if b is equal to x otherwise, if b do use , or do use if not|b is a strategy where you do use if a is larger than x otherwise, if iron do find , or do build as a last resort|a states that you should do build if b is larger than 2 otherwise, if a do use , or do find otherwise|b means that it would be good to do use if b x otherwise, if a do build , or do run as a last resort|as soon as b is at least y you are able to jump until finally b is larger than 1|once a is equal to y you have the option to build until finally b is less than y|when a is less than 2 you have the option to jump until inventory is larger than 1|if b is not the same as 1 you have the choice to jump until finally inventory is less than 2|whenever b is not the same as 2 you have the choice to use until b is equal to 0|a entails that you do run if iron is less than x otherwise, if b do build , or do build as a last resort|whenever b is greater than or equal to x you have the option to jump until finally b is greater than or equal to x|as soon as inventory is greater than 2 you can jump until finally inventory is equal to 1|once x you can jump until finally inventory is larger than 0|a is a good strategy where you should do run if a is less than 1 otherwise, if b do use , or do find otherwise|if inventory is not equal to 1 you are able to run until finally b is greater than 2|a is a tactic where it is advantageous to do build if a is less than x otherwise, if iron do build , or do run as a last resort|a is a tactic where it is advantageous to do jump if a y otherwise, if position do find , or do run if no other options are possible|a is a strategy where you do jump if b y otherwise, if b do run , or do find if not|a is an approach where you do use if iron 2 otherwise, if b do build , or do jump as a last resort|a is a good strategy where you should do run if a 1 otherwise, if a do run , or do build as a last resort|a is a good strategy where you should do jump if b 2 otherwise, if iron do find , or do build if no other options are possible|a is a tactic where it is good to do run if a y otherwise, if b do jump , or do use if no other options are possible|a states that you should do build if iron is exactly the same as x otherwise, if iron do run , or do find if not|a is a tactic where it is advantageous to do build if position is exactly the same as 1 otherwise, if position do find , or do find if no other options are possible|as soon as position is exactly the same as x you are able to find until a is exactly the same as 0|a states that you should do build if iron is greater than x otherwise, if position do find , or do jump as a last resort|when position is exactly the same as 2 you can build until finally inventory is less than 0|a is a tactic where it is advantageous to do jump if b is not the same as 2 , or do use as a last resort|when b is smaller than x you can build until b is at least x|b means that it would be good to do jump if iron is less than x otherwise, if position do build , or do run if not|whenever inventory is equal to y you have the choice to use until position is greater than 2|a is a good strategy where you should do run if position x otherwise, if a do find , or do build if no other options are possible|whenever b is at most 0 you are able to use until finally position is exactly the same as 1|whenever inventory is smaller than 0 you can use until finally a is exactly the same as 2|whenever position is at most x you have the option to use until b is larger than x|once position is exactly the same as 2 you can build until finally a is larger than 0|a is a tactic where it is good to do find if position 2 otherwise, if iron do use , or do jump if not|once position is less than or equal to 0 you have the choice to run until finally a is less than or equal to x|a is an approach where you do build if b is not equal to 2 otherwise, if iron do build , or do use as a last resort|b states that you should do build if a is smaller than y otherwise, if position do build , or do run if not|if inventory is greater than or equal to 1 you have the option to jump until position is smaller than 2|b is a tactic where it is advantageous to do build if iron is equal to y otherwise, if iron do jump , or do find if not|b entails that you do build if b is smaller than x otherwise, if b do use , or do run otherwise|whenever position is exactly the same as y you can run until finally a is exactly the same as y|if inventory is less than x you are able to find until finally inventory is exactly the same as 1|a is an approach where you do build if a is less than x otherwise, if a do build , or do use if no other options are possible|if inventory is exactly the same as y you can build until a is greater than 1|if a is less than or equal to 0 you have the choice to build until b is exactly the same as 1|if a is greater than 2 you have the option to build until position is equal to 1|once b is not the same as 0 you can find until position is at most 2|b entails that you do jump if iron is larger than x otherwise, if a do find , or do build if not|a suggests that it would be advantageous to do use if b y otherwise, if position do jump , or do jump as a last resort|a means that it would be good to do run if a is not the same as 1 otherwise, if iron do use , or do jump as a last resort|b entails that you do use if a is exactly the same as 2 otherwise, if position do use , or do build otherwise|as soon as b is exactly the same as x you have the choice to build until position is not equal to x|a entails that you do run if b is less than 1 otherwise, if position do jump , or do use if not|as soon as position is at least x you are able to run until finally inventory is greater than or equal to x|a entails that you do jump if b 1 otherwise, if a do build , or do build if not|a is an approach where you do jump if position y otherwise, if b do use , or do build as a last resort|b states that you should do find if iron y , or do run as a last resort|b is a tactic where it is good to do build if iron x otherwise, if iron do use , or do build as a last resort|a states that you should do use if b is equal to 0 otherwise, if position do use , or do jump as a last resort|b suggests that it would be advantageous to do find if position is greater than x otherwise, if position do use , or do find if no other options are possible|if position is smaller than x you can jump until finally inventory is less than x|b is a tactic where it is advantageous to do run if iron is larger than x otherwise, if a do find , or do use as a last resort|a states that you should do find if iron is not equal to 1 otherwise, if b do use , or do build if not|if x you have the option to run until position is greater than x|once a is not equal to y you have the choice to run until inventory is greater than 0|whenever a is at most 1 you have the option to use until position is not equal to 2|a states that you should do use if b is less than 2 otherwise, if iron do build , or do build as a last resort|whenever position is not equal to 0 you are able to run until position is less than or equal to y|a is an approach where it would be good to do jump if iron is not the same as x otherwise, if a do jump , or do find if no other options are possible|a suggests that it would be advantageous to do run if position is larger than x otherwise, if position do find , or do build if not|if position is equal to 1 you have the option to find until b is at most 2|a is an approach where you do use if iron 2 otherwise, if iron do use , or do use as a last resort|a is a tactic where it is good to do jump if a is not the same as 2 otherwise, if iron do jump , or do run otherwise|if inventory is equal to y you can find until finally a is not the same as x|a is a strategy where you do run if b 2 otherwise, if iron do run , or do use otherwise|b is a tactic where it is good to do build if position otherwise, if iron do jump , or do use as a last resort|b is a tactic where it is advantageous to do find if a is not equal to x otherwise, if a do find , or do use if not|when position is smaller than x you have the choice to run until finally a is less than 2|a is an approach where you do run if iron 1 , or do use as a last resort|if a is greater than or equal to 1 you have the option to build until a is larger than x|a is a tactic where it is good to do build if iron is exactly the same as y otherwise, if iron do use , or do jump otherwise|b entails that you do find if position is equal to x otherwise, if a do find , or do use otherwise|when position is not equal to y you have the option to run until finally b is smaller than y|b is a tactic where it is good to do find if b y otherwise, if a do find , or do jump as a last resort|a is a tactic where it is advantageous to do find if iron 2 otherwise, if iron do run , or do find otherwise|whenever position you have the option to build until finally b is smaller than 1|b is a good strategy where you should do run if iron is smaller than x otherwise, if b do run , or do jump if no other options are possible|a states that you should do run if a 0 otherwise, if b do find , or do jump as a last resort|b suggests that it would be advantageous to do run if b 2 , or do use as a last resort|a entails that you do use if iron is larger than 1 otherwise, if position do jump , or do build if not|b states that you should do jump if iron y otherwise, if position do use , or do run otherwise|when position is exactly the same as y you have the option to run until finally b is less than 2|a states that you should do use if position is equal to 0 otherwise, if iron do use , or do find otherwise|when a is smaller than 1 you have the option to jump until b is greater than y|b is an approach where it would be good to do build if a is not equal to 1 otherwise, if b do run , or do find if no other options are possible|as soon as b is not the same as 0 you have the option to use until finally position is equal to 1|a is a tactic where it is good to do jump if position is not equal to 0 otherwise, if iron do run , or do use otherwise|a is a tactic where it is good to do use if position is equal to 0 otherwise, if a do build , or do run if no other options are possible|when position is at least y you have the choice to run until b is less than x|a is a tactic where it is good to do build if a is greater than 2 otherwise, if a do jump , or do use as a last resort|a is an approach where it would be good to do build if position 1 otherwise, if b do run , or do build if no other options are possible|a is an approach where it would be good to do build if position y otherwise, if b do use , or do find if no other options are possible|if position is less than x you have the choice to use until finally inventory is at least y|as soon as position is at least x you have the choice to use until b is exactly the same as 0|if position is at most 2 you are able to run until position is not the same as 0|a is a strategy where you do find if position 2 otherwise, if b do jump , or do build if no other options are possible|if b is not the same as 2 you have the option to jump until b is at most 0|whenever inventory is greater than y you can build until finally a is less than or equal to y|a is a strategy where you do jump if iron is less than 1 otherwise, if iron do run , or do run if no other options are possible|a is an approach where you do find if a is equal to x|as soon as b is at least y you are able to find until finally b is larger than x|whenever a is greater than 1 you can use until position is greater than 0|b suggests that it would be advantageous to do build if position y otherwise, if iron do run , or do find otherwise|a is an approach where it would be good to do find if b otherwise, if iron do build , or do build otherwise|a is a good strategy where you should do find if position is exactly the same as 1 otherwise, if iron do build , or do build as a last resort|when a is at most x you can run until inventory is at most 0|if a is at least 0 you have the option to find until a is equal to 2|when inventory is smaller than 2 you can jump until finally position is not the same as 0|once b you can find until position is exactly the same as 1|b is a strategy where you do jump if a is greater than y otherwise, if position do use , or do build otherwise|a suggests that it would be advantageous to do use if a is equal to y otherwise, if b do build , or do use if not|if a is not the same as 0 you are able to find until inventory|whenever b is at most 2 you have the choice to build until a is equal to 1|a suggests that it would be advantageous to do find if a is greater than y otherwise, if iron do build , or do find if no other options are possible|whenever position is greater than y you have the option to jump until finally a is smaller than 2|a states that you should do run if position is less than 2 otherwise, if a do find , or do find as a last resort|a is a good strategy where you should do run if position is less than 0 otherwise, if a do use , or do use otherwise|a states that you should do use if b is greater than 0 otherwise, if b do build , or do build if not|as soon as inventory is less than 2 you have the choice to find until inventory is at least y|a is an approach where you do run if iron is less than 1 otherwise, if position do run , or do build if not|once b is less than 0 you are able to run until finally position is smaller than y|b is an approach where it would be good to do find if a x otherwise, if a do run , or do run otherwise|a is a good strategy where you should do run if a is smaller than y otherwise, if b do use , or do use otherwise|whenever inventory is greater than or equal to x you have the choice to jump until a is not the same as x|whenever inventory is larger than y you can jump until a is exactly the same as 1|once b is not the same as 0 you have the option to jump until b is less than y|whenever position is greater than or equal to 1 you have the choice to jump until finally a is not the same as x|if position is exactly the same as 2 you have the option to use until finally inventory is not equal to 1|a entails that you do jump if iron is smaller than 0 otherwise, if b do jump , or do find as a last resort|as soon as position is less than x you have the choice to use until b is exactly the same as 2|if a is equal to 2 you can find until b is at least 0|a is a tactic where it is good to do find if iron 0 otherwise, if iron do use , or do build as a last resort|as soon as b is exactly the same as 1 you have the option to build until finally b is at least 0|b is a tactic where it is good to do find if position y otherwise, if position do jump , or do run as a last resort|once inventory is less than 2 you can build until finally position is greater than or equal to 2|b states that you should do run if b is smaller than y otherwise, if position do run , or do use if not|whenever b is larger than 2 you have the choice to run until finally inventory is at least 1|once inventory is not the same as 1 you have the option to build until finally inventory is exactly the same as y|a is a good strategy where you should do use if b is not equal to 2 otherwise, if a do jump , or do use if no other options are possible|b is a good strategy where you should do build if b y otherwise, if iron do find , or do jump if no other options are possible|whenever b is greater than or equal to 1 you can use until finally inventory is less than or equal to 0|b is a strategy where you do use if iron y otherwise, if a do run , or do build as a last resort|if a is not equal to 2 you have the option to jump until b is less than or equal to x|once position is at least 0 you have the choice to build until finally b is smaller than y|once a is at least y you have the choice to jump until position is less than or equal to 1|a is an approach where it would be good to do build if b 1 otherwise, if position do use , or do build if no other options are possible|b is a tactic where it is good to do jump if b otherwise, if a do jump , or do find if no other options are possible|a is a tactic where it is good to do jump if b x otherwise, if position do find , or do use if no other options are possible|a is an approach where you do find if iron is equal to 1 otherwise, if b do jump , or do run if not|a is an approach where you do build if position 0 otherwise, if b do find , or do find if not|a is a good strategy where you should do run if b is exactly the same as y otherwise, if iron do build , or do use otherwise|b is an approach where it would be good to do use if b y otherwise, if b do find , or do find as a last resort|b is an approach where you do run if a 1|whenever inventory is not the same as 1 you can run until finally a is less than x|when inventory is at least 1 you can build until b is equal to 0|as soon as position is smaller than y you have the option to build until finally a is at most x|when inventory is larger than 1 you are able to run until inventory is larger than 1|a is a strategy where you do run if a is equal to 0 otherwise, if b do run , or do jump if no other options are possible|when b is greater than x you have the choice to run until finally inventory is greater than or equal to y|b entails that you do build if a y otherwise, if position do run , or do use as a last resort|a is an approach where it would be good to do jump if iron is not the same as x otherwise, if iron do find , or do find if no other options are possible|a states that you should do find if position is exactly the same as x otherwise, if a do run , or do run otherwise|once inventory is at least x you are able to find until a is greater than or equal to x|as soon as b is at least y you can jump until finally a is greater than 2|a states that you should do jump if a is greater than y otherwise, if a do find , or do jump if no other options are possible|as soon as b is less than or equal to 2 you can use until b is greater than x|as soon as b is smaller than x you have the option to jump until b is at most 0|a is a strategy where you do run if position y otherwise, if b do run , or do find if not|if b is less than or equal to 0 you are able to find until finally b is not the same as 2|when b is smaller than y you have the choice to find until inventory is at most y|a entails that you do build if a 2 otherwise, if iron do use , or do run otherwise|a suggests that it would be advantageous to do build if a is less than 1 otherwise, if iron do jump , or do use otherwise|a is an approach where you do build if a y otherwise, if a do run , or do build if not|when position is exactly the same as 0 you have the option to run until finally position is less than x|as soon as inventory is less than x you can jump until position is larger than 2|if b is not equal to y you are able to find until position is less than or equal to 2|as soon as inventory is greater than or equal to 2 you have the option to find until a is smaller than x|once position is not equal to x you have the choice to build until a is less than or equal to 1|a is a tactic where it is advantageous to do find if iron is equal to 1 otherwise, if iron do use , or do jump otherwise|as soon as a is greater than x you have the option to jump until finally b is smaller than y|whenever inventory is smaller than y you have the option to jump until finally b is larger than x|a suggests that it would be advantageous to do build if iron is larger than 2 otherwise, if a do jump , or do run if not|b is an approach where you do jump if iron is exactly the same as y otherwise, if b do use , or do jump if not|a is a good strategy where you should do jump if position y otherwise, if iron do jump , or do run as a last resort|a entails that you do use if iron is not equal to x otherwise, if a do find , or do find if not|a is a strategy where you do jump if b 1 otherwise, if b do find , or do jump if no other options are possible|once position is less than or equal to 2 you have the option to run until finally inventory is greater than or equal to x|a is a tactic where it is good to do use if b is exactly the same as y otherwise, if a do find , or do build otherwise|if b is exactly the same as x you can find until finally a is at most x|a is an approach where it would be good to do use if a otherwise, if position do use , or do jump as a last resort|b is a tactic where it is advantageous to do run if a is smaller than y otherwise, if a do find , or do find if no other options are possible|a states that you should do jump if position is not equal to 1 otherwise, if position do use , or do jump if not|a states that you should do find if a is equal to 2 otherwise, if a do build , or do run if not|a is a good strategy where you should do jump if b is not the same as 0 otherwise, if position do find , or do find otherwise|a means that it would be good to do build if b 0 otherwise, if a do run , or do run if no other options are possible|a is an approach where you do build if iron is smaller than x otherwise, if position do run , or do jump if not|when b is less than y you have the choice to run until finally position is larger than 1|a is a good strategy where you should do jump if b y otherwise, if position do run , or do use as a last resort|whenever position is less than or equal to x you have the choice to run until finally a is exactly the same as 0|b is a good strategy where you should do find if a is equal to 1 otherwise, if b do use , or do find if no other options are possible|whenever a is less than or equal to y you can jump until finally position is greater than x|as soon as a is less than y you have the option to build until inventory is greater than or equal to 1|a states that you should do run if b is less than x otherwise, if iron do build , or do run if no other options are possible|once inventory is greater than or equal to 0 you have the option to jump until finally position is not equal to y|a is a tactic where it is good to do use if a is equal to x otherwise, if position do run , or do jump if no other options are possible|a suggests that it would be advantageous to do find if a x otherwise, if position do run , or do find as a last resort|a suggests that it would be advantageous to do use if b is larger than 2 otherwise, if iron do use , or do use as a last resort|if position is less than or equal to y you are able to find until position is smaller than 1|when a is at most 0 you can find until position is less than 1|a states that you should do build if iron x otherwise, if position do run , or do jump if no other options are possible|b is a good strategy where you should do jump if b y otherwise, if iron do build , or do use as a last resort|a states that you should do run if position is not the same as y otherwise, if iron do jump , or do build if not|whenever a is less than or equal to y you have the option to use until finally a is less than or equal to 1|whenever a is larger than y you are able to jump until b is equal to 0|a is a tactic where it is good to do jump if iron is less than x otherwise, if a do run , or do find if no other options are possible|whenever position is greater than 1 you have the choice to find until b is less than or equal to x|whenever inventory is exactly the same as y you have the choice to run until finally inventory is not the same as 1|b is a good strategy where you should do run if iron is exactly the same as x otherwise, if a do build , or do find if no other options are possible|a suggests that it would be advantageous to do build if position 0 otherwise, if position do find , or do jump otherwise|a entails that you do find if a is equal to 1 otherwise, if b do jump , or do use if not|a states that you should do build if position is not equal to y otherwise, if a do jump , or do run if no other options are possible|b means that it would be good to do jump if position x otherwise, if iron do run , or do run as a last resort|whenever position is smaller than x you have the choice to use until finally a is at least y|whenever inventory is smaller than 0 you are able to use until position is not equal to y|a is a strategy where you do jump if iron is equal to 0 otherwise, if b do jump , or do find as a last resort|a is a good strategy where you should do run if a is smaller than y otherwise, if iron do find , or do use otherwise|whenever a is not equal to y you have the option to build until finally a is at least y|once inventory is less than or equal to 0 you are able to find until inventory is exactly the same as y|a is a good strategy where you should do jump if iron y otherwise, if iron do build , or do find as a last resort|once a is less than 0 you have the option to jump until finally a is less than 2|b entails that you do use if b is not the same as y otherwise, if iron do build , or do run as a last resort|a states that you should do use if a is smaller than y otherwise, if iron do jump , or do run otherwise|a is an approach where it would be good to do find if iron is not equal to 1 otherwise, if iron do build , or do run if no other options are possible|if a is greater than or equal to 1 you have the option to jump until finally inventory is not equal to 2|if position you have the choice to run until finally inventory is exactly the same as 2|b is an approach where you do build if b 2 , or do build if no other options are possible|whenever a is not the same as y you have the option to jump until finally inventory is greater than or equal to y|a states that you should do jump if b is not equal to x otherwise, if iron do find , or do run otherwise|a is a tactic where it is good to do run if a 1 otherwise, if iron do use , or do run if no other options are possible|a is a good strategy where you should do jump if a , or do build if not|when b is less than y you are able to find until finally a is greater than or equal to 2|a is a tactic where it is advantageous to do run if b is not equal to y otherwise, if iron do find , or do use otherwise|if position is exactly the same as y you are able to jump until inventory is greater than 2|b is a tactic where it is good to do use if a is equal to 0 otherwise, if iron do build , or do find as a last resort|when b is smaller than y you are able to build until finally inventory is less than or equal to 2|if inventory is not equal to 2 you have the choice to build until finally b is at least 0|a suggests that it would be advantageous to do find if position is smaller than y otherwise, if a do jump , or do find otherwise|a entails that you do jump if iron y otherwise, if a do jump , or do build if no other options are possible|as soon as b is exactly the same as y you are able to build until a is at least 0|b states that you should do jump if position is smaller than x otherwise, if b do find , or do jump as a last resort|if b is greater than or equal to 0 you have the choice to jump until finally b is at least 1|a is an approach where it would be good to do use if iron is less than 0 otherwise, if a do jump , or do jump if no other options are possible|a means that it would be good to do build if a 0 otherwise, if iron do run , or do find if no other options are possible|b states that you should do find if a otherwise, if position do run , or do build if no other options are possible|a means that it would be good to do use if position is not the same as x otherwise, if iron do run , or do run if not|when a is greater than or equal to y you can use until a is less than 1|whenever position is larger than y you are able to use until b is less than or equal to 0|a is a good strategy where you should do jump if a 1 otherwise, if position do find , or do find if not|once a is exactly the same as y you have the choice to run until finally position is greater than or equal to 2|a is an approach where it would be good to do run if a is exactly the same as 1 otherwise, if position do run , or do run if no other options are possible|a is an approach where it would be good to do run if position is greater than y otherwise, if b do run , or do run if not|as soon as position is not equal to x you can find until inventory is not the same as 1|a is a strategy where you do use if a 2 otherwise, if b do run , or do find as a last resort|a means that it would be good to do run if a is not equal to y otherwise, if a do jump , or do build if not|if b is less than or equal to y you can jump until finally inventory is less than x|a suggests that it would be advantageous to do use if iron x otherwise, if iron do find , or do jump as a last resort|when a is not equal to 1 you have the choice to build until finally position is larger than 0|b is a tactic where it is good to do jump if iron otherwise, if iron do jump , or do jump as a last resort|when position is at least 2 you are able to build until b is not the same as 0|when position is smaller than 1 you have the option to build until finally b is not equal to 2|as soon as position is exactly the same as x you have the option to find until a is less than 1|b is an approach where it would be good to do find if position is less than 0 , or do find otherwise|a is an approach where it would be good to do find if a is greater than x otherwise, if iron do jump , or do run if no other options are possible|a states that you should do build if position y otherwise, if a do run , or do run if not|b is a tactic where it is good to do find if position is equal to y otherwise, if a do jump , or do find as a last resort|once position is at least 1 you are able to find until a is not equal to 1|whenever b is at least y you are able to build until finally b is less than 2|whenever a is greater than or equal to y you have the choice to find until position is less than 2|as soon as position is at least y you have the option to find until a is at least 1|a is a good strategy where you should do find if iron is greater than 1 otherwise, if position do jump , or do build if no other options are possible|b states that you should do build if a 2 , or do use otherwise|b means that it would be good to do use if b is greater than y otherwise, if b do run , or do jump if not|whenever position is greater than or equal to 2 you are able to jump until finally inventory is larger than y|b suggests that it would be advantageous to do run if a x otherwise, if a do jump , or do find as a last resort|when inventory is at least x you have the option to run until finally b is less than y|as soon as inventory is less than y you have the option to use until b is larger than 1|b is a tactic where it is good to do build if a is smaller than y otherwise, if position do use , or do use as a last resort|a means that it would be good to do jump if a is larger than 2 otherwise, if a do run , or do jump if not|when b is smaller than x you are able to build until position is greater than or equal to x|whenever position is not the same as y you have the option to jump until finally position is at most 2|b suggests that it would be advantageous to do run if a is not equal to 2 , or do run as a last resort|when x you have the option to find until finally position is not the same as 0|b is an approach where you do jump if b is less than x otherwise, if b do find , or do find if no other options are possible|a is a tactic where it is advantageous to do find if iron x otherwise, if iron do find , or do use as a last resort|a is a tactic where it is advantageous to do use if a 2 otherwise, if iron do run , or do jump if not|when a is not equal to y you have the choice to jump until b is not equal to x|as soon as a is not equal to 1 you have the option to jump until finally a is equal to 0|once a is at least 0 you have the choice to find until inventory is less than or equal to 0|a is an approach where it would be good to do use if b is exactly the same as 2 otherwise, if a do use , or do run if no other options are possible|as soon as b is at most y you have the option to run until finally b is equal to 1|when inventory is equal to 2 you are able to find until inventory is at most x|a is a strategy where you do jump if a is less than 0 otherwise, if a do build , or do use as a last resort|once b is greater than 1 you have the option to use until finally b is greater than y|if a is less than or equal to x you are able to use until inventory is less than y|b is a strategy where you do jump if iron is exactly the same as y otherwise, if position do find , or do run as a last resort|a is an approach where it would be good to do build if position is not equal to 1 otherwise, if b do run , or do run if not|when a is smaller than x you can find until finally position is larger than 1|b is an approach where it would be good to do find if iron is larger than 1 , or do run otherwise|a suggests that it would be advantageous to do use if b is not equal to x otherwise, if iron do jump , or do use if not|whenever a is not the same as 0 you have the choice to run until finally b is not equal to y|as soon as b is larger than 2 you have the option to run until finally b is less than 0|if b is exactly the same as 2 you have the option to use until finally a is equal to 0|as soon as inventory you can run until finally inventory is larger than x|once inventory you are able to jump until finally inventory is equal to 0|when a is greater than or equal to y you have the choice to jump until a is smaller than 0|a suggests that it would be advantageous to do run if position otherwise, if position do use , or do run otherwise|a entails that you do jump if position 1 otherwise, if iron do build , or do run if not|a is a tactic where it is good to do build if a x otherwise, if a do jump , or do build as a last resort|b is a strategy where you do find if b is less than y otherwise, if b do run , or do jump if not|when position is not equal to 2 you are able to run until finally a is at most 0|a means that it would be good to do build if a 1 otherwise, if iron do build , or do run as a last resort|a means that it would be good to do run if a is not equal to x otherwise, if position do run , or do use as a last resort|a is a good strategy where you should do find if a is exactly the same as 1 otherwise, if b do jump , or do build as a last resort|a is an approach where you do run if b 2 otherwise, if b do find , or do jump if no other options are possible|b is an approach where you do jump if b otherwise, if position do jump , or do build if no other options are possible|as soon as b is at most 1 you have the choice to find until finally a is smaller than 2|whenever inventory is greater than x you can run until a is less than or equal to y|a means that it would be good to do jump if a y otherwise, if a do jump , or do use if no other options are possible|b is an approach where you do find if iron is exactly the same as y otherwise, if iron do run , or do find if no other options are possible|a suggests that it would be advantageous to do build if position is larger than y otherwise, if a do build , or do find if no other options are possible|whenever inventory is larger than x you can use until finally position is exactly the same as x|a suggests that it would be advantageous to do build if iron 0 otherwise, if b do use , or do jump as a last resort|b suggests that it would be advantageous to do jump if b y otherwise, if iron do find , or do use otherwise|a is an approach where it would be good to do run if b y otherwise, if a do jump , or do jump otherwise|b entails that you do jump if b is not the same as y otherwise, if a do build , or do jump otherwise|a states that you should do find if iron x otherwise, if b do use , or do run if no other options are possible|a is a strategy where you do build if position is greater than 2 otherwise, if b do run , or do jump as a last resort|a states that you should do find if position x , or do run if no other options are possible|b is a strategy where you do jump if a is less than 2 otherwise, if iron do build , or do use if no other options are possible|b states that you should do build if b is exactly the same as 0 , or do jump otherwise|a is a tactic where it is good to do jump if iron is not the same as x otherwise, if b do run , or do run if not|when a is larger than 0 you are able to use until finally a is not the same as y|as soon as a is smaller than 1 you are able to run until position is equal to 1|whenever inventory is exactly the same as 2 you are able to find until finally b is not the same as 2|a is a good strategy where you should do use if b 0 otherwise, if b do build , or do build if not|a is a good strategy where you should do build if b is smaller than 2 otherwise, if iron do jump , or do build otherwise|a suggests that it would be advantageous to do use if a y otherwise, if iron do build , or do run if no other options are possible|if a is not the same as 0 you are able to use until finally inventory is greater than 1|a states that you should do jump if b 1 otherwise, if position do find , or do build as a last resort|as soon as position is less than 1 you have the choice to build until finally a is at least 2|as soon as position is not equal to x you have the choice to jump until finally inventory is less than or equal to 2|b is a tactic where it is good to do use if b is not the same as x otherwise, if iron do build , or do use if no other options are possible|a is a strategy where you do run if iron is greater than y otherwise, if a do use , or do find if no other options are possible|a suggests that it would be advantageous to do build if a is not the same as y otherwise, if b do run , or do find if not|whenever a is at least 2 you are able to jump until finally a is less than or equal to 2|b is a tactic where it is advantageous to do build if b is not equal to 1 , or do jump otherwise|if inventory is not equal to 0 you can find until a is at most 0|a is a tactic where it is advantageous to do build if iron is not the same as 1 , or do use otherwise|a means that it would be good to do build if iron 1 otherwise, if iron do jump , or do find if not|whenever inventory is not equal to 1 you have the choice to find until finally position is less than or equal to y|whenever position is less than or equal to 0 you can jump until inventory is at most 0|a is an approach where you do find if position is equal to x otherwise, if iron do run , or do find if not|a suggests that it would be advantageous to do run if position otherwise, if position do find , or do jump if not|b is a good strategy where you should do find if iron y otherwise, if position do jump , or do build if no other options are possible|if a is less than or equal to 0 you have the choice to run until b is not the same as 0|a is an approach where you do run if b 2 otherwise, if b do use , or do find if no other options are possible|a means that it would be good to do jump if iron|when inventory is at least 1 you can jump until a is not the same as 1|whenever a is less than or equal to 2 you can use until a is exactly the same as y|whenever position is exactly the same as 1 you are able to use until b is at least 1|a states that you should do build if position x otherwise, if iron do jump , or do run if not|as soon as b is at least x you are able to jump until b is greater than or equal to 0|whenever a is at most 2 you can run until b is not the same as 0|a entails that you do find if b is not the same as 0 otherwise, if b do build , or do run otherwise|whenever b is not equal to x you are able to use until b is equal to 1|a suggests that it would be advantageous to do use if a is exactly the same as 0 otherwise, if iron do find , or do find as a last resort|once a is smaller than x you have the option to find until position is equal to y|a is a tactic where it is good to do find if position 2 otherwise, if position do jump , or do jump otherwise|if inventory is at most y you are able to run until finally b is smaller than 0|a is an approach where you do use if iron 2 otherwise, if b do jump , or do jump as a last resort|a is a good strategy where you should do use if a is equal to 1 otherwise, if position do jump , or do build otherwise|once b is at most y you have the option to use until finally b is smaller than 2|a means that it would be good to do find if a 2 otherwise, if iron do use , or do run if no other options are possible|whenever position is larger than 2 you have the choice to build until position is equal to x|a means that it would be good to do use if a is not the same as y otherwise, if b do find , or do jump if not|a is an approach where it would be good to do run if iron is greater than y otherwise, if a do jump , or do run otherwise|a is an approach where it would be good to do jump if b 1 otherwise, if position do build , or do find if no other options are possible|b is a tactic where it is advantageous to do find if a is exactly the same as 0 otherwise, if b do run , or do jump otherwise|a is a strategy where you do run if iron is less than 0 otherwise, if iron do jump , or do run if no other options are possible|when a you are able to build until b is greater than y|a entails that you do run if iron 2 otherwise, if position do find , or do use as a last resort|when position is equal to 0 you can jump until b is greater than 2|once b is smaller than 1 you have the choice to run until finally b is less than 1|a is a tactic where it is good to do find if b 1 otherwise, if b do run , or do use as a last resort|a is a strategy where you do build if iron is not equal to 1 otherwise, if position do use , or do find if not|b is a strategy where you do run if iron is less than x , or do use otherwise|if inventory is greater than x you are able to build until finally position is equal to y|b is an approach where it would be good to do find if iron is greater than y otherwise, if b do build , or do find if no other options are possible|whenever position you have the option to jump until finally a is not equal to 0|if a is not equal to x you can build until finally inventory is greater than 1|a means that it would be good to do run if a is less than 2 otherwise, if b do use , or do run otherwise|whenever b is smaller than 2 you have the choice to run until b is not the same as x|whenever b is at least 2 you can run until b is larger than 0|b entails that you do run if iron y , or do build if not|a suggests that it would be advantageous to do run if a otherwise, if iron do find , or do run as a last resort|a is a good strategy where you should do run if position 1 otherwise, if a do jump , or do build otherwise|b is a tactic where it is advantageous to do build if a is greater than x otherwise, if iron do find , or do jump if no other options are possible|b entails that you do run if iron is not equal to y otherwise, if iron do use , or do build otherwise|b is a strategy where you do build if position is equal to x otherwise, if b do find , or do build if no other options are possible|a states that you should do build if position 1 otherwise, if iron do build , or do run if no other options are possible|once a is exactly the same as y you are able to use until finally a is greater than x|b is an approach where you do find if position is larger than y otherwise, if iron do build , or do use if no other options are possible|as soon as a is larger than 0 you have the choice to find until finally position is exactly the same as 1|b is a strategy where you do run if a is exactly the same as x otherwise, if position do jump , or do build if no other options are possible|if a is greater than or equal to y you have the choice to build until finally inventory is less than y|a entails that you do find if iron is equal to 1 otherwise, if iron do build , or do run otherwise|b is a tactic where it is good to do find if iron is not the same as y otherwise, if iron do build , or do build as a last resort|once inventory is at least x you can run until inventory is less than y|a suggests that it would be advantageous to do use if a is greater than 2 otherwise, if iron do build , or do jump if not|whenever a is at least y you have the choice to use until inventory|once b is not equal to x you have the option to jump until finally position is equal to 0|once b is smaller than y you have the choice to find until position is not equal to 1|b entails that you do run if a is larger than x otherwise, if a do use , or do find as a last resort|b is a tactic where it is good to do build if a is smaller than 0 otherwise, if position do build , or do run if not|as soon as a is greater than x you have the choice to use until position is less than or equal to 1|a entails that you do run if b is greater than 1 otherwise, if iron do jump , or do run as a last resort|whenever b is smaller than y you have the option to find until b is not equal to 0|if inventory is not equal to x you are able to run until b is exactly the same as y|b suggests that it would be advantageous to do jump if iron|b is an approach where it would be good to do run if b x otherwise, if iron do run , or do build as a last resort|a states that you should do run if position is exactly the same as y otherwise, if b do use , or do jump if no other options are possible|a suggests that it would be advantageous to do find if iron y otherwise, if b do jump , or do run if no other options are possible|b is a tactic where it is good to do build if iron x otherwise, if b do jump , or do jump if no other options are possible|a suggests that it would be advantageous to do jump if position is greater than 0 otherwise, if position do build , or do find if no other options are possible|a states that you should do build if iron is not the same as x otherwise, if b do jump , or do use if not|if position is exactly the same as 1 you have the option to use until finally position is at most x|a suggests that it would be advantageous to do build if b 0 otherwise, if position do jump , or do build otherwise|a states that you should do run if iron is greater than 2 , or do jump if not|a entails that you do run if position y otherwise, if b do run , or do jump as a last resort|a means that it would be good to do use if b is smaller than y otherwise, if b do find , or do build if not|if inventory is greater than 1 you have the choice to run until finally b is equal to y|whenever inventory is larger than 1 you are able to build until b is larger than x|when b is exactly the same as x you are able to build until position is not equal to 0|if inventory is equal to y you have the choice to build until finally position is exactly the same as 0|a is a good strategy where you should do find if b 1 otherwise, if b do jump , or do use if not|once b is greater than 2 you have the option to jump until inventory is at least 1|as soon as b is not equal to 1 you have the option to build until finally a is at least x|as soon as inventory is exactly the same as y you are able to use until inventory is larger than x|a is an approach where you do build if iron x otherwise, if position do use , or do use if no other options are possible|a means that it would be good to do build if b is smaller than 2 otherwise, if b do use , or do find as a last resort|b is a tactic where it is good to do find if a is less than y otherwise, if iron do jump , or do run if no other options are possible|when a is equal to 0 you have the choice to use until finally a is equal to y|a is a good strategy where you should do use if position is larger than 2 otherwise, if a do use , or do jump otherwise|if b is less than or equal to y you have the choice to use until finally position is larger than 0|when a is larger than 1 you are able to run until a is equal to 1|when inventory is less than or equal to 1 you can use until finally inventory is less than or equal to 0|whenever position is less than 1 you are able to find until finally position is smaller than 0|b is an approach where you do jump if a y otherwise, if a do jump , or do run otherwise|as soon as inventory is greater than or equal to 1 you can run until finally b is less than 2|a means that it would be good to do find if b otherwise, if position do use , or do run if no other options are possible|as soon as position is equal to y you have the choice to use until b is greater than or equal to 1|b means that it would be good to do use if iron is exactly the same as x otherwise, if position do find , or do build if not|a entails that you do build if a is exactly the same as 2 otherwise, if a do run , or do find if no other options are possible|when inventory is not equal to 2 you can use until inventory|as soon as position is not equal to 2 you have the option to use until a is at most 2|a is a good strategy where you should do find if position is not equal to 0 , or do use if not|once a is less than or equal to x you have the option to find until finally position is larger than 0|a is a good strategy where you should do use if b is greater than x otherwise, if b do find , or do build if no other options are possible|if inventory is greater than 0 you can jump until finally y|whenever inventory is smaller than 0 you have the option to find until finally position is larger than y|once a is not equal to 1 you can build until finally inventory is at least 0|b means that it would be good to do jump if iron y otherwise, if b do run , or do find if not|when b is not the same as x you have the choice to run until b is equal to 1|b entails that you do run if a otherwise, if position do build , or do jump otherwise|once inventory is greater than or equal to 1 you have the option to build until finally a is exactly the same as 2|once b is less than 0 you have the choice to build until a is larger than 2|once position is not equal to y you can jump until inventory is less than y|a is an approach where you do run if position 1 otherwise, if iron do build , or do jump otherwise|b states that you should do run if a is exactly the same as 1 otherwise, if b do run , or do use otherwise|when b is less than or equal to y you are able to build until finally b is at most y|a suggests that it would be advantageous to do jump if position is not the same as 2|b is an approach where it would be good to do use if b is greater than x otherwise, if a do jump , or do find if no other options are possible|when b is less than 2 you can jump until inventory is not the same as 0|once position is at least x you have the choice to use until finally a is at least 1|b means that it would be good to do build if b is exactly the same as x otherwise, if position do use , or do build as a last resort|a is a strategy where you do run if iron is not equal to 1 , or do build otherwise|b is a tactic where it is advantageous to do run if position is not equal to x otherwise, if position do build , or do run if no other options are possible|b is a tactic where it is good to do build if a is exactly the same as y otherwise, if position do run , or do build if no other options are possible|b states that you should do jump if b is less than x otherwise, if position do find , or do run if not|b is an approach where you do jump if position is equal to x otherwise, if a do find , or do run as a last resort|if position is at most y you are able to find until finally a is not the same as x|once position is smaller than 1 you have the choice to jump until finally a is greater than y|a states that you should do jump if a 2 otherwise, if b do jump , or do use if no other options are possible|b is an approach where you do run if b is not the same as x otherwise, if a do run , or do build otherwise|b is a good strategy where you should do find if iron is not the same as x otherwise, if iron do jump , or do build if no other options are possible|a is a good strategy where you should do run if iron is greater than y otherwise, if position do use , or do find as a last resort|once a is less than or equal to 1 you can build until finally b is at least 0|a is a tactic where it is advantageous to do use if iron is equal to 1 otherwise, if a do jump , or do build as a last resort|when inventory is less than or equal to x you can jump until position is greater than or equal to 1|a is a strategy where you do run if b x otherwise, if position do jump , or do use if not|b entails that you do build if iron is not equal to x otherwise, if position do use , or do build if no other options are possible|a suggests that it would be advantageous to do run if position is less than 0 otherwise, if position do build , or do build if not|whenever b is greater than y you have the option to use until finally position is at most 1|a means that it would be good to do build if b 0 , or do run if not|b is a tactic where it is advantageous to do use if iron is not equal to x otherwise, if b do run , or do jump if no other options are possible|if b is at most 1 you are able to find until position is greater than or equal to x|a states that you should do build if b is not the same as 1 otherwise, if b do jump , or do build if no other options are possible|a entails that you do use if a is smaller than 0 otherwise, if b do find , or do find as a last resort|b is an approach where it would be good to do find if b is smaller than y otherwise, if b do run , or do use if not|a entails that you do run if a is equal to y otherwise, if iron do use , or do find otherwise|a is a good strategy where you should do build if b is exactly the same as y otherwise, if position do run , or do jump if no other options are possible|a is a tactic where it is good to do build if a is exactly the same as 1 otherwise, if position do use , or do run otherwise|a is an approach where you do build if iron is equal to 0 otherwise, if b do build , or do build as a last resort|as soon as position is less than or equal to 0 you have the choice to build until b is at most x|a is a good strategy where you should do build if iron y , or do find otherwise|when position is greater than 1 you have the choice to use until finally position is less than or equal to y|a is an approach where you do find if iron is not the same as 2 otherwise, if a do use , or do find as a last resort|as soon as inventory is not the same as y you have the choice to use until b is greater than 0|whenever a you have the option to run until position is greater than or equal to x|when b is not the same as x you can use until inventory is less than or equal to 1|a is a tactic where it is advantageous to do use if a is greater than 2|once position is larger than 2 you have the choice to jump until finally b is greater than or equal to 0|b is a tactic where it is good to do jump if a is smaller than 1 otherwise, if position do build , or do jump as a last resort|b suggests that it would be advantageous to do jump if a is less than 0 otherwise, if b do jump , or do run if no other options are possible|b is a good strategy where you should do build if a is exactly the same as 1 otherwise, if position do build , or do find if not|whenever a is greater than x you are able to build until b is not the same as x|once inventory is at least 1 you can use until position is greater than or equal to 2|a is a tactic where it is advantageous to do find if a is less than 2 otherwise, if b do build , or do use as a last resort|a entails that you do jump if a is exactly the same as 1 otherwise, if position do jump , or do use as a last resort|once inventory is larger than 0 you have the option to jump until position is at most 2|a is a good strategy where you should do use if position y otherwise, if position do use , or do use as a last resort|as soon as position is smaller than 1 you can find until inventory is less than 0|once position is equal to x you can jump until finally inventory is equal to y|as soon as a is exactly the same as x you have the choice to use until inventory is at most 1|as soon as position is exactly the same as 1 you are able to run until finally inventory is less than y|whenever inventory is not equal to x you are able to build until finally inventory is at most x|when inventory is smaller than 2 you can use until position is not the same as x|a states that you should do run if b is smaller than 0 otherwise, if iron do build , or do build if no other options are possible|b suggests that it would be advantageous to do run if a is smaller than y otherwise, if a do find , or do use as a last resort|whenever inventory is greater than or equal to y you have the choice to jump until finally b is exactly the same as 1|whenever a is less than 0 you can build until b is smaller than y|as soon as position is at most 2 you can run until b is greater than 2|when inventory is greater than y you can use until position is exactly the same as x|a is a good strategy where you should do run if b 0 otherwise, if b do build , or do build if no other options are possible|a is a tactic where it is good to do run if position is not equal to x otherwise, if iron do run , or do find as a last resort|b is an approach where you do build if a is not the same as 2 otherwise, if a do run , or do run if no other options are possible|a entails that you do find if iron is not the same as x otherwise, if b do use , or do run as a last resort|a suggests that it would be advantageous to do build if a 0 otherwise, if position do jump , or do find otherwise|a suggests that it would be advantageous to do build if position is greater than 1 otherwise, if position do find , or do run otherwise|if b is exactly the same as y you have the option to run until finally inventory is not equal to y|a is a tactic where it is advantageous to do jump if position is greater than x otherwise, if position do build , or do build as a last resort|once b is at least x you are able to use until finally b is smaller than x|a is a strategy where you do build if a y otherwise, if position do jump , or do build as a last resort|once inventory is not equal to x you can find until position is exactly the same as 2|whenever position is at most 0 you have the option to run until position is at most y|b entails that you do use if a x otherwise, if position do build , or do find as a last resort|b suggests that it would be advantageous to do jump if a x otherwise, if a do use , or do find otherwise|a is an approach where you do find if b is larger than 0 otherwise, if iron do jump , or do jump if not|b is a tactic where it is good to do use if a is not the same as 2 otherwise, if position do use , or do use if no other options are possible|whenever position is exactly the same as 2 you are able to jump until finally position is equal to 0|b is a tactic where it is good to do jump if position is smaller than x otherwise, if iron do run , or do use if not|as soon as b is greater than y you can jump until inventory is at least y|a is an approach where it would be good to do use if position y otherwise, if b do run , or do run if not|b states that you should do run if a is equal to 2 otherwise, if a do jump , or do run as a last resort|b is a tactic where it is advantageous to do find if b is not the same as y otherwise, if b do jump , or do find if no other options are possible|a entails that you do jump if a 1 otherwise, if a do use , or do find if no other options are possible|if b is less than y you have the option to jump until finally position is not equal to y|as soon as position is exactly the same as 1 you have the choice to use until inventory is greater than y|a means that it would be good to do build if position is not equal to 2 otherwise, if b do use , or do build if no other options are possible|a entails that you do jump if position is exactly the same as 1 , or do run if not|b suggests that it would be advantageous to do find if a is not equal to 1 otherwise, if b do build , or do build otherwise|a suggests that it would be advantageous to do run if iron x otherwise, if a do use , or do use otherwise|when a is less than x you can build until finally position is not the same as 0|a is an approach where you do find if b is not equal to 2 otherwise, if a do jump , or do jump if not|whenever b is not equal to x you are able to find until position is exactly the same as 1|if b is less than y you have the option to jump until finally position is at most 1|b is a tactic where it is advantageous to do run if b is smaller than y otherwise, if b do build , or do use if no other options are possible|a entails that you do use if b otherwise, if a do jump , or do run as a last resort|whenever position is greater than 2 you have the option to find until finally a is exactly the same as x|a means that it would be good to do build if b is exactly the same as 2 otherwise, if b do jump , or do use as a last resort|a is an approach where it would be good to do use if a is greater than 1 otherwise, if position do find , or do find otherwise|if position is greater than or equal to 0 you can use until b is larger than 2|a is an approach where you do build if iron is equal to 1 otherwise, if b do run , or do run if no other options are possible|b entails that you do build if position is greater than x otherwise, if b do jump , or do run as a last resort|as soon as a is larger than 0 you can run until a is less than or equal to 2|if position is larger than 2 you have the choice to find until finally b is at least 2|b is an approach where it would be good to do jump if a x otherwise, if b do jump , or do use if no other options are possible|as soon as position is not equal to 0 you have the option to find until finally inventory is less than x|a is a tactic where it is advantageous to do use if position is equal to x otherwise, if b do run , or do find if not|whenever position is at least x you have the choice to run until finally a is smaller than y|a is an approach where you do run if a is larger than 2 otherwise, if a do find , or do use otherwise|when position is at least x you are able to jump until position is smaller than 0|if a is at most 1 you have the option to build until b is exactly the same as y|whenever b is equal to y you have the option to build until finally a|when b is less than 1 you have the option to build until a is at most x|b states that you should do jump if a is not equal to 2 , or do build if not|b is a good strategy where you should do build if position is greater than 0 , or do build if no other options are possible|a states that you should do use if b is not equal to 2 otherwise, if b do jump , or do build otherwise|whenever b is not the same as y you are able to build until inventory is not the same as 0|b means that it would be good to do run if position is larger than x , or do run as a last resort|b suggests that it would be advantageous to do build if a is smaller than 1 otherwise, if a do run , or do run if not|a is a tactic where it is good to do find if a y otherwise, if a do build , or do run if no other options are possible|when inventory is less than x you have the option to run until inventory is less than y|if position is at most 2 you are able to use until finally inventory is greater than or equal to 0|as soon as b you have the option to use until y|as soon as inventory you can find until a is greater than 0|once position is greater than 1 you have the option to jump until b is less than or equal to 0|a means that it would be good to do build if iron is not the same as 0 otherwise, if position do build , or do find otherwise|a states that you should do run if b is not equal to 0 otherwise, if iron do find , or do build as a last resort|a states that you should do build if position is greater than 2 otherwise, if position do build , or do jump if no other options are possible|as soon as b is greater than or equal to x you have the choice to jump until finally position is greater than 0|a is an approach where you do jump if position x otherwise, if position do run , or do jump otherwise|if position is less than y you have the option to use until a is larger than 2|b is an approach where it would be good to do run if b x otherwise, if iron do run , or do jump if not|when inventory is smaller than 0 you have the choice to jump until finally inventory is less than 1|b suggests that it would be advantageous to do run if a x otherwise, if iron do run , or do build as a last resort|when b is not the same as 2 you can use until b is larger than x|a entails that you do use if a x otherwise, if a do run , or do use if no other options are possible|whenever a is smaller than y you have the choice to run until b is greater than x|a suggests that it would be advantageous to do run if iron is larger than 1 otherwise, if position do run , or do build if no other options are possible|if b is less than or equal to x you have the option to find until inventory is smaller than x|a is an approach where it would be good to do build if a 0 otherwise, if position do build , or do find otherwise|if inventory is equal to x you have the choice to run until position is at least x|if a is smaller than y you can build until inventory is at least 2|a states that you should do use if a is larger than 2 otherwise, if iron do build , or do run otherwise|if position is not the same as y you are able to run until finally inventory is larger than 0|a means that it would be good to do use if iron is larger than y otherwise, if iron do jump , or do build if no other options are possible|a is a tactic where it is good to do jump if b is not the same as 1 otherwise, if b do find , or do build as a last resort|as soon as inventory is at most 1 you have the option to use until inventory is not the same as 1|b entails that you do build if a is greater than x otherwise, if position do run , or do find if not|as soon as inventory is exactly the same as 1 you have the option to find until b is larger than x|once inventory is greater than or equal to y you can build until b|once position is at least y you can find until a is larger than 2|a is an approach where it would be good to do run if b otherwise, if a do build , or do build otherwise|a suggests that it would be advantageous to do build if iron is not equal to 0 otherwise, if iron do jump , or do use if not|a is a strategy where you do use if position is exactly the same as 1 otherwise, if iron do run , or do build as a last resort|whenever position is equal to y you are able to find until inventory is equal to 2|a is a tactic where it is advantageous to do find if b is larger than y otherwise, if b do run , or do find as a last resort|a suggests that it would be advantageous to do build if b is not equal to 2 otherwise, if position do find , or do jump if not|whenever position is not equal to y you have the option to build until finally a is greater than or equal to y|if a you have the option to find until inventory is at most 2|a is a tactic where it is good to do use if a 2 otherwise, if a do run , or do jump as a last resort|a entails that you do find if b is larger than 0 otherwise, if iron do use , or do build as a last resort|whenever a is larger than 0 you have the choice to build until finally a is smaller than 2|when b is larger than 2 you can build until b is smaller than 0|a is a tactic where it is good to do find if a 0 otherwise, if a do build , or do use if not|once a is greater than or equal to 1 you are able to use until a is exactly the same as 1|as soon as b is at least 2 you have the option to find until finally b is at most 0|a is a tactic where it is good to do build if position otherwise, if iron do build , or do use otherwise|a is an approach where it would be good to do use if a 2 otherwise, if a do run , or do build as a last resort|once inventory is not the same as 2 you have the choice to build until inventory is larger than 1|a is a strategy where you do jump if position is exactly the same as 2 otherwise, if position do jump , or do find if not|a is a strategy where you do find if b is exactly the same as y , or do use otherwise|if b is larger than 0 you can run until a is not the same as 0|b suggests that it would be advantageous to do use if position is smaller than x otherwise, if position do find , or do build otherwise|a is an approach where it would be good to do use if b is smaller than y otherwise, if position do use , or do build if no other options are possible|b is a good strategy where you should do use if a is less than 2 otherwise, if a do build , or do find otherwise|when position is at most 2 you have the option to use until finally b is at most 1|a is a tactic where it is advantageous to do build if iron is smaller than 1 otherwise, if b do find , or do jump otherwise|once position is less than or equal to x you have the choice to use until finally a is equal to 2|a is an approach where it would be good to do use if a is larger than x otherwise, if a do jump , or do build otherwise|once position is at least y you are able to run until finally inventory is not the same as 1|whenever inventory is less than 2 you are able to find until finally position is not equal to 0|whenever position is greater than or equal to x you have the option to run until finally a is at least 0|a is an approach where it would be good to do build if a is less than 0 otherwise, if a do build , or do find otherwise|when position is less than y you are able to use until finally b is greater than or equal to y|whenever inventory is less than x you have the choice to jump until position is smaller than 0|as soon as b is less than 1 you have the choice to run until a is at most 1|a entails that you do use if a is greater than 0 otherwise, if iron do use , or do run if no other options are possible|a means that it would be good to do run if a is equal to 0 otherwise, if iron do use , or do jump if no other options are possible|b means that it would be good to do jump if a y otherwise, if position do run , or do use if no other options are possible|a entails that you do run if a is not the same as 2 otherwise, if a do run , or do build if not|a is a strategy where you do use if position is not equal to 0 otherwise, if position do build , or do build if not|a is a strategy where you do build if a y otherwise, if a do find , or do use otherwise|if a is greater than or equal to 2 you are able to use until finally position is smaller than x|if position is smaller than 2 you can use until finally b is less than y|when a is not equal to 1 you have the option to build until a is smaller than 1|a is an approach where you do find if iron is smaller than 2 otherwise, if position do use , or do build if no other options are possible|b is a good strategy where you should do use if iron 0 , or do find if no other options are possible|a is a strategy where you do find if b y otherwise, if b do run , or do use as a last resort|a states that you should do find if iron 1 otherwise, if iron do find , or do run if no other options are possible|whenever inventory is not the same as 0 you have the choice to build until a is less than or equal to 1|b is a tactic where it is advantageous to do build if iron is not the same as y otherwise, if iron do jump , or do find otherwise|when b is not the same as 1 you can build until a is greater than or equal to 0|a means that it would be good to do run if b is exactly the same as y otherwise, if position do find , or do jump if no other options are possible|once a is less than or equal to 1 you are able to jump until b is equal to 0|b is an approach where it would be good to do build if position is exactly the same as y otherwise, if iron do use , or do run if no other options are possible|b entails that you do build if a y otherwise, if iron do use , or do jump otherwise|b is a tactic where it is advantageous to do build if iron is exactly the same as x otherwise, if position do use , or do use if not|b is a strategy where you do find if b is less than x otherwise, if a do build , or do build as a last resort|b is an approach where it would be good to do use if iron y otherwise, if iron do jump , or do build if not|as soon as position is greater than or equal to y you have the option to build until position is greater than 1|b is an approach where you do run if a is exactly the same as y otherwise, if position do use , or do find otherwise|a is a tactic where it is good to do run if a 0 otherwise, if position do use , or do use if no other options are possible|if inventory is at most 0 you can build until position is greater than 0|as soon as b is larger than 2 you can find until finally inventory is equal to 1|b states that you should do build if b y otherwise, if a do build , or do use if no other options are possible|whenever a is at most 2 you can run until b is greater than or equal to x|when inventory is exactly the same as 0 you are able to use until inventory is equal to x|a means that it would be good to do find if iron is not equal to x otherwise, if a do find , or do find as a last resort|a is a tactic where it is advantageous to do jump if b is larger than 0 otherwise, if position do jump , or do build otherwise|a is a tactic where it is advantageous to do build if position is exactly the same as 1 otherwise, if position do jump , or do find if no other options are possible|b is an approach where you do run if iron is larger than y otherwise, if position do use , or do find otherwise|b is an approach where it would be good to do jump if iron is less than x otherwise, if position do run , or do jump otherwise|once position is less than or equal to y you can build until b is greater than or equal to x|a means that it would be good to do find if a is equal to 0 otherwise, if a do build , or do use if no other options are possible|whenever inventory is less than or equal to y you have the choice to find until position is greater than or equal to 0|a is a tactic where it is advantageous to do find if b otherwise, if iron do use , or do run otherwise|a is an approach where you do use if position 0 otherwise, if a do find , or do use if no other options are possible|when a is at least 2 you are able to use until finally a is not equal to x|b states that you should do build if iron 2 , or do find if no other options are possible|b means that it would be good to do build if b 0 , or do build otherwise|when b is greater than or equal to 2 you are able to build until position is larger than x|b suggests that it would be advantageous to do build if iron y otherwise, if b do build , or do find otherwise|a is a tactic where it is good to do jump if b is not the same as 0 otherwise, if b do use , or do find otherwise|a entails that you do build if a is not equal to 2 otherwise, if b do run , or do run if no other options are possible|once inventory is exactly the same as 1 you are able to use until position is not the same as 0|b is a tactic where it is advantageous to do run if b is not equal to y otherwise, if b do find , or do run otherwise|a entails that you do build if position y otherwise, if a do find , or do build as a last resort|a suggests that it would be advantageous to do jump if iron is larger than 0 otherwise, if a do build , or do jump as a last resort|as soon as position is exactly the same as y you are able to use until finally b is exactly the same as 0|if a is at least 1 you are able to jump until finally a is less than or equal to x|a is a strategy where you do use if b is equal to 0 otherwise, if position do run , or do use if no other options are possible|b suggests that it would be advantageous to do use if a is not the same as 0 otherwise, if iron do jump , or do use if no other options are possible|a suggests that it would be advantageous to do build if b is exactly the same as 0 otherwise, if position do find , or do jump if no other options are possible|if inventory is at most y you have the option to jump until finally position is smaller than 1|b is a good strategy where you should do find if position is smaller than x otherwise, if a do jump , or do find otherwise|once inventory is at least 2 you can find until finally b is less than or equal to 0|a is a tactic where it is advantageous to do run if position is less than 2 otherwise, if iron do build , or do use as a last resort|if position is less than or equal to 0 you have the choice to find until finally position is less than or equal to x|a is an approach where it would be good to do jump if iron is not equal to 2|once position is equal to 2 you have the option to find until b is smaller than x|if a is equal to 1 you are able to jump until finally inventory is at least 1|a means that it would be good to do find if iron 1 otherwise, if position do find , or do use if not|a is a strategy where you do use if iron is less than x otherwise, if position do build , or do jump as a last resort|whenever inventory is greater than y you can build until inventory is less than y|a suggests that it would be advantageous to do run if position is not the same as 2 otherwise, if b do use , or do jump as a last resort|a is an approach where you do use if b is not the same as x , or do build if not|if b is less than or equal to 2 you have the choice to use until position is not equal to x|whenever position is less than or equal to 1 you are able to find until inventory is exactly the same as x|whenever position is exactly the same as 1 you have the option to run until inventory|b states that you should do find if position is not the same as y otherwise, if iron do run , or do jump as a last resort|whenever position is smaller than x you are able to build until finally inventory is equal to x|a entails that you do run if position is greater than 2 otherwise, if iron do jump , or do run as a last resort|a is a good strategy where you should do jump if position is larger than 2 otherwise, if position do jump , or do build as a last resort|b is an approach where you do build if iron 2 , or do jump if not|a entails that you do find if b is less than 0 otherwise, if position do build , or do find otherwise|as soon as inventory is exactly the same as 1 you can find until b is larger than 2|a is an approach where it would be good to do find if a is not the same as 0 otherwise, if b do find , or do build as a last resort|as soon as a is exactly the same as 0 you have the choice to use until position is exactly the same as 0|a is a good strategy where you should do use if b y otherwise, if a do find , or do use as a last resort|when inventory is not equal to x you can find until finally a is equal to y|b is a good strategy where you should do build if a is equal to 0 otherwise, if b do find , or do jump if not|a is a tactic where it is advantageous to do run if a is not the same as 2 otherwise, if a do use , or do run otherwise|whenever x you have the choice to find until finally position is less than or equal to y|if a is greater than or equal to 1 you can find until position is not equal to x|b is a strategy where you do use if a otherwise, if position do find , or do build otherwise|b states that you should do run if a is less than y otherwise, if position do build , or do find if no other options are possible|a is a strategy where you do use if iron is not equal to y otherwise, if iron do build , or do build if no other options are possible|a suggests that it would be advantageous to do jump if a 0 otherwise, if a do run , or do find as a last resort|a means that it would be good to do use if position 0 otherwise, if b do run , or do build as a last resort|as soon as b is not equal to x you can run until a is not the same as x|a is a strategy where you do build if b 1 otherwise, if iron do run , or do find otherwise|a states that you should do jump if a 0 , or do run if no other options are possible|a is a strategy where you do run if iron x otherwise, if a do build , or do use otherwise|a is a good strategy where you should do run if b is less than x otherwise, if position do use , or do jump otherwise|when a is not the same as x you are able to run until finally inventory is larger than 2|a means that it would be good to do find if iron 0 otherwise, if iron do use , or do jump as a last resort|a is a good strategy where you should do build if a is greater than 0 , or do build if not|a is a tactic where it is advantageous to do jump if b is greater than y otherwise, if position do build , or do jump as a last resort|a means that it would be good to do run if position is greater than x otherwise, if position do jump , or do jump as a last resort|once position is not the same as 2 you have the choice to use until finally position is at most y|if a is equal to 0 you can jump until inventory is at most x|a means that it would be good to do run if b x otherwise, if iron do run , or do use if not|whenever inventory is larger than x you have the choice to jump until finally position is exactly the same as 1|as soon as position is not equal to 0 you can build until finally a is less than 1|as soon as b is not equal to 1 you can jump until finally a is larger than y|once b is not equal to y you have the option to use until finally a is less than or equal to 0|a is a tactic where it is advantageous to do build if position is equal to 2 otherwise, if position do build , or do use otherwise|whenever position is less than 1 you have the option to run until a is not equal to 0|a is an approach where you do run if iron is equal to x otherwise, if a do find , or do run as a last resort|once position is at least x you have the choice to find until finally inventory is smaller than x|a states that you should do jump if position 2 otherwise, if a do build , or do use if not|b is an approach where you do build if b x otherwise, if a do build , or do jump otherwise|when inventory is at least x you have the choice to build until inventory is larger than 2|when b is not equal to y you are able to run until finally a is greater than y|when position is less than or equal to x you have the choice to build until inventory is less than x|a is a strategy where you do use if b otherwise, if position do use , or do find if not|once b is equal to x you can jump until finally b is equal to 1|a is an approach where you do jump if iron is larger than y otherwise, if a do find , or do use otherwise|a entails that you do jump if a x otherwise, if iron do build , or do build otherwise|as soon as inventory is exactly the same as 1 you can find until finally b is greater than or equal to x|b is an approach where it would be good to do run if position otherwise, if iron do find , or do run if not|once inventory is less than y you have the choice to run until finally b is greater than y|when inventory is smaller than x you are able to use until b is at most 0|a is a good strategy where you should do find if b 0 otherwise, if b do jump , or do build if not|a suggests that it would be advantageous to do run if iron is not the same as 2 otherwise, if a do run , or do jump as a last resort|when b is not equal to 1 you have the option to run until inventory is at most y|a suggests that it would be advantageous to do build if a is less than y otherwise, if b do build , or do find as a last resort|whenever position is smaller than 2 you are able to find until b is larger than y|b is a tactic where it is good to do jump if a is equal to 1 , or do find otherwise|when a you can jump until a is not equal to 1|when b is not the same as 2 you can use until finally a is equal to x|when position is greater than or equal to 0 you are able to run until b is less than or equal to x|if b is smaller than 2 you are able to run until finally a is not the same as x|if a is at least y you have the choice to build until finally position is greater than 0|a entails that you do find if iron is smaller than x otherwise, if b do run , or do run if no other options are possible|a means that it would be good to do use if position is larger than 2 otherwise, if iron do run , or do use as a last resort|b is a strategy where you do use if a is greater than y otherwise, if position do build , or do run otherwise|a is a tactic where it is advantageous to do jump if position otherwise, if position do build , or do find if not|a is a tactic where it is good to do jump if b is smaller than x otherwise, if position do build , or do build if not|a suggests that it would be advantageous to do build if iron is smaller than x otherwise, if a do run , or do run if no other options are possible|once inventory is at least y you have the option to build until finally a|a means that it would be good to do build if a is larger than x otherwise, if a do use , or do build if not|a means that it would be good to do find if b 0 otherwise, if position do jump , or do run if not|a is an approach where it would be good to do build if a is less than 2 otherwise, if iron do jump , or do build otherwise|b is a good strategy where you should do jump if a is less than 1 , or do jump as a last resort|as soon as inventory is greater than or equal to 2 you are able to find until inventory is exactly the same as 1|b is a strategy where you do jump if a is less than 0 otherwise, if position do find , or do jump otherwise|a is a good strategy where you should do build if position is greater than y otherwise, if b do find , or do jump otherwise|as soon as inventory is greater than or equal to x you have the choice to find until finally inventory is greater than or equal to 0|when position is at least y you have the option to jump until finally b is equal to 0|if inventory is less than x you have the option to run until a is exactly the same as y|a means that it would be good to do jump if a y otherwise, if position do use , or do build if not|a entails that you do run if position is greater than x , or do jump if no other options are possible|when position is not the same as x you have the choice to find until b is less than x|b states that you should do build if b y otherwise, if b do jump , or do use if no other options are possible|if position is not the same as x you are able to use until inventory is greater than y|a states that you should do build if position is less than 2 , or do run otherwise|b is an approach where it would be good to do jump if b is equal to y otherwise, if position do build , or do build if not|if inventory is at most y you have the option to jump until inventory is greater than 1|as soon as position is less than 2 you have the choice to use until finally b is not the same as 0|a is a good strategy where you should do find if b is not equal to x otherwise, if a do run , or do find if not|whenever b is less than or equal to 0 you have the choice to run until inventory is at least y|a means that it would be good to do jump if iron 2 otherwise, if iron do run , or do build as a last resort|whenever a is not equal to 1 you are able to find until inventory is less than or equal to 2|a is a tactic where it is good to do run if iron 0 , or do jump as a last resort|b is a tactic where it is good to do use if b is equal to y otherwise, if a do use , or do run if no other options are possible|b is a strategy where you do use if a is exactly the same as 1 otherwise, if iron do run , or do run otherwise|a is a strategy where you do build if b is smaller than x otherwise, if iron do use , or do jump otherwise|when b is exactly the same as x you are able to build until finally a is at most 2|a suggests that it would be advantageous to do use if b 0 otherwise, if position do find , or do find otherwise|if a is exactly the same as 0 you have the choice to jump until b is greater than or equal to x|a is a tactic where it is good to do jump if iron is exactly the same as x otherwise, if a do build , or do build as a last resort|a entails that you do build if position is greater than 2 otherwise, if a do find , or do run as a last resort|once b you can run until position is greater than x|as soon as inventory is less than 0 you have the option to use until inventory is less than or equal to y|a is a good strategy where you should do jump if b is not the same as y , or do use otherwise|a is a good strategy where you should do find if iron is smaller than x , or do use otherwise|a is a good strategy where you should do use if b is less than y otherwise, if b do find , or do use otherwise|when b is exactly the same as 2 you can use until finally inventory is less than 1|a is an approach where you do jump if b is less than y otherwise, if a do use , or do find if not|a means that it would be good to do jump if position is exactly the same as x otherwise, if a do find , or do run as a last resort|a is a good strategy where you should do find if a is equal to x otherwise, if a do run , or do jump otherwise|a suggests that it would be advantageous to do build if iron is larger than x , or do jump if not|a states that you should do build if b is not equal to 1 otherwise, if iron do jump , or do jump if not|a is an approach where you do run if position is larger than y otherwise, if a do find , or do jump as a last resort|a is an approach where you do jump if position is larger than 2 otherwise, if iron do run , or do use as a last resort|if position is greater than or equal to 1 you can build until b is smaller than 0|a is a tactic where it is advantageous to do build if position is larger than x otherwise, if position do run , or do run otherwise|a is a good strategy where you should do jump if position 1 otherwise, if position do run , or do use if not|b states that you should do jump if position is greater than y otherwise, if a do run , or do jump if no other options are possible|b suggests that it would be advantageous to do run if b is less than x otherwise, if position do run , or do build as a last resort|a is an approach where it would be good to do run if a is not the same as 0 otherwise, if b do build , or do run as a last resort|a suggests that it would be advantageous to do run if b x otherwise, if position do jump , or do build otherwise|a entails that you do run if iron is larger than 1 otherwise, if iron do find , or do use as a last resort|a is an approach where it would be good to do find if position is smaller than 0 otherwise, if a do jump , or do use if not|whenever b is exactly the same as 0 you have the choice to find until position is greater than x|a means that it would be good to do build if a is less than 0 otherwise, if a do jump , or do build if not|a entails that you do find if iron 0 otherwise, if a do find , or do build otherwise|a suggests that it would be advantageous to do build if position 2 otherwise, if b do run , or do use if not|whenever inventory is at least y you have the choice to jump until position is greater than or equal to 0|a states that you should do find if b is equal to 0 otherwise, if position do jump , or do run if no other options are possible|when a is less than or equal to 2 you have the option to find until a is greater than y|a entails that you do use if a is exactly the same as x otherwise, if b do build , or do find if not|b is a good strategy where you should do jump if iron y otherwise, if position do jump , or do use otherwise|b suggests that it would be advantageous to do use if a is not equal to 2 otherwise, if iron do jump , or do find if not|a is an approach where you do find if b is not equal to 1 otherwise, if iron do use , or do run if no other options are possible|whenever position is exactly the same as 2 you can use until finally inventory is equal to 2|a means that it would be good to do jump if iron x otherwise, if iron do build , or do jump if no other options are possible|b means that it would be good to do build if a is exactly the same as 1 otherwise, if b do use , or do build if not|a is an approach where it would be good to do jump if a x otherwise, if position do use , or do run if not|if a is not the same as x you have the option to run until finally a is not the same as 1|b states that you should do jump if a is less than 2 otherwise, if b do find , or do run if no other options are possible|b is an approach where it would be good to do jump if position is greater than y otherwise, if b do find , or do run otherwise|b is an approach where you do build if a is less than 0 otherwise, if a do find , or do build if no other options are possible|once a is less than y you can find until inventory is equal to 1|once a is not equal to x you are able to build until finally b is greater than 1|if b is larger than 2 you have the option to find until finally inventory is smaller than x|whenever a is at least y you have the choice to find until finally a is less than or equal to y|b suggests that it would be advantageous to do build if a otherwise, if iron do use , or do find if not|whenever position is greater than 2 you can run until inventory is at least 1|b is a strategy where you do jump if iron is less than x otherwise, if a do jump , or do build if no other options are possible|a states that you should do jump if a is not equal to x otherwise, if a do build , or do jump if no other options are possible|a states that you should do use if b x otherwise, if iron do build , or do use as a last resort|if b is not the same as y you are able to run until finally inventory is smaller than 2|b is a strategy where you do build if a is not equal to 2 otherwise, if position do use , or do find otherwise|b is a good strategy where you should do build if position is exactly the same as y otherwise, if iron do use , or do jump as a last resort|a is an approach where you do use if a y otherwise, if position do run , or do jump if no other options are possible|once x you have the choice to build until finally inventory is less than or equal to y|once position is exactly the same as 1 you have the choice to jump until a is not equal to 2|as soon as b is at least 2 you have the choice to run until position is not equal to 1|whenever inventory is not the same as 2 you have the option to run until a is equal to 2|if inventory is greater than 0 you can use until finally inventory is at most 0|whenever b you have the choice to use until inventory is at most y|when a is less than or equal to x you have the option to find until finally inventory is not the same as 0|when position is equal to 2 you can jump until finally b is greater than y|if position is less than or equal to x you have the choice to jump until position is not equal to 0|a means that it would be good to do use if a is exactly the same as 0 otherwise, if a do run , or do use if no other options are possible|b states that you should do build if b is smaller than 2 , or do run if not|a is a good strategy where you should do use if iron is greater than 1 otherwise, if b do find , or do build if no other options are possible|if x you are able to use until b is equal to 0|b is an approach where it would be good to do run if position is less than y otherwise, if position do use , or do run if no other options are possible|as soon as inventory is less than 1 you can build until finally position is exactly the same as y|b is an approach where you do jump if a x otherwise, if a do find , or do use if no other options are possible|b is a tactic where it is advantageous to do use if position x otherwise, if b do use , or do run as a last resort|a means that it would be good to do find if b 0 otherwise, if b do use , or do use if no other options are possible|a is an approach where it would be good to do run if a is less than y otherwise, if b do jump , or do build if not|b is a tactic where it is good to do find if position is exactly the same as x otherwise, if position do build , or do jump as a last resort|whenever a is equal to 0 you have the option to run until b is greater than or equal to 0|a means that it would be good to do jump if b is greater than x otherwise, if position do run , or do build if not|if b is greater than or equal to x you have the choice to jump until finally a is larger than y|a is a strategy where you do find if a is greater than 1 otherwise, if iron do build , or do jump if no other options are possible|a means that it would be good to do run if iron is equal to 0 otherwise, if position do find , or do build as a last resort|whenever inventory is greater than y you can run until a is not the same as 1|b means that it would be good to do use if position is larger than x otherwise, if position do jump , or do jump otherwise|a states that you should do run if a is larger than y otherwise, if iron do jump , or do run if not|b is an approach where it would be good to do run if a y otherwise, if b do find , or do run if no other options are possible|if b is at most 1 you have the option to build until finally inventory is less than or equal to 1|as soon as position is smaller than 0 you are able to build until position is at most y|a is an approach where you do use if b is not the same as x otherwise, if b do run , or do find otherwise|a is a tactic where it is good to do find if b is smaller than 0 otherwise, if position do find , or do find if not|a means that it would be good to do find if position 1 otherwise, if position do jump , or do jump as a last resort|a suggests that it would be advantageous to do build if a is not equal to 1 otherwise, if a do use , or do run otherwise|a is an approach where you do use if iron is greater than 2 otherwise, if a do use , or do find if no other options are possible|once position is not the same as 1 you are able to run until finally inventory is not equal to 0|if b is less than x you can use until position is not equal to y|b is an approach where it would be good to do find if position x otherwise, if position do use , or do run otherwise|b is a good strategy where you should do use if b otherwise, if position do build , or do run if no other options are possible|a is a tactic where it is advantageous to do use if iron is larger than x , or do use if not|if position is larger than 1 you have the choice to build until b is not the same as 0|if position is smaller than y you have the option to use until inventory is less than 2|as soon as inventory is at most x you are able to run until finally b is equal to 1|a is a tactic where it is advantageous to do jump if iron is exactly the same as 1 otherwise, if iron do jump , or do build otherwise|b entails that you do run if b 1 , or do run otherwise|a is a tactic where it is advantageous to do use if iron is smaller than 2 otherwise, if iron do build , or do build if no other options are possible|once b is less than x you have the option to find until finally a is not equal to 2|a states that you should do use if position x otherwise, if iron do build , or do use if no other options are possible|as soon as inventory is equal to y you have the option to use until position is at most 0|b is a good strategy where you should do use if a is less than y otherwise, if b do jump , or do find as a last resort|a suggests that it would be advantageous to do run if b 0 otherwise, if iron do jump , or do jump if not|once position is not equal to 1 you are able to jump until finally inventory is smaller than y|a is an approach where you do jump if b is not equal to y otherwise, if position do build , or do jump if no other options are possible|when a is less than 2 you can find until finally inventory is not equal to 1|a is a tactic where it is advantageous to do use if b is less than 0 otherwise, if iron do build , or do build if no other options are possible|as soon as inventory is less than 0 you have the option to find until inventory is not the same as x|a means that it would be good to do run if position x , or do jump otherwise|a is an approach where you do jump if b is less than 2 otherwise, if iron do run , or do find if not|b is a tactic where it is good to do run if iron is smaller than y , or do find otherwise|as soon as b is at least 0 you are able to find until a is greater than or equal to 2|as soon as inventory is larger than y you have the choice to run until finally a is greater than or equal to 0|b is an approach where you do find if b is not equal to y otherwise, if a do build , or do use as a last resort|whenever inventory is larger than x you are able to jump until b is at least 1|a is a strategy where you do run if position is exactly the same as y otherwise, if position do use , or do use otherwise|a is a strategy where you do build if a is smaller than 2 otherwise, if position do build , or do build if not|a means that it would be good to do jump if iron is not the same as 2 otherwise, if iron do run , or do use as a last resort|a is a tactic where it is good to do run if iron is exactly the same as 1 otherwise, if iron do use , or do use if not|a means that it would be good to do use if position is exactly the same as 0 otherwise, if position do run , or do jump as a last resort|a means that it would be good to do jump if b is smaller than 1 otherwise, if b do run , or do run otherwise|as soon as position is not the same as 0 you have the option to use until finally a is smaller than 1|when a is less than or equal to y you have the choice to use until inventory is smaller than 1|once b is greater than x you are able to run until finally inventory is less than 2|b suggests that it would be advantageous to do build if iron is exactly the same as y otherwise, if iron do use , or do use as a last resort|b states that you should do build if a x otherwise, if b do jump , or do use otherwise|whenever a is not the same as 2 you have the option to build until position is not the same as 0|when a is at most x you have the choice to find until finally position is smaller than 1|if a is exactly the same as x you are able to build until finally inventory is at most x|a states that you should do use if a is exactly the same as 1 otherwise, if b do build , or do jump if no other options are possible|b means that it would be good to do use if position is not the same as y otherwise, if position do jump , or do find otherwise|a suggests that it would be advantageous to do use if iron 0 otherwise, if iron do use , or do build if no other options are possible|whenever a is larger than 1 you have the choice to find until finally a is at most x|if inventory is equal to x you have the choice to find until a is at least x|whenever a is at most 2 you can jump until b is greater than 1|b suggests that it would be advantageous to do use if b x otherwise, if position do build , or do build if no other options are possible|when position is equal to 0 you have the option to run until finally a is greater than 2|b suggests that it would be advantageous to do jump if b x otherwise, if a do find , or do use otherwise|a suggests that it would be advantageous to do jump if b is greater than 1 otherwise, if b do find , or do use as a last resort|a suggests that it would be advantageous to do jump if a y otherwise, if iron do jump , or do jump if not|a is a good strategy where you should do find if iron 2 otherwise, if a do use , or do find if not|when inventory is greater than 0 you are able to find until finally position is not the same as 1|a is a tactic where it is good to do jump if b is not equal to 2 otherwise, if a do build , or do build if no other options are possible|if b is at least 2 you can run until finally b is greater than x|b means that it would be good to do build if a is equal to x otherwise, if b do jump , or do use if no other options are possible|b is a strategy where you do jump if a is larger than x otherwise, if iron do jump , or do run if no other options are possible|as soon as b is at least 2 you have the option to build until position is greater than 1|a is a tactic where it is good to do find if a is exactly the same as x otherwise, if position do jump , or do jump if not|b is a tactic where it is good to do jump if a x otherwise, if iron do run , or do use if not|b means that it would be good to do use if a x , or do find if not|a means that it would be good to do build if b otherwise, if b do jump , or do use otherwise|b is an approach where you do build if b otherwise, if a do use , or do run otherwise|whenever a is not equal to 0 you are able to find until finally position is greater than 0|once a is equal to 1 you have the option to build until position is smaller than x|a means that it would be good to do use if b is not the same as 2 otherwise, if iron do run , or do run otherwise|once inventory is at least x you have the option to jump until finally b is exactly the same as 0|a entails that you do use if b is greater than 0 otherwise, if b do use , or do find as a last resort|whenever b is not equal to 2 you have the choice to run until a is larger than 2|as soon as b is larger than 1 you have the option to jump until finally position is less than 1|a means that it would be good to do use if b is larger than 2 otherwise, if position do jump , or do jump if no other options are possible|b is a tactic where it is advantageous to do run if iron is larger than y otherwise, if position do run , or do jump if not|b is a tactic where it is good to do run if b y otherwise, if b do use , or do run as a last resort|b is an approach where you do find if b x otherwise, if position do jump , or do build if no other options are possible|whenever inventory is greater than or equal to x you have the choice to build until inventory is exactly the same as 0|if b is less than or equal to 0 you have the choice to build until inventory is not equal to 0|if b is less than 0 you can build until finally position is greater than y|a is a strategy where you do jump if a 0 otherwise, if b do jump , or do build if not|as soon as a you can jump until finally a is larger than 2|a means that it would be good to do find if b 0 otherwise, if b do build , or do find if not|whenever inventory is equal to x you have the option to build until finally b is less than or equal to 0|b is a good strategy where you should do use if position is not the same as y otherwise, if a do use , or do jump if no other options are possible|whenever position is not equal to 1 you can jump until inventory is larger than 1|if a is not equal to 1 you have the choice to run until finally a is larger than y|b is an approach where it would be good to do find if iron x otherwise, if iron do build , or do find if not|a means that it would be good to do build if a is not equal to 2 otherwise, if b do find , or do use if no other options are possible|as soon as position is larger than x you are able to jump until a is exactly the same as 0|whenever a is greater than or equal to y you can find until finally a is larger than x|a is an approach where it would be good to do run if iron 0 otherwise, if position do use , or do use if not|b is an approach where you do run if a is greater than x otherwise, if iron do use , or do run otherwise|a means that it would be good to do find if b is larger than y otherwise, if iron do run , or do run otherwise|as soon as a is exactly the same as y you are able to find until b is larger than y|as soon as inventory is less than or equal to y you can build until position is less than or equal to 2|when inventory is greater than or equal to 1 you have the option to build until finally inventory is greater than or equal to x|as soon as b is greater than or equal to y you can jump until finally inventory is less than x|when inventory is not equal to y you are able to build until inventory is less than or equal to x|b is an approach where it would be good to do use if b is exactly the same as y otherwise, if b do jump , or do jump if no other options are possible|b is a good strategy where you should do jump if a is smaller than x otherwise, if position do build , or do jump as a last resort|if a is greater than 0 you can build until a is at least 0|a is an approach where you do build if a is greater than x otherwise, if iron do build , or do find otherwise|as soon as b is smaller than 2 you have the choice to find until y|b is an approach where it would be good to do jump if a is greater than y otherwise, if position do jump , or do find if no other options are possible|a is a tactic where it is advantageous to do jump if iron is larger than 1 otherwise, if iron do use , or do build otherwise|if inventory is greater than 2 you have the choice to build until finally position is at most 0|a is a strategy where you do build if position is equal to 0 otherwise, if b do build , or do find otherwise|whenever position is smaller than y you have the option to find until finally inventory is less than x|b entails that you do run if position x otherwise, if position do find , or do jump if no other options are possible|a entails that you do find if iron x otherwise, if a do run , or do use if no other options are possible|once position is not the same as y you can use until b is at least 0|b is an approach where you do build if position y otherwise, if b do use , or do jump if no other options are possible|whenever a is at most 0 you have the option to build until inventory is smaller than 1|a is an approach where you do run if b 2 otherwise, if iron do run , or do run if no other options are possible|a is a tactic where it is good to do jump if iron is greater than x otherwise, if iron do find , or do build if no other options are possible|b suggests that it would be advantageous to do find if iron y otherwise, if position do run , or do use as a last resort|when inventory is equal to x you have the choice to jump until finally inventory is exactly the same as 2|if position is greater than 0 you have the choice to use until inventory is smaller than 2|as soon as b is less than or equal to y you have the option to build until finally inventory is at most x|when b is at most 2 you have the option to run until position is less than or equal to 1|b is a strategy where you do jump if position is greater than x otherwise, if a do use , or do build otherwise|as soon as a is not the same as 2 you are able to use until b is less than or equal to x|a suggests that it would be advantageous to do build if a is larger than 0 otherwise, if a do use , or do build as a last resort|b suggests that it would be advantageous to do build if a is exactly the same as x otherwise, if position do build , or do find as a last resort|a is an approach where you do jump if a|b states that you should do use if b x otherwise, if position do use , or do use if not|as soon as position is exactly the same as x you are able to use until b is equal to y|once a is at least 0 you can use until finally b is not the same as y|whenever position is at most 1 you have the choice to use until a is greater than or equal to 2|as soon as inventory is not the same as 1 you have the option to jump until finally b is at least 2|a is a good strategy where you should do use if b y otherwise, if b do run , or do find otherwise|a suggests that it would be advantageous to do find if position 0 otherwise, if position do build , or do use if no other options are possible|a means that it would be good to do jump if position y otherwise, if a do use , or do build if not|as soon as inventory is less than 2 you can use until finally b is equal to x|a entails that you do run if iron is less than 1 otherwise, if b do run , or do find if no other options are possible|a is a tactic where it is advantageous to do build if b is larger than 2 otherwise, if a do jump , or do find as a last resort|b is an approach where you do jump if a x otherwise, if position do jump , or do jump if not|a entails that you do jump if b 2 otherwise, if b do find , or do find as a last resort|if a is at least x you are able to use until finally inventory is not the same as y|a suggests that it would be advantageous to do run if iron is not the same as y otherwise, if position do jump , or do find as a last resort|a is a tactic where it is advantageous to do build if iron is equal to y otherwise, if b do run , or do run if not|a is an approach where it would be good to do run if iron is larger than 1 otherwise, if iron do run , or do use if not|a is a good strategy where you should do jump if a y otherwise, if b do build , or do find as a last resort|a is a tactic where it is good to do find if iron y otherwise, if iron do use , or do run as a last resort|b is a tactic where it is advantageous to do find if a is not the same as 0 otherwise, if iron do use , or do build as a last resort|b is an approach where you do run if a is smaller than 2 otherwise, if iron do use , or do build if no other options are possible|if b is greater than or equal to y you have the choice to build until finally position is greater than 2|a means that it would be good to do run if a is less than 0 otherwise, if a do run , or do build otherwise|a states that you should do use if iron is not equal to 1 otherwise, if iron do run , or do find as a last resort|a states that you should do run if position y otherwise, if position do jump , or do find if not|when inventory is greater than 1 you have the option to run until finally b is smaller than 1|if b is exactly the same as y you can jump until position is equal to 0|a suggests that it would be advantageous to do run if b 1 otherwise, if a do run , or do build if not|once inventory is not the same as y you are able to use until b is smaller than x|b means that it would be good to do use if position is larger than y otherwise, if a do use , or do jump otherwise|b is an approach where you do run if b y otherwise, if position do use , or do jump if not|b is an approach where you do use if a is not equal to 1 otherwise, if position do find , or do use if not|b is an approach where you do jump if iron is not equal to x otherwise, if b do find , or do find if no other options are possible|b is a strategy where you do build if position x otherwise, if iron do build , or do find if no other options are possible|b is an approach where you do use if iron is less than y otherwise, if position do run , or do run otherwise|a is a strategy where you do find if iron is less than 1 otherwise, if iron do use , or do run if not|a is a tactic where it is good to do find if position is larger than y otherwise, if position do find , or do use otherwise|if b is exactly the same as 0 you have the choice to jump until finally b is equal to 1|once b is at least x you can jump until a is greater than or equal to x|once b is at most 1 you have the option to use until b is smaller than 2|when a is exactly the same as 2 you can run until b is exactly the same as 2|as soon as b is greater than 0 you have the choice to use until b is at least 1|once inventory is exactly the same as y you are able to find until finally position is less than or equal to 0|a is an approach where you do run if a 0 otherwise, if iron do build , or do run if no other options are possible|a entails that you do find if a is not equal to x otherwise, if b do find , or do build if no other options are possible|when position is larger than 2 you have the choice to find until b is greater than y|b means that it would be good to do run if a x otherwise, if b do use , or do use as a last resort|b is an approach where you do find if iron is larger than y otherwise, if position do run , or do find otherwise|b suggests that it would be advantageous to do use if iron y otherwise, if b do run , or do find if not|b is a tactic where it is good to do use if b otherwise, if iron do jump , or do run otherwise|a entails that you do find if iron 0 otherwise, if position do run , or do jump if no other options are possible|a is a good strategy where you should do use if a otherwise, if iron do build , or do use if no other options are possible|when inventory is equal to y you are able to jump until finally b is at least 1|whenever b is at most 2 you can use until inventory is at least 1|a states that you should do find if b is larger than 1 , or do build otherwise|a means that it would be good to do run if a is less than y , or do find as a last resort|a states that you should do jump if iron is smaller than 0 otherwise, if a do jump , or do run otherwise|a entails that you do run if position x otherwise, if iron do jump , or do run if not|whenever b is less than 0 you are able to build until finally b is greater than x|as soon as inventory is exactly the same as x you have the choice to jump until finally position is at least 1|if b is not the same as 0 you are able to build until finally position is exactly the same as 1|as soon as b is less than 0 you have the choice to run until b is not equal to 1|a entails that you do jump if b otherwise, if b do run , or do use if not|once a is larger than 1 you are able to build until b is less than or equal to 0|a is an approach where it would be good to do run if b is not the same as 1 , or do build if no other options are possible|a is a tactic where it is good to do jump if position is exactly the same as 2 otherwise, if a do jump , or do use if no other options are possible|as soon as position is less than or equal to x you can jump until finally b is equal to 0|b entails that you do jump if a is greater than y otherwise, if a do build , or do jump if no other options are possible|if inventory is equal to 0 you are able to jump until finally inventory is exactly the same as 1|if b is exactly the same as 2 you can use until finally a is greater than y|a is a strategy where you do find if iron is equal to 0 otherwise, if position do jump , or do jump if no other options are possible|a means that it would be good to do run if iron is exactly the same as 0 otherwise, if position do run , or do use as a last resort|a is a tactic where it is advantageous to do jump if iron is equal to 0 otherwise, if b do build , or do run if not|when inventory is less than y you have the choice to run until finally a|a suggests that it would be advantageous to do build if a is smaller than x otherwise, if iron do find , or do use as a last resort|if a you have the choice to build until a is larger than 0|if position is less than or equal to 0 you have the choice to build until finally b is smaller than 0|b states that you should do run if b is larger than y otherwise, if a do use , or do run if no other options are possible|a is a tactic where it is good to do jump if a is not equal to 1 otherwise, if iron do run , or do use if not|once b is at most 0 you have the choice to run until finally position is greater than 0|b is a good strategy where you should do use if iron is not equal to y otherwise, if position do jump , or do jump if no other options are possible|when inventory is at least 0 you have the option to jump until a is greater than or equal to x|whenever b is not the same as 1 you have the option to use until finally b|whenever inventory is less than y you can find until finally b is equal to 1|b is a tactic where it is advantageous to do run if a is greater than y otherwise, if position do use , or do use otherwise|a states that you should do build if b is greater than x otherwise, if position do find , or do build if not|b is a tactic where it is good to do jump if iron is not the same as y otherwise, if iron do run , or do use if not|whenever a is not the same as x you can jump until finally b is smaller than y|a is an approach where it would be good to do jump if iron 1 otherwise, if b do build , or do find if not|b states that you should do use if a is equal to y otherwise, if a do find , or do use if no other options are possible|a is an approach where you do build if b y otherwise, if a do jump , or do build if not|a is a good strategy where you should do jump if position x otherwise, if a do jump , or do jump as a last resort|as soon as inventory is less than x you can find until finally y|a entails that you do build if a is smaller than 2 otherwise, if a do find , or do run if not|a is an approach where it would be good to do run if b is smaller than 1 otherwise, if b do find , or do jump otherwise|if b is not equal to 1 you can run until b is greater than y|b is an approach where you do find if b is exactly the same as x otherwise, if b do jump , or do jump if not|b suggests that it would be advantageous to do run if position is less than x otherwise, if position do build , or do jump otherwise|if a is equal to y you are able to run until finally position is larger than 0|a is a strategy where you do run if iron is greater than 2 otherwise, if b do use , or do build as a last resort|whenever b is greater than or equal to x you are able to run until finally a is not equal to y|whenever inventory is equal to 0 you have the option to find until a is exactly the same as 0|a suggests that it would be advantageous to do find if iron is not the same as x otherwise, if iron do build , or do build if not|if position is less than or equal to y you have the option to build until finally a is less than 1|if a is at most 2 you are able to jump until finally inventory is less than or equal to 0|a is a tactic where it is advantageous to do run if a 2 otherwise, if a do run , or do build otherwise|once a is smaller than 2 you are able to find until position is larger than x|b entails that you do jump if position x otherwise, if iron do find , or do jump otherwise|a is a good strategy where you should do run if a 1 otherwise, if position do find , or do find as a last resort|when a is smaller than 1 you have the option to run until finally a is larger than y|b is a good strategy where you should do run if position x otherwise, if iron do use , or do run if not|b means that it would be good to do find if a x , or do jump if not|b states that you should do use if iron is equal to y otherwise, if position do run , or do jump if no other options are possible|when inventory is not the same as 0 you are able to use until finally position is less than y|b states that you should do find if a is equal to y otherwise, if b do use , or do use if no other options are possible|when b is not the same as 1 you have the option to build until b is not the same as x|a states that you should do jump if a otherwise, if a do find , or do build if no other options are possible|if y you can use until position is less than y|when position is less than y you have the choice to run until position is larger than 2|once b is less than 1 you have the choice to jump until finally b is not equal to x|a is an approach where you do run if position is not equal to 2 otherwise, if a do jump , or do build as a last resort|as soon as position is exactly the same as x you can build until position is exactly the same as x|a suggests that it would be advantageous to do build if iron is not the same as 1 otherwise, if a do jump , or do jump if not|a suggests that it would be advantageous to do jump if a is less than 2 otherwise, if b do run , or do use if no other options are possible|a is a strategy where you do run if a 1 , or do build if not|a is a tactic where it is good to do find if iron is larger than 2 otherwise, if b do use , or do build if no other options are possible|a is an approach where you do jump if a is greater than 1 otherwise, if b do find , or do find if no other options are possible|once b is less than or equal to x you have the choice to jump until finally position is not the same as x|once inventory is at least y you have the choice to build until position is at least y|whenever a is greater than y you have the option to find until finally b is larger than y|as soon as a is exactly the same as 2 you can use until inventory is at most 0|when b is greater than or equal to 2 you have the choice to run until inventory is greater than or equal to 0|a is a tactic where it is good to do jump if iron is not equal to 0 otherwise, if a do find , or do run as a last resort|when a is greater than 1 you are able to find until finally b is at most 1|a means that it would be good to do jump if a y otherwise, if iron do run , or do use if no other options are possible|a means that it would be good to do build if iron is larger than x otherwise, if position do find , or do run if no other options are possible|b is a tactic where it is good to do use if iron is not equal to y otherwise, if a do build , or do use if not|a states that you should do run if position is equal to x otherwise, if a do jump , or do jump if no other options are possible|when position is smaller than 1 you have the option to find until finally inventory is greater than or equal to x|if position is exactly the same as y you have the option to use until finally a is less than 1|a is a tactic where it is advantageous to do jump if iron is larger than 0 otherwise, if b do jump , or do run otherwise|as soon as b is less than or equal to 0 you have the option to run until b is greater than 2|as soon as a is at least 1 you are able to find until finally position is exactly the same as 2|whenever b is equal to 0 you can run until finally inventory is greater than 0|b is a tactic where it is advantageous to do run if b is greater than x otherwise, if iron do build , or do use if not|a is an approach where you do build if a y otherwise, if a do jump , or do jump if not|a entails that you do run if a 1 otherwise, if iron do use , or do use if no other options are possible|b is an approach where you do run if a is larger than y otherwise, if a do run , or do build if not|a is a strategy where you do find if iron is less than y otherwise, if iron do jump , or do find as a last resort|a means that it would be good to do jump if iron is smaller than 1 otherwise, if b do use , or do use if not|a is an approach where it would be good to do run if position 0 otherwise, if a do run , or do run otherwise|when b is less than or equal to 1 you are able to build until finally b is not the same as 1|when b is at least 2 you have the option to use until finally position is at most 0|a is an approach where it would be good to do build if b is exactly the same as 1 otherwise, if a do build , or do use if not|a is an approach where it would be good to do build if position is equal to 1 otherwise, if iron do run , or do jump as a last resort|if inventory is greater than 2 you have the option to use until b is smaller than x|when inventory is less than or equal to x you can use until inventory is greater than 2|b suggests that it would be advantageous to do use if position otherwise, if b do jump , or do jump if no other options are possible|if inventory you can find until b is greater than 0|a is a tactic where it is advantageous to do run if a is smaller than x otherwise, if a do find , or do build if no other options are possible|a suggests that it would be advantageous to do run if b is less than x , or do run as a last resort|as soon as position is at least 1 you have the choice to jump until a is smaller than x|as soon as inventory is at least y you have the option to use until finally position is at least 0|a means that it would be good to do jump if a is less than 0 otherwise, if iron do run , or do use otherwise|as soon as a is less than or equal to 0 you have the choice to jump until position is at least 2|as soon as a is larger than 2 you can build until a is at most y|once inventory is less than or equal to 0 you have the choice to run until position is at most 2|as soon as a is not the same as x you can jump until finally b is at least y|a is a good strategy where you should do run if iron is smaller than 0 otherwise, if b do use , or do use if no other options are possible|as soon as b is larger than y you have the option to find until finally inventory is at least x|b means that it would be good to do use if position y otherwise, if iron do use , or do use otherwise|a entails that you do use if a is less than 2 otherwise, if position do use , or do run if not|as soon as a is at least 1 you have the choice to find until b is not the same as 0|once a is at most y you can find until b is smaller than 2|a is a good strategy where you should do find if a y otherwise, if b do use , or do use otherwise|whenever a is greater than 1 you have the option to jump until a is not the same as x|as soon as inventory is less than 2 you can find until finally b is not the same as y|b is a tactic where it is advantageous to do run if b is equal to x otherwise, if b do build , or do build if not|if position is less than x you have the choice to build until finally position is larger than 1|b states that you should do use if b is equal to x otherwise, if a do build , or do build otherwise|if a is not the same as 2 you have the choice to use until finally inventory is exactly the same as y|when a is not equal to 1 you have the choice to build until finally inventory is exactly the same as y|b suggests that it would be advantageous to do build if iron is less than x otherwise, if b do jump , or do use as a last resort|as soon as b is not equal to y you can build until position is not the same as 0|b entails that you do run if a x otherwise, if b do build , or do jump otherwise|b entails that you do find if position x otherwise, if a do run , or do jump if not|once a is equal to y you can run until b is less than 2|whenever x you have the option to build until finally inventory is larger than x|b is a strategy where you do build if iron is smaller than y otherwise, if iron do find , or do run otherwise|a states that you should do use if b is larger than x otherwise, if position do jump , or do find otherwise|a is a strategy where you do run if iron is less than x otherwise, if position do find , or do jump otherwise|b is a tactic where it is good to do find if iron is less than x otherwise, if a do build , or do build if no other options are possible|once a is less than 1 you have the choice to find until position is larger than y|b is a tactic where it is good to do use if position is less than y otherwise, if position do build , or do use as a last resort|if b is larger than 1 you can find until b is larger than 0|a entails that you do find if position is larger than 0 otherwise, if position do find , or do run if no other options are possible|b is an approach where it would be good to do run if a x otherwise, if iron do run , or do find otherwise|b means that it would be good to do jump if a is exactly the same as x , or do jump if no other options are possible|whenever inventory is greater than 1 you are able to find until finally a is equal to 2|a states that you should do jump if iron is not equal to y otherwise, if b do run , or do run if not|a states that you should do use if b is exactly the same as y otherwise, if position do run , or do jump otherwise|b states that you should do build if a is exactly the same as 2 otherwise, if position do use , or do run otherwise|as soon as a is equal to 2 you have the choice to run until a is greater than or equal to 0|if position is exactly the same as x you can build until a is greater than x|b suggests that it would be advantageous to do find if a is smaller than y otherwise, if b do build , or do build as a last resort|as soon as position is larger than 2 you can jump until finally a is at least 0|b entails that you do use if iron x otherwise, if a do run , or do run if no other options are possible|a is a tactic where it is advantageous to do find if a 1 , or do jump if no other options are possible|a is a tactic where it is good to do jump if b is smaller than y otherwise, if b do jump , or do build otherwise|b is a strategy where you do build if position is equal to y otherwise, if position do find , or do use as a last resort|as soon as inventory you can run until finally inventory is greater than 0|b means that it would be good to do build if a is not equal to y otherwise, if iron do use , or do use otherwise|once b is exactly the same as 0 you can find until finally position is less than 2|a states that you should do run if a is not the same as 0 otherwise, if iron do find , or do run if no other options are possible|a suggests that it would be advantageous to do jump if position is larger than y otherwise, if position do run , or do jump if no other options are possible|a is an approach where you do build if position is equal to y otherwise, if iron do find , or do find if not|a suggests that it would be advantageous to do find if iron 2 otherwise, if iron do run , or do use if not|whenever inventory is not the same as x you can find until finally position is equal to y|a is an approach where you do jump if b is not equal to y otherwise, if a do build , or do use if no other options are possible|a suggests that it would be advantageous to do find if a is greater than y otherwise, if a do build , or do run if not|b is a good strategy where you should do find if a is exactly the same as 1 otherwise, if a do use , or do find if not|b states that you should do build if position is smaller than x otherwise, if a do run , or do run otherwise|b is a strategy where you do jump if a is exactly the same as y otherwise, if position do use , or do jump if not|b is a tactic where it is good to do build if a is not the same as 0 otherwise, if position do jump , or do run otherwise|if a is not equal to 2 you are able to build until finally b is greater than or equal to x|a is an approach where you do run if a is equal to x otherwise, if b do use , or do use if not|a is a strategy where you do use if iron is equal to 2 otherwise, if a do build , or do find as a last resort|b entails that you do use if a is equal to 2 otherwise, if b do build , or do use if no other options are possible|b is a tactic where it is good to do use if a is not the same as 1 otherwise, if a do find , or do jump as a last resort|once b is not the same as 0 you are able to use until finally inventory is smaller than 1|if b is not the same as 2 you can run until a is equal to 2|whenever b is at most 1 you have the option to run until inventory is not equal to x|a means that it would be good to do find if b is smaller than 2 otherwise, if a do run , or do use otherwise|whenever a is less than x you have the option to run until position is not the same as y|if b is not equal to 2 you are able to use until finally b is smaller than 2|if b is at most x you can run until finally b is larger than 0|when inventory is smaller than 1 you are able to jump until b is greater than or equal to x|b states that you should do run if iron x otherwise, if position do jump , or do run if not|once position is greater than or equal to 0 you can jump until position is less than y|as soon as position is not equal to 2 you are able to find until a is at most x|a suggests that it would be advantageous to do jump if a is smaller than 0 otherwise, if a do jump , or do build otherwise|if b is equal to 1 you have the choice to find until inventory is equal to 2|a entails that you do build if position is larger than 1 otherwise, if position do use , or do build otherwise|a is a tactic where it is good to do build if b is equal to x otherwise, if a do jump , or do build if no other options are possible|a is an approach where it would be good to do find if b 2 otherwise, if position do use , or do jump as a last resort|as soon as position is at least x you have the option to jump until a is less than x|when inventory is at most 0 you are able to find until position is not equal to 2|a suggests that it would be advantageous to do find if position is exactly the same as x otherwise, if a do find , or do find as a last resort|b is an approach where it would be good to do jump if iron x otherwise, if b do jump , or do use as a last resort|a states that you should do use if iron 1 otherwise, if iron do build , or do use if no other options are possible|b states that you should do build if iron otherwise, if iron do find , or do jump if no other options are possible|if y you are able to build until finally a is at least 2|a states that you should do jump if position is exactly the same as 2 otherwise, if iron do run , or do find if no other options are possible|if b is smaller than x you can use until a is less than or equal to 1|a states that you should do build if b otherwise, if position do find , or do build if no other options are possible|if inventory is exactly the same as y you have the option to jump until finally position|once inventory is less than or equal to y you can build until position is greater than or equal to y|whenever inventory is greater than y you have the choice to build until b is at most 2|a is a good strategy where you should do jump if b is greater than 2 otherwise, if position do find , or do run as a last resort|a is a strategy where you do use if position is equal to x otherwise, if b do build , or do build as a last resort|when a is less than or equal to 0 you have the option to jump until b is equal to x|b is a strategy where you do find if b is greater than y otherwise, if a do jump , or do build as a last resort|b means that it would be good to do build if a x otherwise, if position do build , or do use otherwise|if position is at most 0 you can run until finally inventory is not equal to y|once b is greater than x you can find until finally a is exactly the same as y|as soon as a is exactly the same as y you have the choice to jump until finally inventory is greater than or equal to 2|a is a tactic where it is good to do jump if a x otherwise, if position do use , or do build as a last resort|a is a strategy where you do run if a 0 otherwise, if iron do build , or do build if not|whenever inventory is greater than or equal to 0 you can jump until finally position is not equal to 1|a is an approach where you do use if position is smaller than y otherwise, if b do jump , or do find if not|a is a tactic where it is good to do find if a is exactly the same as 2 otherwise, if position do build , or do use if no other options are possible|a is a tactic where it is good to do run if b 0 , or do find as a last resort|whenever a is less than or equal to y you have the option to jump until position is not equal to 0|as soon as position is not the same as y you can jump until finally b is less than y|when b is at most 1 you are able to jump until position is not equal to 2|a is a tactic where it is good to do find if position is greater than 1 otherwise, if position do jump , or do run as a last resort|b is a good strategy where you should do use if a is equal to 2|as soon as b is greater than 0 you have the option to find until finally inventory is less than or equal to y|as soon as b is less than x you have the choice to build until finally a is equal to 1|a is a good strategy where you should do jump if a is smaller than 1 otherwise, if a do find , or do find as a last resort|a states that you should do build if iron is smaller than 0 otherwise, if a do use , or do run otherwise|as soon as inventory is at most x you can build until position is smaller than 1|b is a tactic where it is good to do jump if a y otherwise, if a do build , or do jump otherwise|b is a tactic where it is advantageous to do jump if position is smaller than y otherwise, if b do jump , or do use if no other options are possible|a means that it would be good to do run if a x otherwise, if a do build , or do use as a last resort|when b is less than or equal to 0 you can jump until finally inventory is not the same as x|if inventory you have the option to find until finally a is at least y|if a is at least y you are able to build until position is smaller than x|once b is less than 0 you can use until a is equal to x|a is a strategy where you do use if position is equal to x otherwise, if position do run , or do find if not|if b is equal to y you are able to build until b is less than 0|b is a tactic where it is good to do jump if a is not the same as 0 otherwise, if b do use , or do find as a last resort|as soon as b is not the same as y you can jump until finally inventory is equal to y|if b is less than 2 you have the option to jump until finally b is less than x|whenever b is smaller than 0 you are able to use until a is larger than 1|once inventory is greater than y you can build until position is larger than y|b is an approach where it would be good to do find if iron is smaller than 2 , or do run if not|a is a tactic where it is advantageous to do run if b is larger than x otherwise, if a do find , or do jump as a last resort|b means that it would be good to do find if position y otherwise, if b do run , or do build otherwise|b suggests that it would be advantageous to do find if a is not equal to x otherwise, if a do jump , or do build if no other options are possible|as soon as b is not equal to 1 you can run until finally b is less than x|a is a tactic where it is advantageous to do find if a is larger than 2 otherwise, if b do use , or do jump otherwise|when a is equal to x you have the option to jump until a is exactly the same as 0|if a is less than or equal to 0 you can use until finally inventory is not equal to 2|as soon as a is equal to y you are able to build until finally inventory is exactly the same as y|as soon as inventory is not the same as 1 you are able to run until finally position is smaller than 1|b suggests that it would be advantageous to do jump if b is not the same as y otherwise, if a do run , or do build as a last resort|a is a strategy where you do run if position otherwise, if b do use , or do run otherwise|a is an approach where it would be good to do jump if a is larger than 0 otherwise, if b do use , or do run if not|once position is at most x you are able to use until inventory is at most y|a states that you should do run if position otherwise, if position do build , or do build if not|whenever b is greater than or equal to 1 you are able to build until finally a is less than or equal to 0|a states that you should do build if position is less than x otherwise, if a do build , or do run if not|a is an approach where it would be good to do run if position is equal to 0 otherwise, if b do jump , or do use if no other options are possible|a suggests that it would be advantageous to do use if iron is not the same as 0 otherwise, if a do find , or do build otherwise|once inventory is equal to y you have the choice to jump until inventory is not the same as 1|a is a strategy where you do build if a is less than x otherwise, if position do build , or do jump if not|when inventory is at most 1 you are able to run until inventory is greater than or equal to 1|a entails that you do jump if a is not the same as y otherwise, if position do run , or do build if not|as soon as a is exactly the same as x you have the option to build until finally a is greater than or equal to x|as soon as position is less than or equal to 2 you have the choice to use until position is larger than x|b suggests that it would be advantageous to do find if position 2 , or do build if no other options are possible|b is a good strategy where you should do find if a is smaller than x otherwise, if position do jump , or do use if no other options are possible|once a is exactly the same as 0 you have the choice to use until b is equal to 2|b states that you should do build if b is greater than y otherwise, if iron do build , or do build otherwise|when inventory is exactly the same as y you have the option to build until inventory is less than or equal to 0|if position is greater than or equal to y you can run until finally a is less than or equal to y|a suggests that it would be advantageous to do use if iron is less than 2 otherwise, if b do jump , or do build as a last resort|if position is less than or equal to 0 you have the choice to jump until position is equal to x|if position is less than or equal to x you have the choice to find until finally b is not the same as 1|b is an approach where you do find if iron is exactly the same as y otherwise, if iron do use , or do build as a last resort|a is an approach where it would be good to do build if b is larger than 2 otherwise, if b do find , or do jump as a last resort|a is a tactic where it is advantageous to do run if a 2 otherwise, if position do build , or do find if not|when b is not equal to 0 you are able to use until finally inventory|b means that it would be good to do use if b is larger than y otherwise, if b do build , or do find if not|a is an approach where it would be good to do run if iron 1 otherwise, if a do use , or do jump as a last resort|a is an approach where you do run if a is less than x otherwise, if position do run , or do jump if not|once a is at least y you can run until finally b is less than or equal to x|whenever position is greater than or equal to x you have the option to jump until finally inventory is greater than or equal to 1|once a is larger than y you can jump until a is at most y|a is an approach where it would be good to do find if a is exactly the same as x otherwise, if position do jump , or do use if not|b means that it would be good to do build if position y otherwise, if iron do jump , or do run if not|a is a tactic where it is advantageous to do use if position is equal to x otherwise, if position do find , or do run if no other options are possible|whenever inventory is greater than x you have the choice to find until finally inventory|a is a good strategy where you should do jump if a is less than x otherwise, if position do run , or do find as a last resort|if a is larger than 2 you have the choice to jump until position is less than or equal to 0|when y you have the option to build until finally b is exactly the same as 1|whenever b is at least y you have the option to run until finally position is greater than or equal to y|a is an approach where it would be good to do build if a is smaller than 1 otherwise, if a do run , or do use otherwise|a is a tactic where it is advantageous to do use if iron is exactly the same as 0 otherwise, if iron do build , or do jump if no other options are possible|a is an approach where you do jump if iron is larger than 0 otherwise, if position do jump , or do jump as a last resort|b is a tactic where it is good to do jump if iron is not equal to 2 , or do use if no other options are possible|a means that it would be good to do use if position is equal to x otherwise, if position do jump , or do find otherwise|when b is less than 2 you have the choice to build until finally inventory is greater than y|when inventory is not the same as y you have the choice to run until position is less than 2|when inventory is smaller than 1 you have the choice to run until finally a is larger than 2|b is an approach where it would be good to do find if iron y otherwise, if a do run , or do run otherwise|a is a tactic where it is advantageous to do build if position y otherwise, if a do run , or do use as a last resort|a is an approach where it would be good to do jump if position is smaller than y otherwise, if position do find , or do build as a last resort|whenever inventory is greater than or equal to 1 you can use until position is less than x|a is an approach where it would be good to do build if a is less than 1 otherwise, if a do use , or do run if no other options are possible|b entails that you do run if iron y , or do run if not|whenever a is equal to y you are able to use until inventory is greater than 2|a is an approach where it would be good to do build if b y otherwise, if iron do find , or do use as a last resort|b means that it would be good to do use if a is less than x otherwise, if b do jump , or do use otherwise|whenever inventory is not the same as x you have the choice to find until position is equal to 0|whenever y you can use until inventory is not the same as 2|a means that it would be good to do use if a is not the same as 0 otherwise, if iron do find , or do build if no other options are possible|b is a tactic where it is good to do run if a is not the same as 2 otherwise, if position do run , or do jump otherwise|as soon as a is equal to 2 you are able to build until finally y|once position is equal to x you can jump until inventory is at least x|b is a strategy where you do build if a is not equal to 1 otherwise, if b do build , or do jump as a last resort|when inventory is exactly the same as y you have the option to build until inventory is at least 1|as soon as a is smaller than 0 you are able to find until inventory is at most x|when inventory you have the choice to jump until inventory is larger than x|a is a tactic where it is good to do build if position x otherwise, if position do run , or do use as a last resort|once b is at least 0 you have the option to use until inventory is equal to x|as soon as inventory is larger than 1 you have the choice to build until inventory is not the same as y|when b is at most x you have the option to jump until a is at least 2|a suggests that it would be advantageous to do run if iron is larger than y otherwise, if iron do use , or do find if no other options are possible|a is a good strategy where you should do use if position is not the same as 2 otherwise, if b do run , or do find otherwise|when b is not equal to x you can run until finally position is equal to 2|a is a tactic where it is advantageous to do use if b is equal to 0 otherwise, if iron do use , or do use if not|a is a tactic where it is good to do jump if b is greater than 1 otherwise, if iron do find , or do use if not|b entails that you do find if iron is less than x otherwise, if position do build , or do jump as a last resort|once b is not the same as y you can find until finally inventory is not equal to 0|as soon as a is less than 2 you can run until b is at least x|b states that you should do run if a is smaller than 1 , or do build as a last resort|once b you are able to use until a is greater than 2|a is a tactic where it is good to do build if a is less than 1 otherwise, if position do use , or do run as a last resort|when inventory is larger than 2 you can run until position is greater than x|as soon as b is equal to 1 you have the option to run until b is not the same as 2|a suggests that it would be advantageous to do build if a is exactly the same as 0 otherwise, if b do build , or do use if not|b is an approach where you do use if a is larger than y otherwise, if position do find , or do build if no other options are possible|whenever position is not the same as 1 you have the choice to build until a is exactly the same as 1|a is a tactic where it is advantageous to do find if b is smaller than x otherwise, if iron do jump , or do build otherwise|once a is not equal to x you can run until finally b is exactly the same as 1|as soon as b is less than 1 you are able to use until b is greater than 1|as soon as position is smaller than y you have the option to build until inventory is at least y|b entails that you do run if a 1 , or do build if not|a states that you should do jump if a is larger than 2 otherwise, if position do use , or do run otherwise|if b is less than or equal to y you can build until finally a is less than or equal to 1|a is a tactic where it is good to do use if b is not the same as 2 otherwise, if iron do build , or do use if no other options are possible|once position is at least y you can jump until position is at least 2|a is an approach where you do use if iron 1 , or do run otherwise|b is an approach where it would be good to do use if b is not the same as y otherwise, if iron do find , or do find if not|b means that it would be good to do use if position is not the same as x otherwise, if iron do run , or do find if no other options are possible|if inventory is smaller than 2 you have the option to build until finally position is smaller than y|when a is larger than y you can build until finally position is less than 0|as soon as position is not the same as 0 you can use until finally a is greater than x|if b is less than or equal to 1 you have the choice to find until finally a is not the same as 2|b is a tactic where it is advantageous to do build if b otherwise, if a do find , or do use otherwise|a is a good strategy where you should do run if a is exactly the same as 1 otherwise, if a do build , or do run if no other options are possible|whenever a is larger than 1 you have the choice to build until finally b is at least 2|b states that you should do jump if b is smaller than 1 , or do build if not|as soon as inventory is at most 0 you have the choice to use until position is at least 1|when a is less than 2 you have the choice to use until inventory is smaller than 1|a entails that you do build if a is greater than x otherwise, if b do find , or do build otherwise|b suggests that it would be advantageous to do build if a is greater than 2 , or do use as a last resort|when a is at most x you have the choice to build until finally a is greater than 2|a means that it would be good to do find if a is smaller than 1 otherwise, if b do find , or do run otherwise|when position is equal to x you have the option to run until finally position is smaller than y|when position is not the same as x you are able to run until finally b is exactly the same as x|as soon as a is greater than or equal to 1 you have the choice to find until finally position is at most 1|b means that it would be good to do use if position is less than y otherwise, if position do build , or do find otherwise|a is a good strategy where you should do jump if b is equal to 2 otherwise, if a do build , or do use if not|whenever inventory is greater than or equal to y you are able to run until finally inventory is greater than or equal to x|whenever inventory is less than or equal to 0 you can jump until finally inventory is at most 2|a states that you should do find if b y otherwise, if position do run , or do build as a last resort|as soon as b is not equal to 2 you can build until b is larger than 1|when b is less than 2 you have the choice to run until a is not equal to 1|a is a good strategy where you should do find if b otherwise, if a do build , or do jump if not|b is a tactic where it is advantageous to do use if a x otherwise, if iron do jump , or do jump as a last resort|whenever position is greater than or equal to 2 you have the option to jump until a is less than 1|b is an approach where it would be good to do jump if b y otherwise, if iron do jump , or do find if no other options are possible|if b is larger than y you can use until b is equal to 0|b is a good strategy where you should do build if a 0 , or do build otherwise|b is a good strategy where you should do build if a otherwise, if position do jump , or do run if no other options are possible|when a is at most y you can run until finally b is equal to y|whenever inventory is at least 2 you are able to use until inventory is not the same as 1|a is a tactic where it is advantageous to do run if iron x otherwise, if position do run , or do run if no other options are possible|when b is not the same as 2 you have the choice to run until finally position is not the same as y|b is an approach where you do build if position is exactly the same as x otherwise, if a do build , or do run otherwise|whenever inventory is less than y you are able to find until b is at least 0|if a is not equal to 0 you are able to find until a is greater than or equal to y|whenever a is at least y you have the choice to jump until position is at most y|a is a good strategy where you should do jump if a 0 otherwise, if b do find , or do build as a last resort|a is an approach where you do find if b y otherwise, if b do build , or do use if no other options are possible|when b is not the same as y you have the option to jump until inventory is smaller than 0|whenever position is at least 2 you are able to build until b is less than 1|as soon as position you are able to jump until position is at most 1|b states that you should do jump if iron is not the same as y otherwise, if iron do use , or do run if not|a states that you should do jump if iron is larger than 1 otherwise, if iron do run , or do jump as a last resort|a states that you should do run if b is exactly the same as x otherwise, if position do use , or do run if not|a is a tactic where it is advantageous to do use if position 0 otherwise, if a do build , or do use if no other options are possible|a states that you should do find if position 2 otherwise, if iron do find , or do run if not|b is a strategy where you do build if position is larger than y otherwise, if b do use , or do use otherwise|when b is smaller than x you have the option to find until inventory is greater than or equal to 0|a is a tactic where it is advantageous to do find if b 0 , or do use if not|when position is greater than or equal to x you have the option to build until finally inventory is at least y|once position is smaller than y you are able to use until inventory is smaller than x|a entails that you do build if iron otherwise, if position do run , or do use if not|if inventory is less than y you are able to jump until finally inventory is greater than or equal to x|a means that it would be good to do run if iron 2 otherwise, if a do build , or do jump if no other options are possible|whenever position is larger than 1 you are able to run until position is smaller than 1|a is an approach where you do find if iron y otherwise, if a do use , or do use if no other options are possible|once position is at most 2 you have the choice to use until y|whenever a is greater than 0 you can use until inventory is larger than x|b is an approach where it would be good to do jump if iron y otherwise, if position do use , or do run otherwise|b means that it would be good to do find if iron is exactly the same as 0 , or do jump if not|once a is not the same as 0 you are able to run until finally position is smaller than x|a states that you should do find if a is greater than 1 otherwise, if a do use , or do find if no other options are possible|a is an approach where you do use if position 2 otherwise, if iron do jump , or do build if no other options are possible|b is a tactic where it is advantageous to do jump if iron is not the same as y otherwise, if position do jump , or do find if not|a is an approach where it would be good to do use if b is not the same as x otherwise, if b do jump , or do run if no other options are possible|as soon as position is at least y you can find until finally a is smaller than y|once a is not equal to 1 you can find until position is larger than 2|b is a good strategy where you should do find if a is equal to y otherwise, if b do jump , or do run as a last resort|b entails that you do run if position is less than y otherwise, if b do run , or do build otherwise|as soon as a is not equal to 0 you can jump until b|whenever position is larger than 1 you have the choice to run until position is greater than 1|b suggests that it would be advantageous to do jump if a x otherwise, if a do use , or do build if not|as soon as b is greater than or equal to x you can jump until a is not the same as x|a suggests that it would be advantageous to do jump if position y otherwise, if a do use , or do run otherwise|once a is at least 0 you can find until finally b is not equal to y|a is a strategy where you do use if position is equal to y otherwise, if a do find , or do find as a last resort|once inventory is less than or equal to 0 you have the choice to jump until finally inventory|when inventory is equal to y you have the option to find until finally a is greater than x|whenever position is at least x you are able to jump until inventory is at most x|a means that it would be good to do run if position 2 otherwise, if b do run , or do build otherwise|as soon as b is exactly the same as 1 you have the choice to find until finally a is less than or equal to 2|b means that it would be good to do find if position x otherwise, if iron do run , or do find as a last resort|a is a tactic where it is good to do build if a is greater than 2 otherwise, if a do build , or do use if no other options are possible|if a is at least y you have the option to run until finally a is larger than 0|if position you have the choice to build until a is at most 0|whenever inventory is at least 2 you can build until finally a is greater than or equal to 2|once a is less than or equal to y you have the option to use until b is exactly the same as 0|a entails that you do use if a is larger than 2 otherwise, if a do run , or do find otherwise|if b is less than 1 you can use until b is at most 1|b is an approach where you do use if iron is not equal to x otherwise, if iron do build , or do jump as a last resort|if b is greater than or equal to 1 you can jump until finally a is greater than or equal to 0|a is a tactic where it is good to do use if b is smaller than 2 otherwise, if iron do find , or do jump otherwise|a is a strategy where you do find if a 1 otherwise, if a do build , or do run as a last resort|b is a tactic where it is good to do build if a is less than 0 otherwise, if b do run , or do jump if no other options are possible|if a is greater than or equal to y you are able to run until finally position is less than 0|as soon as b is larger than x you can jump until a is smaller than y|if a is smaller than x you have the option to jump until a is exactly the same as 2|b is a strategy where you do use if a is less than x otherwise, if b do use , or do jump as a last resort|whenever position is less than or equal to x you are able to run until a is equal to x|a is an approach where you do use if a 0 otherwise, if position do run , or do use otherwise|a is a tactic where it is advantageous to do find if a is smaller than 2 otherwise, if b do find , or do use otherwise|whenever a is equal to 0 you have the option to build until finally position is larger than y|whenever b is larger than 1 you have the choice to jump until inventory is greater than or equal to x|if inventory is equal to 1 you have the option to jump until b is not equal to 1|if a is less than 2 you have the choice to find until position is smaller than 1|whenever position is smaller than 0 you can jump until a is exactly the same as 1|a entails that you do use if a is not equal to 2 , or do use otherwise|whenever inventory is not equal to y you can run until inventory is not the same as x|b is a tactic where it is good to do run if position x otherwise, if position do run , or do use otherwise|b states that you should do find if position is not equal to y otherwise, if iron do use , or do use as a last resort|b suggests that it would be advantageous to do run if a y otherwise, if position do jump , or do jump otherwise|when b is less than or equal to 1 you have the option to jump until finally position is greater than 2|when b you have the option to use until finally a is at least y|as soon as a is larger than 1 you have the option to find until finally a is not the same as y|a is a strategy where you do jump if a y otherwise, if a do build , or do build otherwise|as soon as inventory is equal to 1 you can jump until finally inventory is less than or equal to 0|a is a tactic where it is good to do jump if iron is greater than 2 otherwise, if iron do run , or do find if no other options are possible|whenever inventory is less than or equal to 1 you can run until b is at least 2|once inventory is at least y you are able to find until position is at most 2|if inventory is less than or equal to 1 you are able to run until a is less than y|b states that you should do find if position is not equal to y , or do use if no other options are possible|as soon as position is not equal to x you have the choice to build until inventory is not equal to 0|as soon as inventory is less than x you have the option to jump until a is at least 1|whenever inventory is at least x you have the option to find until finally a is at most 1|a is a tactic where it is advantageous to do jump if a is larger than 0 otherwise, if a do find , or do use otherwise|a is a good strategy where you should do run if a is not equal to y otherwise, if b do find , or do use if no other options are possible|a states that you should do find if b 0 otherwise, if a do run , or do use if not|as soon as a is greater than 0 you can find until finally position is less than or equal to 0|whenever b is not equal to y you are able to run until finally inventory is not the same as x|a states that you should do use if iron is not the same as x otherwise, if b do find , or do find if not|b suggests that it would be advantageous to do use if a is not the same as 0 otherwise, if iron do build , or do build if no other options are possible|b states that you should do run if iron x otherwise, if b do use , or do run if not|b is a good strategy where you should do build if b is not equal to x otherwise, if position do run , or do jump as a last resort|whenever inventory is less than or equal to 1 you are able to run until position is less than or equal to 1|a entails that you do build if a is exactly the same as 2 otherwise, if a do jump , or do jump if no other options are possible|b is a good strategy where you should do run if a is exactly the same as 1 otherwise, if position do use , or do find if not|as soon as b is smaller than 0 you can jump until finally a is less than 0|b is an approach where it would be good to do find if b 0 , or do run otherwise|a is a tactic where it is advantageous to do jump if position 2 otherwise, if position do use , or do build otherwise|if a is less than or equal to x you have the choice to use until finally b is greater than x|a is an approach where it would be good to do build if b 0 otherwise, if a do run , or do run otherwise|b suggests that it would be advantageous to do use if b is less than x|as soon as b is smaller than 2 you can find until finally inventory is greater than or equal to y|a is an approach where you do use if position y otherwise, if iron do jump , or do jump if no other options are possible|if b is at least y you are able to build until a is at most x|once position you have the option to find until a is at most y|whenever a is at least 2 you have the choice to find until finally a is greater than or equal to y|a is a tactic where it is good to do build if b is not the same as x otherwise, if position do jump , or do find otherwise|a is a strategy where you do build if b is larger than 0 otherwise, if iron do use , or do build if not|as soon as position is not equal to 1 you can build until finally a is larger than y|b entails that you do use if a is greater than y otherwise, if position do find , or do find if not|a suggests that it would be advantageous to do run if a is not the same as 0 otherwise, if a do find , or do jump as a last resort|b is a good strategy where you should do run if a is exactly the same as x , or do use as a last resort|once position is equal to 2 you can jump until b is larger than x|when b is larger than 0 you are able to find until finally y|as soon as a is less than 0 you are able to build until finally position is less than y|if inventory is less than 1 you have the option to find until finally y|a suggests that it would be advantageous to do run if a otherwise, if iron do jump , or do run as a last resort|a is a strategy where you do find if b y otherwise, if b do jump , or do use if no other options are possible|a is an approach where you do run if b is less than y otherwise, if position do find , or do use as a last resort|a suggests that it would be advantageous to do build if iron is larger than 0 otherwise, if a do use , or do build if not|a is an approach where it would be good to do jump if b is greater than 1 otherwise, if a do run , or do use as a last resort|a is a tactic where it is advantageous to do use if b is not equal to 2 otherwise, if b do find , or do jump if no other options are possible|b suggests that it would be advantageous to do build if position is greater than y otherwise, if iron do run , or do jump if not|a is an approach where you do run if a is less than 2 otherwise, if position do jump , or do use as a last resort|b entails that you do find if iron y otherwise, if a do build , or do find otherwise|a is an approach where it would be good to do build if a 0 otherwise, if a do use , or do jump if no other options are possible|whenever position is smaller than 2 you can jump until finally inventory is greater than or equal to y|once b is less than or equal to 1 you are able to find until finally b is less than or equal to 1|a is a tactic where it is good to do build if a is greater than 1 , or do jump as a last resort|a entails that you do jump if iron is smaller than x otherwise, if iron do use , or do jump if no other options are possible|as soon as b is larger than y you are able to use until position is equal to 2|a is a tactic where it is advantageous to do run if iron is larger than 2 otherwise, if b do find , or do jump otherwise|when position is greater than or equal to 2 you are able to jump until finally inventory is equal to 0|b states that you should do use if a x otherwise, if b do run , or do find if no other options are possible|as soon as position is larger than y you are able to run until inventory is greater than x|b entails that you do find if b y otherwise, if a do find , or do build as a last resort|as soon as position is less than x you are able to use until finally inventory is smaller than 0|once b is equal to 1 you can build until b is at most x|b is a good strategy where you should do build if position is larger than 1 , or do find if not|once inventory is at most 1 you are able to find until inventory is not equal to x|a means that it would be good to do find if iron y otherwise, if b do jump , or do find if not|b entails that you do find if b is exactly the same as 1 , or do jump if not|a is a good strategy where you should do run if iron is not equal to x otherwise, if a do run , or do run as a last resort|once inventory is at least y you are able to use until finally position is not equal to 1|b is a tactic where it is advantageous to do jump if b is greater than y otherwise, if position do build , or do find if no other options are possible|b states that you should do find if iron x otherwise, if iron do run , or do find as a last resort|when b is not equal to 2 you have the option to run until b is not the same as y|if position is not equal to 1 you are able to use until finally inventory is less than 0|when b is not equal to x you have the option to run until a is greater than or equal to x|b is a good strategy where you should do jump if b is less than x otherwise, if a do jump , or do use as a last resort|b is a good strategy where you should do jump if iron y otherwise, if a do run , or do run if not|whenever a is greater than or equal to x you can jump until finally position is less than or equal to 1|whenever y you can find until finally b|a is a strategy where you do jump if b is greater than y otherwise, if iron do build , or do jump as a last resort|once inventory is at least x you have the option to build until b is not equal to 1|a states that you should do run if b otherwise, if iron do jump , or do find if no other options are possible|b is a strategy where you do find if a is smaller than x otherwise, if iron do build , or do find if no other options are possible|b entails that you do run if a x otherwise, if b do find , or do run if no other options are possible|b is a tactic where it is good to do jump if iron is equal to y otherwise, if iron do build , or do use if no other options are possible|a is a tactic where it is good to do build if a is larger than y otherwise, if a do jump , or do find as a last resort|b entails that you do use if a is less than x otherwise, if position do jump , or do use as a last resort|b suggests that it would be advantageous to do jump if b is smaller than x otherwise, if iron do jump , or do use otherwise|as soon as inventory is equal to y you have the choice to jump until position is greater than y|b means that it would be good to do build if b is smaller than x otherwise, if a do build , or do jump as a last resort|a states that you should do jump if iron is equal to 2 otherwise, if iron do run , or do use if not|a is a tactic where it is good to do find if iron is less than 1 otherwise, if b do jump , or do run otherwise|b is a strategy where you do use if iron is smaller than 0|when position is equal to y you are able to use until finally a is smaller than x|b is a tactic where it is good to do build if b is equal to x otherwise, if position do use , or do jump otherwise|a is an approach where it would be good to do find if position 1 otherwise, if a do find , or do find if not|whenever a is at most y you have the option to use until b is less than 1|whenever position is not equal to 2 you are able to build until finally b is greater than x|as soon as inventory is not the same as x you have the option to build until finally b is less than x|a is a strategy where you do find if iron is greater than 1 otherwise, if iron do jump , or do find if no other options are possible|a is a good strategy where you should do build if b is smaller than 2 otherwise, if position do run , or do build if no other options are possible|if y you are able to jump until finally inventory is greater than or equal to 2|a entails that you do find if position is larger than y , or do use otherwise|a is an approach where you do use if b is not equal to 0 otherwise, if b do find , or do build otherwise|once inventory is greater than or equal to 2 you have the choice to jump until finally b is less than y|as soon as inventory is smaller than x you have the choice to run until position is smaller than y|if b is less than or equal to 1 you have the option to jump until inventory is less than or equal to y|b is an approach where you do build if position is less than x otherwise, if b do build , or do find otherwise|b is a tactic where it is good to do jump if a is equal to 0 otherwise, if iron do run , or do run as a last resort|as soon as position is not equal to 2 you have the choice to build until inventory is not equal to 2|as soon as a is smaller than y you have the choice to run until b is not equal to 1|whenever b is less than or equal to 2 you have the choice to use until inventory is less than or equal to 2|a entails that you do build if a 2 otherwise, if b do run , or do run if not|a suggests that it would be advantageous to do find if b is not equal to 1 otherwise, if iron do build , or do use as a last resort|whenever inventory is exactly the same as x you are able to build until a is less than 2|if a is at least x you are able to use until inventory is greater than y|b is an approach where you do find if iron is not equal to x otherwise, if position do run , or do jump as a last resort|b is a good strategy where you should do jump if b is not the same as y otherwise, if iron do run , or do build otherwise|a is an approach where it would be good to do build if b 0 otherwise, if position do jump , or do run if no other options are possible|whenever a is less than 0 you have the option to run until position is at least 1|once a is at most 2 you have the option to build until position is not the same as y|whenever inventory is equal to 1 you can use until finally b is at most y|a states that you should do jump if iron is not the same as 1 otherwise, if a do find , or do find if no other options are possible|whenever position is at least 1 you have the choice to find until finally a is smaller than 1|once position is not the same as x you are able to find until finally a is larger than y|a is a tactic where it is good to do build if a otherwise, if b do jump , or do jump if no other options are possible|when inventory you can jump until finally b is greater than x|as soon as inventory is equal to 1 you are able to run until inventory is exactly the same as x|if position is not equal to 1 you can use until finally b is at least 1|a is an approach where it would be good to do use if b is less than 0 otherwise, if iron do find , or do jump as a last resort|if b is larger than y you have the option to jump until finally a is smaller than 1|a is an approach where you do run if a 2 otherwise, if iron do build , or do use if no other options are possible|once a is greater than or equal to y you have the choice to run until finally y|a is a tactic where it is advantageous to do build if position is not equal to 1 otherwise, if position do use , or do build if no other options are possible|a is a tactic where it is advantageous to do find if position is not equal to 1 otherwise, if position do find , or do build otherwise|b is an approach where you do jump if b is smaller than x otherwise, if a do run , or do use if not|as soon as inventory is at most x you have the option to run until b is at most 1|a is an approach where you do find if b is larger than y otherwise, if iron do use , or do jump as a last resort|a entails that you do jump if position is larger than 0 otherwise, if b do use , or do run if not|a is an approach where you do use if b is equal to y otherwise, if position do run , or do use as a last resort|when position is not the same as 0 you are able to build until b|if b is not equal to y you have the option to jump until finally a is smaller than x|if a is at least 2 you have the choice to build until position is greater than 0|if position is not the same as 0 you are able to run until position is not the same as 1|b is a good strategy where you should do run if a is not the same as 1 otherwise, if b do find , or do find as a last resort|if b is at most y you have the choice to build until finally b is greater than x|as soon as inventory is exactly the same as x you are able to use until finally b is not the same as 1|a is a tactic where it is good to do use if a y otherwise, if b do use , or do jump otherwise|when inventory is equal to 2 you have the option to jump until finally inventory is at least x|a is an approach where you do use if iron is smaller than y , or do build as a last resort|b states that you should do find if position y otherwise, if a do run , or do use otherwise|when position is smaller than 0 you are able to run until finally inventory is larger than 2|once a is larger than x you have the choice to jump until finally position is smaller than y|whenever position is less than y you can use until finally a is less than 2|whenever position is less than or equal to y you have the choice to use until finally a is larger than 2|b is a strategy where you do use if b is equal to y otherwise, if a do run , or do jump if not|a is an approach where you do use if iron is exactly the same as y otherwise, if iron do use , or do run as a last resort|whenever position is not the same as y you can run until b is less than or equal to 0|if b is exactly the same as x you are able to jump until finally a is less than 1|a is an approach where you do build if b otherwise, if iron do jump , or do jump if not|a entails that you do find if position is greater than 0 otherwise, if iron do find , or do jump if not|whenever inventory is smaller than y you have the choice to jump until inventory is greater than 1|a means that it would be good to do use if a 1 otherwise, if position do use , or do jump if no other options are possible|a is an approach where it would be good to do jump if position is exactly the same as 1 otherwise, if position do use , or do find if not|once position is not equal to 0 you are able to find until position is exactly the same as 2|as soon as a is greater than 0 you can run until finally b is greater than or equal to 2|a is a tactic where it is good to do use if a y otherwise, if b do use , or do jump as a last resort|if a is not equal to x you have the choice to find until finally inventory is equal to y|as soon as inventory is smaller than x you have the option to use until finally inventory|a means that it would be good to do build if b y otherwise, if a do jump , or do run otherwise|a is a good strategy where you should do run if a x otherwise, if iron do run , or do find if no other options are possible|a is a tactic where it is good to do use if a otherwise, if b do jump , or do build if no other options are possible|whenever a is exactly the same as y you are able to run until finally inventory is at most 2|b is an approach where it would be good to do run if position is less than 1|as soon as position is not equal to 0 you have the option to run until finally position is at most x|when inventory is larger than y you are able to jump until finally inventory is not equal to 1|a entails that you do jump if iron is not the same as 1 otherwise, if a do run , or do find as a last resort|a is a good strategy where you should do run if a is exactly the same as x otherwise, if iron do jump , or do jump otherwise|b is a good strategy where you should do jump if iron is larger than x otherwise, if position do build , or do build if not|whenever b is at most 0 you are able to jump until b is equal to 1|a entails that you do jump if a 0 otherwise, if iron do jump , or do jump otherwise|b is a good strategy where you should do jump if a is exactly the same as 1 otherwise, if position do run , or do run if no other options are possible|a is a strategy where you do run if a is less than 0 otherwise, if a do build , or do build as a last resort|a means that it would be good to do jump if b x , or do build otherwise|if position is greater than or equal to 2 you have the choice to build until finally inventory|a suggests that it would be advantageous to do build if b is less than 1 otherwise, if position do jump , or do jump as a last resort|when position is less than or equal to y you are able to use until a is less than y|if b is greater than y you have the choice to use until finally a is greater than or equal to x|when b is greater than or equal to x you can run until a is greater than 0|as soon as a is larger than 0 you are able to build until a is greater than or equal to 1|as soon as inventory is not the same as 1 you can use until b is not equal to y|as soon as position is exactly the same as 0 you have the choice to find until a is at most 0|a is a good strategy where you should do build if iron 0 otherwise, if iron do build , or do run if not|b is an approach where it would be good to do use if iron is equal to y otherwise, if a do jump , or do use otherwise|b states that you should do jump if a is larger than y otherwise, if position do build , or do run if not|b is a good strategy where you should do use if a otherwise, if b do jump , or do jump as a last resort|whenever y you can run until finally position is smaller than y|if a is larger than 1 you can jump until finally b is equal to 1|if a is at most y you have the choice to run until b is smaller than 2|once b is greater than or equal to 1 you can run until finally inventory is less than or equal to 1|once b is larger than x you are able to jump until inventory is greater than 1|a means that it would be good to do jump if b is equal to 2 otherwise, if iron do use , or do use otherwise|a is an approach where it would be good to do find if position is greater than 0 otherwise, if a do find , or do jump if not|if inventory is greater than 2 you have the option to build until inventory is equal to x|b is an approach where you do find if position is not equal to y otherwise, if iron do jump , or do jump if no other options are possible|as soon as position is smaller than 1 you are able to jump until finally position is greater than or equal to 0|b is a tactic where it is advantageous to do jump if a is not equal to y otherwise, if a do run , or do find as a last resort|if position is larger than y you have the option to find until b is larger than 0|b suggests that it would be advantageous to do jump if iron is less than x otherwise, if position do jump , or do run otherwise|a means that it would be good to do build if iron 2 otherwise, if a do jump , or do find if no other options are possible|b is a tactic where it is advantageous to do use if a is smaller than 0 otherwise, if b do run , or do use if not|b is an approach where you do use if a is equal to 1 otherwise, if b do run , or do find if no other options are possible|if position is not equal to y you have the option to run until position is larger than x|whenever a is less than 0 you have the option to find until finally y|whenever a is greater than or equal to 2 you are able to jump until inventory is exactly the same as 0|a is an approach where it would be good to do run if position otherwise, if iron do run , or do find if no other options are possible|if a is smaller than 1 you have the option to find until a is less than 1|a is a tactic where it is advantageous to do find if position is not equal to x otherwise, if b do find , or do use otherwise|a is a good strategy where you should do jump if b is less than 1 otherwise, if iron do build , or do find as a last resort|a entails that you do build if a is smaller than 1 otherwise, if b do find , or do jump if not|whenever b is less than or equal to y you are able to run until finally b is larger than y|a is an approach where it would be good to do build if iron is not equal to 0 otherwise, if position do use , or do use as a last resort|b means that it would be good to do use if a is exactly the same as y otherwise, if a do use , or do use if not|b is a good strategy where you should do build if position y otherwise, if b do use , or do run if no other options are possible|a is a tactic where it is good to do build if b is less than 2 otherwise, if position do jump , or do jump as a last resort|when position is greater than 1 you have the option to use until a is greater than or equal to x|when b is greater than or equal to 2 you are able to build until finally a is exactly the same as y|a is a tactic where it is advantageous to do run if a 1 otherwise, if b do build , or do build as a last resort|whenever position is less than 0 you are able to jump until a is not the same as 1|a suggests that it would be advantageous to do run if iron y , or do use as a last resort|b is a strategy where you do use if a is larger than y otherwise, if b do run , or do build if no other options are possible|as soon as inventory is not the same as 2 you are able to build until position is larger than 0|b entails that you do jump if iron y otherwise, if iron do build , or do find if no other options are possible|b means that it would be good to do build if b is not the same as x otherwise, if b do find , or do use as a last resort|once inventory is at least 0 you can find until a is greater than 0|if a is equal to x you can build until finally position is at least y|a is an approach where it would be good to do find if position is less than 1 , or do build as a last resort|b is a tactic where it is advantageous to do jump if position otherwise, if a do jump , or do find as a last resort|as soon as inventory is smaller than 2 you have the choice to build until finally a is greater than 1|b is a tactic where it is good to do use if iron is less than y otherwise, if a do jump , or do build otherwise|a suggests that it would be advantageous to do find if iron is not equal to x otherwise, if iron do run , or do run if no other options are possible|whenever inventory is exactly the same as 1 you have the option to jump until finally a is at most 0|a is a tactic where it is good to do build if a is larger than 0 otherwise, if b do find , or do find as a last resort|whenever position is exactly the same as 2 you have the option to run until a is greater than 1|when b is less than 0 you can use until b is greater than or equal to 2|a suggests that it would be advantageous to do use if iron 0 otherwise, if position do jump , or do build otherwise|a is a tactic where it is advantageous to do use if iron 2 otherwise, if iron do use , or do find if not|when inventory is larger than 1 you have the option to run until finally a is not the same as x|a states that you should do find if b x otherwise, if a do jump , or do find if not|a is an approach where it would be good to do find if position is less than 1 , or do run if no other options are possible|a suggests that it would be advantageous to do run if b is not equal to x otherwise, if position do build , or do run if not|b suggests that it would be advantageous to do use if iron is greater than y otherwise, if iron do jump , or do find otherwise|whenever inventory is greater than or equal to x you have the option to run until finally inventory is equal to y|once b is larger than y you have the choice to build until finally position is smaller than 1|as soon as inventory is at least 0 you have the option to build until finally inventory is at most x|if inventory is not equal to 2 you have the option to run until finally position is not equal to 0|a is a strategy where you do jump if a is larger than 1 otherwise, if b do jump , or do find as a last resort|once a is less than or equal to y you are able to run until finally b is not equal to 1|b entails that you do use if a is less than x otherwise, if b do run , or do use if no other options are possible|as soon as b is less than or equal to y you can jump until finally position is not equal to 1|once inventory is not equal to 2 you can find until a is less than 0|a suggests that it would be advantageous to do run if position is equal to 0 otherwise, if position do use , or do run otherwise|as soon as a is less than 2 you are able to run until b is greater than or equal to 1|once position is smaller than 1 you can run until finally b is exactly the same as y|a is an approach where you do use if position is not equal to y otherwise, if b do build , or do run as a last resort|once inventory is not equal to 1 you have the option to build until a is smaller than 1|when b you are able to run until finally inventory is at least 0|as soon as position is equal to y you can find until a is less than or equal to 0|a is a strategy where you do find if b is larger than y otherwise, if b do use , or do jump if no other options are possible|b means that it would be good to do use if iron x otherwise, if b do run , or do build as a last resort|b is a strategy where you do run if iron otherwise, if iron do run , or do build otherwise|a suggests that it would be advantageous to do find if a is exactly the same as 2 otherwise, if b do run , or do find if no other options are possible|b means that it would be good to do jump if position is not the same as x otherwise, if a do build , or do build if no other options are possible|if position is less than y you are able to jump until finally position is greater than 1|once b is smaller than 0 you have the choice to build until finally position is less than 1|as soon as b is larger than 0 you have the option to run until finally a is not the same as y|a is an approach where you do find if b x otherwise, if iron do build , or do use if no other options are possible|a is a tactic where it is advantageous to do build if a is not the same as y otherwise, if position do build , or do run if no other options are possible|as soon as inventory is equal to 0 you have the choice to use until finally position is less than or equal to y|when position is larger than y you have the choice to use until inventory is less than 2|as soon as b is greater than or equal to y you are able to build until b is equal to x|whenever position is larger than y you are able to find until a is equal to y|when b is at least y you can jump until finally position is at most 0|a is a tactic where it is good to do run if iron 2 otherwise, if iron do find , or do use otherwise|a is a tactic where it is advantageous to do find if b 1 otherwise, if iron do use , or do build if no other options are possible|b is an approach where you do find if a y , or do run as a last resort|b is a tactic where it is advantageous to do jump if a is exactly the same as 2 otherwise, if iron do jump , or do find if not|b is a tactic where it is good to do jump if a is not the same as 2 otherwise, if b do jump , or do find otherwise|b is an approach where you do run if b y otherwise, if iron do use , or do use as a last resort|a is an approach where you do run if position is smaller than 2 , or do run if not|a entails that you do use if position 1 otherwise, if iron do find , or do run if no other options are possible|b is an approach where you do build if position is equal to y , or do build otherwise|a is an approach where you do jump if b is larger than 1 otherwise, if iron do find , or do jump if no other options are possible|a suggests that it would be advantageous to do find if iron is exactly the same as y otherwise, if iron do find , or do jump otherwise|a states that you should do run if b x otherwise, if b do run , or do run if not|a is a good strategy where you should do jump if iron is not equal to 0 otherwise, if position do find , or do build if not|a suggests that it would be advantageous to do find if b is larger than x otherwise, if position do use , or do run if no other options are possible|b entails that you do jump if position is equal to x otherwise, if position do find , or do use if not|whenever inventory is greater than 0 you are able to run until a is not the same as 1|a is an approach where you do run if a is greater than y otherwise, if b do run , or do jump otherwise|b suggests that it would be advantageous to do use if b is larger than y otherwise, if a do run , or do find if not|once position is at most 2 you can find until finally a is larger than 0|b is a tactic where it is good to do find if position is not equal to y otherwise, if a do jump , or do build if no other options are possible|if inventory is exactly the same as 0 you have the choice to find until inventory is larger than y|a is a tactic where it is advantageous to do find if b is exactly the same as y otherwise, if iron do run , or do use if no other options are possible|a states that you should do build if position is equal to x otherwise, if position do jump , or do build as a last resort|as soon as a is equal to 2 you can use until b is less than 0|when b is less than or equal to y you can find until finally b is larger than 2|if position is at least 1 you have the choice to jump until finally a is larger than 2|a entails that you do build if position is larger than 1 otherwise, if iron do find , or do run if not|as soon as b is greater than 2 you can use until a is greater than y|a is a tactic where it is good to do jump if b is smaller than 2 otherwise, if a do use , or do build if not|a states that you should do run if iron 2 otherwise, if b do run , or do build as a last resort|whenever a is at least x you have the option to run until a is at most 2|as soon as inventory is greater than or equal to 1 you are able to build until finally inventory is larger than y|as soon as inventory is exactly the same as 2 you can use until b is less than or equal to y|a states that you should do build if position is greater than 1 otherwise, if b do jump , or do jump otherwise|as soon as a is at least 0 you have the choice to jump until finally position is greater than or equal to 0|if position is not equal to 2 you can find until a is exactly the same as x|b is a tactic where it is advantageous to do build if b y otherwise, if iron do build , or do find otherwise|a means that it would be good to do run if b 1 otherwise, if position do jump , or do run otherwise|whenever position is less than 1 you are able to find until b is not the same as 2|whenever position is less than 2 you are able to build until inventory is equal to y|as soon as inventory is not the same as 0 you have the choice to use until finally position is at least 0|a is an approach where it would be good to do find if position 1 otherwise, if a do jump , or do build if not|when inventory is exactly the same as 0 you are able to use until b|whenever inventory is not the same as 0 you have the choice to find until inventory is not the same as y|a suggests that it would be advantageous to do find if position is larger than y , or do find as a last resort|whenever a is smaller than 1 you are able to find until finally position is smaller than y|a is a tactic where it is good to do find if iron x otherwise, if position do build , or do run if no other options are possible|a suggests that it would be advantageous to do find if b is equal to x otherwise, if b do run , or do find if no other options are possible|b is a strategy where you do build if b otherwise, if b do find , or do find as a last resort|when position is larger than 2 you have the option to jump until inventory is greater than or equal to 1|a is an approach where it would be good to do use if iron 0 otherwise, if iron do run , or do jump as a last resort|if inventory is greater than or equal to 1 you can run until position is greater than or equal to 0|as soon as inventory is less than 1 you have the choice to jump until inventory is at most 1|a suggests that it would be advantageous to do jump if a is not the same as 1 , or do build if no other options are possible|when position is larger than y you have the choice to run until finally position is exactly the same as 1|a is a good strategy where you should do use if iron is larger than 0 otherwise, if position do build , or do find as a last resort|when b is at most 0 you have the option to use until finally inventory is greater than y|b suggests that it would be advantageous to do find if a is smaller than 2 otherwise, if iron do find , or do find otherwise|a entails that you do build if iron is smaller than y|b is a tactic where it is advantageous to do build if a is not the same as y otherwise, if a do jump , or do use if not|a states that you should do run if position 1 otherwise, if a do run , or do run if no other options are possible|when b is equal to y you have the option to build until position is exactly the same as y|a is a tactic where it is good to do build if a is less than 2 otherwise, if iron do find , or do run otherwise|if position is equal to 0 you are able to jump until finally position is not the same as 1|a states that you should do jump if b 0 otherwise, if a do build , or do jump otherwise|b is an approach where it would be good to do build if a is smaller than 2 otherwise, if position do find , or do find if no other options are possible|as soon as inventory is smaller than 2 you have the choice to find until inventory is not equal to x|once position is not equal to x you have the option to build until a is at most x|whenever a is at least y you are able to find until inventory is at least x|whenever b is at least 0 you have the option to jump until finally position is exactly the same as y|b is a good strategy where you should do jump if a is less than 2 otherwise, if position do use , or do jump otherwise|a is a tactic where it is good to do use if a is not the same as 2 otherwise, if iron do jump , or do build otherwise|once a is not the same as 0 you have the option to use until finally position is equal to 2|if position is less than x you are able to build until finally position is not the same as y|a is a tactic where it is good to do use if b is smaller than 0 otherwise, if b do run , or do use otherwise|a is a strategy where you do build if position is equal to 2 otherwise, if a do jump , or do run as a last resort|a is a tactic where it is good to do find if b 1 otherwise, if a do jump , or do use if not|b entails that you do run if b is equal to x otherwise, if position do find , or do find otherwise|a entails that you do run if position 2 otherwise, if position do build , or do use otherwise|a suggests that it would be advantageous to do build if b is larger than 2 otherwise, if position do build , or do jump otherwise|a entails that you do jump if iron is exactly the same as x otherwise, if iron do find , or do run otherwise|a is a tactic where it is good to do build if position y otherwise, if b do find , or do use otherwise|a is a tactic where it is advantageous to do use if position is not equal to x otherwise, if iron do build , or do run otherwise|whenever a is greater than 1 you are able to use until a is at most y|b suggests that it would be advantageous to do find if b is larger than y otherwise, if b do build , or do use if no other options are possible|a means that it would be good to do use if iron is smaller than 0 otherwise, if a do run , or do find if no other options are possible|b is a good strategy where you should do use if iron y otherwise, if position do run , or do find if no other options are possible|if position is smaller than 0 you have the choice to use until inventory is not the same as 2|as soon as b is less than or equal to x you have the choice to build until finally a is greater than 2|a is a good strategy where you should do build if iron is exactly the same as 0 otherwise, if position do jump , or do find if not|b suggests that it would be advantageous to do use if a is not the same as x otherwise, if b do use , or do use as a last resort|a is a tactic where it is good to do use if b otherwise, if a do run , or do jump if not|b states that you should do run if a y , or do build otherwise|b entails that you do jump if a is not equal to 0 otherwise, if a do use , or do build if no other options are possible|as soon as position is not equal to 0 you have the option to find until finally b is equal to 0|a is a tactic where it is good to do build if b is greater than 1 otherwise, if a do jump , or do find if not|a is a strategy where you do build if a is smaller than y otherwise, if iron do find , or do run if no other options are possible|if inventory is equal to y you have the option to jump until finally a is not equal to y|as soon as b is less than y you have the option to use until finally position is exactly the same as x|if inventory is equal to y you can run until b is less than or equal to x|a is a strategy where you do find if a is smaller than x otherwise, if iron do build , or do find as a last resort|b means that it would be good to do run if b is larger than x otherwise, if b do run , or do use if no other options are possible|b is an approach where you do find if iron y otherwise, if iron do use , or do use if no other options are possible|when b is not the same as x you are able to run until finally b is less than 2|as soon as inventory is less than 1 you can build until finally inventory is equal to 0|b is an approach where it would be good to do use if b y otherwise, if position do build , or do find if no other options are possible|a states that you should do build if iron 1 otherwise, if iron do jump , or do run if no other options are possible|a is a strategy where you do run if b is less than y otherwise, if a do run , or do build as a last resort|a means that it would be good to do build if iron 1 , or do run as a last resort|when position is not equal to y you can use until finally a is less than x|a is an approach where it would be good to do build if b is exactly the same as y otherwise, if a do run , or do find if no other options are possible|a is a strategy where you do build if iron is greater than 0 otherwise, if position do run , or do build if not|a is an approach where you do find if iron is less than 2 otherwise, if b do jump , or do build if no other options are possible|once position is not the same as 0 you are able to run until finally position is not equal to 0|b is a strategy where you do jump if position is not the same as x , or do find otherwise|b is an approach where you do run if a is not the same as y , or do find if not|as soon as a is greater than y you can jump until finally x|as soon as position you have the option to jump until finally inventory is equal to 1|a is an approach where you do use if a x otherwise, if iron do run , or do use if not|as soon as inventory is equal to y you have the option to find until finally inventory|when b is exactly the same as 0 you have the choice to jump until inventory|b is a tactic where it is advantageous to do run if b otherwise, if position do find , or do run if no other options are possible|a is an approach where it would be good to do run if b is smaller than 2 otherwise, if position do use , or do find if not|b suggests that it would be advantageous to do run if iron is less than y otherwise, if b do jump , or do run if not|a suggests that it would be advantageous to do jump if iron is not equal to x otherwise, if b do build , or do run as a last resort|b is an approach where you do find if a is smaller than x otherwise, if a do build , or do run if not|b states that you should do find if a is smaller than 1 otherwise, if position do jump , or do use if not|b means that it would be good to do find if b y otherwise, if b do jump , or do run if not|if a is not the same as 2 you have the choice to use until finally inventory|whenever inventory is less than or equal to 0 you are able to build until finally position is at least x|once b is less than or equal to x you have the choice to run until finally a is not the same as 1|a entails that you do find if b otherwise, if a do find , or do run as a last resort|once y you can use until b is less than x|once inventory is less than x you are able to jump until position is greater than 1|b is a tactic where it is good to do jump if a is equal to 1 otherwise, if a do jump , or do find as a last resort|b is an approach where it would be good to do run if a is not the same as 2 otherwise, if b do use , or do build if not|a states that you should do use if b is equal to 2 otherwise, if b do jump , or do use if no other options are possible|a is a good strategy where you should do build if iron y otherwise, if iron do use , or do find otherwise|once b is greater than y you have the option to run until finally b is at least 0|a is a tactic where it is good to do find if b 2 otherwise, if a do use , or do run if not|when b is less than or equal to 2 you have the option to run until b is equal to 2|if position is not equal to 1 you are able to use until a is smaller than 1|b is a good strategy where you should do build if b is not equal to x , or do build as a last resort|a means that it would be good to do build if a y otherwise, if iron do build , or do use if no other options are possible|as soon as b is at most 1 you are able to build until finally inventory is equal to 0|when position is less than 2 you are able to find until b is not the same as y|a suggests that it would be advantageous to do build if b is less than 2 otherwise, if iron do use , or do jump if no other options are possible|b is a tactic where it is advantageous to do run if a x otherwise, if iron do build , or do jump otherwise|a is a tactic where it is good to do run if position y otherwise, if b do jump , or do find if not|a is a tactic where it is good to do build if b is smaller than 0 otherwise, if iron do find , or do build if no other options are possible|if b is larger than 1 you have the option to build until finally position is exactly the same as y|whenever b is smaller than x you are able to jump until finally position is less than 1|when position is at least x you have the choice to use until finally position is not equal to x|a suggests that it would be advantageous to do find if b is exactly the same as x otherwise, if b do run , or do jump as a last resort|as soon as position is smaller than y you are able to find until finally b is less than or equal to y|as soon as inventory is exactly the same as 0 you have the option to use until position is greater than or equal to x|a states that you should do jump if position is equal to 0 otherwise, if b do jump , or do run if not|as soon as a is less than or equal to 1 you have the option to use until finally b is greater than or equal to 0|whenever b is not equal to y you are able to build until position is less than or equal to y|a is a strategy where you do build if a otherwise, if position do find , or do jump if not|a is a good strategy where you should do use if a is exactly the same as y otherwise, if iron do jump , or do run otherwise|once position is less than 0 you have the choice to build until finally inventory is at most 1|a entails that you do jump if position is smaller than 0 otherwise, if b do build , or do find otherwise|a entails that you do use if position is larger than 1 otherwise, if b do build , or do run as a last resort|a is a strategy where you do jump if a is not the same as 2 otherwise, if position do build , or do jump if no other options are possible|whenever inventory is at most 1 you have the option to jump until inventory is exactly the same as 0|once inventory is not the same as y you have the option to find until finally a is greater than or equal to 2|if a is not equal to 2 you can build until inventory is larger than 0|when a is at least 2 you are able to jump until finally b is less than y|as soon as inventory is at least y you have the option to build until inventory is less than 0|a is an approach where you do find if position 1 otherwise, if position do find , or do run as a last resort|a is a tactic where it is good to do jump if position x otherwise, if iron do jump , or do use if not|a is an approach where it would be good to do build if iron otherwise, if position do find , or do build as a last resort|when a is less than 2 you have the choice to jump until finally a is not equal to x|as soon as position is exactly the same as 1 you are able to build until position is greater than 0|whenever b is not the same as 2 you can find until b is not the same as 1|a is a strategy where you do run if position is equal to x otherwise, if b do use , or do run if no other options are possible|a means that it would be good to do build if b is larger than 0 otherwise, if iron do jump , or do run if no other options are possible|a is an approach where you do build if a 0 otherwise, if a do run , or do use otherwise|as soon as inventory is greater than 1 you are able to use until finally a is smaller than y|b is a tactic where it is good to do run if position y otherwise, if a do jump , or do run as a last resort|if inventory is smaller than 0 you are able to jump until finally b is smaller than x|a means that it would be good to do run if a is greater than x otherwise, if iron do build , or do jump as a last resort|b is a tactic where it is advantageous to do find if b is smaller than y otherwise, if b do find , or do jump as a last resort|a is an approach where you do use if position is greater than y otherwise, if position do run , or do use if not|if b is less than or equal to 2 you can use until finally position is less than or equal to y|a states that you should do run if b is less than 2 otherwise, if position do jump , or do use if no other options are possible|a is an approach where it would be good to do use if position 2 , or do run as a last resort|whenever inventory is not the same as y you have the choice to jump until finally a|a is an approach where it would be good to do use if b otherwise, if b do run , or do jump if not|if position is less than x you are able to find until finally b is greater than 1|as soon as a is greater than or equal to x you have the choice to jump until finally position is less than 1|a is a tactic where it is advantageous to do jump if position is smaller than x otherwise, if a do build , or do jump as a last resort|once position is equal to 1 you are able to jump until finally inventory is at least 2|when position is at most 0 you have the option to jump until b is smaller than 1|a is a good strategy where you should do build if b 1 , or do jump as a last resort|b is an approach where it would be good to do jump if a is exactly the same as x otherwise, if a do run , or do run if no other options are possible|once a is at most 1 you have the choice to use until inventory is not equal to y|a is a strategy where you do jump if iron is not equal to y otherwise, if iron do run , or do jump if no other options are possible|b is a tactic where it is good to do run if iron x otherwise, if position do find , or do jump as a last resort|a is a strategy where you do build if a is greater than 1 otherwise, if position do use , or do build if no other options are possible|a means that it would be good to do jump if b 1 otherwise, if b do run , or do use as a last resort|as soon as position is larger than 0 you are able to run until finally inventory is smaller than x|b is an approach where you do use if position is smaller than y otherwise, if iron do jump , or do build as a last resort|b suggests that it would be advantageous to do run if a is less than 0 otherwise, if b do jump , or do jump otherwise|as soon as inventory you are able to use until position is smaller than y|whenever b is not the same as 1 you can jump until finally b is not equal to x|a is a tactic where it is advantageous to do use if iron is less than y otherwise, if iron do build , or do jump if no other options are possible|if b is greater than 0 you can use until inventory is greater than or equal to y|a is an approach where you do run if b y otherwise, if b do build , or do jump as a last resort|whenever position you are able to jump until position is less than or equal to 0|when b is greater than y you can run until b is not equal to 1|if a is greater than 0 you have the option to use until finally inventory is less than x|when b is greater than or equal to 2 you have the option to find until b is exactly the same as 0|b is a strategy where you do run if b is equal to 2 , or do find if not|if inventory is smaller than 2 you have the option to use until b is not equal to 1|a states that you should do jump if position is not the same as 1 , or do run otherwise|when position is greater than 2 you have the choice to use until finally inventory is less than y|whenever a is equal to 0 you can jump until finally position is larger than x|whenever b is larger than x you have the choice to jump until position is smaller than 0|a is a strategy where you do build if b 0 otherwise, if b do jump , or do use as a last resort|once position is not equal to 2 you can find until a|once a is at least 2 you can find until finally b is not the same as 1|when x you have the option to find until finally a is greater than 2|if inventory is less than or equal to y you have the choice to jump until position is at least 1|once b is at least 2 you can use until finally b is less than x|as soon as position is not equal to x you can run until position is smaller than 0|b entails that you do find if position 2 , or do use if no other options are possible|once a is smaller than y you have the option to build until a is less than or equal to y|a is a good strategy where you should do jump if iron 1 otherwise, if b do jump , or do run if no other options are possible|once b is smaller than y you have the option to build until finally inventory is greater than 0|b is a good strategy where you should do find if position otherwise, if a do jump , or do build if not|b is a good strategy where you should do build if a is not the same as 1 otherwise, if iron do find , or do use if not|when b you have the option to use until inventory is larger than 0|once position is not the same as 2 you can run until b is at least 2|a is a good strategy where you should do find if a is smaller than 1 otherwise, if position do build , or do find otherwise|as soon as a is less than or equal to 0 you have the choice to run until position is larger than 1|a is a strategy where you do find if b otherwise, if position do use , or do build if no other options are possible|a is an approach where you do build if iron is smaller than 0 otherwise, if a do jump , or do find if not|a is a strategy where you do run if b is greater than 0 otherwise, if iron do jump , or do jump if no other options are possible|as soon as inventory is exactly the same as 1 you can use until finally a|a is a tactic where it is good to do jump if iron 0 , or do find if no other options are possible|as soon as inventory is not the same as y you have the option to run until a is greater than or equal to 1|whenever inventory is at least x you are able to jump until inventory is exactly the same as y|a is a tactic where it is advantageous to do run if a is larger than 1 otherwise, if a do jump , or do jump as a last resort|when position is exactly the same as 0 you have the option to find until inventory is larger than y|whenever position is less than x you can run until finally b|a states that you should do find if iron is equal to y otherwise, if iron do jump , or do build if not|b means that it would be good to do use if iron is smaller than x otherwise, if a do build , or do find as a last resort|a is an approach where you do run if b is larger than x otherwise, if iron do build , or do run if not|a is an approach where it would be good to do find if position 2 otherwise, if b do build , or do use otherwise|b is a good strategy where you should do jump if position is exactly the same as x otherwise, if iron do use , or do build if no other options are possible|b states that you should do jump if a is not the same as 2 otherwise, if b do build , or do find if no other options are possible|b is a tactic where it is advantageous to do build if iron x otherwise, if position do jump , or do jump if not|once position is less than or equal to x you are able to find until finally inventory is equal to 2|if position is at most x you are able to use until finally inventory is less than or equal to 1|whenever inventory is larger than 0 you have the choice to jump until a|a is an approach where it would be good to do use if iron otherwise, if iron do find , or do find otherwise|a entails that you do run if b otherwise, if iron do find , or do build as a last resort|as soon as position is not equal to y you have the choice to use until position is not equal to x|as soon as position is smaller than 0 you have the choice to build until finally inventory is larger than 0|whenever inventory is less than x you are able to jump until finally inventory is at least 0|b states that you should do find if a y otherwise, if b do build , or do run if not|if b is not equal to x you are able to use until inventory is not equal to 0|a entails that you do jump if b 1 otherwise, if position do jump , or do use if no other options are possible|a is a tactic where it is advantageous to do use if a is equal to y|a entails that you do use if iron is not the same as x otherwise, if b do jump , or do run if no other options are possible|whenever inventory is greater than y you are able to run until a is equal to x|as soon as b is not equal to 2 you can run until b is at least 1|a suggests that it would be advantageous to do run if a is less than 0 otherwise, if iron do find , or do jump otherwise|b suggests that it would be advantageous to do use if iron 2 , or do build as a last resort|when position is greater than or equal to 0 you have the option to run until finally a is less than or equal to x|a states that you should do build if iron is not the same as x otherwise, if position do build , or do use otherwise|whenever b is less than or equal to 1 you can build until position is at most x|a is a strategy where you do find if a is not the same as x otherwise, if a do use , or do build as a last resort|a is an approach where you do run if position is less than 1 otherwise, if a do build , or do run otherwise|whenever inventory is less than or equal to y you have the option to jump until b is smaller than 0|as soon as position is exactly the same as x you have the option to use until inventory is at least y|if a is smaller than 0 you are able to use until finally position is less than or equal to 0|a is an approach where it would be good to do run if a is not equal to y otherwise, if position do run , or do use if not|a suggests that it would be advantageous to do use if b is not the same as x otherwise, if iron do find , or do find as a last resort|if inventory is exactly the same as 0 you have the option to jump until a is not the same as y|b is a tactic where it is advantageous to do find if position is larger than y otherwise, if iron do run , or do build otherwise|b is a tactic where it is advantageous to do find if position x otherwise, if iron do use , or do jump as a last resort|whenever a you have the choice to use until a|b suggests that it would be advantageous to do build if b x otherwise, if a do jump , or do run if not|a means that it would be good to do run if iron is less than 2 otherwise, if b do build , or do jump as a last resort|a is an approach where it would be good to do jump if b 2 otherwise, if position do use , or do run otherwise|when position is greater than or equal to x you are able to find until position is at most 1|when a is at least 1 you have the choice to build until finally position is smaller than 2|a is a good strategy where you should do run if position x otherwise, if position do find , or do build if not|b is a tactic where it is advantageous to do find if b is larger than x otherwise, if iron do jump , or do jump if no other options are possible|as soon as position is equal to 1 you have the choice to use until finally inventory is at most y|a is a good strategy where you should do find if iron is not the same as 0 otherwise, if a do use , or do build otherwise|a suggests that it would be advantageous to do build if iron otherwise, if b do build , or do find if not|a suggests that it would be advantageous to do run if position is greater than 1 otherwise, if iron do use , or do jump as a last resort|a states that you should do run if b is less than 2 otherwise, if b do run , or do build otherwise|b means that it would be good to do jump if a otherwise, if iron do build , or do find if no other options are possible|a is a tactic where it is advantageous to do use if position is not equal to 2 otherwise, if iron do run , or do build if no other options are possible|a is a tactic where it is good to do jump if b is smaller than x otherwise, if position do run , or do use otherwise|once b is not equal to 2 you have the choice to run until position is at least y|b is a tactic where it is good to do find if a is less than 0 , or do find if not|when inventory is not the same as x you can jump until finally b is larger than 2|once inventory is larger than 0 you are able to find until finally a is at most 2|once position is at most 0 you have the option to find until finally inventory is not equal to x|a is an approach where it would be good to do build if a is larger than 0|if a is exactly the same as 1 you can find until a is smaller than y|b is a tactic where it is advantageous to do build if a is not equal to 0 otherwise, if position do use , or do run as a last resort|a suggests that it would be advantageous to do run if position is less than 1 otherwise, if position do find , or do run otherwise|a is a tactic where it is advantageous to do find if a is less than y , or do jump if no other options are possible|if position is greater than or equal to 0 you have the choice to use until finally inventory is greater than or equal to 0|when a is greater than or equal to 2 you have the option to build until inventory is smaller than 0|a states that you should do jump if iron is not the same as 0 otherwise, if a do run , or do use otherwise|as soon as position is at most 2 you have the option to run until a is larger than 2|a entails that you do jump if b is exactly the same as x otherwise, if b do build , or do jump if not|b suggests that it would be advantageous to do build if iron is smaller than x otherwise, if position do use , or do build if no other options are possible|if inventory is smaller than y you can find until b is equal to 2|once position is greater than or equal to 2 you are able to jump until b is less than y|a means that it would be good to do build if iron is not the same as x otherwise, if a do use , or do run as a last resort|when b is greater than 2 you are able to use until finally a is less than or equal to x|once b is exactly the same as 0 you are able to run until finally b is greater than 1|when position is smaller than y you have the choice to run until finally b is larger than x|b means that it would be good to do run if position is smaller than x otherwise, if b do use , or do jump otherwise|a is an approach where it would be good to do jump if position is equal to x otherwise, if b do find , or do build otherwise|if position is exactly the same as 2 you have the choice to run until a is larger than x|once b is at most 0 you are able to use until a is not equal to 2|if position is greater than y you have the option to run until position is at most 1|b is a good strategy where you should do jump if a is larger than x otherwise, if iron do jump , or do use if no other options are possible|b is a tactic where it is good to do find if iron is larger than x otherwise, if a do build , or do build if no other options are possible|b is a strategy where you do build if b y otherwise, if b do find , or do use as a last resort|a means that it would be good to do build if position 1 otherwise, if iron do find , or do find as a last resort|a states that you should do jump if a is not equal to 1 otherwise, if a do use , or do find otherwise|as soon as a is not equal to 0 you are able to use until a is not the same as 0|when position is not the same as y you have the choice to run until a is not the same as 1|if b is exactly the same as 1 you can build until position is smaller than 1|a suggests that it would be advantageous to do use if position is greater than 2 otherwise, if position do find , or do jump as a last resort|a entails that you do find if iron 0 otherwise, if a do run , or do run if not|a states that you should do run if a is equal to 2 otherwise, if position do jump , or do find otherwise|a is an approach where you do build if b is less than y otherwise, if iron do build , or do jump otherwise|a is a strategy where you do find if a is greater than 1 otherwise, if position do find , or do run if not|if a is at most x you can jump until finally a is at least y|as soon as a is less than or equal to y you are able to jump until finally inventory is larger than y|once inventory is greater than 0 you can use until finally inventory is equal to 0|whenever b is not the same as y you can build until b is greater than or equal to 0|b is a tactic where it is good to do run if iron otherwise, if position do build , or do find otherwise|when position is less than or equal to 0 you can run until finally inventory is equal to 0|as soon as x you are able to find until finally inventory is smaller than 0|if position is exactly the same as x you have the choice to use until finally a is at least y|once inventory is larger than 2 you can find until finally position is at least 1|as soon as a is greater than or equal to 0 you are able to jump until finally b is not equal to 2|a means that it would be good to do find if a otherwise, if iron do run , or do jump if not|if inventory is equal to 0 you have the option to run until b is less than y|a is an approach where it would be good to do build if position is exactly the same as x otherwise, if b do run , or do jump if not|b states that you should do find if a is larger than y otherwise, if b do find , or do jump if not|if b is less than or equal to 0 you have the choice to use until position is not the same as 1|a entails that you do jump if b is smaller than 2 otherwise, if position do run , or do find otherwise|when inventory is not equal to x you have the choice to find until position is equal to 1|when b is less than 2 you are able to find until a is greater than or equal to 1|a is an approach where it would be good to do run if a is greater than 0 otherwise, if iron do run , or do build if no other options are possible|a means that it would be good to do find if iron is not equal to y otherwise, if a do use , or do use if no other options are possible|when inventory is not the same as 0 you can jump until position is equal to x|a is an approach where you do find if iron 2 otherwise, if b do find , or do build if not|whenever position you have the option to find until finally position is at least 1|a states that you should do run if position is less than 0 otherwise, if a do find , or do build if no other options are possible|whenever a is less than or equal to 2 you have the option to build until b is greater than or equal to 1|a is a tactic where it is good to do run if a is not the same as 0 otherwise, if a do run , or do build if not|b is an approach where you do jump if b is larger than y otherwise, if iron do run , or do find if no other options are possible|as soon as b is not the same as 2 you are able to jump until finally position is larger than 0|as soon as position is smaller than 1 you can use until b is not the same as y|b is a strategy where you do find if a is not equal to 1 otherwise, if b do find , or do run as a last resort|once b is equal to 0 you are able to use until finally position is not the same as y|a is a tactic where it is good to do run if a 0 otherwise, if a do use , or do use if no other options are possible|if b is equal to 2 you are able to find until a is smaller than 1|if inventory is less than or equal to 0 you have the choice to use until position is at least x|a is a tactic where it is good to do run if position is larger than x otherwise, if iron do build , or do run if no other options are possible|b is an approach where you do run if iron is not the same as x otherwise, if iron do find , or do build if no other options are possible|as soon as a is greater than or equal to 0 you have the option to use until a is larger than 1|a is a tactic where it is advantageous to do run if iron 0 otherwise, if iron do jump , or do build as a last resort|if a is less than x you have the option to jump until b is not equal to 2|b is an approach where you do find if a x , or do find as a last resort|whenever b you have the option to use until position is greater than or equal to 1|once a is less than 0 you have the choice to find until a is not the same as 0|when b is not equal to y you are able to build until a is greater than or equal to 0|b states that you should do find if position is smaller than 0|a is a tactic where it is good to do use if iron x otherwise, if a do use , or do build otherwise|b suggests that it would be advantageous to do find if position is not the same as x otherwise, if iron do find , or do jump otherwise|once b is larger than 2 you can run until b is less than or equal to 1|a is a good strategy where you should do build if b is less than 0 otherwise, if a do build , or do use otherwise|b suggests that it would be advantageous to do run if a is not equal to 1 otherwise, if b do jump , or do run if not|as soon as a is equal to 2 you have the choice to use until finally position is smaller than x|if inventory is less than y you have the option to use until finally b is greater than or equal to x|as soon as a is at least y you can build until a is less than x|a is a strategy where you do build if iron is not equal to y otherwise, if iron do use , or do run if not|once inventory is less than 2 you have the option to use until finally b is at least x|a suggests that it would be advantageous to do use if a is less than 2 otherwise, if position do use , or do use otherwise|a is a tactic where it is advantageous to do find if a is less than 2 otherwise, if a do find , or do run if no other options are possible|b means that it would be good to do use if iron y otherwise, if a do jump , or do use otherwise|b suggests that it would be advantageous to do jump if b x otherwise, if a do jump , or do find if no other options are possible|once a is not equal to y you have the option to find until finally inventory is exactly the same as 1|once b is less than 1 you have the option to use until finally a|a is an approach where it would be good to do use if a is less than 0 otherwise, if b do use , or do run as a last resort|whenever inventory is not the same as 0 you have the choice to jump until a is at least x|a is a strategy where you do use if position y otherwise, if iron do build , or do jump as a last resort|a suggests that it would be advantageous to do use if position is not the same as 2 otherwise, if iron do find , or do jump if not|a is an approach where it would be good to do find if iron 1 otherwise, if b do jump , or do use otherwise|once inventory is smaller than 1 you have the choice to find until inventory is greater than 2|a suggests that it would be advantageous to do jump if iron is not the same as 0 otherwise, if position do use , or do find otherwise|a suggests that it would be advantageous to do run if a is not equal to y otherwise, if b do use , or do run if not|a suggests that it would be advantageous to do jump if position is exactly the same as 1 otherwise, if position do build , or do build otherwise|whenever b is not the same as y you have the choice to find until position is larger than x|when position is smaller than x you are able to run until finally inventory is not equal to 2|once a is greater than 0 you are able to run until a|if inventory is less than or equal to 0 you are able to jump until finally b is at most 1|b is an approach where you do run if a is not equal to y otherwise, if b do run , or do find if not|whenever inventory is equal to x you are able to find until finally a is at most x|whenever b is smaller than 0 you are able to jump until inventory is less than x|whenever inventory is less than or equal to y you have the option to find until inventory is not the same as 2|as soon as a is at least x you have the option to run until finally a is not equal to x|a is a good strategy where you should do find if position x otherwise, if a do run , or do use otherwise|b is a strategy where you do find if iron otherwise, if a do build , or do run if not|b is a strategy where you do use if position is smaller than x otherwise, if position do use , or do use as a last resort|whenever b is greater than 1 you have the choice to build until finally a is greater than 0|when b is at least 2 you are able to jump until b is less than 1|b suggests that it would be advantageous to do find if b x otherwise, if position do run , or do use if no other options are possible|b is a good strategy where you should do jump if b is not equal to x otherwise, if a do build , or do run as a last resort|a is a tactic where it is advantageous to do jump if b is not equal to 1 otherwise, if iron do find , or do build otherwise|a means that it would be good to do build if iron is less than 0 otherwise, if b do use , or do find otherwise|a entails that you do run if b 2 otherwise, if b do use , or do build if not|as soon as a is less than x you have the option to jump until finally b is less than 1|a is a tactic where it is advantageous to do find if a is exactly the same as 0 otherwise, if position do run , or do find as a last resort|b entails that you do jump if a is not the same as 1|whenever a is greater than or equal to 1 you have the choice to jump until finally a is equal to 0|a is a tactic where it is advantageous to do find if iron y otherwise, if b do find , or do use as a last resort|whenever position is less than or equal to x you have the choice to find until a is larger than y|a states that you should do jump if b is exactly the same as 1 otherwise, if position do find , or do run as a last resort|a states that you should do find if iron is not the same as 1 , or do find otherwise|a is a good strategy where you should do find if iron x otherwise, if iron do use , or do use if no other options are possible|if b is larger than 1 you have the option to find until finally a is at least y|a is a tactic where it is advantageous to do find if iron is equal to y otherwise, if b do find , or do use if no other options are possible|a is a tactic where it is advantageous to do build if iron y otherwise, if a do use , or do build as a last resort|a is an approach where it would be good to do jump if b x otherwise, if iron do jump , or do build if no other options are possible|b is a good strategy where you should do use if iron is greater than y otherwise, if b do run , or do build otherwise|a is a tactic where it is advantageous to do build if iron is not the same as x otherwise, if position do jump , or do find as a last resort|a is a tactic where it is advantageous to do build if a is greater than x otherwise, if iron do find , or do run if not|a is a strategy where you do use if position 0 otherwise, if b do jump , or do use if not|a is an approach where you do use if b is smaller than 1 otherwise, if b do jump , or do build if not|a suggests that it would be advantageous to do jump if b 1 otherwise, if a do run , or do use otherwise|if position is at least y you are able to use until b is less than or equal to 0|b is a good strategy where you should do run if iron is greater than y otherwise, if a do use , or do use if no other options are possible|a is a tactic where it is good to do run if a y otherwise, if b do find , or do find as a last resort|when position is less than or equal to 1 you have the option to use until position is at least 0|a is an approach where you do jump if b is less than 0 otherwise, if iron do find , or do use otherwise|a is a tactic where it is good to do run if a 0 otherwise, if iron do use , or do jump if not|as soon as a is exactly the same as y you can find until a is greater than 1|a entails that you do jump if b y otherwise, if position do jump , or do use if no other options are possible|whenever y you can find until finally inventory is larger than 1|a is a strategy where you do run if position is less than 2 otherwise, if iron do use , or do build if no other options are possible|a is a tactic where it is good to do find if position is not the same as 2|b is a good strategy where you should do use if a is greater than 0 otherwise, if b do build , or do find otherwise|a states that you should do use if b is exactly the same as x otherwise, if iron do use , or do build as a last resort|a is an approach where it would be good to do build if position y otherwise, if a do find , or do use as a last resort|when b is less than y you are able to build until position is not equal to 2|b is a good strategy where you should do find if a is not the same as x otherwise, if position do jump , or do run if no other options are possible|b is a tactic where it is good to do run if a is not equal to x otherwise, if position do find , or do run if no other options are possible|b states that you should do run if iron x otherwise, if position do find , or do run otherwise|if position is not equal to 1 you are able to run until position is not the same as 0|b entails that you do build if a y otherwise, if b do build , or do find otherwise|when b is greater than y you are able to find until position is exactly the same as 2|once position is larger than 2 you have the option to use until finally inventory is less than or equal to y|when inventory is greater than or equal to 2 you are able to jump until position is at least 0|b is a good strategy where you should do jump if position is exactly the same as y otherwise, if iron do find , or do run otherwise|a entails that you do run if iron is smaller than y otherwise, if iron do run , or do use if no other options are possible|a is an approach where it would be good to do run if position y otherwise, if b do use , or do use if not|once inventory is at most 1 you have the choice to build until a is smaller than y|as soon as position is larger than y you can run until finally position is not the same as x|b is a tactic where it is good to do find if b 1|b is a tactic where it is good to do jump if iron otherwise, if position do use , or do find as a last resort|b is a tactic where it is advantageous to do find if a is smaller than x otherwise, if position do build , or do build otherwise|a is a tactic where it is advantageous to do use if a is larger than 1 , or do find as a last resort|whenever b is less than y you are able to jump until finally b is exactly the same as 0|a is a good strategy where you should do build if iron 0 otherwise, if b do jump , or do jump as a last resort|b is a good strategy where you should do build if a is less than 2 otherwise, if iron do find , or do use otherwise|b is an approach where you do jump if position x otherwise, if iron do build , or do build as a last resort|b is a good strategy where you should do find if a is greater than y otherwise, if a do jump , or do build if no other options are possible|a means that it would be good to do jump if a 0 otherwise, if b do jump , or do run if not|once a is not equal to 1 you have the choice to find until finally b is smaller than 0|a is a tactic where it is good to do build if b is equal to x otherwise, if a do jump , or do find if no other options are possible|once position is larger than 0 you have the choice to jump until finally a is smaller than 1|whenever position is exactly the same as 1 you are able to use until finally b is less than or equal to 2|when a is greater than or equal to 2 you have the option to use until finally inventory is at least x|once b is equal to 1 you have the option to find until a is larger than 0|when inventory is exactly the same as x you are able to use until finally position is greater than x|when y you can build until b is at least 0|b suggests that it would be advantageous to do use if a is not equal to 1 otherwise, if position do find , or do build if no other options are possible|whenever position is at least 2 you can run until position is less than or equal to y|a means that it would be good to do build if iron is less than y otherwise, if iron do run , or do build as a last resort|a suggests that it would be advantageous to do find if iron y otherwise, if position do run , or do use otherwise|a is a tactic where it is good to do use if iron is not the same as x otherwise, if b do find , or do use as a last resort|b suggests that it would be advantageous to do jump if position y , or do find otherwise|when a is greater than y you have the option to jump until b is at most 0|when b is less than 0 you can find until b is not the same as 1|if position is not the same as 2 you are able to build until position is less than or equal to 2|b is an approach where you do use if iron y otherwise, if position do use , or do build if not|b suggests that it would be advantageous to do jump if iron is larger than y otherwise, if iron do build , or do build as a last resort|a is a good strategy where you should do use if a is exactly the same as x otherwise, if iron do run , or do jump if not|as soon as a is greater than or equal to 2 you are able to build until position is greater than or equal to x|a entails that you do jump if b is equal to 0 otherwise, if position do jump , or do build otherwise|if b is less than or equal to 2 you can run until position is equal to 2|if inventory is larger than y you are able to build until finally b is greater than or equal to 0|a is an approach where you do use if b 1 otherwise, if iron do build , or do run if no other options are possible|b is an approach where you do build if iron x otherwise, if a do use , or do build otherwise|a is a strategy where you do use if position is greater than x , or do build otherwise|when a is not the same as 1 you are able to build until finally b is less than y|a entails that you do jump if a is exactly the same as y otherwise, if a do find , or do find otherwise|if inventory is greater than 2 you have the choice to jump until finally b is at least y|once a is greater than 1 you have the option to run until position is not the same as 0|if inventory is equal to y you have the choice to use until finally a|b is a strategy where you do run if iron is not the same as y , or do build if no other options are possible|once inventory is not the same as 2 you have the choice to build until finally b is not the same as y|b means that it would be good to do use if b is less than y otherwise, if iron do build , or do run otherwise|b is an approach where you do use if b is greater than x otherwise, if a do jump , or do build if no other options are possible|a entails that you do run if position is not the same as 1 otherwise, if iron do find , or do find if no other options are possible|when inventory is at least x you have the choice to jump until b is not equal to 2|once b is equal to x you have the choice to find until inventory is greater than 1|b is a strategy where you do run if a x otherwise, if a do find , or do use as a last resort|a means that it would be good to do jump if iron y otherwise, if a do find , or do run if not|a suggests that it would be advantageous to do run if b 0 otherwise, if iron do find , or do run otherwise|as soon as inventory is exactly the same as 0 you are able to run until finally b is greater than 1|as soon as b is larger than y you have the choice to jump until finally b is exactly the same as 1|a states that you should do use if position is not the same as 2 otherwise, if a do find , or do use if no other options are possible|when a is larger than x you are able to run until a is at most x|b is a good strategy where you should do build if b x otherwise, if a do build , or do find if not|whenever inventory is greater than 0 you are able to run until finally inventory is less than 1|a is an approach where it would be good to do build if iron is greater than x otherwise, if iron do find , or do run as a last resort|when inventory is less than or equal to x you can find until finally inventory is less than or equal to 0|b is an approach where it would be good to do jump if position otherwise, if iron do jump , or do run if no other options are possible|b is an approach where it would be good to do find if b is larger than y otherwise, if b do build , or do jump if not|b is a good strategy where you should do find if position otherwise, if a do run , or do build as a last resort|when inventory is not the same as x you are able to use until finally inventory is not equal to x|a is an approach where you do find if a x otherwise, if a do run , or do find if no other options are possible|when a is less than or equal to y you are able to find until finally b is at least 2|if b is greater than or equal to 2 you are able to run until finally inventory|when position is less than or equal to 1 you have the option to use until position is equal to 1|once a is at least 2 you can run until inventory is greater than or equal to 0|a is a strategy where you do jump if b is exactly the same as 0 otherwise, if iron do jump , or do run if no other options are possible|a means that it would be good to do run if a y otherwise, if b do jump , or do build otherwise|a is a tactic where it is advantageous to do find if b is not equal to x otherwise, if iron do find , or do build otherwise|when a is exactly the same as y you are able to run until a is greater than or equal to 1|if position is smaller than 1 you have the option to build until finally inventory is at most 0|as soon as b is at least x you can jump until x|when inventory is smaller than x you have the option to build until a is greater than or equal to 1|if a is exactly the same as 0 you have the option to build until finally inventory|a is a strategy where you do use if position is greater than 1 , or do jump if no other options are possible|when a is greater than y you can build until b is equal to 0|whenever a is greater than 0 you can build until position is at most 2|a is a tactic where it is good to do run if position is equal to 0 otherwise, if b do run , or do use otherwise|once b is equal to x you have the choice to jump until finally b is larger than 0|a entails that you do find if b is larger than 1 otherwise, if iron do run , or do build otherwise|a is a tactic where it is good to do jump if position x otherwise, if b do build , or do jump as a last resort|a means that it would be good to do jump if a is less than 2 otherwise, if a do jump , or do build as a last resort|if position is at least y you are able to run until finally a is larger than 2|whenever a is not the same as 1 you have the option to build until finally b is greater than or equal to 0|as soon as a is not equal to 2 you can build until position is exactly the same as 2|a is a tactic where it is good to do use if position x otherwise, if a do use , or do find otherwise|a suggests that it would be advantageous to do jump if b is greater than 2 otherwise, if b do find , or do use if no other options are possible|when a is smaller than 2 you have the choice to use until inventory is greater than 2|a states that you should do use if position 1 otherwise, if iron do run , or do build if no other options are possible|b suggests that it would be advantageous to do use if iron is larger than x otherwise, if a do use , or do find as a last resort|b is a tactic where it is good to do find if a is not the same as 0 otherwise, if a do jump , or do build otherwise|a is a tactic where it is advantageous to do jump if a y otherwise, if b do run , or do build if no other options are possible|whenever position is equal to x you can build until b is less than or equal to 2|once position is less than x you are able to use until finally inventory is less than or equal to 1|once a is smaller than 2 you can run until position is at most 1|if b is at least y you are able to run until finally inventory is not the same as 0|b is a strategy where you do build if a is not the same as 0 otherwise, if b do find , or do jump otherwise|if position is exactly the same as 1 you can find until finally a is at least 0|b is a strategy where you do run if iron is not the same as y otherwise, if b do find , or do build otherwise|whenever x you can jump until position is not the same as x|whenever a is smaller than x you are able to run until b is at least y|when b is at least 1 you are able to build until finally b is not the same as 0|when b is greater than or equal to 1 you have the option to find until inventory is at least 1|as soon as a is greater than 0 you have the choice to run until finally inventory is less than or equal to y|b means that it would be good to do build if a is not the same as 0 otherwise, if position do find , or do find as a last resort|a is an approach where you do jump if b y otherwise, if position do jump , or do jump as a last resort|once b is at least 2 you have the option to find until finally position is less than or equal to y|b states that you should do jump if iron is larger than x otherwise, if b do find , or do jump otherwise|if b is at most 1 you have the choice to jump until finally position is not the same as y|as soon as position is greater than or equal to x you have the choice to jump until inventory is equal to 1|a is a strategy where you do use if a is smaller than y otherwise, if position do jump , or do use as a last resort|a suggests that it would be advantageous to do jump if position is greater than y otherwise, if a do use , or do find if not|when b is at most 0 you have the choice to use until a is not equal to 1|b is an approach where you do build if iron is not the same as x otherwise, if b do find , or do find if not|as soon as b is greater than or equal to 0 you can build until finally b is not the same as 0|a entails that you do jump if position is not the same as y otherwise, if position do find , or do use if no other options are possible|a is an approach where it would be good to do find if position 2 otherwise, if iron do run , or do use if no other options are possible|a is a strategy where you do find if position is larger than y otherwise, if iron do jump , or do jump as a last resort|whenever position is at least 0 you have the option to jump until finally position is at least x|if inventory is not the same as 1 you have the choice to build until inventory is less than 0|a states that you should do jump if b 0 otherwise, if position do build , or do run if no other options are possible|a is a tactic where it is advantageous to do find if b is equal to y otherwise, if b do find , or do run as a last resort|whenever inventory is equal to 1 you are able to find until finally b is at least 2|once inventory is at most 0 you have the option to run until finally b is less than or equal to y|as soon as a is equal to 1 you have the choice to use until finally b is at most 1|if a is greater than 0 you have the choice to build until inventory is equal to x|once a is at least y you have the option to use until position is less than or equal to 0|a is an approach where you do jump if position 1 otherwise, if iron do find , or do use otherwise|a suggests that it would be advantageous to do build if iron x otherwise, if position do run , or do run if no other options are possible|b is an approach where you do run if position is equal to x otherwise, if position do find , or do find if not|a is a good strategy where you should do run if a is larger than x otherwise, if iron do jump , or do build otherwise|b is an approach where it would be good to do use if position y otherwise, if b do run , or do find otherwise|a is a strategy where you do run if iron 2 , or do find as a last resort|b is an approach where you do find if a is exactly the same as 1 , or do run otherwise|b states that you should do use if b x , or do use if no other options are possible|whenever inventory is less than or equal to x you have the option to jump until b is greater than or equal to y|whenever inventory is greater than x you can find until inventory is not equal to 1|a means that it would be good to do run if a otherwise, if a do build , or do use otherwise|if a is not the same as 2 you have the option to jump until finally position is at most 1|a is an approach where it would be good to do run if b 0 otherwise, if b do jump , or do use if not|when position is greater than or equal to y you can jump until a is greater than x|once a is greater than or equal to x you are able to build until finally b is greater than x|a is a strategy where you do jump if a 0 otherwise, if b do build , or do use otherwise|a states that you should do find if a is equal to 1 otherwise, if b do find , or do find otherwise|b is a tactic where it is advantageous to do jump if iron is equal to y otherwise, if position do jump , or do use otherwise|a states that you should do jump if iron is less than y otherwise, if position do use , or do build if not|b is an approach where you do build if a is less than x otherwise, if position do find , or do find if no other options are possible|b is a strategy where you do find if a is smaller than 1 , or do use otherwise|when a is at most y you have the choice to find until finally inventory is exactly the same as x|if inventory is greater than or equal to 2 you are able to jump until a is greater than or equal to 0|when position is greater than y you have the option to use until finally b is not the same as 2|once position is greater than 0 you have the option to run until finally a is less than or equal to y|once inventory is exactly the same as 1 you are able to run until b is not the same as 1|whenever b is not the same as 0 you have the option to jump until b is exactly the same as 0|b states that you should do jump if a is equal to 2 otherwise, if position do jump , or do build otherwise|whenever b is greater than or equal to 1 you have the option to use until a is not equal to 2|whenever position is equal to x you can jump until a is not the same as 1|when b is exactly the same as 0 you can run until b is greater than or equal to y|a is a strategy where you do build if position 0 otherwise, if position do find , or do use otherwise|a states that you should do use if a is not the same as y otherwise, if a do use , or do use otherwise|a means that it would be good to do run if iron is not the same as 2 otherwise, if a do jump , or do use as a last resort|a is an approach where you do find if a 0 otherwise, if position do build , or do run if no other options are possible|if position is smaller than 2 you can jump until inventory is less than or equal to 0|a is a tactic where it is good to do find if a 1 otherwise, if a do build , or do find if not|once b is less than or equal to 2 you can find until finally b is not the same as y|a is a strategy where you do build if a is larger than y otherwise, if b do use , or do find if no other options are possible|b is a tactic where it is good to do jump if a is not equal to 1 otherwise, if iron do find , or do jump otherwise|a is an approach where it would be good to do find if b is smaller than x otherwise, if iron do use , or do find if no other options are possible|b states that you should do run if a y otherwise, if a do build , or do jump as a last resort|as soon as a is larger than y you have the option to find until a is greater than 2|when inventory is less than or equal to y you have the choice to run until finally a is greater than 2|whenever position is less than or equal to 2 you are able to use until b is at least 2|a is a tactic where it is good to do jump if a is equal to 1 otherwise, if iron do run , or do find as a last resort|once inventory is larger than 0 you can run until a is smaller than x|b entails that you do build if b is smaller than 0 , or do run if no other options are possible|as soon as b is exactly the same as 2 you have the option to run until finally b is less than or equal to 2|a is a tactic where it is advantageous to do find if position 0 otherwise, if a do use , or do build if not|b is a strategy where you do run if b x otherwise, if iron do use , or do build otherwise|b means that it would be good to do find if position otherwise, if position do use , or do jump if no other options are possible|once position is not equal to 2 you have the option to build until inventory is less than or equal to 1|when position is less than or equal to 0 you are able to run until finally inventory is at most 2|as soon as b is at least 1 you have the choice to jump until b is not equal to x|b suggests that it would be advantageous to do find if b is exactly the same as y otherwise, if position do find , or do build if not|as soon as inventory is equal to x you have the choice to find until finally a is greater than or equal to 0|a is an approach where it would be good to do jump if position is not equal to x otherwise, if position do build , or do find if no other options are possible|b states that you should do run if b is equal to y , or do use if not|a is a tactic where it is advantageous to do run if b is not equal to 0 otherwise, if iron do run , or do find if not|as soon as inventory is exactly the same as 1 you have the option to jump until position is greater than or equal to 2|as soon as a is not the same as 2 you have the choice to build until finally a is larger than y|a entails that you do use if b x otherwise, if position do find , or do jump if not|b suggests that it would be advantageous to do run if b is not the same as x otherwise, if iron do run , or do run if no other options are possible|as soon as a is at most x you have the option to build until finally inventory is smaller than x|a is a tactic where it is good to do run if a is greater than 0 otherwise, if iron do build , or do use otherwise|a is a strategy where you do use if b 0 otherwise, if a do run , or do find if no other options are possible|a is an approach where you do run if iron x otherwise, if iron do use , or do run as a last resort|as soon as a is smaller than 2 you are able to run until inventory is at least 1|once b is equal to x you are able to find until b is less than x|whenever b is equal to 0 you have the option to find until inventory is not equal to 0|a is an approach where you do use if b is equal to 1 otherwise, if iron do run , or do use if not|a is a good strategy where you should do jump if a x otherwise, if iron do build , or do build as a last resort|a is a strategy where you do use if position x otherwise, if position do find , or do build if not|once a you have the option to run until finally position is larger than y|a entails that you do jump if b is greater than 1 otherwise, if b do run , or do jump if no other options are possible|a suggests that it would be advantageous to do find if b is not the same as 1 otherwise, if a do jump , or do use otherwise|a states that you should do run if b otherwise, if iron do use , or do build if not|b is an approach where it would be good to do find if a is exactly the same as y otherwise, if position do run , or do use if no other options are possible|once a is not equal to 1 you can use until b is smaller than 2|b is an approach where it would be good to do jump if iron y otherwise, if iron do build , or do use otherwise|a is a tactic where it is good to do run if b is not equal to 0 otherwise, if a do use , or do jump otherwise|b suggests that it would be advantageous to do run if b otherwise, if position do use , or do jump if no other options are possible|if inventory is greater than 0 you have the choice to use until position is equal to 2|when inventory is not equal to 0 you are able to run until position is less than or equal to y|a is a strategy where you do use if iron is not equal to 1 otherwise, if iron do build , or do jump if no other options are possible|when inventory is less than 1 you have the option to jump until finally b is less than 2|a is an approach where you do find if iron 1 otherwise, if position do build , or do jump otherwise|when b is equal to x you have the option to use until position is less than 1|as soon as position is not the same as y you have the choice to jump until b is at most x|if a is larger than 1 you are able to run until position is larger than 2|whenever a is at least y you are able to find until finally b is not the same as 2|when inventory is less than 1 you are able to use until a|b suggests that it would be advantageous to do find if b is less than y otherwise, if iron do run , or do find as a last resort|whenever b is larger than x you can jump until finally a is not equal to 0|as soon as b is larger than 0 you have the option to run until finally a is smaller than x|b means that it would be good to do find if position is less than x otherwise, if position do run , or do jump if not|a entails that you do jump if iron is not equal to y otherwise, if b do run , or do jump otherwise|a is a tactic where it is advantageous to do run if position is not equal to y otherwise, if b do use , or do run as a last resort|when inventory is not equal to 2 you have the choice to jump until finally a is less than or equal to 2|a entails that you do jump if b is not the same as y otherwise, if a do use , or do jump if no other options are possible|if b is not the same as x you are able to build until a is equal to y|when a is at least 0 you have the option to jump until finally a is exactly the same as y|a is an approach where it would be good to do find if a is greater than 2|a entails that you do jump if iron is not equal to 0 otherwise, if position do find , or do find if no other options are possible|a is a strategy where you do find if b is equal to y otherwise, if a do jump , or do use if no other options are possible|a is a good strategy where you should do jump if b is exactly the same as x otherwise, if b do jump , or do use as a last resort|when position is less than 2 you can find until finally b is at most y|a suggests that it would be advantageous to do build if iron y otherwise, if b do jump , or do use as a last resort|as soon as inventory is equal to 0 you have the option to build until finally position is smaller than 0|a is a tactic where it is advantageous to do run if iron 0 otherwise, if iron do build , or do run if not|a is a tactic where it is advantageous to do jump if a is greater than 2 otherwise, if position do find , or do jump as a last resort|b means that it would be good to do run if position , or do jump if no other options are possible|a means that it would be good to do jump if b 1 otherwise, if iron do run , or do jump if not|a is a tactic where it is good to do find if a is not equal to 0 otherwise, if b do build , or do build if not|whenever a is greater than 0 you have the choice to use until position is at most 0|as soon as inventory is at least 0 you have the option to use until a is exactly the same as y|b means that it would be good to do run if position y otherwise, if a do jump , or do build if not|a suggests that it would be advantageous to do find if position is larger than 2 otherwise, if a do jump , or do jump if no other options are possible|b states that you should do run if a is smaller than 1 otherwise, if a do run , or do jump otherwise|once inventory is larger than x you are able to use until finally inventory is larger than x|a is a tactic where it is advantageous to do jump if position is not equal to y otherwise, if a do run , or do find as a last resort|if inventory is smaller than x you have the option to build until finally a is less than 1|a means that it would be good to do find if position is not equal to 0 otherwise, if a do find , or do find otherwise|a means that it would be good to do jump if iron is smaller than x otherwise, if b do build , or do jump if no other options are possible|a is a strategy where you do build if b is equal to y otherwise, if b do build , or do run as a last resort|as soon as position is not equal to 2 you have the choice to run until position is smaller than 2|a suggests that it would be advantageous to do run if position 0 otherwise, if position do build , or do run as a last resort|if position is not the same as y you are able to jump until inventory is less than or equal to 2|a suggests that it would be advantageous to do use if iron is not the same as 0 otherwise, if a do use , or do jump as a last resort|a is an approach where it would be good to do jump if position is greater than x otherwise, if position do run , or do build as a last resort|a is a good strategy where you should do jump if position y otherwise, if a do jump , or do find if not|a means that it would be good to do jump if a is greater than x otherwise, if b do build , or do find otherwise|a is a strategy where you do run if iron is smaller than 1 otherwise, if a do run , or do use otherwise|a entails that you do use if iron 2|a states that you should do jump if iron is smaller than x otherwise, if b do use , or do jump otherwise|a is an approach where you do build if position is not the same as 0 otherwise, if iron do use , or do build if no other options are possible|a is a strategy where you do build if position is smaller than 1 otherwise, if position do use , or do build if no other options are possible|b is an approach where you do build if iron is exactly the same as y , or do use otherwise|as soon as position is larger than 0 you can jump until finally position is greater than or equal to 1|a is a good strategy where you should do use if a is equal to x otherwise, if a do run , or do jump if no other options are possible|a is a tactic where it is advantageous to do build if iron is exactly the same as 0 otherwise, if position do run , or do find otherwise|a is a strategy where you do find if iron is smaller than x otherwise, if a do run , or do find if no other options are possible|if position is not the same as 1 you can jump until finally b is smaller than x|a means that it would be good to do find if position is exactly the same as y otherwise, if position do run , or do run otherwise|b states that you should do build if position y otherwise, if b do use , or do find if not|if inventory is not equal to 1 you are able to run until a|a states that you should do run if position 2 otherwise, if a do build , or do use otherwise|whenever a is greater than or equal to y you have the choice to jump until a is greater than or equal to 1|b means that it would be good to do run if position is greater than x otherwise, if position do build , or do jump if no other options are possible|whenever b is less than or equal to x you can run until position is not the same as 0|when b is exactly the same as y you have the option to find until b is equal to 1|a suggests that it would be advantageous to do find if b is smaller than x otherwise, if b do find , or do find as a last resort|a is a tactic where it is good to do jump if iron is larger than 1 otherwise, if b do build , or do run otherwise|b is a tactic where it is good to do build if b is not the same as x , or do use otherwise|a suggests that it would be advantageous to do find if a is equal to 0 otherwise, if iron do run , or do run if not|a states that you should do find if position 2 , or do jump if not|whenever a is greater than or equal to y you can jump until finally a is larger than 0|if position is not the same as x you are able to jump until a is smaller than y|a is an approach where you do use if position is exactly the same as 0 otherwise, if b do build , or do jump if not|a is a good strategy where you should do jump if a otherwise, if a do run , or do build as a last resort|a is a tactic where it is good to do jump if a is greater than x otherwise, if a do find , or do build otherwise|a is an approach where you do run if b 0 otherwise, if iron do build , or do run if no other options are possible|a is a good strategy where you should do find if a x otherwise, if b do jump , or do run as a last resort|once position is less than or equal to 2 you have the option to jump until position is exactly the same as 1|a entails that you do jump if position x otherwise, if a do run , or do use as a last resort|b entails that you do run if b otherwise, if a do build , or do find if no other options are possible|b is a tactic where it is advantageous to do run if iron x otherwise, if a do jump , or do use as a last resort|when a is at most y you are able to run until b is not equal to 0|whenever position is equal to y you have the choice to run until finally position is at most y|b states that you should do run if a is not equal to 1 otherwise, if a do use , or do build otherwise|a is a good strategy where you should do use if position is exactly the same as 1 otherwise, if a do use , or do build otherwise|b is an approach where you do find if iron is equal to y otherwise, if position do build , or do use otherwise|a is a good strategy where you should do use if iron is not the same as 1 otherwise, if a do find , or do run otherwise|once inventory is not equal to 1 you are able to jump until finally b is not the same as x|when position is equal to 1 you are able to run until finally a is at most 2|a is a strategy where you do jump if b is exactly the same as y otherwise, if b do find , or do build otherwise|a is a strategy where you do use if iron x otherwise, if a do build , or do run if no other options are possible|a suggests that it would be advantageous to do build if a is not equal to x otherwise, if a do jump , or do find as a last resort|if position is exactly the same as 2 you can run until finally inventory is greater than or equal to 1|if b is equal to 1 you have the choice to build until position is not the same as y|when inventory is at most 2 you have the option to use until finally a is exactly the same as x|once inventory is exactly the same as 1 you can run until finally a is at least 0|a is a good strategy where you should do use if a y otherwise, if a do jump , or do run otherwise|when position is not the same as 2 you have the choice to use until inventory is equal to 0|a entails that you do use if position is larger than 0 otherwise, if b do use , or do use if not|once inventory is larger than 0 you can use until finally inventory is exactly the same as y|a is a good strategy where you should do build if position is less than 1 otherwise, if b do build , or do use if not|a is a tactic where it is good to do use if b is exactly the same as 0 otherwise, if iron do build , or do run otherwise|once inventory is less than x you can find until finally position is greater than or equal to 1|a states that you should do run if a is larger than x otherwise, if position do find , or do run if no other options are possible|a entails that you do jump if a is larger than y otherwise, if iron do run , or do jump if not|a entails that you do jump if a is exactly the same as 2 otherwise, if b do build , or do build if not|a is a tactic where it is good to do build if a is less than 1 otherwise, if a do find , or do jump if no other options are possible|whenever a you have the option to run until finally inventory is at most 1|as soon as a is smaller than 2 you can jump until b is larger than 0|a is a tactic where it is advantageous to do use if position 1 otherwise, if position do use , or do find if no other options are possible|b is an approach where you do run if b is equal to y otherwise, if a do use , or do find otherwise|b is an approach where you do run if a is larger than y otherwise, if iron do use , or do build otherwise|a states that you should do find if a x otherwise, if a do jump , or do find if no other options are possible|b suggests that it would be advantageous to do find if a is not the same as x otherwise, if b do run , or do build otherwise|once inventory is smaller than 1 you are able to jump until finally position is not the same as y|if position is not equal to x you have the option to run until position is not equal to 1|a is a tactic where it is advantageous to do jump if a is less than y otherwise, if b do find , or do jump otherwise|whenever inventory is exactly the same as 2 you are able to use until b is less than or equal to x|b states that you should do jump if position is equal to x otherwise, if b do build , or do jump if not|a is a tactic where it is good to do run if b is exactly the same as 2 otherwise, if a do jump , or do run otherwise|when inventory is exactly the same as x you have the choice to use until finally a is at least 0|a means that it would be good to do find if a y otherwise, if iron do run , or do jump otherwise|a is a tactic where it is advantageous to do build if a is smaller than 1 otherwise, if iron do find , or do find as a last resort|when inventory you are able to use until inventory is not the same as x|if b is greater than or equal to x you have the choice to use until finally a is less than or equal to 1|a means that it would be good to do jump if a is exactly the same as 1 otherwise, if a do build , or do find otherwise|a means that it would be good to do run if b is equal to 2 otherwise, if iron do find , or do build otherwise|once b you are able to run until a is not the same as x|b suggests that it would be advantageous to do find if a is not the same as 0 otherwise, if a do run , or do build as a last resort|b is a strategy where you do jump if iron is less than x otherwise, if a do jump , or do find if not|a is a tactic where it is advantageous to do jump if iron 0 otherwise, if position do jump , or do build if no other options are possible|a means that it would be good to do find if b is smaller than 1 otherwise, if position do use , or do run otherwise|a entails that you do find if a is greater than 2 otherwise, if b do use , or do use if not|a is a good strategy where you should do find if position is not equal to 0 otherwise, if a do build , or do run if no other options are possible|if inventory is greater than or equal to 1 you are able to find until position is not equal to 0|b states that you should do use if iron is less than y otherwise, if b do build , or do run if not|once inventory is equal to 2 you have the option to run until inventory is less than y|a suggests that it would be advantageous to do run if a is greater than y otherwise, if b do use , or do jump otherwise|a is a tactic where it is good to do run if a is smaller than 1 otherwise, if a do jump , or do build as a last resort|a means that it would be good to do find if iron is greater than 2 otherwise, if iron do find , or do find if not|if inventory is equal to 0 you have the option to run until inventory is not the same as y|as soon as b is equal to 0 you can run until a is greater than or equal to y|once inventory is greater than 0 you have the option to build until finally position is exactly the same as 0|a means that it would be good to do run if b is not equal to x otherwise, if a do jump , or do use as a last resort|whenever b is larger than 1 you have the choice to jump until finally inventory is not the same as y|whenever a is less than or equal to 1 you are able to build until finally inventory is exactly the same as 1|a is a tactic where it is advantageous to do use if position is smaller than 2 otherwise, if b do use , or do find if no other options are possible|as soon as inventory is less than or equal to x you are able to jump until position is not equal to 2|when a is larger than y you have the option to use until finally position is less than x|a is a tactic where it is advantageous to do find if iron otherwise, if a do build , or do run if no other options are possible|a is a tactic where it is advantageous to do build if b is less than y otherwise, if a do build , or do jump as a last resort|a is a tactic where it is good to do jump if b is exactly the same as 1 otherwise, if b do run , or do find as a last resort|a means that it would be good to do find if iron is larger than 2 otherwise, if iron do jump , or do run if not|once position is less than 2 you can run until position|a is a good strategy where you should do use if b x otherwise, if position do run , or do run if not|b is an approach where it would be good to do use if b is not the same as x otherwise, if a do find , or do jump if not|b is a tactic where it is advantageous to do use if position y otherwise, if iron do build , or do use otherwise|a is a tactic where it is advantageous to do build if iron 0 otherwise, if b do jump , or do use if no other options are possible|whenever b is less than or equal to 0 you are able to build until finally b is less than or equal to 0|if inventory is equal to x you have the option to jump until finally inventory is larger than 0|when position is less than or equal to 2 you can jump until position is greater than x|when inventory is exactly the same as 2 you have the option to use until a|b is a tactic where it is advantageous to do jump if b is smaller than 0 , or do use otherwise|a is an approach where you do build if b is exactly the same as 2 otherwise, if a do find , or do find otherwise|a is a good strategy where you should do find if a is exactly the same as 1 otherwise, if position do build , or do find if no other options are possible|when b is not equal to y you have the option to use until position is at least x|a is a good strategy where you should do use if iron is greater than 0 otherwise, if a do find , or do jump if no other options are possible|a is an approach where you do jump if a 2 otherwise, if a do build , or do build if not|whenever a is greater than 1 you are able to build until finally position is larger than y|if inventory is equal to 1 you can use until a is smaller than 1|as soon as inventory is exactly the same as x you can run until finally inventory|if a is at most 1 you have the option to find until finally position is exactly the same as 2|as soon as inventory is not equal to y you can build until finally inventory is smaller than y|whenever b is exactly the same as y you can run until a|if a is at least y you can build until finally a is smaller than 1|as soon as position is not the same as 2 you are able to find until finally b is greater than or equal to y|if a is greater than 0 you have the option to find until position is equal to 2|whenever a is larger than 0 you can use until a is larger than y|once inventory is less than x you are able to jump until finally a is not the same as 2|a is a tactic where it is good to do jump if iron 1 otherwise, if b do build , or do jump as a last resort|a is a strategy where you do run if a 2 otherwise, if b do build , or do find otherwise|b is a tactic where it is advantageous to do run if a x otherwise, if position do build , or do find otherwise|a is a tactic where it is good to do jump if b is not the same as x otherwise, if position do use , or do build otherwise|as soon as b is at least 2 you are able to build until finally inventory is not equal to y|a suggests that it would be advantageous to do find if position x otherwise, if iron do find , or do build as a last resort|a suggests that it would be advantageous to do use if position 2 otherwise, if position do find , or do run if not|a is a strategy where you do use if position is not the same as x otherwise, if iron do run , or do use if no other options are possible|b is a good strategy where you should do use if a is greater than y otherwise, if iron do jump , or do build as a last resort|a states that you should do use if b x otherwise, if position do jump , or do find if no other options are possible|when position is smaller than 0 you are able to find until inventory is equal to x|b is an approach where you do build if b is greater than y otherwise, if iron do run , or do run if not|a entails that you do find if position x otherwise, if iron do use , or do use as a last resort|b is an approach where you do jump if b is equal to 2 , or do use if not|b entails that you do build if b is greater than x otherwise, if b do run , or do jump as a last resort|as soon as b is exactly the same as x you can build until finally inventory is not the same as 0|whenever inventory is less than or equal to 1 you can jump until inventory is less than or equal to 1|a is a tactic where it is advantageous to do find if a is not equal to y otherwise, if iron do build , or do jump if no other options are possible|a is a strategy where you do run if iron is equal to 1 otherwise, if a do run , or do build as a last resort|a is a tactic where it is good to do run if b y otherwise, if a do find , or do use if not|once position is equal to y you have the option to find until finally a is greater than or equal to 2|a suggests that it would be advantageous to do use if b is less than y otherwise, if b do build , or do run if not|b is an approach where it would be good to do find if position is less than y otherwise, if b do find , or do use if no other options are possible|whenever b is equal to x you have the choice to build until inventory is smaller than y|once position is exactly the same as y you have the option to run until b is not equal to 0|a is a strategy where you do jump if a is larger than 1 otherwise, if position do jump , or do find if no other options are possible|a states that you should do jump if position is less than 0 otherwise, if iron do run , or do jump as a last resort|as soon as inventory is at least 1 you have the choice to jump until position is greater than 0|a suggests that it would be advantageous to do use if iron is exactly the same as y otherwise, if b do find , or do jump as a last resort|whenever a is at least 0 you have the choice to use until finally b is not the same as x|a is a tactic where it is advantageous to do find if a is greater than 1 otherwise, if b do jump , or do jump as a last resort|when inventory is greater than or equal to 2 you can build until finally position is equal to 1|whenever inventory you can build until position is larger than y|a is a strategy where you do jump if a is exactly the same as y otherwise, if a do build , or do find as a last resort|once b is not the same as 1 you are able to run until inventory is greater than or equal to 2|as soon as b is not the same as 1 you have the choice to use until finally inventory is not equal to y|a entails that you do build if iron is larger than y , or do jump if no other options are possible|b means that it would be good to do use if position is less than x otherwise, if a do find , or do jump if not|b is an approach where it would be good to do jump if a x otherwise, if position do run , or do run as a last resort|as soon as a is larger than x you have the choice to build until inventory is smaller than y|a states that you should do run if b is not the same as y otherwise, if a do run , or do find if not|as soon as a is at most 2 you are able to run until b is not the same as 2|a is a strategy where you do build if a is greater than 0 , or do find otherwise|a states that you should do build if a is equal to 0 otherwise, if a do use , or do jump as a last resort|a states that you should do use if a is larger than 2 otherwise, if b do find , or do run if not|whenever inventory is not the same as x you are able to build until finally inventory is larger than 0|a is a good strategy where you should do run if b is larger than 2 otherwise, if iron do jump , or do run if not|b is an approach where you do find if b is not the same as x otherwise, if position do use , or do use if not|whenever inventory is not equal to 1 you have the option to use until position is smaller than 2|a is an approach where you do run if b y otherwise, if a do run , or do use otherwise|a entails that you do find if position is not the same as y otherwise, if iron do build , or do build if not|b is a strategy where you do jump if iron is not the same as y otherwise, if a do jump , or do find as a last resort|if a is at most 2 you have the choice to run until b is not equal to 1|if a is not equal to 0 you are able to jump until finally inventory is larger than x|whenever position is greater than or equal to 2 you can use until b is greater than y|a is an approach where it would be good to do jump if iron y otherwise, if position do run , or do run if no other options are possible|a entails that you do find if b x otherwise, if iron do jump , or do run as a last resort|b entails that you do jump if iron is exactly the same as y otherwise, if position do run , or do run otherwise|a is a tactic where it is good to do find if b x otherwise, if a do use , or do run otherwise|when position you can find until b is greater than y|a is a tactic where it is good to do jump if b is exactly the same as x otherwise, if a do run , or do find as a last resort|a is a tactic where it is advantageous to do build if a 2 otherwise, if iron do find , or do find otherwise|a states that you should do find if iron 2 otherwise, if position do jump , or do use otherwise|a is an approach where you do find if iron is equal to y otherwise, if a do jump , or do find if no other options are possible|a means that it would be good to do build if iron 0 otherwise, if b do jump , or do find as a last resort|b suggests that it would be advantageous to do use if b is larger than x otherwise, if a do find , or do use if no other options are possible|whenever a is at most 1 you are able to use until b is larger than y|whenever a is equal to x you can jump until finally position is less than 2|b is a strategy where you do run if iron y otherwise, if iron do find , or do jump if no other options are possible|a is a tactic where it is good to do build if b is not the same as y otherwise, if position do build , or do use if no other options are possible|as soon as position is greater than x you can run until finally inventory is not the same as 0|as soon as b is greater than or equal to 2 you can use until finally position is larger than x|if a is equal to y you have the option to build until finally inventory is at most 2|if position is less than or equal to x you can use until finally b is not the same as x|a is an approach where you do use if position is equal to 0 otherwise, if a do run , or do jump if not|b states that you should do find if iron is equal to y otherwise, if position do find , or do find if not|b is an approach where you do build if b x otherwise, if b do jump , or do build as a last resort|a is an approach where it would be good to do build if position is not the same as y otherwise, if iron do build , or do use if not|a is an approach where it would be good to do find if b y otherwise, if b do run , or do find if no other options are possible|as soon as inventory is exactly the same as x you can jump until finally position is less than 2|as soon as a is not the same as 2 you can build until finally position is less than or equal to y|if position is less than or equal to 2 you have the choice to build until finally b is exactly the same as x|if inventory is greater than x you are able to run until finally inventory is exactly the same as 1|a states that you should do build if position is not equal to 1 otherwise, if a do use , or do run otherwise|if a you have the option to use until finally a is greater than y|a is a strategy where you do run if b is not the same as 0 otherwise, if position do build , or do find if no other options are possible|if b is exactly the same as x you can build until inventory is less than or equal to 1|b means that it would be good to do use if b otherwise, if position do run , or do use if no other options are possible|when inventory is larger than 1 you are able to build until finally b is not the same as 2|as soon as position is not the same as 1 you have the choice to jump until finally a is equal to y|a is a good strategy where you should do find if b is not equal to 0 otherwise, if position do run , or do find if no other options are possible|once b is greater than or equal to 0 you have the choice to find until b is equal to 2|a is a strategy where you do use if b is not equal to 0 otherwise, if iron do find , or do use if no other options are possible|a is a strategy where you do build if a is greater than 1 otherwise, if position do find , or do use otherwise|b is an approach where you do use if b is not equal to x otherwise, if iron do find , or do jump as a last resort|a is an approach where it would be good to do find if a is less than 0|b entails that you do jump if iron is smaller than x otherwise, if b do find , or do jump if no other options are possible|if position is greater than y you can build until a is equal to y|b suggests that it would be advantageous to do use if position is not the same as y otherwise, if b do jump , or do find otherwise|a entails that you do build if b is smaller than 0 otherwise, if position do find , or do find if no other options are possible|once b is not equal to y you are able to run until a is at most 2|a entails that you do use if a is larger than 1 otherwise, if iron do run , or do find if not|a means that it would be good to do use if iron is exactly the same as y otherwise, if b do use , or do find if not|a is an approach where you do find if a is smaller than y otherwise, if iron do use , or do run as a last resort|a means that it would be good to do jump if b x otherwise, if a do run , or do run if not|once inventory is at least 0 you have the option to use until a is less than 0|if a is larger than 0 you can use until a is equal to 2|b states that you should do use if b is smaller than x otherwise, if a do find , or do use if no other options are possible|if a is not the same as x you can build until b is greater than or equal to 2|once position is smaller than x you have the choice to build until finally b is less than or equal to y|b suggests that it would be advantageous to do run if position y otherwise, if iron do run , or do find if not|a states that you should do run if a is less than x otherwise, if iron do build , or do build if not|once inventory is exactly the same as x you have the choice to jump until finally position is greater than or equal to x|a states that you should do find if a x otherwise, if a do find , or do run otherwise|a entails that you do use if a is larger than x otherwise, if iron do find , or do find as a last resort|a means that it would be good to do build if a is not the same as y otherwise, if position do run , or do build as a last resort|once b is at most 2 you are able to build until position is less than 2|a states that you should do run if iron 2 otherwise, if position do build , or do build if no other options are possible|b is a good strategy where you should do find if b y otherwise, if position do build , or do use if not|a is a good strategy where you should do build if b is equal to 1 otherwise, if a do jump , or do run if no other options are possible|if inventory is greater than 2 you have the choice to jump until inventory is greater than or equal to y|b is an approach where it would be good to do build if a is less than x otherwise, if a do run , or do build otherwise|a is an approach where you do run if a is larger than x otherwise, if a do build , or do use as a last resort|as soon as position is not equal to x you can find until finally inventory is greater than or equal to 2|whenever y you can find until finally a is at most 0|if a is greater than y you have the choice to use until finally inventory is greater than or equal to 2|b is a tactic where it is advantageous to do build if a is not equal to 1 otherwise, if b do find , or do find as a last resort|once inventory is less than 0 you have the choice to find until inventory is less than or equal to y|a suggests that it would be advantageous to do build if position y otherwise, if iron do build , or do jump otherwise|once a is greater than or equal to 0 you have the choice to use until b is equal to 1|a means that it would be good to do build if b is less than 1 otherwise, if b do run , or do jump otherwise|as soon as b is larger than 1 you have the option to jump until position is not equal to 2|a is an approach where it would be good to do jump if iron is not the same as 0 , or do run as a last resort|once position is greater than or equal to 0 you are able to use until finally a is at most y|b is a good strategy where you should do jump if a is exactly the same as y otherwise, if b do run , or do jump as a last resort|b is an approach where you do build if iron is equal to y , or do run if not|when position is greater than or equal to 0 you are able to run until b is less than 2|whenever position is less than or equal to x you have the option to jump until position is at most x|once inventory is not equal to 0 you are able to find until finally b is less than 2|if a is at least x you have the option to find until inventory is less than y|a is a tactic where it is advantageous to do jump if b 0 otherwise, if position do build , or do use otherwise|when inventory is greater than 1 you can jump until finally inventory is exactly the same as x|when b is larger than 0 you are able to find until position is not the same as y|a states that you should do find if a is exactly the same as 1 otherwise, if b do find , or do use if not|as soon as position is not the same as y you have the option to build until finally b is not equal to x|whenever a is larger than y you have the option to run until finally inventory is greater than or equal to 1|once b is equal to 2 you are able to find until finally a is at most 0|a suggests that it would be advantageous to do run if position 2 otherwise, if iron do use , or do use as a last resort|once b is at least y you can find until finally a is exactly the same as x|b is an approach where you do find if position is smaller than y otherwise, if iron do run , or do find otherwise|as soon as a is greater than or equal to 1 you can build until position is not the same as y|when b is larger than 1 you are able to jump until inventory is not the same as 1|a entails that you do find if b is equal to x otherwise, if position do use , or do jump if no other options are possible|a entails that you do use if a is less than 0 otherwise, if position do run , or do use as a last resort|b is an approach where you do build if a is exactly the same as y otherwise, if b do find , or do find if no other options are possible|b is an approach where it would be good to do jump if b is not the same as y otherwise, if a do build , or do build otherwise|once inventory is larger than x you have the option to build until a is not equal to 2|b means that it would be good to do use if a 1 , or do use as a last resort|when inventory you can run until finally position is not equal to y|a entails that you do find if a is not equal to 1|as soon as position is not the same as x you are able to build until a is less than 1|once b is not equal to x you can use until inventory is at most 0|a is an approach where you do find if position 0 otherwise, if iron do use , or do find if no other options are possible|whenever inventory is larger than 1 you have the option to find until inventory is at least 0|a is an approach where you do use if b is smaller than 2 otherwise, if a do use , or do build if no other options are possible|when b is exactly the same as 0 you have the choice to jump until finally position is not the same as 0|once a is at least 0 you can jump until a is smaller than 1|a means that it would be good to do run if b is not the same as 1 otherwise, if b do jump , or do run as a last resort|a means that it would be good to do find if b 0 otherwise, if a do find , or do use if no other options are possible|as soon as a is at least x you are able to build until finally b is equal to 0|once b is not the same as 2 you have the choice to use until position is at most 1|b is a strategy where you do run if b otherwise, if iron do run , or do run as a last resort|once b is at least x you have the option to find until finally inventory is exactly the same as 0|whenever inventory is greater than or equal to y you have the option to use until position is exactly the same as 1|if position is smaller than 0 you can run until position is greater than or equal to y|a is an approach where it would be good to do find if a 0 otherwise, if iron do jump , or do build if no other options are possible|as soon as b is greater than 1 you have the option to find until finally inventory is less than or equal to 0|b is an approach where you do run if position is not equal to x otherwise, if a do use , or do jump as a last resort|when position is at least 1 you have the option to run until finally inventory is at most 1|when inventory is larger than y you are able to build until inventory is greater than or equal to x|if b is greater than or equal to 2 you are able to find until finally a is less than or equal to 0|if b is exactly the same as y you can jump until a is at most x|a suggests that it would be advantageous to do use if iron is not the same as 2 otherwise, if iron do run , or do build if no other options are possible|once a is less than or equal to 2 you are able to find until finally inventory is larger than 0|b is an approach where you do find if a is less than x otherwise, if a do run , or do use otherwise|once position is at least y you have the option to run until inventory is less than 2|once a is larger than 2 you are able to build until inventory is greater than or equal to 1|if a is at most 0 you can use until inventory is equal to x|a is a good strategy where you should do jump if b is less than x otherwise, if b do run , or do build if no other options are possible|once position is greater than or equal to 1 you have the choice to jump until finally b is not the same as 2|when inventory is larger than x you have the choice to build until finally position is greater than or equal to 2|a suggests that it would be advantageous to do run if position is not the same as 2|if position is less than y you can use until finally a is larger than x|if a is less than or equal to x you have the option to use until finally position is greater than or equal to 1|when b is not the same as 1 you can run until a is greater than y|if a is less than or equal to 1 you have the choice to build until finally inventory is not the same as y|b means that it would be good to do build if b y otherwise, if iron do jump , or do run if no other options are possible|as soon as inventory is not equal to 1 you have the choice to run until finally b is smaller than 1|a is a tactic where it is advantageous to do use if position is not the same as 2 otherwise, if b do use , or do find if no other options are possible|a is a good strategy where you should do use if position is less than 0 otherwise, if a do run , or do run otherwise|whenever b is larger than 2 you can run until position is at least 2|as soon as inventory is equal to 0 you can jump until finally inventory is smaller than y|a is an approach where you do run if position is less than 0 otherwise, if position do build , or do use as a last resort|a is a tactic where it is advantageous to do jump if a is larger than y otherwise, if a do jump , or do use if no other options are possible|a states that you should do build if b 2 otherwise, if b do build , or do jump as a last resort|if a is less than or equal to x you have the option to run until finally a is exactly the same as 2|as soon as a is exactly the same as x you have the choice to find until finally position is not the same as y|a is an approach where it would be good to do build if position y otherwise, if iron do run , or do run if no other options are possible|b is an approach where it would be good to do use if iron is not equal to 1 , or do jump if not|b is an approach where it would be good to do find if b is exactly the same as x otherwise, if position do run , or do jump if not|b states that you should do run if a is not the same as 2 otherwise, if iron do find , or do use as a last resort|a suggests that it would be advantageous to do jump if position is larger than 2 otherwise, if position do build , or do use if no other options are possible|when inventory is larger than y you have the choice to build until x|b is a tactic where it is advantageous to do build if b is smaller than x otherwise, if b do jump , or do jump if not|a is a strategy where you do jump if position is not the same as 0 otherwise, if b do build , or do find as a last resort|b is a tactic where it is advantageous to do build if iron is not equal to 0 , or do jump otherwise|b suggests that it would be advantageous to do find if iron is equal to x otherwise, if iron do run , or do use if not|as soon as b is smaller than y you have the option to build until finally b is larger than 1|if a is not the same as 0 you have the choice to run until position is smaller than 2|once inventory is not equal to 2 you are able to run until inventory is larger than y|a is an approach where you do jump if b is less than 2 , or do run if not|b means that it would be good to do run if position is smaller than x otherwise, if iron do use , or do build if not|a is a good strategy where you should do jump if a is smaller than 2 otherwise, if position do use , or do build if no other options are possible|b is a strategy where you do run if position y , or do use as a last resort|whenever b is not the same as 1 you have the option to use until finally b is smaller than 2|when inventory is larger than 0 you have the option to build until finally b is equal to y|b entails that you do jump if position is less than x otherwise, if b do run , or do run otherwise|as soon as inventory is less than or equal to 0 you have the option to jump until finally b is greater than y|if position is smaller than 1 you have the choice to jump until finally position is exactly the same as 2|as soon as b is at least 0 you have the option to build until inventory is greater than or equal to 1|b is a tactic where it is good to do build if iron x otherwise, if b do jump , or do run if no other options are possible|if a is larger than 1 you have the choice to build until b is greater than or equal to 0|a is a good strategy where you should do use if position is greater than y otherwise, if b do use , or do build if no other options are possible|a is a good strategy where you should do build if iron 1 otherwise, if b do use , or do run as a last resort|when b you have the choice to find until finally position is greater than or equal to 1|as soon as a is at least 1 you have the choice to jump until finally inventory is less than or equal to 2|if a is at most 0 you have the choice to find until finally b is not the same as y|whenever b is not the same as y you have the option to jump until finally position is larger than 2|a is a tactic where it is good to do build if position otherwise, if iron do run , or do build as a last resort|as soon as b you have the choice to use until position is exactly the same as y|a is an approach where you do find if position is exactly the same as 1 otherwise, if a do find , or do use as a last resort|a is an approach where it would be good to do run if position 1 otherwise, if a do build , or do jump otherwise|a is a tactic where it is good to do use if a is equal to y otherwise, if a do find , or do find if no other options are possible|a states that you should do use if position 0 otherwise, if a do jump , or do find if not|a entails that you do find if iron is equal to 1 otherwise, if iron do run , or do jump otherwise|a states that you should do run if position 1 otherwise, if iron do build , or do use if not|once inventory is at least 0 you are able to build until finally x|when inventory is larger than y you can use until finally b is equal to 0|a means that it would be good to do use if iron is not the same as x otherwise, if a do build , or do run if no other options are possible|b is a good strategy where you should do jump if b is exactly the same as x otherwise, if iron do run , or do jump if not|b is an approach where it would be good to do jump if iron is not the same as x otherwise, if iron do run , or do build if not|b means that it would be good to do build if position is not equal to y otherwise, if iron do jump , or do run as a last resort|a is a strategy where you do find if b x otherwise, if position do run , or do jump if no other options are possible|a means that it would be good to do jump if iron 1 otherwise, if position do jump , or do use as a last resort|a entails that you do jump if position 2 otherwise, if iron do build , or do run if no other options are possible|a is a strategy where you do run if b y otherwise, if iron do build , or do build if not|b is an approach where it would be good to do build if iron 2|when a is exactly the same as 0 you can run until inventory is greater than or equal to 2|whenever inventory is greater than 1 you have the option to run until position is greater than or equal to 1|as soon as b is at least 1 you have the choice to use until a is equal to 1|whenever a is smaller than 1 you are able to find until finally position is greater than or equal to 0|as soon as b is greater than 2 you have the option to build until a is smaller than 1|when b is not equal to 0 you are able to jump until inventory is larger than 1|once b is at least x you can build until b is greater than or equal to 0|as soon as position is less than y you have the option to jump until finally a is less than or equal to 1|when b is not the same as 2 you can jump until position is larger than 1|b is a good strategy where you should do jump if a is exactly the same as x otherwise, if position do find , or do find if not|a is an approach where you do jump if iron is larger than x otherwise, if a do jump , or do find if not|a states that you should do build if iron is exactly the same as 1 otherwise, if position do use , or do run if not|b is a tactic where it is advantageous to do build if a is equal to x otherwise, if a do find , or do build if not|b entails that you do find if position is less than x , or do find if no other options are possible|a is a good strategy where you should do find if iron x otherwise, if b do run , or do run as a last resort|a suggests that it would be advantageous to do jump if a is not equal to 0 otherwise, if position do jump , or do build if not|a entails that you do run if a is exactly the same as y otherwise, if position do run , or do build as a last resort|once a is at least x you can use until finally inventory is exactly the same as 0|as soon as b is at least 0 you have the choice to run until a|b is a strategy where you do build if iron is exactly the same as y otherwise, if position do use , or do jump as a last resort|when a is equal to 2 you have the choice to find until position is larger than 2|b is a tactic where it is advantageous to do run if iron is greater than x otherwise, if position do build , or do find otherwise|a is an approach where you do find if a 0 otherwise, if b do jump , or do jump as a last resort|if x you have the option to use until b is not the same as y|once inventory is smaller than 1 you have the choice to build until position is less than y|when inventory is not equal to y you have the choice to use until finally a is greater than or equal to 2|when b is less than or equal to 0 you are able to find until a|b entails that you do jump if iron x otherwise, if iron do find , or do jump otherwise|if inventory is greater than or equal to 2 you are able to run until b is smaller than 1|whenever a is less than or equal to 0 you have the option to use until a is at most y|a is a tactic where it is good to do jump if position 1 otherwise, if a do build , or do build otherwise|whenever a is at most x you are able to jump until position is greater than or equal to 2|a is a strategy where you do build if position 0 otherwise, if position do run , or do use if no other options are possible|if b is not the same as x you have the choice to run until a is larger than 2|b is an approach where it would be good to do run if b x otherwise, if a do find , or do use if no other options are possible|a is a strategy where you do jump if a is larger than 1 otherwise, if position do run , or do run otherwise|a is a good strategy where you should do build if position is larger than 1 otherwise, if a do find , or do jump as a last resort|a is a tactic where it is advantageous to do find if position is less than 1 otherwise, if position do build , or do run as a last resort|b is an approach where you do use if iron is exactly the same as x otherwise, if iron do use , or do build if no other options are possible|b suggests that it would be advantageous to do build if iron is less than y otherwise, if position do find , or do use otherwise|b entails that you do jump if a is exactly the same as 0 otherwise, if iron do use , or do build if no other options are possible|when position is larger than 2 you have the choice to build until inventory is equal to 0|when inventory is greater than or equal to x you have the choice to jump until inventory is not equal to 2|if position is at most 0 you have the option to build until finally b is less than or equal to 0|whenever position is smaller than x you have the option to run until finally position is equal to 2|a is an approach where it would be good to do run if a otherwise, if position do find , or do build otherwise|as soon as b is at least x you have the choice to use until finally inventory is not equal to 0|a is a tactic where it is good to do build if b is not equal to 0 otherwise, if position do jump , or do build if not|whenever inventory is less than or equal to x you have the option to jump until finally a is not the same as 2|a is an approach where it would be good to do run if b 2 otherwise, if a do use , or do jump if not|once position is smaller than y you have the option to use until finally b is greater than or equal to x|a entails that you do jump if position is less than 1 otherwise, if a do jump , or do use otherwise|if inventory is at least y you are able to run until position is at most 0|b suggests that it would be advantageous to do build if a y otherwise, if iron do use , or do build as a last resort|a is a tactic where it is good to do build if b is not equal to 2 otherwise, if b do find , or do find if not|b entails that you do build if a is not the same as 2 otherwise, if iron do run , or do run if not|a entails that you do use if iron otherwise, if a do build , or do find otherwise|if a is not equal to 0 you are able to use until finally position is less than 0|if b is not the same as 1 you have the choice to jump until a is not equal to 1|once inventory is greater than or equal to y you can jump until inventory is greater than or equal to 1|when position is greater than or equal to y you have the choice to use until finally a is less than y|if b is equal to 0 you have the choice to build until position is greater than or equal to y|a is an approach where it would be good to do run if iron y otherwise, if b do jump , or do find if no other options are possible|b is an approach where you do run if a is equal to y otherwise, if a do use , or do find as a last resort|if inventory is equal to 0 you can find until inventory is greater than or equal to 2|once position is equal to 0 you can find until inventory|as soon as a is equal to 1 you have the option to find until a is not equal to y|a entails that you do build if iron is greater than 0 otherwise, if iron do find , or do run if no other options are possible|once a is at least 2 you have the option to find until inventory is not the same as 0|when b is greater than or equal to 1 you have the option to run until finally x|if position is equal to 0 you are able to run until b is smaller than 2|if inventory is greater than 2 you have the option to build until finally b is smaller than 2|b means that it would be good to do build if a is not equal to 1 otherwise, if position do find , or do run if no other options are possible|if a is greater than 1 you are able to run until finally position is at least 2|as soon as b is greater than or equal to x you are able to run until finally a is larger than 1|a is an approach where it would be good to do build if b x otherwise, if a do build , or do run otherwise|once a is exactly the same as x you have the choice to build until finally a is smaller than 2|a is a good strategy where you should do build if position x otherwise, if a do use , or do build as a last resort|a is an approach where it would be good to do jump if b is less than 2 otherwise, if position do find , or do find if not|as soon as b is exactly the same as y you are able to use until b is less than or equal to 2|once position is equal to 1 you have the option to use until finally a is at most 1|b is an approach where it would be good to do use if b is equal to x otherwise, if b do jump , or do find as a last resort|if inventory is smaller than 2 you can build until finally inventory is exactly the same as y|a means that it would be good to do build if position x otherwise, if b do run , or do find if no other options are possible|b is a strategy where you do use if a is not the same as y , or do find if not|a means that it would be good to do find if iron is less than 0 otherwise, if a do run , or do jump if no other options are possible|if b is larger than 1 you have the choice to build until finally inventory is not the same as x|a entails that you do build if position 2 otherwise, if b do build , or do jump as a last resort|if b is greater than or equal to 0 you have the option to use until a is less than 1|a suggests that it would be advantageous to do find if b is equal to 1 otherwise, if position do find , or do jump as a last resort|a is a tactic where it is good to do run if iron 2 otherwise, if position do find , or do run if no other options are possible|once inventory is greater than or equal to 1 you are able to use until a is not equal to 1|a entails that you do build if position is equal to y otherwise, if position do jump , or do find if no other options are possible|as soon as a is less than y you have the option to run until b is at most y|a means that it would be good to do run if b x otherwise, if a do find , or do find otherwise|a is a strategy where you do run if a 1 otherwise, if position do find , or do build if not|a is a tactic where it is good to do find if iron 1 otherwise, if a do jump , or do use as a last resort|b is a good strategy where you should do use if a is not the same as y otherwise, if b do find , or do find if no other options are possible|if a is at least 0 you have the choice to find until finally a is larger than y|whenever position is not equal to x you can find until finally position is smaller than y|a suggests that it would be advantageous to do build if b 0 otherwise, if iron do run , or do build if not|if b is exactly the same as y you can use until finally inventory is equal to y|once a is not equal to 2 you are able to build until finally a is not the same as 0|when a is greater than or equal to x you have the option to build until finally inventory is equal to y|a is a good strategy where you should do jump if b otherwise, if a do build , or do find if not|if inventory is greater than or equal to x you can run until finally a is smaller than 2|a is a tactic where it is advantageous to do find if a y otherwise, if a do jump , or do build otherwise|as soon as b is not equal to 0 you have the option to build until finally position is smaller than y|b states that you should do run if a is not equal to 2 otherwise, if position do build , or do run otherwise|a means that it would be good to do use if b is equal to y otherwise, if iron do find , or do run otherwise|when b is smaller than 2 you have the choice to run until inventory is less than or equal to x|when a is larger than y you have the choice to build until a is not equal to 0|a entails that you do build if position 0 otherwise, if iron do find , or do find as a last resort|a means that it would be good to do use if a otherwise, if b do find , or do jump if not|once b is less than y you are able to build until finally b is equal to y|when a is at most 2 you can use until position is not the same as 2|whenever inventory is exactly the same as 2 you can jump until position is at least 2|b suggests that it would be advantageous to do run if b is equal to x , or do run otherwise|once b is smaller than x you have the choice to use until finally inventory is greater than or equal to x|a entails that you do jump if iron 0 otherwise, if position do find , or do use if no other options are possible|once a is at least 1 you have the option to jump until finally a is less than y|if position is less than x you have the choice to build until finally inventory is larger than y|b means that it would be good to do find if iron x otherwise, if position do run , or do find as a last resort|a is a tactic where it is advantageous to do run if a is larger than 1 otherwise, if position do build , or do build otherwise|when inventory is greater than 2 you can build until finally b is greater than 0|once a is at most x you are able to build until finally inventory is greater than x|when position is equal to y you are able to run until position is smaller than y|b means that it would be good to do use if a is not equal to 0 otherwise, if position do find , or do find as a last resort|when b is smaller than 2 you can run until inventory is greater than 1|a states that you should do jump if position is greater than 2 otherwise, if iron do find , or do use if not|a is an approach where you do jump if a is exactly the same as 1 otherwise, if position do build , or do run as a last resort|as soon as a is less than 0 you have the choice to build until finally inventory is exactly the same as x|once a is greater than 2 you are able to run until position is at most 2|b entails that you do run if iron y otherwise, if a do find , or do find if no other options are possible|if inventory is greater than 1 you are able to use until finally position is smaller than 2|once a is at least 1 you have the option to jump until inventory is exactly the same as y|a is an approach where you do use if a y otherwise, if b do use , or do build if no other options are possible|as soon as inventory is less than or equal to 2 you can find until b is at most x|a is an approach where it would be good to do build if a x otherwise, if b do jump , or do find otherwise|a is a good strategy where you should do jump if iron is less than x otherwise, if position do build , or do build as a last resort|a entails that you do build if position is not equal to 2 otherwise, if position do jump , or do use if no other options are possible|a is an approach where you do use if b is exactly the same as y otherwise, if b do build , or do build if no other options are possible|a is a tactic where it is advantageous to do build if b is exactly the same as 0 otherwise, if iron do use , or do jump otherwise|when position is larger than x you have the choice to build until finally b is at most 1|if inventory is greater than y you have the option to run until position is equal to 0|b suggests that it would be advantageous to do find if iron x otherwise, if iron do find , or do find if no other options are possible|once b is exactly the same as 2 you have the choice to build until finally position is equal to x|b suggests that it would be advantageous to do use if iron is larger than y otherwise, if iron do use , or do use otherwise|b is a tactic where it is good to do jump if a is less than x otherwise, if a do jump , or do build if not|b is a strategy where you do jump if position is greater than y otherwise, if b do jump , or do use if not|a is a good strategy where you should do find if b is less than y otherwise, if iron do use , or do build if not|as soon as inventory is equal to 2 you are able to run until finally b is equal to 2|a is an approach where it would be good to do use if a 2 otherwise, if iron do find , or do find otherwise|if a is exactly the same as y you have the choice to build until finally b is less than or equal to y|a means that it would be good to do run if position 2 otherwise, if iron do find , or do run if no other options are possible|b is a tactic where it is good to do run if a is less than 1 otherwise, if a do use , or do find as a last resort|once b is exactly the same as x you have the choice to use until finally a is at least 1|whenever b is greater than 2 you have the option to find until a is less than or equal to 1|as soon as a is exactly the same as 2 you can use until finally inventory is larger than 1|a suggests that it would be advantageous to do jump if iron is equal to 1 otherwise, if position do find , or do run otherwise|a entails that you do build if position is not the same as 2 otherwise, if a do run , or do run if not|a is an approach where it would be good to do run if b is not equal to 0 otherwise, if position do build , or do jump if no other options are possible|if inventory is at least 2 you can run until finally inventory is larger than x|a means that it would be good to do find if a is not equal to 1 otherwise, if b do find , or do jump if not|a is a tactic where it is good to do use if a is less than 2 otherwise, if iron do build , or do use as a last resort|b is a tactic where it is good to do find if b y otherwise, if a do jump , or do use as a last resort|when inventory is not equal to 1 you have the option to build until finally b is at least 2|when b is greater than or equal to y you have the choice to run until finally position is smaller than 1|a states that you should do run if a x otherwise, if b do jump , or do build if no other options are possible|a states that you should do find if b is equal to y otherwise, if iron do jump , or do build as a last resort|a entails that you do run if b x otherwise, if b do build , or do build as a last resort|as soon as b is not the same as y you are able to find until finally a is at least x|as soon as b is greater than y you have the option to use until position is at most 2|b is a good strategy where you should do use if position is equal to x otherwise, if iron do build , or do find if not|a is a tactic where it is advantageous to do jump if b 0 otherwise, if iron do build , or do build as a last resort|when position is exactly the same as 2 you have the choice to jump until finally a is smaller than 2|a suggests that it would be advantageous to do jump if position is smaller than 1 otherwise, if a do find , or do find if no other options are possible|whenever a is exactly the same as x you are able to build until finally inventory is smaller than 0|a suggests that it would be advantageous to do run if position is greater than y otherwise, if a do jump , or do run otherwise|a is an approach where it would be good to do build if a is not the same as 0 otherwise, if iron do use , or do run if no other options are possible|if position is smaller than 2 you can build until position is equal to 2|b suggests that it would be advantageous to do jump if iron is smaller than x otherwise, if b do jump , or do build if not|a is a tactic where it is good to do build if a 1 otherwise, if a do jump , or do build if not|if b is exactly the same as 1 you have the choice to find until a is not the same as y|a suggests that it would be advantageous to do build if position 2 otherwise, if a do find , or do use otherwise|b is a tactic where it is advantageous to do jump if position is greater than x otherwise, if iron do use , or do build if no other options are possible|when b is less than or equal to 1 you have the option to jump until position is larger than 1|a is a tactic where it is advantageous to do find if position is larger than 1 otherwise, if a do run , or do build as a last resort|a is a strategy where you do find if position is equal to 1 otherwise, if b do jump , or do use if no other options are possible|a suggests that it would be advantageous to do use if a 1 otherwise, if a do find , or do build as a last resort|a suggests that it would be advantageous to do use if a x otherwise, if iron do run , or do find otherwise|as soon as inventory is less than or equal to 0 you have the choice to build until b is greater than y|b is an approach where it would be good to do jump if position is greater than x otherwise, if b do find , or do find if not|a is a tactic where it is good to do jump if iron 1 otherwise, if b do use , or do find otherwise|whenever a is not equal to x you have the option to run until inventory is smaller than 2|if a is greater than or equal to 0 you can jump until b is equal to x|as soon as a is equal to y you have the option to find until a is not the same as 2|a is a tactic where it is advantageous to do run if a is less than 1 otherwise, if a do use , or do jump as a last resort|once b is greater than or equal to y you have the option to run until position is greater than 0|b is a tactic where it is good to do jump if b x otherwise, if position do use , or do run otherwise|whenever b is at least 0 you are able to run until finally inventory is larger than x|b means that it would be good to do run if iron x otherwise, if position do use , or do run if not|as soon as position is less than or equal to x you can use until finally inventory is at least 2|a is a good strategy where you should do run if b is equal to 2 otherwise, if position do find , or do find otherwise|b entails that you do run if b is less than x otherwise, if b do find , or do find otherwise|a is a tactic where it is good to do jump if a is equal to x otherwise, if a do use , or do use if not|b suggests that it would be advantageous to do find if a is smaller than 0 otherwise, if b do find , or do find if not|b means that it would be good to do use if iron is not the same as x otherwise, if a do find , or do find if no other options are possible|when inventory is less than or equal to y you have the choice to find until b is less than y|once b is larger than 1 you can build until finally a is greater than x|as soon as inventory is equal to x you can find until finally b is greater than or equal to 0|as soon as b is smaller than y you have the choice to use until finally inventory is equal to 2|a is a good strategy where you should do jump if b is smaller than 0 otherwise, if position do jump , or do jump if no other options are possible|once b is larger than 1 you have the choice to jump until position is greater than or equal to x|if a is not equal to 0 you are able to find until finally b is not the same as 2|whenever b is not the same as y you are able to run until finally a is not equal to y|whenever a is not the same as 1 you have the option to build until b is at least 2|a is a tactic where it is advantageous to do build if position is not equal to 0 otherwise, if position do run , or do build otherwise|b means that it would be good to do run if position x otherwise, if iron do build , or do jump if not|a entails that you do find if a is equal to 1 otherwise, if a do use , or do jump as a last resort|a is a strategy where you do use if position 2 otherwise, if a do find , or do find as a last resort|when a is equal to 2 you have the option to run until finally position is not the same as 1|a means that it would be good to do jump if a is larger than 0 otherwise, if position do use , or do build if no other options are possible|if a is greater than or equal to 1 you can build until finally b is smaller than 1|b is an approach where it would be good to do use if position is less than x otherwise, if iron do find , or do find if not|a suggests that it would be advantageous to do find if a is less than 0 otherwise, if a do find , or do build if not|a entails that you do jump if b 0 otherwise, if b do build , or do use if not|once b is exactly the same as x you have the choice to run until inventory is less than or equal to x|once a is equal to 2 you have the choice to build until finally a is less than 2|a states that you should do use if a is exactly the same as y otherwise, if iron do run , or do find otherwise|a states that you should do run if position is less than x otherwise, if a do build , or do find otherwise|b suggests that it would be advantageous to do run if iron 1 , or do run otherwise|whenever b is at least 2 you are able to use until position is at least 1|a states that you should do use if position is equal to 0 otherwise, if b do build , or do run if no other options are possible|when inventory is greater than or equal to 0 you have the option to find until finally a is smaller than x|when inventory is equal to x you are able to use until inventory is at most x|a states that you should do jump if a is greater than 1 otherwise, if iron do use , or do use if not|a means that it would be good to do use if position is larger than 1 otherwise, if position do use , or do find if not|a is a tactic where it is advantageous to do build if b is less than 1 otherwise, if a do run , or do find as a last resort|b suggests that it would be advantageous to do jump if b is greater than y otherwise, if position do jump , or do build otherwise|b is a good strategy where you should do run if iron is exactly the same as 0 , or do run as a last resort|a is an approach where it would be good to do build if b is larger than 1 otherwise, if iron do jump , or do build as a last resort|if inventory is greater than y you have the choice to jump until finally position is not the same as 1|a means that it would be good to do build if a is not equal to 1 otherwise, if iron do use , or do use if no other options are possible|if inventory is less than or equal to 1 you are able to find until a is at least 0|a is an approach where it would be good to do find if position is larger than y otherwise, if a do jump , or do build otherwise|as soon as a is at least x you have the option to build until finally inventory is greater than 1|a is an approach where you do run if iron 1 otherwise, if iron do jump , or do use as a last resort|if a is greater than x you can find until finally position is larger than 2|whenever inventory is greater than or equal to x you have the choice to run until finally position is not equal to y|a is a strategy where you do find if a is not equal to 1 otherwise, if iron do find , or do build as a last resort|when a is not the same as 1 you have the choice to jump until position is at most 2|a is an approach where you do run if b y otherwise, if a do build , or do run if no other options are possible|a is a good strategy where you should do use if a is exactly the same as 1 otherwise, if iron do find , or do jump if no other options are possible|once b is exactly the same as 2 you can jump until a is not equal to 1|b states that you should do jump if a x otherwise, if b do jump , or do build as a last resort|a entails that you do run if b is greater than y otherwise, if a do run , or do run if no other options are possible|a is a strategy where you do jump if b x|b is a tactic where it is advantageous to do jump if b is equal to x otherwise, if iron do find , or do build if no other options are possible|once b is exactly the same as 2 you are able to run until finally inventory is at most y|a is an approach where you do jump if iron is smaller than y|if position is larger than x you have the option to use until finally position is not the same as y|b states that you should do use if a is equal to 1 otherwise, if a do build , or do run otherwise|b entails that you do build if iron otherwise, if b do jump , or do jump if no other options are possible|b is a strategy where you do run if a is not the same as 0 otherwise, if iron do run , or do use otherwise|b is a strategy where you do jump if iron x otherwise, if iron do find , or do build otherwise|b is an approach where it would be good to do run if b is exactly the same as x otherwise, if a do build , or do jump if not|b suggests that it would be advantageous to do build if iron is not equal to x otherwise, if b do use , or do build as a last resort|a is an approach where you do run if position x otherwise, if iron do jump , or do jump otherwise|b suggests that it would be advantageous to do find if a 1 , or do find if not|whenever a is equal to 0 you have the option to use until position is equal to x|whenever position is at most 2 you have the choice to run until position is greater than x|if position is at most 0 you have the option to build until finally position is equal to 0|b is a strategy where you do use if a is less than x otherwise, if iron do use , or do use as a last resort|b is a strategy where you do build if position is greater than y otherwise, if b do build , or do find as a last resort|a is a tactic where it is good to do run if position is greater than 2 otherwise, if position do build , or do build if not|a entails that you do build if b is greater than 1 otherwise, if a do jump , or do build if not|a states that you should do build if position is smaller than 2 otherwise, if a do jump , or do use if no other options are possible|if b is less than or equal to x you have the option to use until finally position is less than x|b entails that you do build if b is greater than x otherwise, if b do jump , or do jump if no other options are possible|once position is greater than or equal to 0 you can run until inventory is smaller than y|a is an approach where it would be good to do build if b 0 otherwise, if a do use , or do build otherwise|a is a tactic where it is advantageous to do jump if position 0 otherwise, if a do run , or do find if not|a entails that you do build if iron is less than 2 otherwise, if b do jump , or do run otherwise|whenever a is exactly the same as 0 you can use until finally inventory is at most 2|whenever inventory is less than or equal to x you are able to build until finally b is less than y|when inventory is not the same as y you have the option to jump until finally a is not the same as y|a is a strategy where you do jump if b y otherwise, if iron do use , or do build otherwise|a is a good strategy where you should do find if iron is not the same as 0 , or do use as a last resort|as soon as a is less than 2 you have the option to run until finally a is exactly the same as y|if position is larger than y you have the choice to run until inventory is larger than y|a states that you should do use if iron is greater than y otherwise, if iron do build , or do run as a last resort|when inventory is exactly the same as 0 you are able to build until finally position is smaller than 1|a is a good strategy where you should do build if a is exactly the same as 2 otherwise, if iron do jump , or do run if not|when a is at most 0 you have the choice to run until finally a|a is a tactic where it is good to do build if b is not equal to y otherwise, if b do jump , or do use as a last resort|a is a strategy where you do run if a is greater than 1 otherwise, if position do jump , or do jump if no other options are possible|whenever position is equal to y you can jump until finally inventory is not equal to x|once inventory is not the same as y you can jump until a is less than or equal to 2|a entails that you do use if a is larger than y otherwise, if iron do use , or do find if not|b is a tactic where it is advantageous to do run if b is equal to x , or do build otherwise|a is an approach where you do use if a is larger than y otherwise, if a do build , or do jump if not|a is a tactic where it is good to do run if position is larger than y otherwise, if position do jump , or do build as a last resort|when b is less than or equal to x you are able to use until finally a is smaller than 2|a entails that you do find if b is larger than 0 otherwise, if a do build , or do find if not|a is a tactic where it is advantageous to do build if b is smaller than x otherwise, if position do find , or do jump otherwise|as soon as a is less than y you can jump until finally inventory is exactly the same as 0|a suggests that it would be advantageous to do find if b is larger than 2 otherwise, if iron do run , or do jump if no other options are possible|a entails that you do build if a is equal to 1 otherwise, if b do use , or do build as a last resort|as soon as position is exactly the same as 2 you have the option to build until finally position is less than 0|a is a tactic where it is good to do jump if b 0 otherwise, if iron do build , or do find otherwise|a suggests that it would be advantageous to do build if b 1 otherwise, if a do use , or do find if no other options are possible|once b is larger than 2 you have the option to jump until inventory is greater than x|a is an approach where it would be good to do build if iron 1 otherwise, if iron do jump , or do jump otherwise|whenever inventory is not the same as 1 you have the choice to use until a is larger than x|a is an approach where you do run if a is smaller than y otherwise, if a do use , or do use if no other options are possible|a is an approach where it would be good to do run if a is smaller than x otherwise, if iron do find , or do build if no other options are possible|a is a good strategy where you should do jump if iron y otherwise, if a do build , or do use if not|a is a tactic where it is good to do find if b is not equal to x , or do run as a last resort|a is an approach where it would be good to do jump if a 2 otherwise, if position do find , or do run otherwise|b is an approach where you do run if a is greater than y otherwise, if b do find , or do run if no other options are possible|b means that it would be good to do build if b is not equal to y otherwise, if a do build , or do run if no other options are possible|b suggests that it would be advantageous to do build if a is not the same as 1 , or do use as a last resort|a is a tactic where it is advantageous to do use if a 2 otherwise, if position do use , or do jump if not|a is a tactic where it is advantageous to do use if b 2 otherwise, if a do use , or do find otherwise|a is a good strategy where you should do find if position y otherwise, if position do jump , or do jump if not|as soon as a is larger than y you are able to jump until inventory is less than 1|a is an approach where it would be good to do run if b 0 otherwise, if b do use , or do use otherwise|b is a tactic where it is advantageous to do find if a y otherwise, if position do run , or do run if no other options are possible|a entails that you do build if b is not the same as x otherwise, if a do find , or do find if not|b is a tactic where it is good to do use if iron y otherwise, if position do build , or do run otherwise|once b is at least x you have the option to jump until finally b is at least y|b is a tactic where it is good to do build if a is not the same as 2 otherwise, if b do use , or do use if not|when a is not equal to 2 you can find until b is smaller than 2|a entails that you do find if iron is equal to 1 otherwise, if b do jump , or do find if not|once position is equal to x you have the option to use until finally position is not the same as 0|a is an approach where it would be good to do build if a x otherwise, if iron do run , or do build if not|a is a tactic where it is advantageous to do use if iron is not the same as y otherwise, if position do run , or do find otherwise|a suggests that it would be advantageous to do use if iron 2 otherwise, if a do jump , or do jump if not|as soon as a is less than x you have the option to build until b is at least 0|when inventory is less than y you are able to run until a is less than or equal to 2|if b is not the same as x you are able to run until x|when a is less than or equal to x you have the option to run until finally position is larger than x|once a is exactly the same as 1 you have the option to use until a is smaller than 2|a states that you should do run if b 1 , or do use if not|once a is greater than x you have the choice to run until inventory is greater than or equal to x|b states that you should do find if position is greater than x otherwise, if position do build , or do build if no other options are possible|as soon as inventory is at least 0 you have the option to build until position is greater than or equal to 0|a is a tactic where it is good to do use if a y otherwise, if position do run , or do build if not|once inventory is not the same as 2 you can use until a is not equal to 0|when position is not equal to 2 you can use until inventory is less than y|a is a good strategy where you should do use if iron is exactly the same as 0 otherwise, if iron do jump , or do jump otherwise|whenever inventory is smaller than 1 you have the choice to jump until position is less than 0|b suggests that it would be advantageous to do find if iron is less than y otherwise, if b do jump , or do use otherwise|once a is less than or equal to y you have the choice to use until finally position is at most 1|as soon as position is at least 2 you have the choice to find until finally a is smaller than x|a is an approach where you do build if b x otherwise, if position do use , or do run otherwise|b states that you should do jump if position y otherwise, if iron do jump , or do find otherwise|once a is greater than or equal to 0 you have the choice to run until finally inventory is smaller than 2|once b is less than or equal to 1 you have the choice to build until b is less than x|once b is less than x you can build until finally a is less than 2|a entails that you do jump if a 2 otherwise, if b do build , or do build if no other options are possible|as soon as inventory is exactly the same as 0 you are able to run until inventory|a is a tactic where it is good to do use if iron x otherwise, if b do run , or do use if no other options are possible|a is an approach where it would be good to do find if a is not equal to x otherwise, if a do use , or do run otherwise|a is a strategy where you do use if iron is exactly the same as 0 otherwise, if b do run , or do jump if not|b suggests that it would be advantageous to do build if position y otherwise, if position do find , or do run as a last resort|b means that it would be good to do find if a is exactly the same as x otherwise, if a do jump , or do find otherwise|if b is at most 2 you are able to jump until finally position is less than or equal to y|when b you have the choice to build until finally b is not the same as 2|when position is at least 1 you have the choice to build until b is equal to 2|a entails that you do build if a is exactly the same as 1 otherwise, if b do run , or do build otherwise|a suggests that it would be advantageous to do run if b x otherwise, if a do find , or do run as a last resort|whenever b is greater than 0 you are able to run until finally inventory is at most y|a is a good strategy where you should do jump if a otherwise, if position do find , or do build if not|b is a tactic where it is advantageous to do use if a x otherwise, if b do use , or do use as a last resort|b states that you should do jump if position is greater than x otherwise, if position do build , or do build as a last resort|if b is larger than 1 you can jump until finally a is at least 2|a suggests that it would be advantageous to do run if b is larger than x otherwise, if position do jump , or do build otherwise|when position is less than or equal to 2 you can run until finally b is not equal to y|a is an approach where you do find if b otherwise, if iron do jump , or do find if no other options are possible|whenever inventory is smaller than y you have the choice to find until finally a is at most y|whenever b is at least x you can find until finally a is equal to x|a means that it would be good to do find if a is not the same as 2 otherwise, if b do find , or do jump as a last resort|once inventory is smaller than 2 you can use until finally a is less than 2|b states that you should do use if b is exactly the same as 2 , or do run as a last resort|whenever a is exactly the same as 2 you can use until finally inventory is at most 1|once a is at most 1 you can build until finally position is exactly the same as 0|a suggests that it would be advantageous to do find if iron is exactly the same as y otherwise, if iron do jump , or do run if no other options are possible|once position is at least 2 you have the choice to run until b is greater than 2|b is an approach where you do build if a is smaller than 1 otherwise, if b do use , or do jump if not|once b is exactly the same as 0 you have the choice to jump until position is smaller than y|when b is smaller than 2 you are able to run until position is less than 0|a is a tactic where it is advantageous to do find if position is equal to 0 otherwise, if a do run , or do build otherwise|a is a tactic where it is good to do find if b is smaller than x otherwise, if iron do find , or do jump otherwise|once b is larger than y you are able to use until finally inventory is at least x|if b is equal to 1 you are able to build until finally position is equal to y|if inventory is at least y you can jump until b is less than 2|a is an approach where you do jump if b 2 otherwise, if iron do use , or do run if no other options are possible|a entails that you do build if iron is not equal to x otherwise, if position do run , or do build as a last resort|if b is at most 1 you have the option to run until inventory is equal to 1|if a is greater than 2 you are able to jump until b is smaller than y|a is an approach where you do build if b 1 otherwise, if a do find , or do build if no other options are possible|if position is larger than 1 you have the option to find until finally inventory is at most 2|as soon as inventory is greater than or equal to 2 you can jump until inventory is greater than or equal to 2|as soon as b is larger than y you have the option to find until a is smaller than x|when a is at most 2 you are able to jump until finally inventory is not the same as 2|if position is equal to 2 you are able to use until inventory|once b is smaller than 1 you can run until finally b is less than or equal to 2|a is an approach where it would be good to do run if position is larger than x otherwise, if b do run , or do run as a last resort|as soon as b is at most 1 you have the option to jump until finally position is at least y|when inventory is exactly the same as x you are able to find until inventory is not equal to y|b is a tactic where it is good to do use if a is larger than x otherwise, if a do find , or do use if no other options are possible|b is an approach where it would be good to do build if b is larger than x otherwise, if a do use , or do find if no other options are possible|as soon as position is at most 0 you can use until finally b is greater than 2|a is a tactic where it is advantageous to do jump if position is greater than 0 otherwise, if a do jump , or do run if not|a is a tactic where it is advantageous to do build if iron 1 otherwise, if a do run , or do run otherwise|when a is not equal to 0 you have the option to use until a is greater than or equal to x|b is a tactic where it is advantageous to do build if position y otherwise, if b do jump , or do find as a last resort|a is an approach where it would be good to do find if position is not equal to y otherwise, if iron do find , or do build as a last resort|a means that it would be good to do jump if position is smaller than 0 otherwise, if iron do run , or do use if not|b is a strategy where you do jump if a is not the same as 2 otherwise, if b do run , or do find if not|as soon as position is equal to y you are able to run until position is exactly the same as 2|b entails that you do use if iron x otherwise, if iron do run , or do run if no other options are possible|a is an approach where you do use if b is not equal to 0 otherwise, if iron do jump , or do use as a last resort|b suggests that it would be advantageous to do jump if iron is not the same as x otherwise, if position do find , or do jump as a last resort|b means that it would be good to do jump if position is equal to x , or do build otherwise|once b is less than or equal to 0 you have the choice to jump until b is at least 2|a is a tactic where it is good to do find if b is not the same as x otherwise, if a do run , or do use if no other options are possible|b means that it would be good to do build if a is smaller than 1 otherwise, if a do build , or do jump as a last resort|a states that you should do use if b is less than 2 otherwise, if iron do find , or do find as a last resort|a is a tactic where it is good to do build if position is larger than x otherwise, if a do use , or do build otherwise|a is a strategy where you do find if iron is less than 2 , or do jump if not|once position is not the same as 2 you are able to use until finally position is greater than or equal to 1|a is an approach where you do build if a y , or do use otherwise|as soon as position is not equal to 0 you have the option to run until a is exactly the same as 2|b is a strategy where you do run if a is smaller than 0 otherwise, if position do run , or do use if not|a means that it would be good to do build if a is not the same as y otherwise, if b do find , or do run as a last resort|whenever b is greater than or equal to 0 you are able to jump until b is at most 0|as soon as position is equal to 0 you have the choice to run until position is larger than 0|as soon as a is not the same as x you are able to find until b is larger than 1|if b is exactly the same as 2 you have the choice to jump until position is equal to y|b is a good strategy where you should do use if b is larger than y otherwise, if position do jump , or do find if no other options are possible|a is an approach where it would be good to do build if iron is equal to x otherwise, if position do find , or do jump if no other options are possible|whenever b is exactly the same as x you have the option to jump until a is at most y|a states that you should do run if b is smaller than y otherwise, if iron do run , or do use if no other options are possible|if b is at least 2 you have the choice to run until finally a is at least 0|a means that it would be good to do jump if b 0 otherwise, if iron do jump , or do use if no other options are possible|a entails that you do run if iron is smaller than 2 otherwise, if iron do jump , or do jump otherwise|a states that you should do use if a is greater than y|a is a tactic where it is good to do use if b is exactly the same as y otherwise, if a do run , or do find if no other options are possible|a states that you should do use if position is not the same as 2 otherwise, if iron do jump , or do jump otherwise|b states that you should do use if position x otherwise, if position do use , or do jump if no other options are possible|a is a tactic where it is advantageous to do jump if b is not equal to 1 otherwise, if b do run , or do build otherwise|whenever inventory is exactly the same as 2 you have the choice to run until position is not equal to y|a is a good strategy where you should do find if position is less than 0 otherwise, if b do find , or do build if no other options are possible|when a is not equal to 0 you are able to use until inventory is equal to y|a suggests that it would be advantageous to do use if position is less than y otherwise, if a do find , or do use as a last resort|whenever a is less than y you are able to jump until finally a is at most 2|a entails that you do jump if b is exactly the same as x otherwise, if position do use , or do use otherwise|when a is greater than or equal to 0 you have the option to run until finally b is larger than 2|a is a good strategy where you should do use if a is greater than 2 otherwise, if iron do use , or do run as a last resort|a is an approach where it would be good to do run if position otherwise, if iron do build , or do jump if not|as soon as inventory is less than 1 you have the option to jump until finally a is less than or equal to y|a states that you should do jump if b y otherwise, if position do find , or do run as a last resort|b is a strategy where you do use if a is not equal to 2 , or do run as a last resort|a is an approach where you do use if a is equal to x otherwise, if b do jump , or do jump otherwise|as soon as b is not equal to x you have the choice to build until a is greater than or equal to 0|when position is not the same as 2 you are able to jump until finally b is equal to y|once position is less than y you have the choice to jump until y|a entails that you do build if iron is not equal to 0 otherwise, if iron do use , or do jump otherwise|a is an approach where you do find if b is greater than y otherwise, if a do run , or do use if not|whenever position is not equal to 1 you have the option to find until finally b is greater than 0|b is an approach where it would be good to do find if a 2 , or do run if no other options are possible|as soon as b is not equal to x you have the option to use until inventory is exactly the same as 2|b is a tactic where it is advantageous to do find if a is not equal to 1 otherwise, if b do jump , or do run if not|a means that it would be good to do run if a is smaller than y otherwise, if position do run , or do build if no other options are possible|a is an approach where you do use if b is greater than 1 otherwise, if b do jump , or do build otherwise|whenever b is smaller than 2 you are able to use until finally b is greater than or equal to 0|b is an approach where you do jump if a is not the same as 0 otherwise, if iron do use , or do build if no other options are possible|b means that it would be good to do build if position is equal to y , or do jump if not|b is a tactic where it is good to do find if a is less than 1 otherwise, if iron do run , or do find if not|b states that you should do jump if a is not equal to y otherwise, if position do build , or do use if not|when inventory is larger than 1 you are able to find until inventory is exactly the same as x|a is a strategy where you do find if b 2 otherwise, if position do jump , or do find as a last resort|if position you have the choice to use until b is exactly the same as 0|b is a tactic where it is good to do run if iron otherwise, if position do find , or do run if not|whenever inventory is equal to 2 you have the choice to jump until a is not the same as y|once inventory is smaller than 1 you have the option to use until finally b is at least 0|b is an approach where you do jump if b is exactly the same as y otherwise, if iron do find , or do build if no other options are possible|b is a tactic where it is advantageous to do jump if a is greater than x otherwise, if a do jump , or do jump if no other options are possible|whenever a is less than y you have the option to find until finally position is greater than or equal to 0|whenever position you are able to jump until finally position is less than y|when inventory is equal to 1 you have the option to build until b is less than 2|once position is at most 0 you have the option to jump until finally position is not the same as x|once inventory is less than 1 you can jump until finally position is at least y|as soon as inventory is larger than y you can run until a is less than y|a is a good strategy where you should do find if iron is equal to x otherwise, if position do build , or do build as a last resort|a is a strategy where you do use if position is exactly the same as 2|once b is greater than or equal to 2 you have the option to run until finally inventory is at least y|a is a strategy where you do run if position otherwise, if position do jump , or do jump if not|a is a tactic where it is good to do use if a x otherwise, if iron do find , or do build if no other options are possible|as soon as a is at most 2 you can build until finally position is less than or equal to 0|a is a strategy where you do use if iron 2 otherwise, if b do jump , or do use otherwise|once b is equal to x you are able to use until a is equal to x|a is a tactic where it is advantageous to do jump if b is exactly the same as 0 otherwise, if position do use , or do run if no other options are possible|a suggests that it would be advantageous to do run if b is not the same as 1 otherwise, if a do build , or do build if no other options are possible|b is an approach where you do jump if b is exactly the same as x otherwise, if iron do jump , or do run if not|a suggests that it would be advantageous to do find if position is less than 0 otherwise, if iron do find , or do run as a last resort|b is a tactic where it is good to do jump if position y otherwise, if position do build , or do run if not|a is a good strategy where you should do find if a 2 otherwise, if a do build , or do run otherwise|when position is not equal to 2 you can jump until finally b is not equal to 2|a is a good strategy where you should do run if position 0 otherwise, if a do run , or do build as a last resort|once inventory is at most x you have the choice to build until finally inventory is less than 0|if position is greater than y you have the choice to build until position is at least 2|a is a good strategy where you should do find if a is less than 1 otherwise, if position do jump , or do run if no other options are possible|a entails that you do use if b is not equal to y otherwise, if a do find , or do jump if not|a is a tactic where it is good to do find if a is less than 0 otherwise, if b do find , or do jump if no other options are possible|a is a good strategy where you should do jump if a is not equal to 2 otherwise, if position do run , or do find as a last resort|b means that it would be good to do jump if a is not equal to x otherwise, if iron do run , or do jump if no other options are possible|as soon as a is not equal to x you have the option to jump until a is at most 0|a is a strategy where you do jump if b otherwise, if a do jump , or do use if not|b is a tactic where it is good to do jump if a is equal to y otherwise, if a do use , or do run otherwise|as soon as b is smaller than 0 you are able to build until inventory is not the same as 2|once b is greater than or equal to 1 you have the choice to build until finally position is less than or equal to 2|b is a good strategy where you should do find if position is greater than x otherwise, if b do jump , or do use as a last resort|if inventory is smaller than x you are able to jump until position is smaller than x|a suggests that it would be advantageous to do run if iron otherwise, if iron do jump , or do jump if no other options are possible|once inventory is less than 0 you have the option to jump until finally position is less than y|b states that you should do jump if a x otherwise, if b do find , or do find otherwise|b entails that you do use if b is less than y , or do use as a last resort|as soon as a is exactly the same as 1 you can use until position is less than 1|once a is less than 1 you can run until a is exactly the same as 2|b suggests that it would be advantageous to do run if iron is greater than y otherwise, if a do build , or do find if not|a states that you should do use if iron is greater than 0 otherwise, if b do run , or do jump as a last resort|a suggests that it would be advantageous to do run if iron is exactly the same as 0 otherwise, if b do run , or do find otherwise|b is a tactic where it is advantageous to do run if a is equal to 2 otherwise, if position do run , or do find if no other options are possible|a means that it would be good to do build if a is not the same as 0 otherwise, if b do build , or do build if no other options are possible|b means that it would be good to do run if a x otherwise, if b do use , or do build if no other options are possible|once a is less than or equal to x you have the option to build until inventory is at least x|whenever b is at least x you can find until inventory is at most x|a suggests that it would be advantageous to do build if b 2 otherwise, if b do use , or do jump if no other options are possible|a states that you should do use if position is not equal to y otherwise, if iron do jump , or do use otherwise|b states that you should do build if b is not equal to y otherwise, if a do jump , or do find otherwise|as soon as inventory is not the same as 0 you can build until position is at least 0|a entails that you do use if b is less than x , or do use otherwise|b means that it would be good to do run if b is less than y otherwise, if a do use , or do build if no other options are possible|if b is smaller than y you can use until finally inventory is exactly the same as x|a states that you should do find if a otherwise, if position do jump , or do use if no other options are possible|b is a tactic where it is good to do build if a is not equal to 1 otherwise, if b do build , or do find if not|whenever a is larger than y you can use until b is equal to 2|once b is not equal to 2 you have the choice to find until finally b is smaller than x|b is a tactic where it is advantageous to do run if position is not the same as y otherwise, if a do build , or do jump if no other options are possible|as soon as a is at most 0 you have the choice to find until finally b|b is a strategy where you do jump if a y otherwise, if a do use , or do use if no other options are possible|a entails that you do jump if a is larger than 1 otherwise, if iron do use , or do jump as a last resort|whenever a is smaller than 1 you have the choice to build until a is larger than y|when inventory is exactly the same as x you are able to run until inventory is equal to 0|whenever b is not equal to 0 you can use until finally b is less than 0|when a is at least y you have the choice to run until finally b is at least x|a suggests that it would be advantageous to do find if a 0 otherwise, if iron do run , or do build as a last resort|a entails that you do use if a is larger than 2 , or do find as a last resort|a means that it would be good to do jump if iron is larger than 1 otherwise, if iron do find , or do find if no other options are possible|b entails that you do use if iron is smaller than y otherwise, if b do build , or do jump if no other options are possible|as soon as inventory is equal to y you have the choice to run until finally inventory is smaller than 2|a states that you should do find if position is larger than 0 otherwise, if b do use , or do find as a last resort|if position is larger than y you have the choice to use until finally b is greater than 1|whenever position is not the same as x you have the option to run until finally inventory is at most x|a is a good strategy where you should do use if b y otherwise, if iron do run , or do find as a last resort|whenever position is greater than 1 you are able to run until finally b is not the same as y|once b is greater than 0 you have the option to find until inventory is greater than or equal to x|if position is greater than 2 you have the choice to build until y|a is an approach where it would be good to do build if a is equal to 2 otherwise, if position do jump , or do build if not|whenever a is less than or equal to 1 you have the choice to run until finally inventory is at most 2|when a is greater than or equal to 0 you have the choice to jump until finally a is greater than 2|b is an approach where it would be good to do find if a is equal to x otherwise, if a do use , or do build as a last resort|a is a tactic where it is good to do find if position is exactly the same as y otherwise, if position do run , or do build if not|b is a tactic where it is advantageous to do jump if position y otherwise, if b do build , or do use as a last resort|as soon as b is at most 1 you have the choice to build until a is exactly the same as x|b is a tactic where it is advantageous to do build if iron y otherwise, if a do use , or do run if not|a states that you should do find if a otherwise, if b do use , or do build otherwise|b means that it would be good to do find if position is smaller than x otherwise, if a do run , or do jump if not|a is a good strategy where you should do use if a is greater than 1 otherwise, if iron do run , or do build if not|a is an approach where you do find if b 2 otherwise, if a do find , or do jump if not|as soon as inventory is not equal to y you can build until finally position is not the same as 1|a entails that you do use if a is smaller than 0 otherwise, if position do use , or do run as a last resort|if b is smaller than 2 you have the choice to use until finally a is less than or equal to 1|b is a tactic where it is good to do jump if position is less than y otherwise, if a do jump , or do jump if no other options are possible|a is a strategy where you do build if position is larger than 0 otherwise, if a do use , or do use if no other options are possible|b is a tactic where it is advantageous to do run if a is equal to 0 otherwise, if position do jump , or do run as a last resort|as soon as inventory is smaller than y you have the choice to use until finally b is at least 1|when a is at most 1 you have the choice to jump until b is greater than y|as soon as inventory is at most y you are able to use until a|b is an approach where it would be good to do jump if a is not the same as 0 otherwise, if position do jump , or do find if not|b suggests that it would be advantageous to do jump if b y otherwise, if position do run , or do jump if not|as soon as a is greater than 0 you are able to find until finally b is smaller than x|as soon as b is not equal to 0 you have the option to run until finally a is greater than or equal to 1|when a is at most 1 you are able to build until position is less than x|b suggests that it would be advantageous to do use if iron x otherwise, if iron do run , or do jump otherwise|once position is at most 0 you have the option to build until finally b is not equal to y|as soon as inventory is not equal to y you can use until b is larger than x|whenever position is greater than or equal to y you have the option to run until a is smaller than 0|as soon as inventory is exactly the same as 1 you have the choice to find until finally position is not the same as 2|once b is greater than x you have the option to use until position is smaller than 2|b entails that you do jump if iron is less than y otherwise, if iron do use , or do build otherwise|a suggests that it would be advantageous to do build if b is equal to x otherwise, if a do run , or do find as a last resort|whenever position is greater than or equal to 1 you can find until position is larger than x|when inventory is greater than or equal to y you have the choice to use until inventory is greater than 0|a suggests that it would be advantageous to do jump if iron is greater than 2 otherwise, if iron do jump , or do jump as a last resort|a is a tactic where it is good to do use if position is equal to x otherwise, if b do run , or do jump if not|a suggests that it would be advantageous to do find if b is not the same as 0 otherwise, if position do build , or do run otherwise|a entails that you do use if position 2 otherwise, if iron do build , or do use otherwise|a is a good strategy where you should do jump if a is not the same as y otherwise, if b do run , or do build if no other options are possible|b is a good strategy where you should do run if b is exactly the same as y otherwise, if iron do build , or do build otherwise|a means that it would be good to do jump if b otherwise, if iron do find , or do run as a last resort|a is an approach where it would be good to do jump if a is less than 1 otherwise, if position do jump , or do jump as a last resort|as soon as b is exactly the same as 0 you can jump until finally b is larger than x|once b is exactly the same as y you have the option to run until position is at most x|as soon as a is less than y you have the option to run until finally a is exactly the same as 1|when inventory is less than x you can jump until finally a|a is an approach where it would be good to do find if a is greater than 2 otherwise, if position do jump , or do run as a last resort|whenever position is smaller than 0 you are able to find until a is greater than y|a is a tactic where it is advantageous to do jump if position is smaller than x otherwise, if iron do build , or do jump otherwise|if a is at least y you can use until inventory is smaller than 0|a is an approach where it would be good to do jump if a y , or do jump if not|when position is not equal to 1 you are able to run until position is less than or equal to y|a means that it would be good to do jump if a is greater than x otherwise, if position do find , or do build if not|a means that it would be good to do jump if iron is greater than 0 otherwise, if b do use , or do run otherwise|a states that you should do jump if a is greater than 1 otherwise, if iron do find , or do jump if no other options are possible|as soon as inventory is greater than or equal to 1 you can jump until a is greater than or equal to x|a is an approach where you do use if b is greater than x otherwise, if position do jump , or do use otherwise|b states that you should do use if iron is equal to 1|b is a good strategy where you should do run if iron 1 , or do build as a last resort|if inventory is at most x you have the option to use until finally position|as soon as b is greater than x you are able to jump until finally a is greater than y|a states that you should do find if position 1 otherwise, if b do jump , or do find otherwise|a entails that you do run if b is equal to y , or do find if no other options are possible|whenever inventory is less than 1 you have the option to use until finally b|if inventory is at most y you have the option to run until finally b|whenever position is at least x you can build until finally inventory is not equal to 2|a is an approach where it would be good to do find if iron otherwise, if iron do run , or do build if not|a is an approach where it would be good to do run if iron otherwise, if position do run , or do find as a last resort|once a you are able to run until finally b is less than x|a is a strategy where you do build if a is larger than y otherwise, if a do use , or do build if not|when inventory is equal to x you have the option to use until finally inventory is at most 1|a is a strategy where you do build if b is exactly the same as 1 otherwise, if iron do use , or do build if not|a suggests that it would be advantageous to do build if iron is smaller than y otherwise, if position do jump , or do jump if no other options are possible|b is an approach where it would be good to do build if iron y otherwise, if a do jump , or do use if not|a suggests that it would be advantageous to do find if iron 2 otherwise, if iron do build , or do find as a last resort|whenever inventory is greater than 2 you have the choice to build until finally position is at least y|once inventory is not the same as 2 you have the choice to jump until finally position is smaller than x|a means that it would be good to do jump if iron is not equal to x otherwise, if iron do jump , or do use otherwise|a means that it would be good to do jump if position 2 otherwise, if position do use , or do run if no other options are possible|a is an approach where you do run if a y otherwise, if position do use , or do jump if not|a suggests that it would be advantageous to do jump if b y otherwise, if position do run , or do find as a last resort|when inventory is at most x you have the option to run until finally a is larger than x|a is a good strategy where you should do find if b is not equal to 2|when b is at most y you have the option to find until b is less than or equal to x|once b is not equal to 2 you are able to find until finally b is exactly the same as y|b is a strategy where you do build if iron is smaller than x otherwise, if position do jump , or do use if no other options are possible|b is a strategy where you do build if a otherwise, if iron do build , or do build as a last resort|b is a tactic where it is good to do jump if b y otherwise, if position do jump , or do use otherwise|when inventory is exactly the same as 0 you have the choice to run until position is not equal to 1|a is a tactic where it is advantageous to do find if iron 0 otherwise, if iron do use , or do run otherwise|once b is not equal to 0 you can run until inventory is less than x|whenever a is smaller than y you have the option to run until finally position is less than or equal to 1|b entails that you do find if position is not the same as y otherwise, if a do build , or do jump if no other options are possible|once y you are able to jump until position is less than y|whenever a is equal to 2 you are able to jump until finally b is equal to y|a is an approach where it would be good to do find if b is less than y otherwise, if position do build , or do use if not|when a is at most 1 you are able to find until finally inventory is greater than 1|when a is greater than or equal to y you are able to use until finally b is larger than y|b entails that you do build if a y otherwise, if b do jump , or do run as a last resort|if a is greater than 2 you have the choice to find until finally inventory is less than x|when inventory is at most y you have the option to build until a is equal to 1|when position is not the same as y you can run until finally inventory is at least 2|b is a strategy where you do run if iron is not the same as x otherwise, if b do jump , or do use as a last resort|b is an approach where it would be good to do build if a is equal to y otherwise, if b do use , or do run otherwise|a is a strategy where you do build if b 0 otherwise, if iron do build , or do build if not|a entails that you do find if a is smaller than 2 , or do use otherwise|once position is not the same as x you can find until b is less than 1|b entails that you do find if a is smaller than 1 otherwise, if a do jump , or do build if not|once position is less than 2 you have the option to use until position is at most 0|a is a tactic where it is advantageous to do find if iron 1 otherwise, if iron do run , or do jump if no other options are possible|a states that you should do build if iron is larger than 0 otherwise, if a do use , or do use if no other options are possible|as soon as inventory is less than or equal to y you are able to use until finally inventory is less than or equal to 2|b is a good strategy where you should do run if position is not the same as x otherwise, if b do run , or do build if no other options are possible|a entails that you do run if position is not the same as y otherwise, if b do build , or do jump as a last resort|when position is less than or equal to 0 you can build until position is less than y|when position is less than 2 you have the choice to find until b is equal to 1|a states that you should do run if position y otherwise, if b do use , or do use as a last resort|a is an approach where you do jump if a y otherwise, if iron do build , or do run as a last resort|whenever a is greater than 1 you have the option to jump until a is not equal to 1|a is a tactic where it is good to do build if a is greater than x otherwise, if position do jump , or do run if no other options are possible|a means that it would be good to do jump if iron is less than 0 otherwise, if a do jump , or do use if no other options are possible|whenever position is not the same as y you have the choice to use until finally position is equal to x|as soon as a is exactly the same as x you have the option to build until a is greater than or equal to y|a is an approach where you do use if a is less than y otherwise, if position do run , or do build as a last resort|a is a good strategy where you should do find if a is smaller than 0 , or do use otherwise|as soon as position is less than or equal to x you have the option to use until inventory is at least x|if b is less than y you have the choice to build until finally a is less than or equal to 1|a is a tactic where it is good to do build if iron is smaller than 1 otherwise, if iron do build , or do run if no other options are possible|a is an approach where you do jump if a is exactly the same as 2 otherwise, if b do find , or do build otherwise|a is a good strategy where you should do use if a is not the same as y otherwise, if position do run , or do build if no other options are possible|when b is not equal to y you are able to use until position is larger than 1|b is an approach where you do run if b is equal to x otherwise, if b do build , or do use as a last resort|once a is exactly the same as 1 you have the choice to build until position is less than or equal to y|when a is at most 1 you are able to jump until a is not the same as x|if position is equal to 1 you are able to jump until finally position is less than or equal to x|a is an approach where you do use if b 2 otherwise, if a do find , or do find otherwise|a entails that you do jump if b 0 otherwise, if b do run , or do find if no other options are possible|a is a tactic where it is good to do jump if iron is not the same as 0 , or do use as a last resort|a is a tactic where it is advantageous to do build if b is equal to 1 otherwise, if a do use , or do jump as a last resort|b means that it would be good to do jump if position y otherwise, if iron do use , or do jump if no other options are possible|once inventory is not equal to 1 you have the choice to build until x|a is an approach where you do build if position is less than y otherwise, if b do jump , or do use if not|b suggests that it would be advantageous to do use if b is not equal to 2 , or do run as a last resort|when inventory is smaller than 0 you can find until finally position is exactly the same as x|b means that it would be good to do build if iron is equal to x otherwise, if b do jump , or do use as a last resort|a is a strategy where you do build if b is exactly the same as 1 otherwise, if position do run , or do use otherwise|whenever a is smaller than 2 you have the choice to build until finally b is not equal to x|once a is exactly the same as y you can use until a is not equal to 0|as soon as inventory is greater than 0 you have the option to build until inventory is equal to y|b is an approach where it would be good to do use if a is exactly the same as 0 otherwise, if b do jump , or do run as a last resort|b is a tactic where it is good to do build if b is not the same as y otherwise, if b do use , or do jump as a last resort|as soon as b is greater than or equal to 2 you are able to use until finally inventory is equal to 0|when b is less than 0 you can use until finally b is exactly the same as 0|whenever a is larger than 2 you can jump until position is at least 1|a is a tactic where it is good to do use if iron 1 otherwise, if position do find , or do run if no other options are possible|a entails that you do jump if position is greater than y otherwise, if position do run , or do find if no other options are possible|as soon as a is exactly the same as 0 you have the option to find until position is not the same as 1|a is an approach where you do use if b is less than 0 otherwise, if iron do run , or do build as a last resort|a is a tactic where it is good to do find if b otherwise, if b do run , or do jump if no other options are possible|a is a strategy where you do find if a is exactly the same as y otherwise, if iron do use , or do find otherwise|when b is at most 0 you can jump until finally b is less than 1|if position is at most y you have the choice to run until position is exactly the same as 2|a entails that you do jump if b 2 otherwise, if position do build , or do run otherwise|once position is not equal to 1 you can run until inventory is greater than 0|a states that you should do use if position is less than y otherwise, if b do build , or do build otherwise|a suggests that it would be advantageous to do build if iron x otherwise, if iron do find , or do run if no other options are possible|if inventory is less than 2 you have the choice to use until finally a is at least x|a means that it would be good to do jump if a is exactly the same as 2 otherwise, if a do run , or do run if not|a means that it would be good to do run if iron is smaller than x otherwise, if a do build , or do jump if no other options are possible|a is a good strategy where you should do run if position is smaller than y otherwise, if b do run , or do run if no other options are possible|a means that it would be good to do jump if iron is less than 0 , or do use as a last resort|when position you can run until finally inventory is less than or equal to y|b is an approach where it would be good to do run if iron is not equal to x otherwise, if iron do jump , or do jump if not|a is an approach where you do use if position is less than y otherwise, if position do find , or do find if not|when inventory is less than or equal to 1 you can jump until a is not equal to x|b is an approach where it would be good to do use if position is larger than y otherwise, if b do run , or do jump if no other options are possible|a is an approach where it would be good to do jump if position is less than 2 otherwise, if a do jump , or do jump if not|whenever position is smaller than 1 you have the choice to build until a is smaller than 2|when a is not equal to x you can build until position is not equal to y|as soon as a is at most 0 you have the choice to build until finally inventory is not equal to 2|b suggests that it would be advantageous to do jump if a is exactly the same as 0 otherwise, if a do use , or do run if no other options are possible|whenever position is greater than or equal to y you have the choice to run until a is at most x|a states that you should do build if a 0 otherwise, if b do build , or do use if no other options are possible|as soon as b is at least y you are able to jump until inventory is not equal to 2|a is a tactic where it is good to do build if position is less than 0 , or do find as a last resort|a is a tactic where it is advantageous to do use if a is smaller than 2 otherwise, if a do use , or do run if not|as soon as b is exactly the same as 2 you have the choice to use until position is smaller than 0|when position is greater than or equal to x you have the choice to jump until position is larger than x|if inventory is exactly the same as 2 you can run until finally b is smaller than y|whenever b is at most 0 you can build until a is greater than x|a is an approach where it would be good to do find if iron is exactly the same as 1 otherwise, if b do find , or do build otherwise|as soon as inventory you are able to jump until finally a is exactly the same as y|once position is smaller than x you have the choice to jump until b is greater than 0|once position is not the same as 2 you are able to find until position is smaller than 2|b is a good strategy where you should do jump if iron is larger than x otherwise, if a do run , or do jump if not|a is a good strategy where you should do build if b is not the same as x otherwise, if iron do use , or do build otherwise|a is a tactic where it is good to do jump if iron is greater than x otherwise, if position do build , or do run if no other options are possible|a is a tactic where it is good to do find if b is equal to y otherwise, if position do jump , or do run otherwise|as soon as b is less than x you have the option to jump until inventory is at least 2|whenever position is less than or equal to 2 you have the option to find until finally b is smaller than 2|whenever position is greater than y you have the choice to run until finally b is at most 1|a suggests that it would be advantageous to do use if position is exactly the same as y otherwise, if iron do use , or do use otherwise|once b is greater than 1 you are able to use until finally inventory is exactly the same as 1|when inventory is exactly the same as x you have the option to build until a is at most 0|a suggests that it would be advantageous to do find if position is not the same as 0 otherwise, if a do jump , or do find as a last resort|a is an approach where you do use if a 1 otherwise, if b do build , or do jump if no other options are possible|once inventory is exactly the same as 2 you are able to run until finally position is larger than 2|once b is smaller than y you are able to find until a is exactly the same as x|a is a tactic where it is good to do jump if b is exactly the same as x otherwise, if position do run , or do find if no other options are possible|a is an approach where you do find if iron , or do build if not|a is a tactic where it is good to do build if a is not the same as 0 otherwise, if iron do jump , or do build otherwise|b states that you should do find if position is not the same as 0 , or do use if not|b is an approach where it would be good to do run if b is smaller than x otherwise, if b do find , or do jump otherwise|a suggests that it would be advantageous to do use if iron is equal to y otherwise, if position do find , or do build as a last resort|a entails that you do find if position is greater than 0 otherwise, if b do run , or do use otherwise|a is an approach where you do build if a is greater than 2 otherwise, if position do find , or do find as a last resort|a is a good strategy where you should do use if a is greater than 0 otherwise, if position do find , or do use as a last resort|as soon as b is at most 0 you can build until a is not equal to 2|whenever a is not equal to 1 you have the choice to jump until finally inventory is greater than or equal to x|if position is at least 1 you have the choice to build until position is not the same as 1|whenever position is not the same as 1 you are able to build until b is not the same as 0|once position you are able to use until finally inventory is at most x|a is a tactic where it is advantageous to do find if position is less than x otherwise, if iron do build , or do jump if no other options are possible|if a is smaller than y you can run until b|when inventory is less than 1 you have the choice to run until finally a is exactly the same as x|a is an approach where it would be good to do use if a is equal to x otherwise, if a do use , or do use otherwise|b states that you should do run if iron is greater than y otherwise, if a do build , or do jump as a last resort|as soon as inventory is at most x you can jump until finally b is equal to 0|b states that you should do use if a is not the same as y otherwise, if iron do find , or do find if no other options are possible|if a is exactly the same as x you are able to use until a is greater than or equal to y|once b is equal to y you can run until position is greater than x|as soon as a is smaller than x you have the choice to use until finally position is equal to 0|whenever inventory is at most 2 you have the choice to use until finally inventory is at least 1|b means that it would be good to do find if position y otherwise, if position do jump , or do find otherwise|a entails that you do find if a otherwise, if iron do build , or do build otherwise|whenever inventory is at most y you are able to use until x|if position is larger than 2 you have the option to find until b is smaller than x|whenever inventory is at most 1 you have the option to run until finally a is equal to 0|a is an approach where it would be good to do run if a otherwise, if b do build , or do use otherwise|a entails that you do build if b is smaller than 2 otherwise, if b do jump , or do build otherwise|as soon as a is equal to 1 you are able to jump until finally position is less than x|a states that you should do use if iron is larger than y otherwise, if b do run , or do find as a last resort|if position is less than 0 you have the choice to jump until finally a is not the same as 2|a is an approach where you do build if position y otherwise, if position do find , or do use if not|whenever a is at most x you have the option to run until b is at least x|when a is less than 0 you are able to run until a is at least x|once b is not the same as 0 you have the choice to jump until finally inventory is greater than x|a is a tactic where it is advantageous to do use if a is smaller than x otherwise, if iron do jump , or do run if no other options are possible|a states that you should do jump if b is not the same as y otherwise, if a do run , or do use if no other options are possible|when b is larger than x you have the option to use until b is greater than or equal to 0|a is a tactic where it is good to do use if position is greater than x otherwise, if b do jump , or do build if no other options are possible|if a is less than or equal to 2 you have the choice to use until finally inventory is greater than or equal to y|if inventory is less than or equal to x you are able to find until a is less than or equal to x|as soon as b is greater than or equal to x you have the choice to use until inventory is larger than 2|a is a tactic where it is advantageous to do use if position is equal to 2 otherwise, if a do find , or do jump if no other options are possible|once b is equal to y you are able to jump until b is equal to 2|b is a tactic where it is advantageous to do find if iron is not equal to x otherwise, if position do find , or do jump if no other options are possible|once inventory is less than 2 you are able to run until inventory is equal to 1|a suggests that it would be advantageous to do run if b 0 otherwise, if iron do build , or do build otherwise|when position is greater than or equal to 1 you have the option to use until finally b is smaller than x|when inventory is greater than or equal to 0 you have the choice to run until position is greater than or equal to y|whenever a is less than or equal to x you are able to build until finally b is equal to y|whenever a is greater than or equal to 1 you have the choice to find until finally b is at least x|a is a good strategy where you should do jump if b is greater than 2 otherwise, if a do use , or do jump if no other options are possible|when inventory is less than 0 you are able to jump until b is at most 0|b entails that you do run if iron x otherwise, if position do jump , or do jump as a last resort|whenever inventory is equal to 2 you have the option to build until a is at least x|a is a strategy where you do find if position y otherwise, if position do use , or do jump as a last resort|as soon as b is smaller than x you have the option to use until position is greater than x|a is a tactic where it is advantageous to do jump if b is not equal to 1 otherwise, if iron do build , or do jump otherwise|whenever b is not equal to 2 you are able to build until b is greater than or equal to y|a is a tactic where it is good to do jump if iron is not equal to x otherwise, if iron do build , or do run if no other options are possible|whenever b is greater than 1 you have the option to run until inventory is at least 2|a entails that you do jump if a is less than 2 otherwise, if b do jump , or do use if no other options are possible|as soon as a is at most x you have the option to build until finally position is not equal to 2|a is an approach where you do use if iron is not the same as y , or do build as a last resort|a states that you should do jump if position is not the same as y otherwise, if iron do find , or do run if no other options are possible|if inventory is less than or equal to y you have the option to build until position is exactly the same as 1|if b is not equal to y you have the choice to jump until b is exactly the same as 0|once a is at most y you have the option to use until finally inventory is smaller than x|when b is equal to 1 you have the choice to jump until b is at least 1|when a is equal to 1 you have the choice to run until inventory is greater than x|if b is at most 0 you are able to build until finally b is less than 1|a states that you should do use if b is not equal to x otherwise, if b do run , or do build as a last resort|b is an approach where it would be good to do build if a is smaller than y otherwise, if b do use , or do find otherwise|a is a strategy where you do run if position y otherwise, if iron do use , or do jump if not|if b is equal to y you have the option to run until finally a is not equal to x|whenever b is equal to 2 you have the option to use until inventory is less than y|once b is greater than or equal to 0 you can find until finally position is at least 0|once inventory is at most 2 you have the choice to build until finally a is greater than 1|if position is less than x you are able to use until finally b is not equal to x|a is an approach where you do use if iron 2 otherwise, if a do find , or do use if not|a is a tactic where it is good to do use if b 1 otherwise, if b do find , or do use if no other options are possible|a is a strategy where you do run if position x otherwise, if iron do find , or do build otherwise|a entails that you do use if b 0 otherwise, if position do run , or do build if not|if b is exactly the same as y you are able to jump until a is not equal to 0|a is a tactic where it is good to do run if iron is not the same as 0 otherwise, if iron do use , or do use if not|if b is less than or equal to 2 you are able to build until finally b is less than 2|as soon as a is at most 1 you are able to build until x|whenever b is less than or equal to 1 you are able to jump until finally inventory is greater than or equal to x|b suggests that it would be advantageous to do find if a is exactly the same as 1 otherwise, if b do run , or do find as a last resort|a is an approach where you do use if iron is equal to 1 otherwise, if b do find , or do use as a last resort|as soon as inventory is greater than 1 you have the choice to use until b is larger than x|a states that you should do find if position x otherwise, if b do find , or do jump if not|a entails that you do use if position is larger than y otherwise, if iron do find , or do use if no other options are possible|a is a good strategy where you should do find if iron is exactly the same as x otherwise, if iron do jump , or do use as a last resort|a is a strategy where you do run if position 2 , or do build otherwise|b is a good strategy where you should do build if b is greater than x otherwise, if b do run , or do run as a last resort|as soon as a is larger than 1 you have the choice to find until b is equal to y|a is a good strategy where you should do run if b is not equal to 1 otherwise, if position do use , or do jump as a last resort|b is a tactic where it is good to do find if a is not the same as 2 otherwise, if b do find , or do jump otherwise|a is a strategy where you do find if a is less than 1 otherwise, if position do find , or do run otherwise|b is a tactic where it is good to do use if iron x otherwise, if iron do build , or do use if no other options are possible|a is a strategy where you do find if b is greater than 0 otherwise, if iron do run , or do build if no other options are possible|a is a strategy where you do build if iron is not equal to y otherwise, if position do jump , or do jump if not|b is a tactic where it is good to do build if position 0 , or do use if no other options are possible|when position is at most y you can build until finally b is not equal to y|b is a tactic where it is advantageous to do build if b is smaller than x otherwise, if iron do use , or do build if no other options are possible|a is a strategy where you do use if a 1 otherwise, if a do jump , or do build if not|once a is greater than or equal to x you can build until a is larger than 2|once inventory is greater than 2 you are able to use until b is smaller than 0|whenever inventory is equal to 2 you have the option to build until b is less than or equal to 0|when a is less than or equal to 2 you have the choice to use until a is greater than or equal to 2|b is a strategy where you do run if iron is exactly the same as x otherwise, if position do run , or do use if not|when b is greater than 1 you are able to run until finally a is less than 2|a is a tactic where it is advantageous to do find if iron is larger than 2 otherwise, if a do build , or do run if no other options are possible|when a is less than or equal to y you have the option to find until finally a is equal to 2|if position is at least 0 you have the option to find until finally a is equal to x|a is a strategy where you do run if position 1 otherwise, if b do run , or do run as a last resort|once position is greater than or equal to 2 you have the option to use until position is larger than y|when a is greater than 1 you are able to run until b is smaller than 0|b means that it would be good to do build if a is less than 1 otherwise, if position do find , or do use otherwise|if position is equal to 2 you are able to use until a is greater than or equal to y|if a is less than or equal to y you are able to run until b is less than or equal to 0|as soon as position you have the option to run until finally b is less than y|a is a strategy where you do find if position is greater than 2 otherwise, if iron do use , or do build if no other options are possible|if position is less than or equal to x you have the option to use until finally a is at least x|once b is larger than 2 you have the choice to use until position is equal to 1|once b is at most y you can use until finally position is greater than or equal to x|a is a strategy where you do find if position is not the same as x otherwise, if b do build , or do build as a last resort|as soon as inventory is not equal to y you have the option to build until b is not equal to 1|whenever a is not equal to 2 you are able to run until finally position is greater than 0|once inventory is less than or equal to 0 you are able to jump until finally position is exactly the same as 2|if position is greater than or equal to 0 you have the option to build until position is at most 2|a states that you should do build if position is not the same as x otherwise, if position do find , or do build otherwise|once position is equal to 1 you can run until b is not the same as 2|whenever a is greater than or equal to 1 you can find until finally inventory is less than or equal to y|if position is less than or equal to 1 you can use until finally a is not equal to y|a is a tactic where it is good to do build if iron is larger than y otherwise, if a do find , or do find otherwise|when b is at most y you have the option to find until position is less than or equal to 0|if b is larger than 2 you are able to find until inventory is not equal to 2|whenever a is not equal to y you can find until finally a is not equal to y|b is a tactic where it is advantageous to do find if iron otherwise, if b do build , or do use otherwise|once position is larger than x you have the option to use until b is exactly the same as 2|a is a good strategy where you should do build if b otherwise, if position do find , or do find if no other options are possible|once inventory is less than or equal to 1 you have the option to run until finally inventory is greater than 0|as soon as position is not equal to 0 you can use until finally a is exactly the same as x|when position is at most 1 you have the option to run until inventory is at least x|a is an approach where you do find if iron is not the same as 0 otherwise, if b do jump , or do jump otherwise|a is an approach where you do build if iron is smaller than y otherwise, if position do use , or do use otherwise|as soon as b is exactly the same as 0 you are able to find until a is not the same as x|b means that it would be good to do find if iron is exactly the same as y otherwise, if position do build , or do run as a last resort|a means that it would be good to do build if b is equal to 1 otherwise, if iron do run , or do run if no other options are possible|whenever a is smaller than 2 you can use until finally position is greater than or equal to 1|a states that you should do run if iron is exactly the same as y otherwise, if b do build , or do find otherwise|if a is greater than or equal to 2 you have the option to use until b is less than y|if a is at most 0 you have the option to find until finally b is less than or equal to y|b entails that you do run if a is less than y otherwise, if iron do use , or do jump otherwise|a is a tactic where it is advantageous to do find if iron otherwise, if b do build , or do jump otherwise|a means that it would be good to do find if b is not equal to 2 otherwise, if position do use , or do find if not|when position is greater than or equal to 1 you are able to use until finally b is less than 1|b is a strategy where you do build if iron is not equal to x otherwise, if position do use , or do find as a last resort|a states that you should do find if position y otherwise, if a do run , or do use otherwise|a is a tactic where it is good to do run if position is larger than x otherwise, if a do jump , or do build otherwise|b is a strategy where you do find if a is not equal to 1 otherwise, if a do build , or do build if not|a is a tactic where it is advantageous to do use if position is not equal to 1 , or do build if not|when a is less than or equal to 0 you have the option to use until b is smaller than 2|if a is at most 0 you can find until finally inventory is equal to 1|b is an approach where it would be good to do build if b otherwise, if iron do run , or do run if not|a is a good strategy where you should do build if a is larger than 1 otherwise, if iron do run , or do run if no other options are possible|a is a tactic where it is good to do jump if iron is greater than 1 otherwise, if a do use , or do find otherwise|once a is less than y you have the option to use until b is not equal to 1|if inventory is less than or equal to y you have the option to use until inventory is at most 0|a means that it would be good to do use if position 2 otherwise, if position do find , or do jump if no other options are possible|once position is greater than or equal to 1 you have the choice to find until inventory is greater than or equal to 2|once position is equal to 2 you have the option to build until finally position is greater than 2|whenever b is exactly the same as y you are able to use until a is less than or equal to y|a is an approach where you do find if b 1 otherwise, if position do find , or do find otherwise|a states that you should do jump if a 1 otherwise, if b do find , or do build if not|b means that it would be good to do jump if b y otherwise, if position do run , or do run if no other options are possible|if a is at least 0 you are able to jump until finally position is less than y|a is an approach where you do use if iron is exactly the same as x otherwise, if iron do run , or do build if no other options are possible|once b is exactly the same as 1 you are able to run until finally position is less than 2|a is a good strategy where you should do run if a x otherwise, if iron do jump , or do use otherwise|when inventory is exactly the same as 2 you are able to find until b is at most 0|a is a strategy where you do find if position is larger than x otherwise, if a do find , or do use otherwise|as soon as position you have the choice to run until finally a is exactly the same as y|b is an approach where it would be good to do use if position is larger than y otherwise, if position do jump , or do build as a last resort|b means that it would be good to do use if position otherwise, if b do run , or do run otherwise|b is a good strategy where you should do run if iron y , or do jump if no other options are possible|a suggests that it would be advantageous to do use if a 2 otherwise, if a do find , or do find if no other options are possible|whenever inventory is at least 2 you have the option to use until finally position is less than or equal to 2|when b is larger than 1 you are able to run until inventory is less than 2|once b is not the same as 2 you are able to build until inventory is smaller than 1|b is a strategy where you do use if iron y otherwise, if iron do use , or do use if not|a entails that you do use if b is smaller than y otherwise, if b do run , or do jump if no other options are possible|whenever a is exactly the same as 2 you have the choice to run until finally b is at least y|as soon as b is greater than or equal to 0 you have the option to build until finally position is greater than or equal to 1|b is a good strategy where you should do use if iron x , or do run as a last resort|b entails that you do find if b y otherwise, if position do jump , or do jump if no other options are possible|b is a good strategy where you should do jump if position 2 , or do build if not|b is a good strategy where you should do build if position is not the same as y otherwise, if position do build , or do run if no other options are possible|as soon as a is exactly the same as y you can find until finally a is greater than or equal to 2|a is a tactic where it is advantageous to do build if b is less than 0 otherwise, if a do jump , or do build if no other options are possible|a is a strategy where you do build if position is not equal to x otherwise, if a do build , or do run if no other options are possible|when position is greater than or equal to 2 you have the choice to use until finally a is not the same as 2|whenever position is less than or equal to 2 you have the choice to build until finally b|as soon as position is at least x you have the option to use until a is larger than 0|a suggests that it would be advantageous to do jump if b 1 otherwise, if position do find , or do run otherwise|once inventory is greater than or equal to 1 you have the choice to find until finally b is less than 0|a suggests that it would be advantageous to do use if a is greater than x otherwise, if a do run , or do run otherwise|as soon as b is less than or equal to 2 you have the option to find until finally inventory is equal to 2|b means that it would be good to do build if a is not equal to y otherwise, if a do find , or do build otherwise|if inventory is larger than 2 you have the option to run until inventory is at least x|when position is smaller than y you can use until a is less than 0|once b is at most y you can build until position is smaller than y|as soon as a is not equal to 2 you can run until finally inventory is not the same as x|as soon as position is greater than 0 you are able to build until a is greater than or equal to 0|a suggests that it would be advantageous to do run if b 2 otherwise, if b do jump , or do jump as a last resort|whenever position is smaller than x you are able to use until position is at least y|whenever inventory is less than or equal to x you have the choice to jump until finally inventory is equal to 1|as soon as position is less than 0 you have the option to use until finally inventory is exactly the same as 0|a is an approach where it would be good to do build if iron x otherwise, if iron do find , or do use if not|a states that you should do jump if position y otherwise, if b do find , or do find if no other options are possible|once a is smaller than y you have the option to use until b is larger than x|a means that it would be good to do use if position is not equal to 2 otherwise, if iron do run , or do find as a last resort|a suggests that it would be advantageous to do jump if iron is less than x otherwise, if b do use , or do find if not|if position is exactly the same as y you have the choice to jump until inventory is at least 1|a means that it would be good to do jump if iron otherwise, if b do find , or do use otherwise|when inventory is greater than x you have the choice to jump until finally b is less than or equal to 1|when a is less than 1 you are able to jump until finally b is greater than or equal to 0|b is a tactic where it is good to do use if position is not the same as x otherwise, if position do build , or do find if not|a entails that you do jump if position is not the same as 0 otherwise, if position do run , or do jump if no other options are possible|b is a good strategy where you should do use if iron 0|b is an approach where you do use if position is not the same as y otherwise, if position do build , or do use as a last resort|when b is exactly the same as 2 you are able to jump until finally position is at most y|whenever a is smaller than 0 you have the option to find until b is greater than 2|a entails that you do run if b is not equal to y otherwise, if a do jump , or do build as a last resort|b is an approach where it would be good to do run if position y otherwise, if b do use , or do find if not|b is an approach where it would be good to do run if b is exactly the same as y otherwise, if position do find , or do run if not|as soon as position is greater than 0 you are able to use until inventory is not equal to 2|b is an approach where you do find if a is smaller than 1 otherwise, if b do find , or do run otherwise|a suggests that it would be advantageous to do build if iron is not equal to 0 otherwise, if position do build , or do jump if not|b means that it would be good to do run if iron is larger than 0|a is a tactic where it is advantageous to do find if position 0 otherwise, if iron do build , or do use otherwise|a is a good strategy where you should do use if position otherwise, if b do build , or do build as a last resort|a is a good strategy where you should do run if position is greater than 2 otherwise, if a do find , or do use otherwise|whenever a is greater than x you are able to jump until a is greater than y
[start] option : \n \t init position >= 2 \n \t execute find \n \t until position >= x [end]|[start] policy a := \n \t if position >= x : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until inventory >= 2 [end]|[start] policy b := \n \t if iron != y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until a == x [end]|[start] policy b := \n \t if b == x : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until inventory < x [end]|[start] policy a := \n \t if a < 0 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until inventory != y [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init y \n \t execute run \n \t until b >= 0 [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until a > 2 [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until b != 0 [end]|[start] policy a := \n \t if a != y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position <= y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != y \n \t execute find \n \t until b >= 1 [end]|[start] policy a := \n \t if position == 0 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 2 \n \t execute build \n \t until inventory != y [end]|[start] option : \n \t init b >= 1 \n \t execute run \n \t until b == 0 [end]|[start] policy a := \n \t if b < x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until position >= x [end]|[start] policy a := \n \t if iron != 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 2 \n \t execute jump \n \t until a > 0 [end]|[start] option : \n \t init b != 0 \n \t execute find \n \t until inventory != x [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > x \n \t execute use \n \t until inventory != 0 [end]|[start] policy a := \n \t if position != 1 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a > x \n \t execute use \n \t until inventory == 2 [end]|[start] option : \n \t init a == y \n \t execute run \n \t until inventory [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until a != 1 [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position >= y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= y \n \t execute run \n \t until a != 0 [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until position >= 2 [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 1 \n \t execute build \n \t until a > x [end]|[start] policy a := \n \t if b <= 2 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until inventory > 1 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 1 \n \t execute jump \n \t until position < 1 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory \n \t execute run \n \t until position != 0 [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a < x \n \t execute run \n \t until inventory > x [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b == y \n \t execute run \n \t until inventory <= 2 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > y \n \t execute jump \n \t until position == 1 [end]|[start] option : \n \t init b > x \n \t execute run \n \t until a > 1 [end]|[start] option : \n \t init a <= 2 \n \t execute run \n \t until inventory <= 0 [end]|[start] policy a := \n \t if position != 2 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b == x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a == y \n \t execute build \n \t until a [end]|[start] option : \n \t init position > 2 \n \t execute use \n \t until b >= 2 [end]|[start] policy b := \n \t if position > y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until b != 0 [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until inventory > 1 [end]|[start] option : \n \t init b != y \n \t execute find \n \t until b == y [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until a > x [end]|[start] option : \n \t init a > x \n \t execute use \n \t until a <= 1 [end]|[start] option : \n \t init a < 0 \n \t execute find \n \t until x [end]|[start] option : \n \t init a > y \n \t execute run \n \t until inventory != 0 [end]|[start] policy a := \n \t if b > 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 0 \n \t execute find \n \t until a >= x [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until a == 0 [end]|[start] policy b := \n \t if a < 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= x \n \t execute find \n \t until b < 0 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < y \n \t execute use \n \t until y [end]|[start] policy b := \n \t if iron >= y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= x : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until a != y [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until position [end]|[start] option : \n \t init b != x \n \t execute build \n \t until position < 0 [end]|[start] policy b := \n \t if a < 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until a < 2 [end]|[start] policy b := \n \t if position == x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 1 \n \t execute run \n \t until inventory >= 0 [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until inventory < y [end]|[start] option : \n \t init b == x \n \t execute build \n \t until position > 0 [end]|[start] policy b := \n \t if b < y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 0 \n \t execute build \n \t until a < 2 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 0 \n \t execute jump \n \t until b < y [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron == y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 1 \n \t execute use \n \t until inventory [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b > y \n \t execute jump \n \t until a >= y [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until position >= 1 [end]|[start] option : \n \t init b >= 2 \n \t execute jump \n \t until position > y [end]|[start] option : \n \t init position == y \n \t execute run \n \t until position > x [end]|[start] policy b := \n \t if iron > x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until position < x [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until a == 0 [end]|[start] option : \n \t init inventory <= y \n \t execute run \n \t until a >= y [end]|[start] option : \n \t init position < 1 \n \t execute run \n \t until b > 1 [end]|[start] option : \n \t init inventory != x \n \t execute use \n \t until position != 1 [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until b != 2 [end]|[start] policy a := \n \t if a > 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until b <= 1 [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until a != 1 [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until inventory >= 2 [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until a != 0 [end]|[start] option : \n \t init inventory \n \t execute run \n \t until b == y [end]|[start] option : \n \t init b > 1 \n \t execute build \n \t until inventory < 2 [end]|[start] policy a := \n \t if position > y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 1 \n \t execute jump \n \t until position < y [end]|[start] policy b := \n \t if iron != y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until a != 0 [end]|[start] option : \n \t init b == 0 \n \t execute use \n \t until a <= 2 [end]|[start] policy a := \n \t if position <= y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until position == x [end]|[start] option : \n \t init position >= 1 \n \t execute build \n \t until b >= 2 [end]|[start] policy a := \n \t if a : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 2 \n \t execute run \n \t until inventory > y [end]|[start] policy a := \n \t if b == y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 1 \n \t execute find \n \t until b != 0 [end]|[start] policy b := \n \t if iron != y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 1 \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until position >= 0 [end]|[start] policy b := \n \t if a < 2 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= x \n \t execute build \n \t until position < 1 [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until b != 1 [end]|[start] policy a := \n \t if iron != x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 0 \n \t execute jump \n \t until position [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < x \n \t execute use \n \t until inventory < 1 [end]|[start] policy a := \n \t if a > 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron != y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a > x \n \t execute use \n \t until b <= 0 [end]|[start] option : \n \t init a <= y \n \t execute find \n \t until inventory <= x [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < x : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until inventory < 1 [end]|[start] option : \n \t init position < x \n \t execute use \n \t until a < x [end]|[start] policy b := \n \t if iron >= x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 0 \n \t execute use \n \t until a > 1 [end]|[start] policy a := \n \t if iron < 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 1 \n \t execute run \n \t until a <= 2 [end]|[start] option : \n \t init position >= 1 \n \t execute find \n \t until inventory >= x [end]|[start] option : \n \t init position != 2 \n \t execute find \n \t until a != 0 [end]|[start] option : \n \t init x \n \t execute find \n \t until inventory >= 2 [end]|[start] option : \n \t init position != 2 \n \t execute jump \n \t until b == 2 [end]|[start] policy b := \n \t if b > y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute use \n \t until a <= x [end]|[start] option : \n \t init inventory != 0 \n \t execute jump \n \t until position != 0 [end]|[start] policy b := \n \t if position <= y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b < y \n \t execute find \n \t until position <= 0 [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until b == 2 [end]|[start] option : \n \t init a > x \n \t execute find \n \t until position != y [end]|[start] policy a := \n \t if position != 1 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until position < 0 [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until a != y [end]|[start] policy a := \n \t if a < 2 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until inventory != y [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until b <= 1 [end]|[start] policy b := \n \t if a < 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until a != 1 [end]|[start] option : \n \t init b < y \n \t execute build \n \t until b <= x [end]|[start] policy a := \n \t if a == 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until a > y [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until position != y [end]|[start] policy b := \n \t if a == 0 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position == x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position > 0 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until b [end]|[start] policy b := \n \t if b <= x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= x \n \t execute use \n \t until a >= y [end]|[start] policy a := \n \t if b == 2 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != y \n \t execute find \n \t until position < 0 [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until b >= 2 [end]|[start] option : \n \t init position >= y \n \t execute use \n \t until b == 1 [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until a <= x [end]|[start] policy b := \n \t if a != x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a != x \n \t execute find \n \t until b >= 0 [end]|[start] policy a := \n \t if iron < 1 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until a < 0 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position > 1 : \n \t execute use \n [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until a >= y [end]|[start] option : \n \t init inventory <= 2 \n \t execute run \n \t until b == y [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a <= x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until b > x [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until b < x [end]|[start] policy a := \n \t if b <= x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= y \n \t execute use \n \t until inventory == y [end]|[start] policy a := \n \t if position > 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == x : \n \t execute use \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until position > 1 [end]|[start] option : \n \t init a != y \n \t execute build \n \t until b != x [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until b >= 1 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until position <= x [end]|[start] option : \n \t init position \n \t execute run \n \t until position == 1 [end]|[start] policy a := \n \t if b < y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a <= x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 1 \n \t execute build \n \t until b != 1 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until y [end]|[start] policy a := \n \t if position >= 2 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a != y \n \t execute find \n \t until a == 1 [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until a <= 2 [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until b > y [end]|[start] option : \n \t init b != 0 \n \t execute build \n \t until position < 2 [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until a > 1 [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until inventory > x [end]|[start] option : \n \t init a != 2 \n \t execute find \n \t until b != 0 [end]|[start] option : \n \t init inventory != 1 \n \t execute use \n \t until position != x [end]|[start] policy b := \n \t if b == 2 : \n \t execute find \n [end]|[start] option : \n \t init position < 2 \n \t execute run \n \t until b == y [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until b < y [end]|[start] option : \n \t init inventory != 1 \n \t execute use \n \t until y [end]|[start] option : \n \t init position \n \t execute use \n \t until b == y [end]|[start] policy a := \n \t if iron > 2 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 1 \n \t execute use \n \t until a == 0 [end]|[start] policy b := \n \t if position <= y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b > 0 \n \t execute jump \n \t until position >= x [end]|[start] policy b := \n \t if a <= y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 2 \n \t execute find \n \t until a <= y [end]|[start] policy a := \n \t if a >= 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until position >= y [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until a <= 0 [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until a <= 0 [end]|[start] option : \n \t init inventory == x \n \t execute build \n \t until a < 0 [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until b == 2 [end]|[start] option : \n \t init inventory > 2 \n \t execute find \n \t until position < 0 [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until inventory <= y [end]|[start] policy b := \n \t if position == x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a < x \n \t execute build \n \t until b != 1 [end]|[start] policy a := \n \t if a >= 1 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until inventory <= x [end]|[start] option : \n \t init x \n \t execute run \n \t until b < 0 [end]|[start] option : \n \t init a > 0 \n \t execute find \n \t until b < 0 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != y \n \t execute build \n \t until inventory < 0 [end]|[start] policy a := \n \t if position == 0 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until a <= x [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > y \n \t execute jump \n \t until inventory != x [end]|[start] policy b := \n \t if a <= x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= x \n \t execute find \n \t until a == 2 [end]|[start] option : \n \t init inventory > y \n \t execute find \n \t until b > 1 [end]|[start] policy a := \n \t if a >= y : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until b != y [end]|[start] policy b := \n \t if b < x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 2 \n \t execute build \n \t until b == 2 [end]|[start] policy a := \n \t if iron == x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until b != y [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until b > 2 [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until a < 2 [end]|[start] policy a := \n \t if position > 2 : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a < x \n \t execute use \n \t until b [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 1 \n \t execute find \n \t until b > 0 [end]|[start] policy a := \n \t if position != 1 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until position >= y [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= 0 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until a > 1 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until inventory >= 2 [end]|[start] policy a := \n \t if position == 1 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > x \n \t execute jump \n \t until position > 2 [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until position != 0 [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until position [end]|[start] policy a := \n \t if b <= x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron < y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 2 \n \t execute run \n \t until b != x [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= x \n \t execute build \n \t until position [end]|[start] policy b := \n \t if position != y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute find \n \t until inventory > y [end]|[start] policy a := \n \t if a < x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until inventory <= 2 [end]|[start] option : \n \t init a >= 1 \n \t execute run \n \t until position == y [end]|[start] option : \n \t init inventory <= 1 \n \t execute run \n \t until a > 2 [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until b >= 1 [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until b < x [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 2 \n \t execute build \n \t until inventory <= y [end]|[start] policy a := \n \t if a > 0 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b > y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= x \n \t execute find \n \t until a <= x [end]|[start] option : \n \t init b == x \n \t execute build \n \t until position == y [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 2 \n \t execute build \n \t until position != 2 [end]|[start] policy a := \n \t if b == 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position != y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until inventory <= 1 [end]|[start] option : \n \t init b == 2 \n \t execute run \n \t until a > y [end]|[start] policy a := \n \t if iron > y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 2 \n \t execute run \n \t until inventory >= 0 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until inventory > 1 [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until position != y [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until b > 2 [end]|[start] option : \n \t init inventory <= x \n \t execute use \n \t until a >= y [end]|[start] option : \n \t init a >= 2 \n \t execute jump \n \t until b < 1 [end]|[start] policy b := \n \t if a != y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until a != 1 [end]|[start] policy b := \n \t if a < 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until a <= x [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until position < 1 [end]|[start] policy a := \n \t if position > 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a < y \n \t execute run \n \t until a != 1 [end]|[start] option : \n \t init y \n \t execute jump \n \t until a > y [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until inventory >= 1 [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until inventory < y [end]|[start] option : \n \t init inventory < x \n \t execute run \n \t until b > 2 [end]|[start] policy a := \n \t if b < 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != x \n \t execute use \n \t until position == 1 [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until b >= x [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until inventory > 1 [end]|[start] policy b := \n \t if position != x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 1 \n \t execute build \n \t until inventory > 0 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 2 \n \t execute build \n \t until position >= y [end]|[start] policy a := \n \t if iron <= y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until a > 0 [end]|[start] policy a := \n \t if position == 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 1 \n \t execute find \n \t until inventory < x [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until a > y [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until a [end]|[start] option : \n \t init inventory != y \n \t execute build \n \t until a >= y [end]|[start] option : \n \t init b != 1 \n \t execute run \n \t until position >= 1 [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until y [end]|[start] policy a := \n \t if iron < 0 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b < y \n \t execute run \n \t until inventory == 0 [end]|[start] option : \n \t init position == y \n \t execute use \n \t until b == y [end]|[start] policy a := \n \t if position <= 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until b != 1 [end]|[start] policy a := \n \t if position < 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until a > x [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until b < x [end]|[start] policy a := \n \t if b == 2 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until inventory > y [end]|[start] policy b := \n \t if iron == x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a != x \n \t execute find \n \t until a == y [end]|[start] policy b := \n \t if iron != x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= 2 \n \t execute build \n \t until position == 2 [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until b > 0 [end]|[start] policy b := \n \t if iron != x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until a <= y [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until a < 2 [end]|[start] policy a := \n \t if position != y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until a <= 1 [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 0 \n \t execute jump \n \t until position < 1 [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until b >= y [end]|[start] policy b := \n \t if a != y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory \n \t execute find \n \t until b [end]|[start] policy b := \n \t if a > x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 2 \n \t execute use \n \t until inventory > 1 [end]|[start] policy b := \n \t if a < 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 2 \n \t execute run \n \t until a <= 1 [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until b > 1 [end]|[start] policy a := \n \t if position == 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until inventory == y [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until a >= 1 [end]|[start] option : \n \t init position \n \t execute use \n \t until x [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n [end]|[start] option : \n \t init b <= y \n \t execute find \n \t until inventory < x [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until position >= 1 [end]|[start] policy a := \n \t if a == y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until position < y [end]|[start] option : \n \t init b == x \n \t execute find \n \t until b [end]|[start] option : \n \t init position != 1 \n \t execute jump \n \t until position < 2 [end]|[start] option : \n \t init a >= 0 \n \t execute find \n \t until b <= y [end]|[start] policy a := \n \t if b == 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until position > 0 [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until inventory <= 0 [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 0 \n \t execute find \n \t until b >= 0 [end]|[start] policy a := \n \t if a < x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b < x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until b == y [end]|[start] policy b := \n \t if b > y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 1 \n \t execute run \n \t until a == 1 [end]|[start] option : \n \t init position > x \n \t execute find \n \t until position == 2 [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until a < 0 [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 0 \n \t execute use \n \t until a == 2 [end]|[start] policy a := \n \t if b == 0 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until inventory < 1 [end]|[start] policy b := \n \t if a != y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute run \n \t until a >= y [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until inventory == 2 [end]|[start] policy b := \n \t if position == y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until b [end]|[start] policy b := \n \t if iron >= y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 0 \n \t execute use \n \t until b >= 1 [end]|[start] policy b := \n \t if iron < x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position != 1 : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position == y \n \t execute run \n \t until inventory == 2 [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until position >= x [end]|[start] policy a := \n \t if position <= x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until a < 0 [end]|[start] policy b := \n \t if a != x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until y [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until position <= 1 [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b <= x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= x \n \t execute find \n \t until inventory <= 1 [end]|[start] policy b := \n \t if b != y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= x \n \t execute build \n \t until a > x [end]|[start] policy b := \n \t if a != 0 : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until inventory >= 1 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position > y \n \t execute build \n \t until b <= 0 [end]|[start] option : \n \t init position < x \n \t execute run \n \t until a != 2 [end]|[start] policy a := \n \t if b <= y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= x : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until b [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until a < 0 [end]|[start] policy a := \n \t if iron != y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until inventory < x [end]|[start] policy a := \n \t if a >= 1 : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until inventory <= 2 [end]|[start] policy b := \n \t if a < y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a \n \t execute find \n \t until a == 0 [end]|[start] option : \n \t init position >= x \n \t execute find \n \t until b == y [end]|[start] policy a := \n \t if position > x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 1 \n \t execute find \n \t until position <= 0 [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position <= y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > x \n \t execute use \n \t until a < y [end]|[start] option : \n \t init position <= 2 \n \t execute find \n \t until b >= 1 [end]|[start] policy a := \n \t if b >= x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a == x \n \t execute build \n \t until inventory > 1 [end]|[start] policy a := \n \t if position > y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 2 \n \t execute run \n \t until position == y [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until a > x [end]|[start] policy a := \n \t if b == 2 : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == x \n \t execute find \n \t until b >= 1 [end]|[start] policy b := \n \t if a == y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 0 \n \t execute build \n \t until inventory != 1 [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position <= x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 1 \n \t execute run \n \t until inventory [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b != x \n \t execute use \n \t until a == x [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until a > y [end]|[start] policy a := \n \t if b < 1 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 1 \n \t execute build \n \t until inventory == x [end]|[start] policy a := \n \t if position != y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until b >= x [end]|[start] option : \n \t init a <= x \n \t execute find \n \t until a <= 0 [end]|[start] option : \n \t init position != y \n \t execute build \n \t until inventory < 1 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b >= x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until b > y [end]|[start] policy a := \n \t if a == 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute build \n \t until a <= 0 [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position < y \n \t execute find \n \t until x [end]|[start] policy b := \n \t if a != 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 1 \n \t execute jump \n \t until inventory <= 1 [end]|[start] policy a := \n \t if a > x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 1 \n \t execute run \n \t until a <= 2 [end]|[start] policy b := \n \t if b >= x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until inventory < 0 [end]|[start] option : \n \t init inventory < y \n \t execute build \n \t until b >= 1 [end]|[start] policy b := \n \t if position <= x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b <= y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position != x \n \t execute build \n \t until inventory <= 1 [end]|[start] option : \n \t init a <= 1 \n \t execute jump \n \t until inventory <= 1 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until a [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until position >= 2 [end]|[start] policy b := \n \t if position > y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= y \n \t execute build \n \t until inventory > x [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until a <= 0 [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until b != x [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until inventory != x [end]|[start] policy b := \n \t if position == 1 : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position \n \t execute run \n \t until a == 1 [end]|[start] policy a := \n \t if a != 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until a >= y [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until a > 1 [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position != y \n \t execute build \n \t until b > 1 [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until a >= x [end]|[start] policy b := \n \t if iron != y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until position < x [end]|[start] option : \n \t init position == y \n \t execute use \n \t until b < 0 [end]|[start] policy a := \n \t if b <= 2 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until inventory >= x [end]|[start] policy a := \n \t if iron < 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position > y \n \t execute find \n \t until a <= 2 [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until inventory > 2 [end]|[start] policy a := \n \t if position >= y : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 1 \n \t execute jump \n \t until position > x [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until position == 0 [end]|[start] policy b := \n \t if iron != y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 2 \n \t execute use \n \t until a == 2 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute find \n \t until b == 1 [end]|[start] option : \n \t init x \n \t execute use \n \t until position <= y [end]|[start] policy b := \n \t if iron : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b == x \n \t execute build \n \t until inventory == 1 [end]|[start] option : \n \t init inventory > x \n \t execute use \n \t until inventory < 0 [end]|[start] option : \n \t init inventory > x \n \t execute jump \n \t until a <= y [end]|[start] policy a := \n \t if b == 1 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position == y \n \t execute use \n \t until inventory <= y [end]|[start] policy a := \n \t if a >= 1 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position < y \n \t execute find \n \t until position <= 1 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until position != 0 [end]|[start] policy a := \n \t if a == x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until a <= y [end]|[start] policy a := \n \t if b > x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until a >= 0 [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until position != y [end]|[start] option : \n \t init position < x \n \t execute build \n \t until b == x [end]|[start] policy a := \n \t if b <= 1 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until a == 1 [end]|[start] policy a := \n \t if b < y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until position != 1 [end]|[start] policy a := \n \t if b < x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 1 \n \t execute jump \n \t until position != x [end]|[start] option : \n \t init a != 2 \n \t execute use \n \t until position <= 1 [end]|[start] policy a := \n \t if b != 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until a > 2 [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until a [end]|[start] option : \n \t init b <= 1 \n \t execute jump \n \t until position <= 1 [end]|[start] policy a := \n \t if b != 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == x \n \t execute run \n \t until position == y [end]|[start] option : \n \t init a <= x \n \t execute jump \n \t until a == 2 [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 0 \n \t execute use \n \t until b != 1 [end]|[start] policy a := \n \t if position == 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b < x \n \t execute use \n \t until position <= x [end]|[start] option : \n \t init b != 0 \n \t execute jump \n \t until a < 2 [end]|[start] option : \n \t init b < x \n \t execute build \n \t until position < 2 [end]|[start] option : \n \t init b < x \n \t execute use \n \t until a < 1 [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until b > 2 [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until inventory >= 0 [end]|[start] policy a := \n \t if position < 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position != y \n \t execute use \n \t until position > 0 [end]|[start] policy a := \n \t if iron < x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < y : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b > 1 \n \t execute use \n \t until a != 1 [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until position <= y [end]|[start] policy a := \n \t if iron >= x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 2 \n \t execute build \n \t until position != 0 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != 1 : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init y \n \t execute jump \n \t until a < 1 [end]|[start] policy b := \n \t if position > x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until inventory < 1 [end]|[start] option : \n \t init a < 0 \n \t execute use \n \t until inventory > 2 [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until a > 1 [end]|[start] policy b := \n \t if b < y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until position != 1 [end]|[start] option : \n \t init position != y \n \t execute use \n \t until a >= 2 [end]|[start] option : \n \t init inventory >= 1 \n \t execute find \n \t until inventory == 1 [end]|[start] option : \n \t init b != y \n \t execute run \n \t until position == x [end]|[start] option : \n \t init a > x \n \t execute build \n \t until a <= 1 [end]|[start] option : \n \t init x \n \t execute find \n \t until inventory >= y [end]|[start] option : \n \t init position < x \n \t execute build \n \t until a <= 2 [end]|[start] policy a := \n \t if b == y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until a == x [end]|[start] policy a := \n \t if iron <= y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory \n \t execute build \n \t until a == 1 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b < y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != y : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b > 1 \n \t execute build \n \t until a != 1 [end]|[start] policy b := \n \t if iron < y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 1 \n \t execute build \n \t until position < 0 [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory \n \t execute build \n \t until inventory == x [end]|[start] option : \n \t init inventory <= y \n \t execute build \n \t until b != y [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 1 \n \t execute find \n \t until inventory == 2 [end]|[start] policy b := \n \t if position < y : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < x \n \t execute run \n \t until b <= 2 [end]|[start] policy b := \n \t if iron <= y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 0 \n \t execute use \n \t until b <= x [end]|[start] policy b := \n \t if a != 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > x \n \t execute use \n \t until position <= y [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 2 \n \t execute jump \n \t until a != x [end]|[start] policy a := \n \t if position < 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until position > 0 [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a == y \n \t execute find \n \t until a < 0 [end]|[start] policy b := \n \t if b <= x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until a <= 2 [end]|[start] option : \n \t init b == x \n \t execute run \n \t until a < 0 [end]|[start] option : \n \t init b > y \n \t execute run \n \t until position < 0 [end]|[start] policy b := \n \t if position < y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b > x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 0 \n \t execute run \n \t until inventory < 0 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until inventory >= y [end]|[start] option : \n \t init inventory > x \n \t execute run \n \t until inventory != 2 [end]|[start] option : \n \t init position <= 2 \n \t execute find \n \t until position != 2 [end]|[start] policy a := \n \t if b < 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 2 \n \t execute jump \n \t until b > x [end]|[start] policy b := \n \t if b == y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == x \n \t execute run \n \t until b > x [end]|[start] option : \n \t init a == 2 \n \t execute run \n \t until b == 1 [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until inventory < 2 [end]|[start] option : \n \t init inventory < y \n \t execute run \n \t until a == x [end]|[start] policy a := \n \t if b == y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until b <= y [end]|[start] policy b := \n \t if position == x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute jump \n \t until inventory == 0 [end]|[start] policy a := \n \t if a == 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until position < x [end]|[start] policy a := \n \t if b == 0 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute jump \n \t until a >= 1 [end]|[start] policy a := \n \t if a <= x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 1 \n \t execute build \n \t until inventory <= 2 [end]|[start] policy a := \n \t if position < 0 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 1 \n \t execute use \n \t until inventory != 1 [end]|[start] policy b := \n \t if a <= x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until b != 0 [end]|[start] policy a := \n \t if position < 0 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != x \n \t execute build \n \t until b > y [end]|[start] policy b := \n \t if b >= y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until position < x [end]|[start] policy b := \n \t if a < 2 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until position > 2 [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until inventory <= 0 [end]|[start] policy a := \n \t if a < x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until position != 0 [end]|[start] policy b := \n \t if iron < y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 1 \n \t execute run \n \t until b > 0 [end]|[start] option : \n \t init b > x \n \t execute use \n \t until position != 1 [end]|[start] policy a := \n \t if a < 2 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until position <= x [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until position >= 1 [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until b > x [end]|[start] option : \n \t init a < x \n \t execute build \n \t until position < 1 [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until position == 1 [end]|[start] option : \n \t init b <= 1 \n \t execute use \n \t until position < 1 [end]|[start] option : \n \t init position >= y \n \t execute use \n \t until position <= y [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until inventory != 1 [end]|[start] option : \n \t init a == x \n \t execute build \n \t until b >= 0 [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != y \n \t execute use \n \t until position >= y [end]|[start] option : \n \t init position <= x \n \t execute run \n \t until position == 0 [end]|[start] option : \n \t init position == 2 \n \t execute find \n \t until b != x [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until inventory < 0 [end]|[start] option : \n \t init position != 0 \n \t execute jump \n \t until position == 2 [end]|[start] policy b := \n \t if iron < 1 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until inventory < y [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until position >= 0 [end]|[start] option : \n \t init position >= x \n \t execute build \n \t until b == 0 [end]|[start] option : \n \t init position <= 0 \n \t execute find \n \t until position < y [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until inventory < 1 [end]|[start] policy b := \n \t if a >= 0 : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until position < y [end]|[start] policy a := \n \t if b < x : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until a [end]|[start] policy a := \n \t if b != x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 2 \n \t execute jump \n \t until position != y [end]|[start] policy a := \n \t if iron != 0 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init x \n \t execute find \n \t until b == y [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b < y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until b <= x [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until inventory < 0 [end]|[start] policy a := \n \t if position > y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= 1 \n \t execute find \n \t until inventory == 1 [end]|[start] policy b := \n \t if position != 2 : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron >= 0 : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 2 \n \t execute use \n \t until position <= x [end]|[start] policy b := \n \t if a > y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 2 \n \t execute jump \n \t until a > 1 [end]|[start] policy b := \n \t if a == 2 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position > y \n \t execute find \n \t until a > 2 [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until a <= 0 [end]|[start] policy b := \n \t if iron != x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 1 \n \t execute find \n \t until inventory > y [end]|[start] policy a := \n \t if position >= y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position == x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until a == x [end]|[start] policy a := \n \t if a < 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until position != 2 [end]|[start] policy a := \n \t if a != y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= 2 \n \t execute run \n \t until b >= 2 [end]|[start] option : \n \t init inventory <= x \n \t execute build \n \t until b > 1 [end]|[start] option : \n \t init inventory >= x \n \t execute find \n \t until position < y [end]|[start] policy b := \n \t if b : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position >= x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b != x \n \t execute find \n \t until b < 2 [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until a > 2 [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until a < y [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 1 \n \t execute use \n \t until b < 0 [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until a != 2 [end]|[start] policy a := \n \t if iron < 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b > x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a >= y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until x [end]|[start] policy a := \n \t if a <= 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a <= y : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b >= y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a != x \n \t execute build \n \t until b == y [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= y \n \t execute run \n \t until b > 2 [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until position < x [end]|[start] option : \n \t init a < 1 \n \t execute jump \n \t until position >= x [end]|[start] policy a := \n \t if iron == 2 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= x \n \t execute jump \n \t until a >= y [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == 2 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until inventory <= 1 [end]|[start] option : \n \t init a != y \n \t execute build \n \t until inventory == x [end]|[start] policy a := \n \t if b >= 1 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= 0 : \n \t execute run \n [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until b < 2 [end]|[start] option : \n \t init position != y \n \t execute build \n \t until position <= x [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until position >= 1 [end]|[start] option : \n \t init a == x \n \t execute find \n \t until position != 1 [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init y \n \t execute build \n \t until position != y [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until position > y [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position == y \n \t execute use \n \t until a < y [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until b == 2 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= y \n \t execute jump \n \t until a == y [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until b <= 2 [end]|[start] policy a := \n \t if iron <= y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position > x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until position >= 0 [end]|[start] policy a := \n \t if b > 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until position == 0 [end]|[start] policy a := \n \t if a > x : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= y \n \t execute run \n \t until position > y [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until inventory < 2 [end]|[start] policy a := \n \t if a == 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute use \n \t until inventory == 1 [end]|[start] option : \n \t init a <= x \n \t execute find \n \t until position < 0 [end]|[start] policy b := \n \t if iron >= 1 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 1 \n \t execute jump \n \t until y [end]|[start] option : \n \t init inventory != y \n \t execute jump \n \t until position < y [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 0 \n \t execute use \n \t until b != 2 [end]|[start] option : \n \t init b > 2 \n \t execute build \n \t until position >= 1 [end]|[start] policy b := \n \t if position < x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until inventory < 2 [end]|[start] policy b := \n \t if a > x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until b == 2 [end]|[start] policy a := \n \t if a < y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position > x \n \t execute build \n \t until a != 2 [end]|[start] policy a := \n \t if position > x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a == y \n \t execute use \n \t until inventory >= 2 [end]|[start] policy b := \n \t if iron < x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 0 \n \t execute build \n \t until a == x [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until position != 2 [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= x \n \t execute find \n \t until a < 0 [end]|[start] policy a := \n \t if a >= x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory \n \t execute build \n \t until inventory < 0 [end]|[start] policy a := \n \t if a >= y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until b > 2 [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until position == y [end]|[start] option : \n \t init inventory <= 2 \n \t execute run \n \t until inventory > 0 [end]|[start] option : \n \t init position > 1 \n \t execute jump \n \t until a <= x [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until b < x [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until position [end]|[start] policy a := \n \t if a >= 2 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= x \n \t execute run \n \t until b >= 0 [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until a != y [end]|[start] option : \n \t init a <= 0 \n \t execute find \n \t until position > 2 [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until a >= x [end]|[start] policy a := \n \t if a >= y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute build \n \t until a == 2 [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until inventory <= x [end]|[start] option : \n \t init inventory > x \n \t execute jump \n \t until a < y [end]|[start] policy a := \n \t if position != 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b < y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 1 \n \t execute build \n \t until inventory >= 1 [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= y \n \t execute jump \n \t until position >= 2 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 0 \n \t execute find \n \t until inventory <= 1 [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute run \n \t until inventory < 0 [end]|[start] option : \n \t init a > y \n \t execute use \n \t until b != 1 [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until b <= 0 [end]|[start] policy a := \n \t if position == x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until b < 2 [end]|[start] policy a := \n \t if iron < y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position <= y : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until inventory <= 2 [end]|[start] policy b := \n \t if b > y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until b >= 2 [end]|[start] policy b := \n \t if a <= y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until position == x [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until position >= y [end]|[start] policy b := \n \t if position >= x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position >= x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until inventory >= 1 [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a <= y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until a >= x [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position < y \n \t execute find \n \t until position != x [end]|[start] policy b := \n \t if b == y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b >= y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position == y \n \t execute jump \n \t until a >= 0 [end]|[start] option : \n \t init a > y \n \t execute use \n \t until b != x [end]|[start] option : \n \t init inventory == x \n \t execute build \n \t until inventory <= y [end]|[start] option : \n \t init a < 1 \n \t execute jump \n \t until position != x [end]|[start] option : \n \t init position > 2 \n \t execute jump \n \t until position != 2 [end]|[start] option : \n \t init inventory > 1 \n \t execute jump \n \t until a >= 0 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until inventory == 1 [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= 1 : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position > x \n \t execute use \n \t until b <= y [end]|[start] policy b := \n \t if b > y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 0 \n \t execute jump \n \t until inventory > 0 [end]|[start] policy b := \n \t if a >= x : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 0 \n \t execute build \n \t until x [end]|[start] policy a := \n \t if b < 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a < y \n \t execute find \n \t until y [end]|[start] policy a := \n \t if iron != 1 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == x \n \t execute run \n \t until inventory != y [end]|[start] policy a := \n \t if iron == 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a <= x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 0 \n \t execute run \n \t until position != y [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until position <= 2 [end]|[start] option : \n \t init inventory <= 1 \n \t execute jump \n \t until inventory <= 2 [end]|[start] policy b := \n \t if a <= y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= y \n \t execute find \n \t until position < 0 [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until b <= y [end]|[start] policy a := \n \t if iron > 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 2 \n \t execute use \n \t until position != 1 [end]|[start] policy a := \n \t if position < 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until inventory <= 1 [end]|[start] policy b := \n \t if a == 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= y \n \t execute find \n \t until inventory >= 1 [end]|[start] policy a := \n \t if a < y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < x \n \t execute jump \n \t until a <= 2 [end]|[start] option : \n \t init position \n \t execute jump \n \t until b < x [end]|[start] option : \n \t init b != 1 \n \t execute run \n \t until inventory <= 1 [end]|[start] option : \n \t init position > 0 \n \t execute jump \n \t until a != 0 [end]|[start] option : \n \t init position != 2 \n \t execute jump \n \t until b < 0 [end]|[start] option : \n \t init a >= 2 \n \t execute build \n \t until position < y [end]|[start] policy a := \n \t if iron == 1 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b > y \n \t execute find \n \t until position < 2 [end]|[start] option : \n \t init inventory \n \t execute run \n \t until a >= 1 [end]|[start] option : \n \t init a <= y \n \t execute jump \n \t until position == 1 [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until a >= 1 [end]|[start] policy b := \n \t if a > x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 0 \n \t execute use \n \t until a >= 1 [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until inventory < y [end]|[start] policy b := \n \t if a != y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until inventory > 1 [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 2 \n \t execute find \n \t until inventory == y [end]|[start] option : \n \t init inventory == 2 \n \t execute run \n \t until a != 2 [end]|[start] policy a := \n \t if b == y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 1 \n \t execute use \n \t until inventory != 0 [end]|[start] option : \n \t init b \n \t execute find \n \t until b > 2 [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute jump \n \t until inventory == 1 [end]|[start] policy a := \n \t if b == 2 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a < y \n \t execute run \n \t until a > 2 [end]|[start] option : \n \t init b < y \n \t execute build \n \t until inventory < y [end]|[start] policy a := \n \t if position : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until b [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until inventory <= x [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < y \n \t execute find \n \t until position <= y [end]|[start] policy a := \n \t if position == 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position == x \n \t execute find \n \t until a <= 0 [end]|[start] policy b := \n \t if a == 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until inventory > x [end]|[start] option : \n \t init position \n \t execute run \n \t until a < x [end]|[start] option : \n \t init position >= 0 \n \t execute build \n \t until inventory != 1 [end]|[start] option : \n \t init a == x \n \t execute run \n \t until position != x [end]|[start] policy b := \n \t if b <= y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until b > 0 [end]|[start] policy a := \n \t if a : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position != y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute build \n \t until a > 2 [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until position > y [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until a <= x [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until a == 0 [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until position == 0 [end]|[start] policy a := \n \t if a < y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until position < 1 [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a > x \n \t execute build \n \t until a < y [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b == 1 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a > x : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 1 \n \t execute jump \n \t until b <= 0 [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until a > 1 [end]|[start] policy b := \n \t if position > y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 0 \n \t execute jump \n \t until inventory < x [end]|[start] policy b := \n \t if b == y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 1 \n \t execute jump \n \t until b > x [end]|[start] option : \n \t init position < 2 \n \t execute run \n \t until position < 0 [end]|[start] option : \n \t init b < y \n \t execute build \n \t until inventory < 0 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until b <= 0 [end]|[start] option : \n \t init a == 0 \n \t execute find \n \t until b <= 0 [end]|[start] option : \n \t init a != 1 \n \t execute find \n \t until a >= y [end]|[start] option : \n \t init a >= 2 \n \t execute build \n \t until position > y [end]|[start] policy a := \n \t if b <= 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b < x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 0 \n \t execute run \n \t until a <= 1 [end]|[start] option : \n \t init a > x \n \t execute find \n \t until inventory >= 2 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 1 \n \t execute find \n \t until inventory < 0 [end]|[start] option : \n \t init b > 0 \n \t execute build \n \t until inventory >= 0 [end]|[start] option : \n \t init a < y \n \t execute find \n \t until b >= x [end]|[start] policy a := \n \t if a == y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b < y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 1 \n \t execute run \n \t until b > 2 [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 1 \n \t execute run \n \t until b < 1 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until a > y [end]|[start] option : \n \t init a != 0 \n \t execute run \n \t until position > x [end]|[start] policy a := \n \t if b >= x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until inventory != 0 [end]|[start] option : \n \t init position < 2 \n \t execute run \n \t until position >= 0 [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until b > 1 [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a \n \t execute use \n \t until b < y [end]|[start] policy b := \n \t if b < y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a > x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until position != x [end]|[start] policy a := \n \t if position < 0 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until inventory [end]|[start] policy b := \n \t if position >= x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 1 \n \t execute find \n \t until inventory != x [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until b != 0 [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until inventory == 1 [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 0 \n \t execute build \n \t until inventory > x [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position < x \n \t execute run \n \t until a > x [end]|[start] option : \n \t init b < y \n \t execute use \n \t until a != x [end]|[start] policy a := \n \t if iron == 1 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position == x \n \t execute run \n \t until b == 1 [end]|[start] option : \n \t init b <= 2 \n \t execute jump \n \t until position >= y [end]|[start] option : \n \t init b >= 1 \n \t execute find \n \t until position < y [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until inventory <= y [end]|[start] option : \n \t init b == y \n \t execute run \n \t until inventory != 0 [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until a < y [end]|[start] policy a := \n \t if position >= y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < x \n \t execute use \n \t until position <= 2 [end]|[start] option : \n \t init inventory < 0 \n \t execute use \n \t until a == x [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b == x \n \t execute run \n \t until position > 2 [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until position == 1 [end]|[start] policy b := \n \t if a : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < x : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until a >= 2 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 2 \n \t execute jump \n \t until position < y [end]|[start] policy b := \n \t if position < x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a \n \t execute jump \n \t until b >= y [end]|[start] policy a := \n \t if position > y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until b <= 2 [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until a >= x [end]|[start] policy a := \n \t if position != 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 1 \n \t execute find \n \t until b <= y [end]|[start] policy a := \n \t if a > 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < x \n \t execute find \n \t until inventory <= x [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until a != 0 [end]|[start] option : \n \t init b < y \n \t execute find \n \t until inventory != x [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until a != 1 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 2 \n \t execute jump \n \t until a == 0 [end]|[start] option : \n \t init inventory \n \t execute run \n \t until a < x [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < y \n \t execute use \n \t until inventory > y [end]|[start] policy a := \n \t if a == x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until position [end]|[start] policy a := \n \t if position == x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= x : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until inventory != 0 [end]|[start] policy b := \n \t if iron == x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until inventory == 1 [end]|[start] policy a := \n \t if position <= x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < y \n \t execute use \n \t until a >= 1 [end]|[start] policy b := \n \t if position <= 0 : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 0 \n \t execute jump \n \t until inventory != 0 [end]|[start] policy a := \n \t if b != x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until a <= x [end]|[start] option : \n \t init inventory >= x \n \t execute use \n \t until a != y [end]|[start] option : \n \t init inventory < 2 \n \t execute jump \n \t until position == x [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until a != 1 [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until inventory > 2 [end]|[start] policy a := \n \t if b > y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until b < 2 [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until a == 1 [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until position == 1 [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until position < 1 [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until a != 0 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until inventory <= 1 [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until b > 1 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until b <= 0 [end]|[start] policy a := \n \t if b == 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 1 \n \t execute find \n \t until position <= 0 [end]|[start] policy b := \n \t if a < 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= y \n \t execute jump \n \t until position [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until inventory >= 0 [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until position > 2 [end]|[start] option : \n \t init a <= x \n \t execute run \n \t until b <= y [end]|[start] policy a := \n \t if a != 2 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until b < x [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= y \n \t execute find \n \t until b == y [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until position == 2 [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until b >= 0 [end]|[start] policy a := \n \t if b < 1 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron < x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until b != x [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory \n \t execute run \n \t until position == y [end]|[start] policy a := \n \t if iron <= y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until inventory < 1 [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 1 \n \t execute use \n \t until a > x [end]|[start] policy b := \n \t if a == 2 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until position > 1 [end]|[start] policy a := \n \t if position == 1 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until b != 1 [end]|[start] policy a := \n \t if b != y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position < y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until position <= 2 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b != x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until inventory > x [end]|[start] policy a := \n \t if b : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron < y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until position == 0 [end]|[start] policy b := \n \t if iron >= x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until b <= 1 [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until position > x [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until a <= 0 [end]|[start] option : \n \t init a <= x \n \t execute find \n \t until b >= 2 [end]|[start] option : \n \t init inventory \n \t execute run \n \t until inventory > 2 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until b > x [end]|[start] policy b := \n \t if iron <= y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < 2 \n \t execute find \n \t until b >= 2 [end]|[start] policy b := \n \t if position != y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until b <= 0 [end]|[start] policy a := \n \t if position > x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron != y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until inventory != y [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until position <= x [end]|[start] option : \n \t init position > y \n \t execute find \n \t until a == 2 [end]|[start] policy b := \n \t if b <= y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b > y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron < y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b == x \n \t execute find \n \t until a > 1 [end]|[start] option : \n \t init inventory >= 2 \n \t execute build \n \t until b == 2 [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until b < y [end]|[start] policy b := \n \t if iron == x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron != 1 : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 0 \n \t execute run \n \t until position < x [end]|[start] policy a := \n \t if b > x : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron > x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position \n \t execute build \n \t until a != 0 [end]|[start] policy a := \n \t if iron == x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position != x \n \t execute jump \n \t until inventory < x [end]|[start] policy a := \n \t if position > 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until a <= 0 [end]|[start] option : \n \t init position >= y \n \t execute jump \n \t until position <= 2 [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until inventory != 1 [end]|[start] policy a := \n \t if b == 2 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until b != 1 [end]|[start] policy a := \n \t if position > y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b > x \n \t execute use \n \t until inventory > 2 [end]|[start] policy a := \n \t if iron == x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 0 \n \t execute jump \n \t until b >= 2 [end]|[start] option : \n \t init position < 0 \n \t execute use \n \t until position != y [end]|[start] policy a := \n \t if b < 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= y \n \t execute find \n \t until b <= 1 [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 1 \n \t execute run \n \t until b != 2 [end]|[start] option : \n \t init position > x \n \t execute find \n \t until a != 1 [end]|[start] policy a := \n \t if iron == x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position != x \n \t execute use \n \t until inventory > 1 [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until b > 2 [end]|[start] option : \n \t init a > 1 \n \t execute run \n \t until b != 0 [end]|[start] policy a := \n \t if b < y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until a != 0 [end]|[start] option : \n \t init position > 1 \n \t execute jump \n \t until a <= 1 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a != y \n \t execute find \n \t until a <= x [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until position < y [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until position == 0 [end]|[start] policy a := \n \t if position != y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position > x \n \t execute jump \n \t until b < 0 [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until a <= 2 [end]|[start] policy a := \n \t if iron <= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 0 \n \t execute run \n \t until position > 1 [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until inventory > 1 [end]|[start] policy a := \n \t if b <= y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init x \n \t execute build \n \t until inventory >= x [end]|[start] policy a := \n \t if position >= 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position <= 1 : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 0 \n \t execute jump \n \t until inventory <= y [end]|[start] option : \n \t init inventory != 2 \n \t execute build \n \t until inventory < 2 [end]|[start] policy a := \n \t if b >= x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute find \n \t until b < y [end]|[start] option : \n \t init position <= x \n \t execute build \n \t until position < 2 [end]|[start] policy a := \n \t if position != 1 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until b <= x [end]|[start] option : \n \t init position == 2 \n \t execute build \n \t until inventory < x [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until b < y [end]|[start] option : \n \t init a < 2 \n \t execute find \n \t until inventory < x [end]|[start] option : \n \t init position == y \n \t execute jump \n \t until a == 2 [end]|[start] option : \n \t init position <= 1 \n \t execute jump \n \t until b == 2 [end]|[start] policy b := \n \t if position == x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position != x \n \t execute use \n \t until position > x [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= y \n \t execute jump \n \t until position != x [end]|[start] policy b := \n \t if a >= y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute use \n \t until inventory == y [end]|[start] policy b := \n \t if iron != x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 2 \n \t execute build \n \t until inventory == y [end]|[start] policy b := \n \t if b : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until inventory < y [end]|[start] policy b := \n \t if b <= 0 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until position > 2 [end]|[start] policy b := \n \t if a < y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until position < x [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until inventory == 2 [end]|[start] option : \n \t init a >= 2 \n \t execute find \n \t until position > 1 [end]|[start] option : \n \t init position > y \n \t execute use \n \t until position <= y [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until inventory < x [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until a != 2 [end]|[start] option : \n \t init b != x \n \t execute build \n \t until b == 2 [end]|[start] option : \n \t init position >= 0 \n \t execute jump \n \t until a > y [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= x \n \t execute build \n \t until b == x [end]|[start] policy b := \n \t if b > y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until position == 0 [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until inventory == x [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 1 \n \t execute find \n \t until a <= 2 [end]|[start] policy a := \n \t if position != 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until position > 1 [end]|[start] policy b := \n \t if a >= x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute find \n \t until inventory >= 1 [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until a != 2 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b != 0 : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > x \n \t execute build \n \t until b <= 0 [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 0 \n \t execute find \n \t until inventory <= 2 [end]|[start] option : \n \t init position == x \n \t execute use \n \t until b == 2 [end]|[start] policy b := \n \t if iron > x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < y \n \t execute use \n \t until b >= 1 [end]|[start] option : \n \t init position >= x \n \t execute use \n \t until position == y [end]|[start] policy a := \n \t if position < y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 2 \n \t execute build \n \t until inventory > y [end]|[start] policy a := \n \t if b == 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position != y \n \t execute build \n \t until position < x [end]|[start] policy a := \n \t if position : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until b > x [end]|[start] option : \n \t init a >= 0 \n \t execute use \n \t until b != 0 [end]|[start] option : \n \t init inventory > 0 \n \t execute build \n \t until a > y [end]|[start] option : \n \t init a < x \n \t execute find \n \t until b >= 0 [end]|[start] option : \n \t init b <= y \n \t execute run \n \t until position <= 0 [end]|[start] policy a := \n \t if iron == y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != x \n \t execute find \n \t until position == y [end]|[start] policy b := \n \t if iron > 0 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a <= y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron > y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a <= x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 1 \n \t execute find \n \t until inventory < 2 [end]|[start] policy b := \n \t if position < y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a < y \n \t execute jump \n \t until inventory >= 0 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b >= 0 : \n \t execute jump \n [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until b >= y [end]|[start] option : \n \t init position > 2 \n \t execute build \n \t until a < 2 [end]|[start] option : \n \t init b != x \n \t execute jump \n \t until a < y [end]|[start] policy b := \n \t if iron < x : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position > x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until inventory <= 1 [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until b <= 2 [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until position <= 2 [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until a > y [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 1 \n \t execute jump \n \t until a != y [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= x \n \t execute jump \n \t until b >= x [end]|[start] policy a := \n \t if a == 2 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= y \n \t execute run \n \t until inventory > 0 [end]|[start] policy b := \n \t if b >= y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until b > 2 [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 2 \n \t execute find \n \t until position != 0 [end]|[start] option : \n \t init a != y \n \t execute find \n \t until a > x [end]|[start] policy a := \n \t if b <= x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until b != x [end]|[start] option : \n \t init a <= 2 \n \t execute build \n \t until b < 1 [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until b < 0 [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until position >= 2 [end]|[start] policy a := \n \t if a != x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 2 \n \t execute build \n \t until b < x [end]|[start] policy b := \n \t if iron <= x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == 0 : \n \t execute run \n [end]|[start] policy a := \n \t if a > y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position >= y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b != y \n \t execute find \n \t until b != 1 [end]|[start] policy a := \n \t if a > y : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until b <= 2 [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until inventory >= 1 [end]|[start] option : \n \t init a == y \n \t execute use \n \t until inventory >= 0 [end]|[start] policy b := \n \t if a == 1 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 0 \n \t execute jump \n \t until a >= x [end]|[start] policy b := \n \t if position <= x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until position <= 2 [end]|[start] policy b := \n \t if position > y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position > y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 2 \n \t execute jump \n \t until b == x [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 2 \n \t execute jump \n \t until position > x [end]|[start] policy a := \n \t if iron > 1 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until b > y [end]|[start] policy a := \n \t if b > y : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute find \n \t until b < 2 [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until position > 2 [end]|[start] option : \n \t init a != 1 \n \t execute run \n \t until a == 1 [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until b > 2 [end]|[start] policy b := \n \t if position > x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init x \n \t execute use \n \t until position > x [end]|[start] option : \n \t init a < 2 \n \t execute find \n \t until b > y [end]|[start] policy a := \n \t if b < x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron > x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < y \n \t execute run \n \t until a != 2 [end]|[start] option : \n \t init b == y \n \t execute use \n \t until inventory > x [end]|[start] policy a := \n \t if a != 2 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until inventory < y [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= 2 \n \t execute run \n \t until inventory >= 0 [end]|[start] option : \n \t init inventory != x \n \t execute build \n \t until position > 1 [end]|[start] policy a := \n \t if b == 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 1 \n \t execute run \n \t until position >= 0 [end]|[start] option : \n \t init b <= x \n \t execute find \n \t until inventory > y [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until b == 1 [end]|[start] option : \n \t init position == y \n \t execute find \n \t until position > x [end]|[start] policy a := \n \t if b : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 2 \n \t execute run \n \t until a != x [end]|[start] option : \n \t init inventory == x \n \t execute use \n \t until position < y [end]|[start] policy a := \n \t if b <= 2 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= y \n \t execute build \n \t until inventory <= x [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 0 \n \t execute find \n \t until a >= 1 [end]|[start] option : \n \t init inventory <= x \n \t execute build \n \t until inventory != 2 [end]|[start] option : \n \t init position == y \n \t execute jump \n \t until inventory < x [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position < y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position != y \n \t execute run \n \t until inventory < 2 [end]|[start] policy b := \n \t if a >= x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until inventory <= 1 [end]|[start] option : \n \t init a != y \n \t execute use \n \t until inventory != y [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until position <= y [end]|[start] policy a := \n \t if a > y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position != y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == 1 : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > y : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until a <= y [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until a <= y [end]|[start] option : \n \t init inventory == 2 \n \t execute run \n \t until b == 1 [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 2 \n \t execute use \n \t until position < 0 [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 2 \n \t execute find \n \t until a > 1 [end]|[start] policy b := \n \t if b >= y : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position > x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b < x : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 1 \n \t execute find \n \t until position < x [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until b > 1 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until a > 0 [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until a [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until inventory <= x [end]|[start] option : \n \t init b < y \n \t execute build \n \t until inventory [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until a == 0 [end]|[start] option : \n \t init a != x \n \t execute find \n \t until inventory >= 0 [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until b != 2 [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until inventory > 1 [end]|[start] option : \n \t init b <= 1 \n \t execute use \n \t until a == x [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until inventory > x [end]|[start] option : \n \t init inventory > 1 \n \t execute run \n \t until inventory <= 1 [end]|[start] policy a := \n \t if b > 0 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= x \n \t execute run \n \t until a <= 0 [end]|[start] option : \n \t init inventory == 0 \n \t execute find \n \t until position < 2 [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until a >= 0 [end]|[start] policy b := \n \t if iron != x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until b <= 0 [end]|[start] policy a := \n \t if position != 1 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position == y \n \t execute build \n \t until b <= 0 [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b < x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until a == x [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until inventory > 0 [end]|[start] policy b := \n \t if iron <= x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 1 \n \t execute find \n \t until b == 1 [end]|[start] option : \n \t init position != 1 \n \t execute use \n \t until position != 1 [end]|[start] option : \n \t init a > x \n \t execute use \n \t until a <= 0 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until inventory == x [end]|[start] policy a := \n \t if position == x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 1 \n \t execute use \n \t until b >= y [end]|[start] option : \n \t init b == 1 \n \t execute jump \n \t until inventory >= y [end]|[start] option : \n \t init inventory >= 1 \n \t execute find \n \t until a != 0 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until a < x [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until inventory == x [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until inventory > y [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 0 \n \t execute find \n \t until inventory < 2 [end]|[start] option : \n \t init a > 2 \n \t execute run \n \t until b <= y [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until a != 2 [end]|[start] policy a := \n \t if iron != x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 1 \n \t execute find \n \t until b == y [end]|[start] policy a := \n \t if iron <= y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= x \n \t execute build \n \t until b != 0 [end]|[start] policy b := \n \t if position != y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a <= x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 0 \n \t execute use \n \t until inventory == x [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until a < 0 [end]|[start] option : \n \t init a < 1 \n \t execute jump \n \t until inventory < y [end]|[start] option : \n \t init inventory >= 1 \n \t execute build \n \t until inventory > 1 [end]|[start] policy b := \n \t if a <= x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b \n \t execute jump \n \t until inventory != x [end]|[start] policy a := \n \t if position > 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until b > y [end]|[start] policy a := \n \t if a < 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute run \n \t until inventory > 0 [end]|[start] policy b := \n \t if iron : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position < y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != y : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 0 \n \t execute use \n \t until b < 1 [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until a == 1 [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b <= x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a < y \n \t execute find \n \t until inventory < x [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= y \n \t execute run \n \t until inventory [end]|[start] policy b := \n \t if b >= x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until a != 0 [end]|[start] policy b := \n \t if a < y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b \n \t execute find \n \t until b <= x [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until position >= x [end]|[start] policy a := \n \t if position == 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until inventory == y [end]|[start] option : \n \t init position == y \n \t execute run \n \t until inventory > 2 [end]|[start] option : \n \t init b > x \n \t execute find \n \t until a <= 0 [end]|[start] option : \n \t init a != 2 \n \t execute find \n \t until b <= 0 [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until b < 2 [end]|[start] option : \n \t init a != x \n \t execute find \n \t until inventory > y [end]|[start] policy a := \n \t if b < y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 0 \n \t execute find \n \t until inventory != 1 [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a != y \n \t execute build \n \t until inventory > 2 [end]|[start] option : \n \t init a != 1 \n \t execute run \n \t until b < 1 [end]|[start] policy b := \n \t if a != 1 : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until inventory == 2 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until inventory > 2 [end]|[start] policy a := \n \t if b > 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 1 \n \t execute run \n \t until position >= x [end]|[start] policy b := \n \t if position == y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until inventory < y [end]|[start] option : \n \t init a >= 2 \n \t execute find \n \t until position != 2 [end]|[start] policy a := \n \t if a < 2 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until b >= x [end]|[start] option : \n \t init b == 2 \n \t execute jump \n \t until inventory < x [end]|[start] option : \n \t init a < 1 \n \t execute jump \n \t until position > 2 [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until inventory < 0 [end]|[start] policy b := \n \t if a <= x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 1 \n \t execute run \n \t until a <= 2 [end]|[start] policy a := \n \t if position < y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory \n \t execute jump \n \t until a < 0 [end]|[start] policy b := \n \t if a <= x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > x \n \t execute build \n \t until b <= x [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until b <= 1 [end]|[start] option : \n \t init inventory <= y \n \t execute run \n \t until a != y [end]|[start] policy a := \n \t if position == 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until a == 0 [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < y \n \t execute use \n \t until a < 0 [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until inventory != 1 [end]|[start] policy a := \n \t if iron != y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute find \n \t until b <= x [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until inventory >= 0 [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until x [end]|[start] option : \n \t init position <= 2 \n \t execute run \n \t until position >= y [end]|[start] policy a := \n \t if position > 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 2 \n \t execute jump \n \t until a [end]|[start] option : \n \t init inventory == 2 \n \t execute jump \n \t until b >= 1 [end]|[start] option : \n \t init b == x \n \t execute build \n \t until a > 0 [end]|[start] policy a := \n \t if b <= 2 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 2 \n \t execute find \n \t until b == 0 [end]|[start] option : \n \t init inventory <= y \n \t execute build \n \t until position < y [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until inventory != y [end]|[start] policy b := \n \t if iron >= y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute use \n [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until b >= 1 [end]|[start] policy b := \n \t if position > y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position == x \n \t execute run \n \t until position > 1 [end]|[start] policy b := \n \t if a : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until inventory >= y [end]|[start] option : \n \t init position == 2 \n \t execute jump \n \t until a > 1 [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute use \n [end]|[start] option : \n \t init b <= 2 \n \t execute find \n \t until inventory > 1 [end]|[start] policy a := \n \t if a <= 1 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until a > x [end]|[start] policy a := \n \t if iron != 1 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 2 \n \t execute build \n \t until b <= y [end]|[start] policy a := \n \t if position == 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until position <= y [end]|[start] policy a := \n \t if iron != 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until a == 0 [end]|[start] option : \n \t init position == 1 \n \t execute build \n \t until inventory < 1 [end]|[start] option : \n \t init a != x \n \t execute jump \n \t until b > 0 [end]|[start] policy a := \n \t if b < x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until inventory > 2 [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until position == y [end]|[start] policy b := \n \t if position <= y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= y \n \t execute use \n \t until b >= 0 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > y : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 1 \n \t execute run \n \t until b <= y [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until b >= 2 [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until inventory != 0 [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until b <= x [end]|[start] policy a := \n \t if b <= 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute run \n \t until position >= x [end]|[start] policy a := \n \t if position < x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position != y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until a == 1 [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 1 \n \t execute build \n \t until a <= y [end]|[start] option : \n \t init position == y \n \t execute use \n \t until inventory != 0 [end]|[start] option : \n \t init a <= 0 \n \t execute jump \n \t until position == 1 [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until a [end]|[start] option : \n \t init b >= 2 \n \t execute jump \n \t until inventory < x [end]|[start] policy a := \n \t if b == 0 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until position >= y [end]|[start] policy a := \n \t if position > 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 2 \n \t execute find \n \t until b <= x [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until inventory <= 0 [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until position != y [end]|[start] policy a := \n \t if a <= x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 1 \n \t execute find \n \t until b <= 2 [end]|[start] policy a := \n \t if b != 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position < y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b < y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position < x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b > y \n \t execute run \n \t until b < 1 [end]|[start] policy a := \n \t if a != y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a < x \n \t execute use \n \t until inventory == y [end]|[start] policy b := \n \t if a == x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until b == y [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until position >= 2 [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until position == 1 [end]|[start] policy b := \n \t if a < 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until b < 2 [end]|[start] policy a := \n \t if a != x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until b < x [end]|[start] option : \n \t init a != x \n \t execute run \n \t until a > 1 [end]|[start] policy a := \n \t if position < 1 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 0 \n \t execute run \n \t until b == x [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 2 \n \t execute use \n \t until inventory <= 0 [end]|[start] policy b := \n \t if iron < x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until b <= x [end]|[start] policy b := \n \t if iron : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until a != y [end]|[start] option : \n \t init position != 1 \n \t execute jump \n \t until b != y [end]|[start] policy b := \n \t if b < x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a < y \n \t execute build \n \t until position == x [end]|[start] policy a := \n \t if position >= x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until a < 0 [end]|[start] policy b := \n \t if a == x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 2 \n \t execute find \n \t until inventory <= x [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < y \n \t execute use \n \t until position != 1 [end]|[start] policy a := \n \t if position != 2 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b > x \n \t execute use \n \t until position > 0 [end]|[start] policy a := \n \t if position == y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a < x \n \t execute find \n \t until a > 2 [end]|[start] option : \n \t init position \n \t execute find \n \t until inventory != 1 [end]|[start] option : \n \t init b <= y \n \t execute jump \n \t until a <= y [end]|[start] option : \n \t init b >= y \n \t execute find \n \t until b <= 0 [end]|[start] policy b := \n \t if b >= y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == x \n \t execute use \n \t until a > 2 [end]|[start] policy b := \n \t if b < x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position == y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 1 \n \t execute build \n \t until position != 2 [end]|[start] policy a := \n \t if b : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 1 \n \t execute run \n \t until b < 0 [end]|[start] option : \n \t init b > x \n \t execute use \n \t until inventory == 2 [end]|[start] policy a := \n \t if b >= y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a \n \t execute use \n \t until b >= 2 [end]|[start] option : \n \t init b < 1 \n \t execute run \n \t until a == y [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until b != 2 [end]|[start] option : \n \t init position < 2 \n \t execute find \n \t until b == 0 [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until a > 2 [end]|[start] policy a := \n \t if a < y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until a <= y [end]|[start] policy a := \n \t if a < 1 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position >= x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute use \n \t until inventory < x [end]|[start] policy a := \n \t if position > x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until inventory == 1 [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until b != y [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until b <= 1 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 1 \n \t execute build \n \t until inventory > y [end]|[start] option : \n \t init b > 1 \n \t execute find \n \t until b == y [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until position < 0 [end]|[start] option : \n \t init a != y \n \t execute run \n \t until a < x [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until position > 2 [end]|[start] option : \n \t init a <= 2 \n \t execute use \n \t until position != y [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until position != 1 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == x \n \t execute use \n \t until b >= x [end]|[start] option : \n \t init b < 1 \n \t execute run \n \t until a != y [end]|[start] policy a := \n \t if iron > 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= x \n \t execute find \n \t until a >= 1 [end]|[start] option : \n \t init position == y \n \t execute build \n \t until b <= 1 [end]|[start] policy b := \n \t if b < y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < x \n \t execute find \n \t until inventory == y [end]|[start] policy a := \n \t if iron == 1 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until inventory != 1 [end]|[start] option : \n \t init a < 1 \n \t execute use \n \t until position > 1 [end]|[start] option : \n \t init inventory < x \n \t execute find \n \t until b != 1 [end]|[start] policy a := \n \t if position > y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= x \n \t execute run \n \t until b > 0 [end]|[start] policy b := \n \t if b != 2 : \n \t execute find \n [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until position == 1 [end]|[start] policy b := \n \t if iron != y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 0 \n \t execute build \n \t until position <= x [end]|[start] policy a := \n \t if b > 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < y : \n \t execute find \n [end]|[start] option : \n \t init position < 1 \n \t execute use \n \t until inventory == y [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= 2 \n \t execute find \n \t until b >= x [end]|[start] option : \n \t init inventory != 2 \n \t execute find \n \t until b < x [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until b >= y [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until b == x [end]|[start] policy a := \n \t if a == x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position <= x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until inventory <= y [end]|[start] policy b := \n \t if a < x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position == y \n \t execute run \n \t until position > 0 [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until position == y [end]|[start] option : \n \t init b == x \n \t execute find \n \t until a <= 1 [end]|[start] option : \n \t init position == x \n \t execute build \n \t until inventory >= x [end]|[start] option : \n \t init a < y \n \t execute use \n \t until position > 2 [end]|[start] policy b := \n \t if a == 2 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position <= x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until a == 0 [end]|[start] policy b := \n \t if a < x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 1 \n \t execute use \n \t until a < x [end]|[start] policy a := \n \t if a <= 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= y \n \t execute use \n \t until position < y [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until inventory < y [end]|[start] policy b := \n \t if iron != y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until a >= 2 [end]|[start] policy a := \n \t if iron != y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b > 2 \n \t execute build \n \t until b > 2 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron > x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position != x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until b <= 2 [end]|[start] policy a := \n \t if position == y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 2 \n \t execute find \n \t until a <= 1 [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until b != y [end]|[start] option : \n \t init position > 2 \n \t execute build \n \t until inventory < 0 [end]|[start] policy b := \n \t if iron >= x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until y [end]|[start] option : \n \t init a > x \n \t execute run \n \t until a >= y [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until a < 2 [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until position > x [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until a != y [end]|[start] policy a := \n \t if iron != 2 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != 0 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until inventory > y [end]|[start] option : \n \t init inventory <= 0 \n \t execute use \n \t until inventory >= 0 [end]|[start] option : \n \t init a < y \n \t execute find \n \t until a [end]|[start] policy a := \n \t if a > 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b < x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until b < y [end]|[start] policy a := \n \t if b < 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 2 \n \t execute find \n \t until b == 0 [end]|[start] option : \n \t init inventory >= x \n \t execute use \n \t until position == 1 [end]|[start] option : \n \t init inventory != 0 \n \t execute find \n \t until inventory >= x [end]|[start] option : \n \t init a \n \t execute jump \n \t until b == 2 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == y \n \t execute build \n \t until inventory >= x [end]|[start] policy b := \n \t if position <= y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a != y \n \t execute build \n \t until position > x [end]|[start] policy b := \n \t if a == y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute build \n [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until inventory == 1 [end]|[start] option : \n \t init position < 2 \n \t execute build \n \t until position != 1 [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until a != 1 [end]|[start] policy a := \n \t if a == 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 0 \n \t execute jump \n \t until inventory [end]|[start] policy b := \n \t if position < 2 : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until inventory <= 1 [end]|[start] policy a := \n \t if a == 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory \n \t execute find \n \t until a != x [end]|[start] option : \n \t init a > x \n \t execute run \n \t until inventory >= y [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until inventory == x [end]|[start] option : \n \t init b < x \n \t execute find \n \t until b < 1 [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until position == 2 [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position != y \n \t execute build \n \t until b == 1 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < x \n \t execute find \n \t until b <= 2 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until a <= x [end]|[start] option : \n \t init inventory >= 1 \n \t execute run \n \t until b == x [end]|[start] option : \n \t init inventory <= 2 \n \t execute find \n \t until position >= 1 [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until position < 2 [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 0 \n \t execute jump \n \t until position <= 2 [end]|[start] option : \n \t init position >= x \n \t execute build \n \t until a < 1 [end]|[start] policy b := \n \t if a != x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 2 \n \t execute run \n \t until x [end]|[start] option : \n \t init a > y \n \t execute build \n \t until inventory > y [end]|[start] policy a := \n \t if position < y : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until position != 2 [end]|[start] policy b := \n \t if a != y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until a < 1 [end]|[start] policy a := \n \t if position != y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 0 \n \t execute jump \n \t until position <= 1 [end]|[start] option : \n \t init position > 0 \n \t execute build \n \t until position >= 1 [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < y \n \t execute build \n \t until b > y [end]|[start] option : \n \t init b < y \n \t execute find \n \t until b == 2 [end]|[start] policy b := \n \t if b >= y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 2 \n \t execute run \n \t until inventory > 2 [end]|[start] policy a := \n \t if position == 2 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 0 \n \t execute use \n \t until b [end]|[start] policy a := \n \t if b != y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until inventory < 1 [end]|[start] option : \n \t init inventory >= 2 \n \t execute use \n \t until b < x [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 1 \n \t execute find \n \t until position >= 0 [end]|[start] option : \n \t init inventory == 2 \n \t execute run \n \t until a != y [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != x : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute use \n \t until b < y [end]|[start] option : \n \t init b != 1 \n \t execute use \n \t until inventory != x [end]|[start] policy b := \n \t if position == x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 0 \n \t execute jump \n \t until a != 2 [end]|[start] policy b := \n \t if b <= x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 0 \n \t execute run \n \t until a == 1 [end]|[start] policy a := \n \t if a != 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= x : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b != x \n \t execute build \n \t until position < 2 [end]|[start] policy b := \n \t if b == 2 : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= y \n \t execute run \n \t until b <= 2 [end]|[start] policy b := \n \t if iron < y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 2 \n \t execute build \n \t until inventory >= y [end]|[start] policy b := \n \t if b < y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b <= y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until b <= x [end]|[start] policy a := \n \t if position <= 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= x : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == y \n \t execute build \n \t until a >= 2 [end]|[start] policy b := \n \t if iron > x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until position > 0 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 1 \n \t execute run \n \t until a > x [end]|[start] policy a := \n \t if b >= y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 0 \n \t execute use \n \t until a >= 0 [end]|[start] option : \n \t init a > y \n \t execute find \n \t until position [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position < x \n \t execute run \n \t until position > 2 [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until inventory >= y [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until position == 0 [end]|[start] option : \n \t init a < 0 \n \t execute use \n \t until a >= 1 [end]|[start] option : \n \t init b < 2 \n \t execute find \n \t until b == 1 [end]|[start] policy b := \n \t if a < 2 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until a > x [end]|[start] option : \n \t init position == y \n \t execute use \n \t until position <= x [end]|[start] option : \n \t init position != y \n \t execute run \n \t until position < y [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != x \n \t execute build \n \t until position <= 1 [end]|[start] policy b := \n \t if iron <= x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until x [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until a >= 2 [end]|[start] policy a := \n \t if b > x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until inventory >= 2 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until inventory >= x [end]|[start] policy b := \n \t if a <= y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != y \n \t execute build \n \t until position != 0 [end]|[start] policy b := \n \t if b < x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 1 \n \t execute use \n \t until position == 1 [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until inventory > 1 [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until inventory >= y [end]|[start] option : \n \t init inventory \n \t execute run \n \t until position >= x [end]|[start] policy a := \n \t if position != 2 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until inventory > x [end]|[start] policy a := \n \t if position == y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until a <= 1 [end]|[start] option : \n \t init b <= x \n \t execute find \n \t until a > 2 [end]|[start] policy a := \n \t if position <= y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until position <= 0 [end]|[start] option : \n \t init a < 1 \n \t execute build \n \t until a < 0 [end]|[start] option : \n \t init b < 2 \n \t execute jump \n \t until inventory == 2 [end]|[start] policy a := \n \t if iron : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b != x \n \t execute use \n \t until inventory == 1 [end]|[start] policy a := \n \t if b != 2 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 2 \n \t execute use \n \t until b > 1 [end]|[start] policy a := \n \t if b <= 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until inventory < y [end]|[start] policy a := \n \t if iron > 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 2 \n \t execute build \n \t until a <= 1 [end]|[start] option : \n \t init position \n \t execute build \n \t until b < y [end]|[start] option : \n \t init position != 2 \n \t execute run \n \t until position > 0 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b > y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b == y \n \t execute jump \n \t until a == 2 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a > y \n \t execute run \n \t until b > 0 [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until a > 2 [end]|[start] option : \n \t init b != y \n \t execute find \n \t until a < x [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until inventory != y [end]|[start] policy a := \n \t if iron != 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute find \n \t until a <= 1 [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until position != 0 [end]|[start] policy a := \n \t if a >= y : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until a <= 0 [end]|[start] policy a := \n \t if iron < 2 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until a > 1 [end]|[start] option : \n \t init a != 1 \n \t execute use \n \t until position != 1 [end]|[start] option : \n \t init inventory > 1 \n \t execute jump \n \t until position != y [end]|[start] option : \n \t init inventory > 0 \n \t execute find \n \t until b == y [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until b < x [end]|[start] policy a := \n \t if a > 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until position >= x [end]|[start] option : \n \t init a != y \n \t execute use \n \t until a >= 2 [end]|[start] policy a := \n \t if position <= 2 : \n \t execute build \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until a < 2 [end]|[start] policy a := \n \t if a : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until inventory != 0 [end]|[start] policy a := \n \t if b > x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init x \n \t execute find \n \t until inventory == y [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 0 \n \t execute build \n \t until a >= 0 [end]|[start] policy a := \n \t if b >= y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until b >= y [end]|[start] policy a := \n \t if b <= 1 : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until position != x [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until position >= 1 [end]|[start] policy b := \n \t if b != x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until a != x [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until position > y [end]|[start] policy b := \n \t if b >= y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= x \n \t execute run \n \t until b != 2 [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until position <= 1 [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until b == 1 [end]|[start] option : \n \t init a < 1 \n \t execute find \n \t until b == x [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until inventory <= 1 [end]|[start] option : \n \t init a >= y \n \t execute use \n \t until position <= 2 [end]|[start] policy a := \n \t if b < x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory \n \t execute run \n \t until position <= 2 [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until a <= 0 [end]|[start] policy a := \n \t if position <= y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until a < 1 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b > x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until b >= y [end]|[start] policy a := \n \t if iron < 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 1 \n \t execute use \n \t until inventory > 2 [end]|[start] policy a := \n \t if iron > x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 2 \n \t execute use \n \t until a >= 0 [end]|[start] policy a := \n \t if iron > x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= y \n \t execute run \n \t until inventory <= 2 [end]|[start] policy b := \n \t if position == x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a != x \n \t execute find \n \t until position > 2 [end]|[start] option : \n \t init inventory <= 1 \n \t execute find \n \t until b <= y [end]|[start] option : \n \t init a <= y \n \t execute jump \n \t until a >= x [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until position != 0 [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until b [end]|[start] policy b := \n \t if b >= x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b == x \n \t execute find \n \t until a >= 2 [end]|[start] option : \n \t init y \n \t execute use \n \t until position != x [end]|[start] policy a := \n \t if b >= 2 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until inventory > x [end]|[start] policy a := \n \t if iron != x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b == y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until position != 2 [end]|[start] option : \n \t init a > y \n \t execute build \n \t until position < x [end]|[start] policy a := \n \t if b == x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= 2 : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until b != y [end]|[start] option : \n \t init position > y \n \t execute use \n \t until a == 0 [end]|[start] policy b := \n \t if position != y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until b < x [end]|[start] option : \n \t init inventory == x \n \t execute build \n \t until b == 2 [end]|[start] policy a := \n \t if iron != y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 0 \n \t execute find \n \t until a < x [end]|[start] option : \n \t init position <= y \n \t execute find \n \t until inventory > x [end]|[start] option : \n \t init b < x \n \t execute use \n \t until a [end]|[start] option : \n \t init a <= 2 \n \t execute use \n \t until position >= 0 [end]|[start] policy a := \n \t if b < 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 2 \n \t execute jump \n \t until position [end]|[start] policy b := \n \t if b : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 2 \n \t execute jump \n \t until x [end]|[start] policy a := \n \t if position != x : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > x \n \t execute jump \n \t until position >= 0 [end]|[start] policy a := \n \t if b != 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until b <= y [end]|[start] policy a := \n \t if iron != y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= 2 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 1 \n \t execute run \n \t until a != 1 [end]|[start] option : \n \t init inventory <= y \n \t execute build \n \t until b > y [end]|[start] option : \n \t init a >= 2 \n \t execute build \n \t until a == 1 [end]|[start] policy b := \n \t if b != x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b != y \n \t execute find \n \t until a > 1 [end]|[start] policy b := \n \t if position == y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != x \n \t execute run \n \t until a == 1 [end]|[start] policy b := \n \t if b != x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b < x \n \t execute build \n \t until position != 0 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 1 \n \t execute find \n \t until position >= x [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until position != 1 [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until b == y [end]|[start] option : \n \t init a > 0 \n \t execute jump \n \t until inventory >= y [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a >= x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position != y \n \t execute find \n \t until position > x [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until b >= x [end]|[start] policy a := \n \t if iron != y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until position == x [end]|[start] option : \n \t init b == 2 \n \t execute build \n \t until inventory >= 2 [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until inventory != 0 [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until a != 2 [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until b == 2 [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until b != 2 [end]|[start] policy a := \n \t if b > y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until a >= x [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until position != 2 [end]|[start] policy b := \n \t if position > y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until b <= 1 [end]|[start] policy a := \n \t if a > 2 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until position > 0 [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until a == x [end]|[start] policy b := \n \t if a != 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until position >= 1 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < y \n \t execute build \n \t until a == 0 [end]|[start] option : \n \t init b \n \t execute find \n \t until position [end]|[start] option : \n \t init a >= 1 \n \t execute use \n \t until b != y [end]|[start] option : \n \t init b != x \n \t execute use \n \t until position > 2 [end]|[start] policy a := \n \t if b < 2 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory \n \t execute use \n \t until b > 2 [end]|[start] policy a := \n \t if iron == y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= x \n \t execute find \n \t until inventory >= 0 [end]|[start] option : \n \t init inventory >= 0 \n \t execute jump \n \t until position > 1 [end]|[start] policy a := \n \t if a == y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= y \n \t execute find \n \t until x [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != y \n \t execute find \n \t until position <= 2 [end]|[start] policy b := \n \t if b != x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until a <= 1 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 1 \n \t execute run \n \t until a < 0 [end]|[start] policy a := \n \t if a < 2 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute use \n [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until position <= 1 [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 0 \n \t execute build \n \t until position < 0 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until position > 2 [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until inventory > 0 [end]|[start] option : \n \t init inventory \n \t execute run \n \t until b < y [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until a >= 2 [end]|[start] policy b := \n \t if position != y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 0 \n \t execute find \n \t until position != 2 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until b >= 0 [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until position < 1 [end]|[start] option : \n \t init y \n \t execute run \n \t until b == y [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until a < y [end]|[start] option : \n \t init b > 1 \n \t execute find \n \t until a <= x [end]|[start] policy b := \n \t if position >= y : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until a == 0 [end]|[start] option : \n \t init a < y \n \t execute build \n \t until position >= y [end]|[start] policy a := \n \t if position > 1 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a < y \n \t execute find \n \t until a <= 2 [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until b != 1 [end]|[start] policy a := \n \t if position < y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until b == 2 [end]|[start] policy a := \n \t if iron != y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron > x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position >= y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < y \n \t execute build \n \t until position > 2 [end]|[start] option : \n \t init position \n \t execute use \n \t until a >= 1 [end]|[start] policy a := \n \t if b != 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory \n \t execute find \n \t until inventory != x [end]|[start] option : \n \t init b <= y \n \t execute jump \n \t until inventory > 1 [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until a [end]|[start] policy b := \n \t if iron >= y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until a == x [end]|[start] option : \n \t init a > 0 \n \t execute find \n \t until b < 2 [end]|[start] policy a := \n \t if b != 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until b [end]|[start] policy a := \n \t if position > y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a <= x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute build \n \t until position <= x [end]|[start] policy a := \n \t if a <= 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= y \n \t execute use \n \t until inventory != 0 [end]|[start] policy b := \n \t if position < y : \n \t execute use \n [end]|[start] policy a := \n \t if a < y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron != y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 0 \n \t execute find \n \t until b == 1 [end]|[start] policy a := \n \t if b > 0 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > y \n \t execute build \n \t until inventory == 1 [end]|[start] policy b := \n \t if b < y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory \n \t execute use \n \t until inventory >= 2 [end]|[start] option : \n \t init b \n \t execute build \n \t until b == 0 [end]|[start] policy b := \n \t if iron < y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until b >= 2 [end]|[start] policy a := \n \t if iron < y : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= y \n \t execute jump \n \t until inventory > y [end]|[start] policy a := \n \t if a >= x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until a == 2 [end]|[start] option : \n \t init inventory != y \n \t execute jump \n \t until inventory == y [end]|[start] policy a := \n \t if iron != 1 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < x \n \t execute find \n \t until inventory == y [end]|[start] option : \n \t init inventory == x \n \t execute use \n \t until a > 1 [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until b != 1 [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until inventory >= 1 [end]|[start] policy b := \n \t if a != 0 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until inventory <= 0 [end]|[start] option : \n \t init inventory >= 1 \n \t execute use \n \t until b > x [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until inventory <= 0 [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until inventory == 2 [end]|[start] option : \n \t init b == 2 \n \t execute run \n \t until a < 0 [end]|[start] option : \n \t init b \n \t execute build \n \t until a == 0 [end]|[start] policy a := \n \t if b < 1 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a > y \n \t execute find \n \t until b > 0 [end]|[start] option : \n \t init b <= y \n \t execute use \n \t until inventory >= x [end]|[start] policy b := \n \t if b <= 1 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until a != 0 [end]|[start] policy b := \n \t if a <= x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 2 \n \t execute use \n \t until position >= 1 [end]|[start] policy a := \n \t if iron > x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until inventory < x [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until b > 0 [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until position > 0 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b < y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= y \n \t execute find \n \t until b <= 0 [end]|[start] option : \n \t init position != 2 \n \t execute run \n \t until b == 0 [end]|[start] policy a := \n \t if b != x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b < y \n \t execute find \n \t until b > y [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until a > x [end]|[start] policy b := \n \t if position <= x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b > x \n \t execute build \n \t until inventory <= x [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until a [end]|[start] option : \n \t init position == y \n \t execute jump \n \t until b < 1 [end]|[start] policy a := \n \t if b == x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 1 \n \t execute build \n \t until inventory != 1 [end]|[start] policy a := \n \t if b > 1 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until a != 1 [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until b <= 0 [end]|[start] policy a := \n \t if a <= y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until b > 2 [end]|[start] policy a := \n \t if position > y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position \n \t execute find \n \t until a < 2 [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until position >= 0 [end]|[start] policy a := \n \t if iron <= y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 2 \n \t execute build \n \t until position > 0 [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until position == 0 [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until b <= y [end]|[start] option : \n \t init inventory > 2 \n \t execute use \n \t until inventory <= 2 [end]|[start] option : \n \t init a != 2 \n \t execute find \n \t until position == x [end]|[start] policy b := \n \t if position != y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= x : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a > y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute build \n \t until inventory <= 0 [end]|[start] policy a := \n \t if position < 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until b == y [end]|[start] option : \n \t init a < x \n \t execute jump \n \t until b == 1 [end]|[start] option : \n \t init b < 1 \n \t execute build \n \t until position == x [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until inventory <= x [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until inventory < x [end]|[start] policy b := \n \t if a : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init x \n \t execute run \n \t until b == 2 [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until a > x [end]|[start] option : \n \t init a < y \n \t execute find \n \t until inventory > 2 [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == y \n \t execute use \n \t until inventory != 0 [end]|[start] policy a := \n \t if position == y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 2 \n \t execute run \n \t until position >= 2 [end]|[start] policy b := \n \t if iron < y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 2 \n \t execute use \n \t until a >= x [end]|[start] option : \n \t init b == y \n \t execute find \n \t until inventory != 1 [end]|[start] option : \n \t init b == y \n \t execute use \n \t until a > 1 [end]|[start] option : \n \t init inventory \n \t execute find \n \t until b != x [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until b == x [end]|[start] policy a := \n \t if b > 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until position >= 1 [end]|[start] option : \n \t init position != 2 \n \t execute find \n \t until y [end]|[start] option : \n \t init inventory <= 1 \n \t execute jump \n \t until position >= 0 [end]|[start] policy a := \n \t if position == 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 2 \n \t execute find \n \t until position <= y [end]|[start] policy a := \n \t if b != 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until b >= x [end]|[start] policy a := \n \t if iron != 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > y \n \t execute find \n \t until a >= y [end]|[start] option : \n \t init position != y \n \t execute run \n \t until inventory <= y [end]|[start] option : \n \t init inventory < 1 \n \t execute find \n \t until b == 0 [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until inventory [end]|[start] policy b := \n \t if a < x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until position != 1 [end]|[start] option : \n \t init inventory >= 1 \n \t execute use \n \t until position != 0 [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until position > x [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until b < 1 [end]|[start] option : \n \t init b >= y \n \t execute find \n \t until position <= y [end]|[start] policy a := \n \t if b < y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until inventory < x [end]|[start] policy b := \n \t if position <= x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute build \n \t until b == y [end]|[start] policy a := \n \t if b < 1 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until b <= 1 [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute use \n \t until b >= 2 [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until b [end]|[start] policy a := \n \t if a <= y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 2 \n \t execute use \n \t until a > 0 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= x \n \t execute find \n \t until a <= y [end]|[start] option : \n \t init inventory != x \n \t execute run \n \t until inventory != 0 [end]|[start] option : \n \t init inventory < 0 \n \t execute build \n \t until b < 2 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron < x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute use \n \t until b >= y [end]|[start] policy a := \n \t if position <= 1 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position < x \n \t execute find \n \t until a >= y [end]|[start] policy b := \n \t if b != y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 2 \n \t execute jump \n \t until position > y [end]|[start] option : \n \t init b > 1 \n \t execute run \n \t until a > y [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until inventory <= y [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until a >= 0 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until b < y [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until inventory <= y [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until position <= 0 [end]|[start] option : \n \t init position == y \n \t execute use \n \t until position != y [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until b > x [end]|[start] policy a := \n \t if a >= 0 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until b != 1 [end]|[start] policy b := \n \t if position >= y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < y \n \t execute use \n \t until inventory != y [end]|[start] policy b := \n \t if position > 1 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 0 \n \t execute find \n \t until inventory <= 1 [end]|[start] policy a := \n \t if a != 1 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until a < x [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b > y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position < x \n \t execute jump \n \t until a == 0 [end]|[start] option : \n \t init position == 0 \n \t execute jump \n \t until b == 1 [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until inventory == 0 [end]|[start] policy b := \n \t if a > y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b == 2 : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until a != y [end]|[start] policy b := \n \t if a == 0 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 0 \n \t execute run \n \t until b > x [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until inventory != y [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position < y \n \t execute use \n \t until position != y [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until b <= 1 [end]|[start] option : \n \t init position > y \n \t execute build \n \t until inventory > x [end]|[start] option : \n \t init a == 2 \n \t execute jump \n \t until b > 0 [end]|[start] policy a := \n \t if iron != 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 0 \n \t execute run \n \t until b == 2 [end]|[start] option : \n \t init a <= 1 \n \t execute run \n \t until inventory == y [end]|[start] option : \n \t init a < x \n \t execute find \n \t until a == 2 [end]|[start] option : \n \t init a != 2 \n \t execute jump \n \t until position < 1 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until b < 2 [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until position [end]|[start] policy a := \n \t if a != x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b > y \n \t execute jump \n \t until a == x [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until inventory > 1 [end]|[start] policy a := \n \t if iron > y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until position < 1 [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until a < 1 [end]|[start] option : \n \t init b != 0 \n \t execute use \n \t until inventory >= 1 [end]|[start] policy a := \n \t if position == 0 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= x \n \t execute use \n \t until b > x [end]|[start] option : \n \t init a <= x \n \t execute find \n \t until inventory > 2 [end]|[start] policy a := \n \t if a < 0 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory \n \t execute run \n \t until inventory != y [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until b [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until b >= x [end]|[start] policy b := \n \t if a < y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until position != 1 [end]|[start] option : \n \t init a \n \t execute jump \n \t until b <= x [end]|[start] policy b := \n \t if a < 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until b < 0 [end]|[start] policy a := \n \t if iron > y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until inventory > 1 [end]|[start] policy a := \n \t if b != 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position \n \t execute run \n \t until position == 0 [end]|[start] policy b := \n \t if position > x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a != y \n \t execute run \n \t until inventory < 0 [end]|[start] policy b := \n \t if iron == x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b != y \n \t execute build \n \t until b != 1 [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until b <= x [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until b >= y [end]|[start] option : \n \t init a >= 2 \n \t execute run \n \t until a <= x [end]|[start] option : \n \t init a \n \t execute jump \n \t until b != 0 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a != x \n \t execute run \n \t until y [end]|[start] option : \n \t init b > y \n \t execute run \n \t until a >= 0 [end]|[start] policy b := \n \t if a == 0 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute use \n \t until a > 0 [end]|[start] policy a := \n \t if b > 2 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until b <= 0 [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a == y \n \t execute run \n \t until b < 0 [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until b > 2 [end]|[start] option : \n \t init position <= 1 \n \t execute build \n \t until a < y [end]|[start] option : \n \t init position < x \n \t execute find \n \t until b < x [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until b != y [end]|[start] policy a := \n \t if position > 0 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until b <= 1 [end]|[start] policy b := \n \t if iron < y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 0 \n \t execute jump \n \t until inventory <= x [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until position >= y [end]|[start] option : \n \t init a > x \n \t execute find \n \t until a < 2 [end]|[start] policy a := \n \t if iron >= x : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= x \n \t execute run \n \t until inventory > 2 [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until b <= 1 [end]|[start] policy a := \n \t if a != 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until position < 0 [end]|[start] policy a := \n \t if a > y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until a == x [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until position >= x [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 1 \n \t execute use \n \t until b >= x [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 0 \n \t execute build \n \t until position == 0 [end]|[start] policy b := \n \t if a == 2 : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until position < x [end]|[start] policy b := \n \t if a == 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron != x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until position < x [end]|[start] policy b := \n \t if position > x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b \n \t execute build \n \t until a <= 0 [end]|[start] option : \n \t init a < 0 \n \t execute use \n \t until inventory != 1 [end]|[start] policy a := \n \t if iron != y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 1 \n \t execute find \n \t until a <= y [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until position <= 0 [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until a < x [end]|[start] option : \n \t init a == y \n \t execute find \n \t until b > 1 [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until position >= 0 [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until a == 1 [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until inventory != 1 [end]|[start] option : \n \t init position == y \n \t execute build \n \t until b != y [end]|[start] policy b := \n \t if a != 2 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != x \n \t execute use \n \t until inventory >= x [end]|[start] policy a := \n \t if iron == 0 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until a >= 2 [end]|[start] policy a := \n \t if a >= 1 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > y \n \t execute run \n \t until b == y [end]|[start] policy b := \n \t if position == x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < y \n \t execute build \n \t until b >= x [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until position <= 2 [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron < y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron <= 1 : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until b < 1 [end]|[start] option : \n \t init position == y \n \t execute find \n \t until a < 1 [end]|[start] option : \n \t init position > x \n \t execute jump \n \t until a >= 0 [end]|[start] option : \n \t init position <= 0 \n \t execute find \n \t until a >= y [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until a < 0 [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until b > x [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until position <= 0 [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 0 \n \t execute build \n \t until b != 1 [end]|[start] option : \n \t init position < x \n \t execute find \n \t until a == x [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b > 0 \n \t execute jump \n \t until a >= 0 [end]|[start] option : \n \t init position > x \n \t execute run \n \t until position >= x [end]|[start] option : \n \t init inventory <= y \n \t execute run \n \t until inventory [end]|[start] policy a := \n \t if b < x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position \n \t execute jump \n \t until position >= 0 [end]|[start] policy b := \n \t if iron > 1 : \n \t execute jump \n [end]|[start] policy a := \n \t if position : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 1 \n \t execute find \n \t until b == 2 [end]|[start] policy b := \n \t if a > y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until b [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until inventory <= y [end]|[start] option : \n \t init a < 2 \n \t execute build \n \t until a <= y [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until b != x [end]|[start] policy a := \n \t if b != y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a != y \n \t execute build \n \t until position < 1 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until inventory == 0 [end]|[start] option : \n \t init a < x \n \t execute use \n \t until a < 2 [end]|[start] policy a := \n \t if b != 2 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until inventory > 2 [end]|[start] policy a := \n \t if a > x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 2 \n \t execute find \n \t until inventory > 1 [end]|[start] option : \n \t init position == 2 \n \t execute jump \n \t until b != 0 [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until inventory == x [end]|[start] policy a := \n \t if position != y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == y : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= x \n \t execute jump \n \t until position > 1 [end]|[start] policy b := \n \t if b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until position == 0 [end]|[start] option : \n \t init inventory < y \n \t execute build \n \t until a > y [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a > y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until position > 0 [end]|[start] policy b := \n \t if a != 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until inventory < 0 [end]|[start] policy b := \n \t if a != 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 2 \n \t execute find \n \t until inventory < 2 [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until b <= x [end]|[start] policy a := \n \t if iron > y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= x \n \t execute jump \n \t until inventory <= 2 [end]|[start] option : \n \t init inventory < x \n \t execute build \n \t until a > 2 [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until inventory > 0 [end]|[start] policy a := \n \t if a != x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 2 \n \t execute jump \n \t until a < 0 [end]|[start] option : \n \t init position < y \n \t execute build \n \t until position > y [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until x [end]|[start] policy a := \n \t if position == 0 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= y : \n \t execute use \n [end]|[start] option : \n \t init position != y \n \t execute build \n \t until b > y [end]|[start] policy a := \n \t if b <= 0 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 0 \n \t execute use \n \t until inventory >= x [end]|[start] policy a := \n \t if b > y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a <= y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 2 \n \t execute use \n \t until b >= y [end]|[start] option : \n \t init position \n \t execute use \n \t until inventory == 1 [end]|[start] option : \n \t init inventory \n \t execute run \n \t until b [end]|[start] option : \n \t init y \n \t execute build \n \t until b < 0 [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until b == 0 [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until b < y [end]|[start] policy a := \n \t if position == y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until inventory == 1 [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until a != 0 [end]|[start] policy a := \n \t if position > 0 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a < x \n \t execute run \n \t until position < x [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until b < 1 [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until a > 0 [end]|[start] option : \n \t init a != y \n \t execute find \n \t until b > 1 [end]|[start] policy b := \n \t if a > y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until b == 2 [end]|[start] policy a := \n \t if iron < y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 2 \n \t execute jump \n \t until inventory > 1 [end]|[start] policy b := \n \t if position < y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init y \n \t execute build \n \t until position > 2 [end]|[start] policy b := \n \t if position < x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init x \n \t execute find \n \t until a == 2 [end]|[start] policy a := \n \t if b <= 2 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != x \n \t execute build \n \t until position > y [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position == y \n \t execute jump \n \t until b > y [end]|[start] option : \n \t init a >= 1 \n \t execute use \n \t until a < y [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until a <= 0 [end]|[start] policy b := \n \t if position <= y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position != y \n \t execute use \n \t until position != 0 [end]|[start] policy b := \n \t if a != 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until b > 0 [end]|[start] policy a := \n \t if iron != x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until position <= 2 [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until a > 1 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until inventory == 0 [end]|[start] policy b := \n \t if iron > y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until position < 2 [end]|[start] option : \n \t init position > y \n \t execute use \n \t until position > x [end]|[start] policy b := \n \t if b != x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 1 \n \t execute use \n \t until b == x [end]|[start] policy b := \n \t if iron : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b \n \t execute build \n \t until position != x [end]|[start] policy b := \n \t if a == 1 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 1 \n \t execute find \n \t until a > y [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until b != 2 [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 1 \n \t execute run \n \t until position <= 0 [end]|[start] option : \n \t init position >= x \n \t execute find \n \t until b > 2 [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= x \n \t execute use \n \t until inventory >= 0 [end]|[start] policy b := \n \t if a != 1 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a > 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until b < 1 [end]|[start] option : \n \t init inventory != y \n \t execute find \n \t until b == 0 [end]|[start] option : \n \t init inventory != y \n \t execute jump \n \t until inventory <= 2 [end]|[start] option : \n \t init inventory <= y \n \t execute build \n \t until inventory > 2 [end]|[start] policy a := \n \t if iron != 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 2 \n \t execute jump \n \t until b != 2 [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until position == 1 [end]|[start] policy b := \n \t if position > x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until a != 1 [end]|[start] policy a := \n \t if b != 0 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until a >= 0 [end]|[start] option : \n \t init inventory < y \n \t execute build \n \t until b < x [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 1 \n \t execute jump \n \t until a > x [end]|[start] option : \n \t init a != 2 \n \t execute find \n \t until a == 2 [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == x \n \t execute use \n \t until b < y [end]|[start] option : \n \t init a <= 1 \n \t execute jump \n \t until a >= y [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until inventory <= 2 [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until position < 0 [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 1 \n \t execute build \n \t until inventory <= 1 [end]|[start] option : \n \t init b > x \n \t execute build \n \t until b > y [end]|[start] policy b := \n \t if position <= x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 0 \n \t execute find \n \t until a <= 0 [end]|[start] option : \n \t init a != 0 \n \t execute run \n \t until position < y [end]|[start] policy b := \n \t if a < y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 0 \n \t execute run \n \t until position == x [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until a >= x [end]|[start] policy a := \n \t if iron >= y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position < y \n \t execute find \n \t until a <= 2 [end]|[start] policy a := \n \t if b != x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a <= x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position > x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b > y \n \t execute jump \n \t until b <= 2 [end]|[start] policy b := \n \t if iron >= x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b < x \n \t execute use \n \t until inventory > 0 [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until b > 0 [end]|[start] policy b := \n \t if b >= 1 : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until inventory > 0 [end]|[start] option : \n \t init inventory < 1 \n \t execute run \n \t until a < 0 [end]|[start] option : \n \t init inventory != y \n \t execute jump \n \t until inventory == 2 [end]|[start] policy a := \n \t if b != 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 1 \n \t execute run \n \t until inventory > 1 [end]|[start] option : \n \t init inventory == y \n \t execute use \n \t until inventory >= 0 [end]|[start] policy b := \n \t if position >= y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 1 \n \t execute find \n \t until b < x [end]|[start] policy a := \n \t if position > 0 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until a < x [end]|[start] policy a := \n \t if position < x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute find \n [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until b < 1 [end]|[start] option : \n \t init position >= y \n \t execute use \n \t until a != y [end]|[start] policy a := \n \t if b <= 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a != y \n \t execute build \n \t until inventory == y [end]|[start] option : \n \t init b >= y \n \t execute use \n \t until position != x [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a > y \n \t execute find \n \t until position >= 1 [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until b > y [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 2 \n \t execute run \n \t until inventory [end]|[start] policy a := \n \t if iron < 0 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until a != x [end]|[start] policy a := \n \t if a == x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position > x \n \t execute jump \n \t until position >= y [end]|[start] policy a := \n \t if a > 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until position > x [end]|[start] option : \n \t init position < x \n \t execute jump \n \t until b <= y [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b > y \n \t execute use \n \t until a > 1 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until inventory > 2 [end]|[start] option : \n \t init a <= 2 \n \t execute run \n \t until a <= 2 [end]|[start] policy a := \n \t if iron != 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a \n \t execute jump \n \t until b != 1 [end]|[start] policy a := \n \t if a == 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until position == 2 [end]|[start] policy a := \n \t if position == y : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until y [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until position > 1 [end]|[start] policy b := \n \t if iron >= x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until inventory >= y [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != y : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute use \n \t until inventory >= 1 [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until position > x [end]|[start] policy a := \n \t if iron != 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != x : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b \n \t execute build \n \t until inventory < x [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until a [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until b == y [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position >= x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron < y : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 1 \n \t execute find \n \t until inventory [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until b != 2 [end]|[start] option : \n \t init a < y \n \t execute use \n \t until a <= y [end]|[start] policy a := \n \t if position < 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position >= x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until position == x [end]|[start] policy a := \n \t if position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position > y \n \t execute use \n \t until a >= 0 [end]|[start] policy b := \n \t if a >= y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until a != 1 [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until inventory >= x [end]|[start] policy b := \n \t if iron >= y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until position > 0 [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until position <= x [end]|[start] option : \n \t init position < 2 \n \t execute run \n \t until inventory == x [end]|[start] option : \n \t init inventory != 2 \n \t execute use \n \t until a < y [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until inventory == 2 [end]|[start] policy a := \n \t if b : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position <= x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until position < y [end]|[start] policy a := \n \t if b >= x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until a > y [end]|[start] policy a := \n \t if position >= 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until position == y [end]|[start] policy b := \n \t if position > y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != x \n \t execute run \n \t until a <= x [end]|[start] policy a := \n \t if b >= 2 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until b <= 2 [end]|[start] option : \n \t init a >= 2 \n \t execute find \n \t until a <= 2 [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until a < 0 [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until a >= y [end]|[start] policy b := \n \t if b > y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position >= x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until inventory != 2 [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 2 \n \t execute build \n \t until inventory < y [end]|[start] option : \n \t init position >= 0 \n \t execute jump \n \t until inventory > y [end]|[start] policy a := \n \t if b <= 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until a != 2 [end]|[start] policy a := \n \t if iron : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until b > 2 [end]|[start] policy a := \n \t if a <= y : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 0 \n \t execute run \n \t until inventory >= x [end]|[start] option : \n \t init b < y \n \t execute run \n \t until a < 1 [end]|[start] policy b := \n \t if position : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until x [end]|[start] policy b := \n \t if position >= x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until position == 1 [end]|[start] policy b := \n \t if a >= y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until b <= y [end]|[start] policy b := \n \t if a == 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a > y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > y \n \t execute use \n \t until position >= 0 [end]|[start] option : \n \t init b > y \n \t execute build \n \t until position <= x [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until b >= 2 [end]|[start] option : \n \t init a < y \n \t execute use \n \t until a >= x [end]|[start] policy b := \n \t if b != y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until b != 0 [end]|[start] option : \n \t init position <= y \n \t execute run \n \t until inventory <= 0 [end]|[start] option : \n \t init position != 0 \n \t execute use \n \t until position >= x [end]|[start] policy b := \n \t if iron != x : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 2 \n \t execute build \n \t until position >= x [end]|[start] option : \n \t init position == 2 \n \t execute run \n \t until a < 0 [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until a > x [end]|[start] policy b := \n \t if a < y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 1 \n \t execute jump \n \t until inventory <= 0 [end]|[start] policy a := \n \t if b > x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position == y \n \t execute build \n \t until position <= 0 [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until a != 1 [end]|[start] option : \n \t init b > y \n \t execute use \n \t until position >= 0 [end]|[start] policy a := \n \t if position == x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 2 \n \t execute build \n \t until inventory <= 0 [end]|[start] policy a := \n \t if a != y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != y \n \t execute build \n \t until position >= y [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until a > x [end]|[start] policy b := \n \t if position == y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until position == 2 [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until position == 2 [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a == y \n \t execute use \n \t until a == 2 [end]|[start] policy a := \n \t if b == 2 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until b >= y [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until b != 1 [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until position > x [end]|[start] policy b := \n \t if b : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 0 \n \t execute build \n \t until a > 1 [end]|[start] policy b := \n \t if position >= y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= y \n \t execute jump \n \t until inventory != y [end]|[start] option : \n \t init position > y \n \t execute use \n \t until b != x [end]|[start] policy b := \n \t if a == y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= x \n \t execute jump \n \t until position < 2 [end]|[start] option : \n \t init position \n \t execute jump \n \t until a != x [end]|[start] policy a := \n \t if b < x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 0 \n \t execute run \n \t until a >= x [end]|[start] option : \n \t init position >= x \n \t execute build \n \t until a <= x [end]|[start] option : \n \t init b > x \n \t execute use \n \t until b > 1 [end]|[start] policy a := \n \t if a >= 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b < x \n \t execute run \n \t until inventory <= 1 [end]|[start] policy b := \n \t if position != 2 : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a \n \t execute jump \n \t until inventory > x [end]|[start] policy a := \n \t if a != x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until a > 2 [end]|[start] option : \n \t init x \n \t execute use \n \t until position != y [end]|[start] policy a := \n \t if a < 1 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b > x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until inventory >= 0 [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= x \n \t execute run \n \t until inventory == x [end]|[start] policy a := \n \t if position == 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 0 \n \t execute run \n \t until position == 0 [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 2 \n \t execute build \n \t until a < x [end]|[start] policy a := \n \t if b <= x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 0 \n \t execute jump \n \t until position >= 0 [end]|[start] policy b := \n \t if position >= x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 1 \n \t execute jump \n \t until inventory == 2 [end]|[start] option : \n \t init b < x \n \t execute build \n \t until position >= 2 [end]|[start] option : \n \t init b < y \n \t execute build \n \t until a > 2 [end]|[start] policy b := \n \t if iron < x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= 2 : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 2 \n \t execute run \n \t until b >= 0 [end]|[start] option : \n \t init b <= 2 \n \t execute jump \n \t until position == 1 [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until b > 2 [end]|[start] policy a := \n \t if position < 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until b > x [end]|[start] option : \n \t init inventory > 2 \n \t execute find \n \t until inventory <= 0 [end]|[start] option : \n \t init position <= 1 \n \t execute jump \n \t until b < y [end]|[start] option : \n \t init position \n \t execute use \n \t until a >= x [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b > y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 2 \n \t execute use \n \t until b > 1 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= y \n \t execute jump \n \t until inventory <= 1 [end]|[start] policy b := \n \t if position < y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 0 \n \t execute build \n \t until a <= x [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until b [end]|[start] policy b := \n \t if b >= x : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= y \n \t execute find \n \t until inventory <= 2 [end]|[start] option : \n \t init a >= 0 \n \t execute build \n \t until inventory <= 0 [end]|[start] option : \n \t init a == 1 \n \t execute build \n \t until inventory >= 1 [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until b == y [end]|[start] option : \n \t init b > y \n \t execute jump \n \t until a > 0 [end]|[start] option : \n \t init b < 1 \n \t execute run \n \t until position > x [end]|[start] option : \n \t init position == 0 \n \t execute jump \n \t until inventory >= x [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until position < 0 [end]|[start] option : \n \t init a == y \n \t execute build \n \t until b != x [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position != y \n \t execute use \n \t until b < y [end]|[start] option : \n \t init b > x \n \t execute find \n \t until inventory == x [end]|[start] option : \n \t init position <= x \n \t execute build \n \t until position >= x [end]|[start] policy a := \n \t if position != 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 1 \n \t execute jump \n \t until inventory > 0 [end]|[start] policy a := \n \t if b == 2 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == y \n \t execute find \n \t until inventory != y [end]|[start] policy b := \n \t if b >= y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 1 \n \t execute use \n \t until a == y [end]|[start] option : \n \t init position >= 0 \n \t execute use \n \t until position != y [end]|[start] option : \n \t init a < 2 \n \t execute build \n \t until b > 1 [end]|[start] option : \n \t init a <= 1 \n \t execute jump \n \t until position != 2 [end]|[start] option : \n \t init position >= 0 \n \t execute build \n \t until a < 2 [end]|[start] option : \n \t init a <= 0 \n \t execute run \n \t until a <= x [end]|[start] policy a := \n \t if position < 1 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init y \n \t execute build \n \t until inventory < 0 [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until inventory < x [end]|[start] option : \n \t init position == 0 \n \t execute jump \n \t until position > 0 [end]|[start] policy a := \n \t if b == 2 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until position > 1 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until position <= 1 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 2 \n \t execute find \n \t until b != 0 [end]|[start] policy b := \n \t if iron <= x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until a != x [end]|[start] policy a := \n \t if iron <= y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute find \n \t until b >= 1 [end]|[start] policy a := \n \t if a == 1 : \n \t execute jump \n [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until b >= 1 [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until a <= 0 [end]|[start] policy b := \n \t if b >= y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 0 \n \t execute build \n \t until inventory == x [end]|[start] policy b := \n \t if position : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 1 \n \t execute build \n \t until b <= 1 [end]|[start] policy a := \n \t if b > 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > y : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until b <= 2 [end]|[start] policy a := \n \t if b > 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until position < x [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until position <= y [end]|[start] policy b := \n \t if iron < 2 : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 2 \n \t execute run \n \t until a != y [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until position == y [end]|[start] policy b := \n \t if a == x : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until b > 0 [end]|[start] policy a := \n \t if position != 2 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute build \n \t until inventory > y [end]|[start] policy a := \n \t if b <= y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until inventory != 1 [end]|[start] option : \n \t init a < x \n \t execute build \n \t until a >= y [end]|[start] option : \n \t init a >= 2 \n \t execute build \n \t until position >= 1 [end]|[start] option : \n \t init position \n \t execute run \n \t until a != y [end]|[start] policy a := \n \t if a > y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 0 \n \t execute run \n \t until inventory <= 2 [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != y \n \t execute run \n \t until y [end]|[start] policy a := \n \t if position == 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b <= x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < y \n \t execute build \n \t until position >= 2 [end]|[start] option : \n \t init b <= x \n \t execute use \n \t until position >= x [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until a != 0 [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until a != y [end]|[start] option : \n \t init a > y \n \t execute use \n \t until a != 1 [end]|[start] option : \n \t init b < 2 \n \t execute find \n \t until inventory == 2 [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until position != 1 [end]|[start] policy b := \n \t if position >= y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a < x \n \t execute use \n \t until inventory == 0 [end]|[start] policy b := \n \t if a != y : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= y \n \t execute build \n \t until a < 2 [end]|[start] option : \n \t init inventory < x \n \t execute find \n \t until inventory >= x [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until inventory >= y [end]|[start] policy b := \n \t if iron < y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until b < y [end]|[start] policy b := \n \t if a != x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position >= y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 1 \n \t execute jump \n \t until inventory < 2 [end]|[start] option : \n \t init inventory != 2 \n \t execute use \n \t until b < 1 [end]|[start] option : \n \t init b >= 1 \n \t execute find \n \t until inventory == y [end]|[start] policy a := \n \t if iron == 2 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until a != 0 [end]|[start] policy b := \n \t if position == x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < x \n \t execute run \n \t until position [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until position > 1 [end]|[start] policy a := \n \t if b <= x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b > y \n \t execute run \n \t until b < x [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until b < x [end]|[start] option : \n \t init a != y \n \t execute use \n \t until inventory == x [end]|[start] option : \n \t init inventory > 1 \n \t execute find \n \t until b != 2 [end]|[start] policy a := \n \t if a != 0 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > x \n \t execute use \n \t until b >= x [end]|[start] policy a := \n \t if position > 2 : \n \t execute jump \n [end]|[start] policy b := \n \t if position >= x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != 2 \n \t execute use \n \t until b >= 1 [end]|[start] policy b := \n \t if iron <= y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until inventory <= y [end]|[start] option : \n \t init position > x \n \t execute run \n \t until inventory < 1 [end]|[start] policy a := \n \t if iron <= y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until position > 2 [end]|[start] option : \n \t init b >= x \n \t execute build \n \t until position <= 0 [end]|[start] policy b := \n \t if a >= x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 1 \n \t execute build \n \t until position == 0 [end]|[start] policy a := \n \t if b != 1 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b > x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= x \n \t execute find \n \t until inventory != 2 [end]|[start] policy b := \n \t if a : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until b <= y [end]|[start] policy a := \n \t if a < y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until a == y [end]|[start] option : \n \t init a >= 2 \n \t execute jump \n \t until inventory <= x [end]|[start] policy b := \n \t if position : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute find \n \t until b == 2 [end]|[start] option : \n \t init a > 2 \n \t execute run \n \t until a == 0 [end]|[start] policy b := \n \t if position != y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != y \n \t execute build \n \t until a > x [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == y \n \t execute jump \n \t until inventory >= 0 [end]|[start] option : \n \t init b != x \n \t execute jump \n \t until b <= y [end]|[start] option : \n \t init a >= 0 \n \t execute build \n \t until position == 0 [end]|[start] policy a := \n \t if position != 1 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a \n \t execute run \n \t until position < 1 [end]|[start] option : \n \t init position == 1 \n \t execute build \n \t until b < 2 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until a <= x [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 2 \n \t execute build \n \t until b < 0 [end]|[start] policy a := \n \t if a > x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until b != 2 [end]|[start] policy a := \n \t if b < y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != y \n \t execute find \n \t until inventory <= x [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until a >= 0 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == x \n \t execute run \n \t until inventory != 1 [end]|[start] policy b := \n \t if b <= x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 1 \n \t execute build \n \t until inventory > 2 [end]|[start] option : \n \t init position <= x \n \t execute jump \n \t until inventory >= y [end]|[start] policy b := \n \t if position >= y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 1 \n \t execute build \n \t until position <= x [end]|[start] policy a := \n \t if iron > 2 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 1 \n \t execute run \n \t until inventory == 1 [end]|[start] policy a := \n \t if a != x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until b <= 2 [end]|[start] policy a := \n \t if a != 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron < y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b < y \n \t execute run \n \t until inventory < 1 [end]|[start] policy a := \n \t if b > 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 2 \n \t execute find \n \t until position <= y [end]|[start] option : \n \t init b > x \n \t execute run \n \t until inventory == 0 [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until b < 2 [end]|[start] option : \n \t init a == 0 \n \t execute find \n \t until inventory <= 2 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 1 \n \t execute find \n \t until a > 1 [end]|[start] policy a := \n \t if iron >= x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a < y \n \t execute use \n \t until inventory == 1 [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position < x \n \t execute run \n \t until b >= y [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute build \n \t until b == x [end]|[start] policy a := \n \t if iron != 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position <= y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until position > 2 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until inventory > y [end]|[start] option : \n \t init position >= 1 \n \t execute build \n \t until inventory < y [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until position >= x [end]|[start] option : \n \t init position == 2 \n \t execute jump \n \t until position < y [end]|[start] policy a := \n \t if b != 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init y \n \t execute jump \n \t until position <= 2 [end]|[start] option : \n \t init inventory >= 1 \n \t execute run \n \t until position <= y [end]|[start] policy b := \n \t if position != y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until b != 2 [end]|[start] policy b := \n \t if position == x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 1 \n \t execute find \n \t until a > 0 [end]|[start] policy a := \n \t if position > x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 1 \n \t execute run \n \t until inventory != 0 [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until inventory >= y [end]|[start] option : \n \t init inventory >= 0 \n \t execute jump \n \t until b < 0 [end]|[start] option : \n \t init position < 1 \n \t execute find \n \t until a <= y [end]|[start] option : \n \t init a < 2 \n \t execute build \n \t until position < 0 [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until inventory >= x [end]|[start] policy a := \n \t if b >= 2 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 1 \n \t execute build \n \t until a == 0 [end]|[start] policy a := \n \t if b != 2 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b > x \n \t execute build \n \t until inventory > 1 [end]|[start] option : \n \t init position >= 2 \n \t execute find \n \t until b != 1 [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until b <= y [end]|[start] policy a := \n \t if position < y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 2 \n \t execute run \n \t until inventory == 1 [end]|[start] policy b := \n \t if position <= 0 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 2 \n \t execute run \n \t until inventory <= y [end]|[start] policy a := \n \t if a <= 2 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b > y \n \t execute build \n \t until inventory != y [end]|[start] policy b := \n \t if a > x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= x \n \t execute run \n \t until b > y [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b == y \n \t execute build \n \t until position != 0 [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until inventory < 0 [end]|[start] policy b := \n \t if position >= y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a > x \n \t execute use \n \t until b == 2 [end]|[start] option : \n \t init position == 1 \n \t execute build \n \t until position == 0 [end]|[start] option : \n \t init b \n \t execute run \n \t until inventory <= 0 [end]|[start] policy b := \n \t if iron <= y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b \n \t execute jump \n \t until position >= 0 [end]|[start] policy a := \n \t if position > y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 0 \n \t execute jump \n \t until a [end]|[start] policy b := \n \t if a < x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= y \n \t execute run \n \t until position > y [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory \n \t execute use \n \t until inventory != 1 [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until b != 2 [end]|[start] option : \n \t init position > x \n \t execute use \n \t until position <= 2 [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 1 \n \t execute find \n \t until position > 2 [end]|[start] policy a := \n \t if b == 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a \n \t execute find \n \t until position >= y [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= 1 \n \t execute run \n \t until inventory [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a > y \n \t execute build \n \t until position < 1 [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until position <= x [end]|[start] policy b := \n \t if a <= y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < x \n \t execute build \n \t until a != 0 [end]|[start] option : \n \t init inventory > x \n \t execute use \n \t until position < 0 [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until position > 2 [end]|[start] policy a := \n \t if iron >= y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a != x \n \t execute jump \n \t until a < y [end]|[start] policy a := \n \t if position < 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until x [end]|[start] policy a := \n \t if b != x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position > y \n \t execute run \n \t until a < 1 [end]|[start] policy b := \n \t if iron : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a >= y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until b > y [end]|[start] option : \n \t init a == y \n \t execute run \n \t until position < 1 [end]|[start] policy a := \n \t if position < 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until inventory != 0 [end]|[start] policy b := \n \t if position == y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until a <= x [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until inventory >= x [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until inventory <= 0 [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position > x \n \t execute jump \n \t until position != y [end]|[start] option : \n \t init position >= 0 \n \t execute use \n \t until position != 0 [end]|[start] option : \n \t init position != y \n \t execute run \n \t until inventory >= 0 [end]|[start] policy a := \n \t if a : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 1 \n \t execute run \n \t until inventory == 2 [end]|[start] policy a := \n \t if position < 2 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until inventory < 1 [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until position != y [end]|[start] policy b := \n \t if a < y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until inventory < 0 [end]|[start] option : \n \t init b > x \n \t execute run \n \t until inventory != y [end]|[start] policy a := \n \t if a < y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 2 \n \t execute use \n \t until b >= 1 [end]|[start] policy b := \n \t if b != x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position < y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != x \n \t execute build \n \t until position >= y [end]|[start] policy a := \n \t if iron < y : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until position == y [end]|[start] option : \n \t init position >= 0 \n \t execute find \n \t until position < 0 [end]|[start] policy b := \n \t if a <= y : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until a == 0 [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until inventory != 2 [end]|[start] option : \n \t init a != y \n \t execute find \n \t until inventory <= y [end]|[start] option : \n \t init a <= y \n \t execute jump \n \t until position >= 1 [end]|[start] policy a := \n \t if iron == x : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= x \n \t execute jump \n \t until position >= x [end]|[start] option : \n \t init a < y \n \t execute build \n \t until b != y [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until inventory < y [end]|[start] option : \n \t init b != x \n \t execute find \n \t until position <= 0 [end]|[start] policy a := \n \t if iron >= y : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 0 \n \t execute run \n \t until b >= 1 [end]|[start] policy b := \n \t if a < 2 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 0 \n \t execute use \n \t until inventory != y [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position < y \n \t execute use \n \t until position >= 2 [end]|[start] option : \n \t init position > x \n \t execute find \n \t until position > y [end]|[start] policy a := \n \t if iron <= y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a != x \n \t execute use \n \t until b != 1 [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until a < x [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until a <= y [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until inventory == x [end]|[start] policy a := \n \t if b != 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 1 \n \t execute use \n \t until position == 2 [end]|[start] option : \n \t init inventory < 1 \n \t execute use \n \t until b < x [end]|[start] policy a := \n \t if iron > 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 0 \n \t execute jump \n \t until b < y [end]|[start] policy b := \n \t if a < y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b <= y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < y \n \t execute run \n \t until inventory < 0 [end]|[start] policy a := \n \t if a < x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until a != x [end]|[start] option : \n \t init inventory != x \n \t execute build \n \t until b >= 0 [end]|[start] policy a := \n \t if a == 0 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a < y \n \t execute use \n \t until b < 0 [end]|[start] policy b := \n \t if iron == x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 2 \n \t execute find \n \t until a < 0 [end]|[start] policy b := \n \t if position > x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until a > x [end]|[start] option : \n \t init b > 1 \n \t execute use \n \t until inventory >= x [end]|[start] option : \n \t init a == x \n \t execute find \n \t until b > y [end]|[start] option : \n \t init a != 1 \n \t execute find \n \t until position >= 0 [end]|[start] option : \n \t init a >= 2 \n \t execute build \n \t until position == 1 [end]|[start] option : \n \t init position < x \n \t execute find \n \t until b <= 2 [end]|[start] option : \n \t init position != x \n \t execute find \n \t until a >= y [end]|[start] option : \n \t init b != 0 \n \t execute jump \n \t until inventory >= x [end]|[start] policy b := \n \t if b == x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until position != 1 [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 2 \n \t execute run \n \t until position <= y [end]|[start] policy b := \n \t if a < y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position < y \n \t execute run \n \t until position > x [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until b != 2 [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until position < y [end]|[start] policy b := \n \t if position > y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 2 \n \t execute run \n \t until position == 1 [end]|[start] option : \n \t init a <= 2 \n \t execute find \n \t until inventory > 1 [end]|[start] option : \n \t init inventory > 1 \n \t execute jump \n \t until b >= 1 [end]|[start] option : \n \t init inventory >= 0 \n \t execute run \n \t until inventory < y [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until inventory >= 0 [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until a > 0 [end]|[start] option : \n \t init b > 0 \n \t execute use \n \t until position < 2 [end]|[start] option : \n \t init a != 0 \n \t execute run \n \t until position != 1 [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until inventory != y [end]|[start] policy a := \n \t if a > 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until b >= x [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until position < 2 [end]|[start] option : \n \t init a == x \n \t execute find \n \t until a >= 1 [end]|[start] option : \n \t init position < x \n \t execute build \n \t until inventory > 1 [end]|[start] policy a := \n \t if a == 0 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory \n \t execute run \n \t until b <= 0 [end]|[start] option : \n \t init position == y \n \t execute build \n \t until a < x [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until inventory < x [end]|[start] policy a := \n \t if a <= 2 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a \n \t execute jump \n \t until a >= 1 [end]|[start] option : \n \t init position \n \t execute use \n \t until inventory != x [end]|[start] policy a := \n \t if iron > x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 1 \n \t execute jump \n \t until b < 1 [end]|[start] option : \n \t init b != 0 \n \t execute build \n \t until b == 2 [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until position == 2 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until b <= 1 [end]|[start] policy a := \n \t if position : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until inventory != 1 [end]|[start] option : \n \t init position == x \n \t execute build \n \t until position > 1 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until y [end]|[start] policy b := \n \t if a != x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 0 \n \t execute find \n \t until a >= 0 [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until a >= y [end]|[start] option : \n \t init position >= 1 \n \t execute find \n \t until a < 2 [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until b <= 1 [end]|[start] option : \n \t init inventory < 2 \n \t execute run \n \t until inventory [end]|[start] option : \n \t init position <= 2 \n \t execute find \n \t until b >= y [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position > y \n \t execute find \n \t until a <= 1 [end]|[start] option : \n \t init inventory <= x \n \t execute use \n \t until inventory >= 1 [end]|[start] option : \n \t init b != 0 \n \t execute find \n \t until a >= 0 [end]|[start] policy a := \n \t if iron > x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b == x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init y \n \t execute jump \n \t until b < y [end]|[start] policy a := \n \t if b >= 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until a == 2 [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until b <= y [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 0 \n \t execute build \n \t until a <= 0 [end]|[start] option : \n \t init position < y \n \t execute use \n \t until position >= y [end]|[start] policy b := \n \t if b >= 0 : \n \t execute run \n [end]|[start] option : \n \t init b == 1 \n \t execute jump \n \t until position > x [end]|[start] policy b := \n \t if a != y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until a == 2 [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b != x \n \t execute run \n \t until b >= x [end]|[start] policy a := \n \t if iron >= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 1 \n \t execute find \n \t until position > 0 [end]|[start] policy a := \n \t if position > 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 0 \n \t execute build \n \t until position <= y [end]|[start] policy a := \n \t if iron <= y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < x \n \t execute use \n \t until b != 1 [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until a >= 0 [end]|[start] option : \n \t init b > 1 \n \t execute build \n \t until position < x [end]|[start] policy b := \n \t if b <= x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= x \n \t execute jump \n \t until inventory == x [end]|[start] policy a := \n \t if iron != y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position != y \n \t execute build \n \t until y [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b == x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 0 \n \t execute use \n \t until inventory < x [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b <= x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until inventory <= x [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until inventory == 2 [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b == 2 \n \t execute jump \n \t until position >= x [end]|[start] policy a := \n \t if position >= 0 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 1 \n \t execute find \n \t until b != 0 [end]|[start] option : \n \t init b != y \n \t execute use \n \t until b < x [end]|[start] policy a := \n \t if b >= 1 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init y \n \t execute jump \n \t until position >= 0 [end]|[start] policy b := \n \t if iron > 2 : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until b >= y [end]|[start] policy a := \n \t if a <= y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b > y \n \t execute use \n \t until a != y [end]|[start] policy b := \n \t if iron == y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b < x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position \n \t execute run \n \t until a != 2 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a <= y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position > y \n \t execute run \n \t until a > 1 [end]|[start] policy b := \n \t if a == y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until inventory > y [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until position <= 1 [end]|[start] policy a := \n \t if a < 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b != y \n \t execute use \n \t until a == 0 [end]|[start] policy a := \n \t if a < 1 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until inventory > y [end]|[start] policy b := \n \t if position >= x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until inventory < x [end]|[start] policy a := \n \t if iron < 0 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init x \n \t execute build \n \t until inventory == 0 [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until a <= 0 [end]|[start] option : \n \t init b >= 0 \n \t execute jump \n \t until a > 2 [end]|[start] policy b := \n \t if position >= x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < 0 : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until a <= y [end]|[start] policy b := \n \t if position > y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != x \n \t execute jump \n \t until a <= 0 [end]|[start] policy b := \n \t if iron != y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until inventory < 1 [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until position != x [end]|[start] policy b := \n \t if iron <= 1 : \n \t execute build \n [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until inventory > y [end]|[start] policy a := \n \t if a <= x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= y \n \t execute run \n \t until y [end]|[start] policy a := \n \t if position > x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= 1 : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute jump \n \t until x [end]|[start] policy a := \n \t if b > x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 2 \n \t execute jump \n \t until b <= 0 [end]|[start] policy b := \n \t if iron < y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until a == y [end]|[start] policy b := \n \t if iron >= x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 1 \n \t execute find \n \t until b < y [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 2 \n \t execute build \n \t until b [end]|[start] policy a := \n \t if b >= 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until a != x [end]|[start] policy a := \n \t if iron != 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until a <= 0 [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until a >= y [end]|[start] policy b := \n \t if position < 1 : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 2 \n \t execute use \n \t until inventory == y [end]|[start] policy b := \n \t if iron <= y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init x \n \t execute run \n \t until b < 2 [end]|[start] option : \n \t init a == 1 \n \t execute build \n \t until a == 1 [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until b != 0 [end]|[start] policy b := \n \t if position >= y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 2 \n \t execute find \n \t until a == 2 [end]|[start] policy b := \n \t if position <= 2 : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute use \n \t until position < 1 [end]|[start] policy a := \n \t if iron < 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position > y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until inventory != 1 [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until inventory == y [end]|[start] policy a := \n \t if b <= 2 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= x \n \t execute jump \n \t until a >= x [end]|[start] policy b := \n \t if a <= x : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > x \n \t execute use \n \t until b >= x [end]|[start] policy b := \n \t if a <= y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until b >= y [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until inventory < 2 [end]|[start] policy a := \n \t if a >= x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position > y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until position == 0 [end]|[start] option : \n \t init position \n \t execute jump \n \t until inventory < y [end]|[start] option : \n \t init position > 0 \n \t execute build \n \t until a <= y [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 0 \n \t execute jump \n \t until position >= 0 [end]|[start] option : \n \t init b >= x \n \t execute build \n \t until position >= 2 [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 0 \n \t execute use \n \t until a <= x [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 2 \n \t execute build \n \t until position > x [end]|[start] option : \n \t init b == x \n \t execute run \n \t until inventory < 1 [end]|[start] option : \n \t init inventory != y \n \t execute build \n \t until a [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 2 \n \t execute build \n \t until b >= x [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until inventory >= 2 [end]|[start] option : \n \t init a > y \n \t execute use \n \t until position <= 1 [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != x \n \t execute jump \n \t until a > 0 [end]|[start] option : \n \t init position != 0 \n \t execute use \n \t until inventory <= 2 [end]|[start] policy a := \n \t if a == 0 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until a > 2 [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until b < 0 [end]|[start] option : \n \t init a < y \n \t execute use \n \t until a > 1 [end]|[start] option : \n \t init b > y \n \t execute find \n \t until a != 0 [end]|[start] policy a := \n \t if a != 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= x \n \t execute use \n \t until position > y [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until a == 0 [end]|[start] option : \n \t init b == y \n \t execute run \n \t until inventory == 0 [end]|[start] policy a := \n \t if position <= 2 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= y \n \t execute jump \n \t until inventory != x [end]|[start] option : \n \t init position >= 2 \n \t execute use \n \t until inventory > 2 [end]|[start] option : \n \t init inventory > 2 \n \t execute run \n \t until a != 2 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron != x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= 2 : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 1 \n \t execute use \n \t until inventory > y [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b < x : \n \t execute build \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute use \n \t until a >= 0 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 0 \n \t execute use \n \t until inventory > x [end]|[start] option : \n \t init b >= 1 \n \t execute find \n \t until position == x [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until a == y [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until b >= y [end]|[start] policy a := \n \t if b == 2 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until position < 2 [end]|[start] policy a := \n \t if position != 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until b > 0 [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until position <= x [end]|[start] option : \n \t init a > x \n \t execute find \n \t until b > 0 [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != x \n \t execute jump \n \t until position < 1 [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until inventory == 2 [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until position <= x [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until b > 2 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute run \n \t until b == x [end]|[start] option : \n \t init a >= 0 \n \t execute build \n \t until position > 0 [end]|[start] policy b := \n \t if position >= x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until a >= 2 [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until inventory < x [end]|[start] policy b := \n \t if iron : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron > y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != x \n \t execute find \n \t until inventory > 0 [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until inventory < 0 [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute find \n \t until inventory == x [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until inventory <= 2 [end]|[start] option : \n \t init inventory < 0 \n \t execute run \n \t until inventory >= 1 [end]|[start] policy b := \n \t if a == 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until a == x [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until position == 0 [end]|[start] policy a := \n \t if a > y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 1 \n \t execute use \n \t until position < y [end]|[start] option : \n \t init inventory > 2 \n \t execute find \n \t until b < y [end]|[start] policy b := \n \t if position == 2 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until b != 2 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until position != x [end]|[start] policy a := \n \t if a > 2 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until b < y [end]|[start] option : \n \t init a != x \n \t execute use \n \t until inventory > 2 [end]|[start] policy a := \n \t if a != 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until inventory == 2 [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position > y \n \t execute find \n \t until b == 1 [end]|[start] policy b := \n \t if a == x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 0 \n \t execute find \n \t until inventory < 0 [end]|[start] option : \n \t init b < 1 \n \t execute jump \n \t until inventory > 2 [end]|[start] policy b := \n \t if iron > 2 : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= y \n \t execute find \n \t until a >= 2 [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < x : \n \t execute run \n [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until position != 1 [end]|[start] policy a := \n \t if iron < 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute run \n \t until a != x [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until position != y [end]|[start] policy a := \n \t if a == x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until position < y [end]|[start] policy b := \n \t if a < 2 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until a <= 0 [end]|[start] policy b := \n \t if b >= y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init y \n \t execute run \n \t until position >= 0 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 2 \n \t execute find \n \t until a [end]|[start] policy a := \n \t if iron >= x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 1 \n \t execute find \n \t until position <= x [end]|[start] option : \n \t init inventory < x \n \t execute find \n \t until position <= x [end]|[start] policy a := \n \t if iron < 0 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 0 \n \t execute find \n \t until inventory == 2 [end]|[start] option : \n \t init inventory <= 2 \n \t execute run \n \t until position < 0 [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until a < 0 [end]|[start] policy a := \n \t if iron >= y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a < x \n \t execute use \n \t until a == 1 [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until position != 1 [end]|[start] option : \n \t init a > 0 \n \t execute find \n \t until inventory == 2 [end]|[start] policy b := \n \t if position == x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until position <= 0 [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until a < y [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= y : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 2 \n \t execute run \n \t until inventory < x [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position < x \n \t execute find \n \t until inventory > 1 [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until inventory [end]|[start] option : \n \t init inventory \n \t execute run \n \t until position [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until a >= 2 [end]|[start] option : \n \t init position > x \n \t execute jump \n \t until position == 2 [end]|[start] option : \n \t init a == x \n \t execute build \n \t until b == 2 [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until b == y [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < x \n \t execute build \n \t until b == 2 [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until b <= y [end]|[start] policy b := \n \t if iron >= y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a < y \n \t execute find \n \t until b != x [end]|[start] policy a := \n \t if b >= y : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 1 \n \t execute use \n \t until position > y [end]|[start] policy a := \n \t if b >= 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until inventory >= y [end]|[start] option : \n \t init b < 2 \n \t execute use \n \t until inventory <= 0 [end]|[start] option : \n \t init position == 0 \n \t execute find \n \t until position >= 0 [end]|[start] option : \n \t init b > 0 \n \t execute build \n \t until position != 2 [end]|[start] option : \n \t init position >= 2 \n \t execute run \n \t until b <= 0 [end]|[start] option : \n \t init a <= x \n \t execute jump \n \t until b > y [end]|[start] policy a := \n \t if a >= x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until a == 0 [end]|[start] option : \n \t init position != y \n \t execute find \n \t until b <= y [end]|[start] policy a := \n \t if position < 0 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 1 \n \t execute jump \n \t until b > 0 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position == y \n \t execute use \n \t until inventory <= 0 [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until position > y [end]|[start] option : \n \t init b == x \n \t execute use \n \t until inventory < y [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a != x \n \t execute find \n \t until inventory <= 0 [end]|[start] policy a := \n \t if a > y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until y [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until inventory == x [end]|[start] policy a := \n \t if a < 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until b >= y [end]|[start] policy a := \n \t if iron > x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position < y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 2 \n \t execute build \n \t until position <= x [end]|[start] policy a := \n \t if b != y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init x \n \t execute jump \n \t until position < x [end]|[start] option : \n \t init b == 1 \n \t execute find \n \t until inventory != 0 [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until position != y [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until position < 0 [end]|[start] policy a := \n \t if position < 1 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until b == y [end]|[start] policy a := \n \t if iron == 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b == y \n \t execute build \n \t until position <= 1 [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until inventory [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until b >= 0 [end]|[start] policy b := \n \t if b < y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < x \n \t execute use \n \t until b > 0 [end]|[start] policy a := \n \t if iron == y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= y \n \t execute find \n \t until a <= 1 [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until b == 0 [end]|[start] policy b := \n \t if a >= y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a == x \n \t execute find \n \t until inventory <= 2 [end]|[start] policy a := \n \t if b <= y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b >= x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until b <= 0 [end]|[start] policy a := \n \t if a > y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until a != 2 [end]|[start] option : \n \t init inventory < 0 \n \t execute find \n \t until a >= 1 [end]|[start] option : \n \t init b == y \n \t execute jump \n \t until inventory <= 2 [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until inventory > 2 [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until a > 0 [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b < y \n \t execute run \n \t until a > 1 [end]|[start] policy a := \n \t if iron < 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until inventory <= 2 [end]|[start] policy b := \n \t if iron >= y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 2 \n \t execute run \n \t until inventory > 0 [end]|[start] option : \n \t init position < x \n \t execute build \n \t until position <= x [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= x \n \t execute find \n \t until position < 2 [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until position != y [end]|[start] policy a := \n \t if a != x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < x \n \t execute find \n \t until inventory <= y [end]|[start] policy a := \n \t if position == 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < x \n \t execute build \n \t until position == 2 [end]|[start] policy b := \n \t if a >= y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < y \n \t execute jump \n \t until inventory <= 1 [end]|[start] option : \n \t init y \n \t execute build \n \t until position != 1 [end]|[start] option : \n \t init b != 2 \n \t execute jump \n \t until a > 0 [end]|[start] policy a := \n \t if position == 2 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < y : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= y \n \t execute jump \n \t until inventory == 2 [end]|[start] policy b := \n \t if position == y : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until inventory < x [end]|[start] option : \n \t init inventory >= 0 \n \t execute use \n \t until b > 0 [end]|[start] option : \n \t init inventory <= x \n \t execute use \n \t until a > 2 [end]|[start] policy b := \n \t if b != y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 2 \n \t execute find \n \t until b != x [end]|[start] option : \n \t init position == 2 \n \t execute build \n \t until a >= 1 [end]|[start] policy a := \n \t if b != y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b > y \n \t execute use \n \t until b >= 0 [end]|[start] option : \n \t init b == x \n \t execute use \n \t until inventory > 1 [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute use \n \t until inventory <= 0 [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until b >= 1 [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until inventory > 1 [end]|[start] option : \n \t init a >= 1 \n \t execute run \n \t until position < 0 [end]|[start] policy a := \n \t if iron >= x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b > x \n \t execute find \n \t until a <= 2 [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < y \n \t execute run \n \t until position == 1 [end]|[start] option : \n \t init b <= y \n \t execute run \n \t until inventory [end]|[start] policy b := \n \t if position > y : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != x \n \t execute run \n \t until b != 2 [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until position >= 0 [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until b <= x [end]|[start] policy b := \n \t if a != y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 0 \n \t execute jump \n \t until position < 1 [end]|[start] option : \n \t init y \n \t execute build \n \t until inventory >= x [end]|[start] policy a := \n \t if b != 2 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until b > 1 [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until inventory <= x [end]|[start] option : \n \t init position >= 0 \n \t execute find \n \t until b == 2 [end]|[start] option : \n \t init position > x \n \t execute find \n \t until position < 2 [end]|[start] policy a := \n \t if b < y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 2 \n \t execute find \n \t until position <= 2 [end]|[start] option : \n \t init inventory >= x \n \t execute jump \n \t until b >= y [end]|[start] policy a := \n \t if position >= x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until inventory != 0 [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until a == 1 [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until b > x [end]|[start] policy a := \n \t if a < 1 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != 0 \n \t execute run \n \t until b == 2 [end]|[start] option : \n \t init inventory >= 2 \n \t execute jump \n \t until a > x [end]|[start] policy a := \n \t if position > y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < x \n \t execute run \n \t until position >= 2 [end]|[start] option : \n \t init inventory < 0 \n \t execute build \n \t until b < y [end]|[start] policy a := \n \t if a <= x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until b == 0 [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b \n \t execute use \n \t until a >= x [end]|[start] option : \n \t init a == 1 \n \t execute jump \n \t until a >= x [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until a < 0 [end]|[start] policy b := \n \t if b < 1 : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < x \n \t execute use \n \t until a >= y [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until position != y [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until position >= y [end]|[start] policy a := \n \t if position != 1 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position != x \n \t execute build \n \t until position >= 1 [end]|[start] policy b := \n \t if b != x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until b > 2 [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until inventory >= 0 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until position > 0 [end]|[start] policy b := \n \t if a == 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b == y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until b >= y [end]|[start] option : \n \t init a \n \t execute build \n \t until a <= 2 [end]|[start] policy a := \n \t if a >= 1 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute find \n [end]|[start] policy a := \n \t if position != x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == x \n \t execute build \n \t until a == 1 [end]|[start] policy b := \n \t if b <= x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 2 \n \t execute jump \n \t until a == 2 [end]|[start] policy a := \n \t if position > y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until a >= x [end]|[start] policy b := \n \t if iron <= y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 0 \n \t execute run \n \t until inventory < y [end]|[start] policy a := \n \t if b <= y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until inventory >= x [end]|[start] policy b := \n \t if iron >= y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= x \n \t execute use \n \t until a <= 0 [end]|[start] policy a := \n \t if a < x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position <= x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < y \n \t execute run \n \t until inventory == x [end]|[start] policy a := \n \t if b != 2 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position < y \n \t execute use \n \t until a >= y [end]|[start] policy a := \n \t if position > x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position == x \n \t execute build \n \t until b >= 1 [end]|[start] option : \n \t init position < 1 \n \t execute use \n \t until b [end]|[start] option : \n \t init inventory > y \n \t execute jump \n \t until position > 2 [end]|[start] option : \n \t init position == x \n \t execute run \n \t until a < 0 [end]|[start] policy a := \n \t if a <= 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= y \n \t execute find \n \t until inventory == y [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position > x \n \t execute use \n \t until position == 1 [end]|[start] policy a := \n \t if a != 1 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != y : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until position != 2 [end]|[start] option : \n \t init position < x \n \t execute build \n \t until position < 2 [end]|[start] policy a := \n \t if position <= x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until inventory != 2 [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until position <= y [end]|[start] policy a := \n \t if iron > y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 1 \n \t execute jump \n \t until b < x [end]|[start] option : \n \t init x \n \t execute build \n \t until position <= 2 [end]|[start] policy b := \n \t if b != y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until position < 1 [end]|[start] policy b := \n \t if b : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == x \n \t execute run \n \t until b == y [end]|[start] option : \n \t init b != y \n \t execute run \n \t until position < 1 [end]|[start] policy b := \n \t if b < y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a \n \t execute use \n \t until a == y [end]|[start] option : \n \t init a > y \n \t execute run \n \t until inventory == 2 [end]|[start] policy a := \n \t if position > 2 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until a != y [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a \n \t execute find \n \t until position < 1 [end]|[start] policy a := \n \t if position == 2 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until a == 2 [end]|[start] option : \n \t init inventory <= 1 \n \t execute jump \n \t until inventory == 2 [end]|[start] option : \n \t init a != y \n \t execute use \n \t until b [end]|[start] policy b := \n \t if a <= y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b < y \n \t execute run \n \t until a != 1 [end]|[start] policy a := \n \t if a > 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != x \n \t execute jump \n \t until a > y [end]|[start] policy a := \n \t if a > 0 : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b == y \n \t execute run \n \t until b > 2 [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until a >= y [end]|[start] policy a := \n \t if b < y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until a < 1 [end]|[start] policy a := \n \t if a < 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until position == 1 [end]|[start] option : \n \t init position != x \n \t execute build \n \t until position <= x [end]|[start] policy a := \n \t if iron != x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until a == 2 [end]|[start] policy a := \n \t if b : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until position <= 2 [end]|[start] option : \n \t init a != 2 \n \t execute jump \n \t until inventory <= 0 [end]|[start] policy b := \n \t if position == y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until inventory <= y [end]|[start] option : \n \t init inventory < x \n \t execute find \n \t until inventory != y [end]|[start] option : \n \t init position == 2 \n \t execute find \n \t until position == 0 [end]|[start] option : \n \t init b >= x \n \t execute build \n \t until a == y [end]|[start] option : \n \t init a <= x \n \t execute jump \n \t until b >= 0 [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until position <= x [end]|[start] option : \n \t init b > 1 \n \t execute use \n \t until position < 1 [end]|[start] option : \n \t init a == 0 \n \t execute run \n \t until inventory == x [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b == y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init y \n \t execute run \n \t until b < 0 [end]|[start] option : \n \t init a > 2 \n \t execute use \n \t until position < 1 [end]|[start] policy b := \n \t if b >= x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position != x \n \t execute jump \n \t until inventory == x [end]|[start] option : \n \t init a > x \n \t execute run \n \t until b <= 1 [end]|[start] policy a := \n \t if b != 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 1 \n \t execute build \n \t until inventory < 2 [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until inventory != x [end]|[start] option : \n \t init a >= 0 \n \t execute find \n \t until a > 1 [end]|[start] policy a := \n \t if position > 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position >= y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 1 \n \t execute find \n \t until a <= y [end]|[start] policy b := \n \t if a == x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until inventory > x [end]|[start] option : \n \t init position > x \n \t execute find \n \t until b > 2 [end]|[start] policy a := \n \t if iron <= x : \n \t execute run \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until position == y [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b == x \n \t execute find \n \t until b > x [end]|[start] policy a := \n \t if a <= 2 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= x \n \t execute build \n \t until inventory >= 1 [end]|[start] option : \n \t init position == 1 \n \t execute build \n \t until inventory <= 0 [end]|[start] policy b := \n \t if position != x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron == x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 2 \n \t execute find \n \t until position < y [end]|[start] option : \n \t init inventory != 2 \n \t execute use \n \t until b >= x [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until inventory > 0 [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until a >= 2 [end]|[start] option : \n \t init a >= y \n \t execute build \n \t until position != y [end]|[start] policy a := \n \t if a <= 0 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 2 \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until position < y [end]|[start] option : \n \t init a == 1 \n \t execute jump \n \t until position <= 0 [end]|[start] policy a := \n \t if position == x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != x \n \t execute run \n \t until position <= 1 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until inventory <= y [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until a <= x [end]|[start] policy a := \n \t if a >= 2 : \n \t execute run \n [end]|[start] option : \n \t init a <= 0 \n \t execute find \n \t until inventory > 0 [end]|[start] policy a := \n \t if position > y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init x \n \t execute run \n \t until position < y [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until a >= 0 [end]|[start] option : \n \t init a <= x \n \t execute jump \n \t until b >= y [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until b <= x [end]|[start] policy b := \n \t if a != 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a == x \n \t execute build \n \t until position > 0 [end]|[start] policy a := \n \t if a >= x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == x : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until inventory <= 2 [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until b < 0 [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until a != 0 [end]|[start] policy a := \n \t if iron != y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until position >= y [end]|[start] option : \n \t init position < x \n \t execute use \n \t until b <= 0 [end]|[start] option : \n \t init a <= y \n \t execute find \n \t until a != 0 [end]|[start] option : \n \t init inventory != 0 \n \t execute run \n \t until inventory == 2 [end]|[start] policy a := \n \t if a < 2 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute run \n \t until inventory <= 1 [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until position <= 1 [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 1 \n \t execute run \n \t until b < x [end]|[start] policy a := \n \t if a > 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until position != 2 [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until b <= 0 [end]|[start] policy b := \n \t if a > x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until a == 2 [end]|[start] policy a := \n \t if position > y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 1 \n \t execute use \n \t until a < 2 [end]|[start] option : \n \t init a \n \t execute build \n \t until b < 1 [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until inventory <= 0 [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 2 \n \t execute run \n \t until a > x [end]|[start] option : \n \t init position == y \n \t execute find \n \t until position == y [end]|[start] policy a := \n \t if position > 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until inventory <= 2 [end]|[start] option : \n \t init position > y \n \t execute build \n \t until inventory != y [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until b <= 2 [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until inventory >= 2 [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until inventory < y [end]|[start] option : \n \t init b != y \n \t execute use \n \t until position >= 2 [end]|[start] policy b := \n \t if a < x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until position == 0 [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until inventory > 2 [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until inventory != 1 [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until position == 0 [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < y \n \t execute run \n \t until b == 0 [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until inventory == 0 [end]|[start] policy b := \n \t if position <= x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 0 \n \t execute build \n \t until b [end]|[start] option : \n \t init a >= 0 \n \t execute use \n \t until inventory <= 2 [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until inventory != x [end]|[start] policy b := \n \t if a > y : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position < x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b != y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 1 \n \t execute run \n \t until b != 1 [end]|[start] policy a := \n \t if a > x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 1 \n \t execute build \n \t until inventory < 1 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute use \n \t until inventory < 0 [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until b > 0 [end]|[start] policy b := \n \t if position > x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b < x \n \t execute use \n \t until b < x [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until position != y [end]|[start] policy a := \n \t if a == x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 1 \n \t execute find \n \t until a == x [end]|[start] policy a := \n \t if position == 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b < x \n \t execute find \n \t until position != 2 [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until position == 2 [end]|[start] policy a := \n \t if position > 1 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b == x \n \t execute run \n \t until inventory <= 2 [end]|[start] policy a := \n \t if position != x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b <= y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= y : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until b != x [end]|[start] policy a := \n \t if a != x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute jump \n \t until a <= 1 [end]|[start] option : \n \t init y \n \t execute find \n \t until inventory != 0 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a <= y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until position > y [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == y \n \t execute find \n \t until position < 0 [end]|[start] option : \n \t init b <= y \n \t execute find \n \t until position >= y [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until inventory >= x [end]|[start] option : \n \t init position == y \n \t execute build \n \t until position >= 0 [end]|[start] policy a := \n \t if b > 2 : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == x \n \t execute build \n \t until b <= y [end]|[start] option : \n \t init position < 2 \n \t execute use \n \t until b <= x [end]|[start] policy b := \n \t if b : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 0 \n \t execute use \n \t until a != 0 [end]|[start] policy b := \n \t if a > x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b > y \n \t execute jump \n \t until inventory > x [end]|[start] option : \n \t init position >= x \n \t execute find \n \t until a > 1 [end]|[start] option : \n \t init position <= 1 \n \t execute find \n \t until a < 2 [end]|[start] option : \n \t init position >= y \n \t execute jump \n \t until b == 1 [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until inventory == y [end]|[start] policy a := \n \t if position <= 2 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 1 \n \t execute jump \n \t until a [end]|[start] policy a := \n \t if b <= 2 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b \n \t execute find \n \t until a <= 2 [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a < y \n \t execute find \n \t until position == 2 [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until inventory == 1 [end]|[start] option : \n \t init position < 0 \n \t execute run \n \t until position <= 0 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position != x \n \t execute use \n \t until a != 1 [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until b <= 1 [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron != x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == x \n \t execute build \n \t until inventory != 2 [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until inventory == 0 [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until a > x [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until a > x [end]|[start] policy a := \n \t if position < 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a > y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute run \n \t until b <= 1 [end]|[start] option : \n \t init b <= x \n \t execute run \n \t until b != x [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until b <= 2 [end]|[start] policy b := \n \t if a != 2 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a > x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b >= y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position > x \n \t execute run \n \t until a == 0 [end]|[start] policy a := \n \t if b != x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory \n \t execute find \n \t until inventory > 1 [end]|[start] policy a := \n \t if b < 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 0 \n \t execute use \n \t until inventory > y [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until b < 2 [end]|[start] policy a := \n \t if position >= x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until b < x [end]|[start] policy a := \n \t if a == 1 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory \n \t execute jump \n \t until a > 2 [end]|[start] option : \n \t init b == y \n \t execute use \n \t until a != 0 [end]|[start] policy a := \n \t if a != 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until inventory >= 0 [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b < y : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until inventory <= x [end]|[start] policy a := \n \t if position == y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until inventory > 2 [end]|[start] policy b := \n \t if a <= x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 0 \n \t execute use \n \t until b < y [end]|[start] policy a := \n \t if b <= 1 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until inventory != 0 [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 2 \n \t execute build \n \t until inventory != 1 [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position == x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 1 \n \t execute use \n \t until position < y [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until position <= 2 [end]|[start] option : \n \t init a == x \n \t execute build \n \t until position >= 1 [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until b < 1 [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= y \n \t execute run \n \t until position > x [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until inventory <= y [end]|[start] option : \n \t init position != x \n \t execute use \n \t until b < x [end]|[start] policy a := \n \t if b >= 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b \n \t execute jump \n \t until b <= 0 [end]|[start] option : \n \t init position < 0 \n \t execute build \n \t until a != y [end]|[start] option : \n \t init position <= y \n \t execute run \n \t until a == 0 [end]|[start] option : \n \t init a == 1 \n \t execute build \n \t until position >= x [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b > y \n \t execute jump \n \t until a > x [end]|[start] policy b := \n \t if a == x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != y \n \t execute use \n \t until b == y [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until inventory > 0 [end]|[start] option : \n \t init inventory < x \n \t execute run \n \t until inventory == 2 [end]|[start] policy b := \n \t if position > y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 0 \n \t execute find \n \t until inventory != y [end]|[start] option : \n \t init b < y \n \t execute build \n \t until a == y [end]|[start] option : \n \t init a != 2 \n \t execute jump \n \t until inventory <= 1 [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until b >= 2 [end]|[start] option : \n \t init a != 1 \n \t execute run \n \t until b != 1 [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 1 \n \t execute jump \n \t until inventory < 1 [end]|[start] option : \n \t init a != y \n \t execute run \n \t until y [end]|[start] policy b := \n \t if b > 2 : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a != x \n \t execute build \n \t until position < x [end]|[start] policy a := \n \t if a <= 2 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position == x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 0 \n \t execute jump \n \t until position < y [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until b >= x [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until x [end]|[start] option : \n \t init inventory < 0 \n \t execute run \n \t until inventory <= y [end]|[start] option : \n \t init b > y \n \t execute jump \n \t until inventory == y [end]|[start] option : \n \t init b <= 1 \n \t execute run \n \t until b >= x [end]|[start] policy a := \n \t if a > 0 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < y \n \t execute use \n \t until b != 1 [end]|[start] option : \n \t init b != 0 \n \t execute jump \n \t until position > y [end]|[start] policy a := \n \t if position <= 2 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 1 \n \t execute find \n \t until b > 2 [end]|[start] policy a := \n \t if b >= x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until a <= y [end]|[start] policy a := \n \t if iron > x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until position > y [end]|[start] option : \n \t init position < 2 \n \t execute run \n \t until a < y [end]|[start] option : \n \t init b == y \n \t execute use \n \t until position >= 2 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until a < y [end]|[start] policy b := \n \t if position < y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until inventory != 0 [end]|[start] option : \n \t init position != y \n \t execute run \n \t until b != x [end]|[start] option : \n \t init b \n \t execute find \n \t until b < 1 [end]|[start] policy b := \n \t if iron == x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= y \n \t execute jump \n \t until position < x [end]|[start] option : \n \t init b > 1 \n \t execute run \n \t until a > 2 [end]|[start] option : \n \t init a == 2 \n \t execute jump \n \t until a != 0 [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until b < x [end]|[start] option : \n \t init b >= x \n \t execute build \n \t until inventory < y [end]|[start] policy a := \n \t if a > 0 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute find \n [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until b >= 2 [end]|[start] policy a := \n \t if position < 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= y : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until inventory >= 2 [end]|[start] policy a := \n \t if a > 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= y \n \t execute find \n \t until b >= 2 [end]|[start] policy b := \n \t if b >= y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a <= x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until position == 2 [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until b != x [end]|[start] policy b := \n \t if iron != x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= x \n \t execute run \n \t until a != x [end]|[start] policy a := \n \t if b >= x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until inventory == 1 [end]|[start] policy b := \n \t if position > y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until inventory < 2 [end]|[start] option : \n \t init y \n \t execute use \n \t until a != x [end]|[start] policy a := \n \t if iron < 1 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= x \n \t execute use \n \t until b < x [end]|[start] policy b := \n \t if iron != x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b < y \n \t execute use \n \t until inventory != y [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position >= y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a \n \t execute find \n \t until b >= 0 [end]|[start] option : \n \t init position == y \n \t execute find \n \t until position <= 1 [end]|[start] option : \n \t init inventory <= 1 \n \t execute use \n \t until b != 0 [end]|[start] policy a := \n \t if iron < y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b < y \n \t execute use \n \t until inventory == 0 [end]|[start] option : \n \t init b < 1 \n \t execute build \n \t until a == y [end]|[start] policy b := \n \t if b == 0 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b != x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a < x \n \t execute find \n \t until a < 2 [end]|[start] policy a := \n \t if b == y : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != y \n \t execute use \n \t until inventory == 1 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until b == 1 [end]|[start] policy a := \n \t if b > y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 0 \n \t execute build \n \t until inventory < 1 [end]|[start] policy b := \n \t if b > y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until a == 0 [end]|[start] policy b := \n \t if a > x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until inventory <= 2 [end]|[start] option : \n \t init a >= 1 \n \t execute run \n \t until a >= 1 [end]|[start] policy a := \n \t if a > 2 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= x : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until inventory == 2 [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 2 \n \t execute jump \n \t until a == 2 [end]|[start] policy a := \n \t if a > y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 0 \n \t execute jump \n \t until a == x [end]|[start] option : \n \t init position > x \n \t execute jump \n \t until b < 2 [end]|[start] policy a := \n \t if b < x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until inventory == 2 [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 0 \n \t execute build \n \t until inventory != 0 [end]|[start] option : \n \t init a >= 2 \n \t execute build \n \t until position == 0 [end]|[start] option : \n \t init inventory == 2 \n \t execute build \n \t until inventory == 2 [end]|[start] option : \n \t init b > 0 \n \t execute use \n \t until inventory == 1 [end]|[start] policy a := \n \t if iron != 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute jump \n \t until inventory > 0 [end]|[start] option : \n \t init position >= x \n \t execute use \n \t until position == 0 [end]|[start] option : \n \t init a >= y \n \t execute find \n \t until a == y [end]|[start] option : \n \t init position != y \n \t execute use \n \t until position <= y [end]|[start] policy a := \n \t if b == 0 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until a >= x [end]|[start] policy a := \n \t if iron > 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > y : \n \t execute use \n [end]|[start] option : \n \t init inventory == y \n \t execute jump \n \t until a < 2 [end]|[start] option : \n \t init inventory != x \n \t execute use \n \t until inventory != 2 [end]|[start] option : \n \t init b == y \n \t execute run \n \t until b <= 0 [end]|[start] policy b := \n \t if position != y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= x \n \t execute use \n \t until position > y [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until a [end]|[start] policy b := \n \t if iron > x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until a <= x [end]|[start] policy a := \n \t if a > 2 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a > x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 1 \n \t execute find \n \t until inventory <= 0 [end]|[start] policy b := \n \t if a > 1 : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b < x \n \t execute use \n \t until inventory [end]|[start] policy a := \n \t if a >= 1 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position > 1 : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b == y \n \t execute run \n \t until position > y [end]|[start] policy a := \n \t if b <= 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < x \n \t execute use \n \t until position <= 1 [end]|[start] policy a := \n \t if iron == x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == x : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b < x \n \t execute run \n \t until b >= 0 [end]|[start] option : \n \t init inventory == y \n \t execute run \n \t until position > 2 [end]|[start] option : \n \t init b >= y \n \t execute use \n \t until inventory > y [end]|[start] policy a := \n \t if a <= 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == y \n \t execute run \n \t until inventory >= y [end]|[start] policy a := \n \t if iron == x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 2 \n \t execute run \n \t until a < 1 [end]|[start] option : \n \t init inventory >= 1 \n \t execute build \n \t until a != y [end]|[start] policy b := \n \t if b <= y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 2 \n \t execute jump \n \t until b != y [end]|[start] policy a := \n \t if a >= 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until a == 1 [end]|[start] policy b := \n \t if position <= x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute run \n \t until inventory <= y [end]|[start] policy a := \n \t if position == y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until inventory >= y [end]|[start] option : \n \t init b < x \n \t execute run \n \t until a >= x [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until position < y [end]|[start] policy b := \n \t if b : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b != x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 1 \n \t execute use \n \t until inventory != 2 [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until b == 1 [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until a < y [end]|[start] policy a := \n \t if a >= y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 0 \n \t execute use \n \t until a > 2 [end]|[start] option : \n \t init b <= x \n \t execute run \n \t until position <= x [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until inventory <= 0 [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until b > 1 [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until position != 1 [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until position > x [end]|[start] option : \n \t init a != 2 \n \t execute find \n \t until b < y [end]|[start] option : \n \t init inventory <= 1 \n \t execute find \n \t until position > y [end]|[start] policy a := \n \t if b > 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b \n \t execute find \n \t until a != 2 [end]|[start] option : \n \t init inventory != 2 \n \t execute use \n \t until a >= x [end]|[start] policy b := \n \t if position == y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 2 \n \t execute find \n \t until inventory != 1 [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until inventory != 1 [end]|[start] option : \n \t init position >= 1 \n \t execute use \n \t until inventory >= x [end]|[start] policy a := \n \t if iron < 1 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= x \n \t execute find \n \t until a == x [end]|[start] policy a := \n \t if b != x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until a != 0 [end]|[start] policy a := \n \t if position >= y : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until position != x [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until inventory [end]|[start] policy a := \n \t if b <= 1 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron == x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position < x \n \t execute find \n \t until position [end]|[start] policy a := \n \t if iron != y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > 2 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute run \n \t until a > 0 [end]|[start] option : \n \t init position == y \n \t execute find \n \t until a == 1 [end]|[start] option : \n \t init inventory > y \n \t execute jump \n \t until b <= 0 [end]|[start] policy a := \n \t if position > 0 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 0 \n \t execute run \n \t until b == x [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until b > 0 [end]|[start] policy a := \n \t if a : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init x \n \t execute find \n \t until b <= y [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until a <= 0 [end]|[start] policy b := \n \t if a >= 0 : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until b < x [end]|[start] policy a := \n \t if iron == y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= x : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a > y \n \t execute use \n \t until a <= x [end]|[start] policy a := \n \t if b > 2 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until inventory != 1 [end]|[start] policy b := \n \t if a != x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= y \n \t execute use \n \t until b == y [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b >= y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute use \n \t until position [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until inventory < y [end]|[start] policy a := \n \t if b != y : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until b > 1 [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= x \n \t execute jump \n \t until inventory != 2 [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a == y \n \t execute use \n \t until b <= 1 [end]|[start] option : \n \t init b > y \n \t execute build \n \t until a >= 1 [end]|[start] policy a := \n \t if iron > x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 1 \n \t execute jump \n \t until x [end]|[start] option : \n \t init a \n \t execute run \n \t until inventory < x [end]|[start] policy a := \n \t if a == x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until inventory != 0 [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until inventory != 2 [end]|[start] policy a := \n \t if b == 0 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron > y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until inventory == x [end]|[start] policy a := \n \t if position != x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b < x \n \t execute run \n \t until position <= 1 [end]|[start] policy a := \n \t if position == x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 2 \n \t execute use \n \t until inventory < 0 [end]|[start] policy b := \n \t if iron == y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until inventory != y [end]|[start] option : \n \t init inventory >= 2 \n \t execute use \n \t until position == y [end]|[start] policy a := \n \t if iron > x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until inventory <= x [end]|[start] policy b := \n \t if iron : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 0 \n \t execute build \n \t until position < x [end]|[start] policy a := \n \t if b >= 1 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a < x \n \t execute find \n \t until b != 1 [end]|[start] option : \n \t init position < 1 \n \t execute jump \n \t until position > 2 [end]|[start] option : \n \t init y \n \t execute run \n \t until position == 2 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until position < 0 [end]|[start] option : \n \t init b > x \n \t execute run \n \t until a <= 2 [end]|[start] option : \n \t init a <= 0 \n \t execute jump \n \t until b >= 2 [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until b >= x [end]|[start] option : \n \t init position == x \n \t execute use \n \t until inventory < 0 [end]|[start] option : \n \t init a > 0 \n \t execute jump \n \t until b > x [end]|[start] policy a := \n \t if iron > y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until a >= y [end]|[start] option : \n \t init x \n \t execute build \n \t until position > y [end]|[start] policy a := \n \t if b >= 1 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == 1 : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until b > 0 [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until a == 2 [end]|[start] policy b := \n \t if iron == x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until a == y [end]|[start] policy b := \n \t if position < y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init x \n \t execute run \n \t until position < x [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 0 \n \t execute run \n \t until a <= 1 [end]|[start] option : \n \t init inventory <= 2 \n \t execute find \n \t until position > 1 [end]|[start] option : \n \t init a == 2 \n \t execute run \n \t until a == y [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until b <= 2 [end]|[start] policy a := \n \t if a > y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute use \n \t until b == 0 [end]|[start] policy a := \n \t if a : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b < x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron == x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 1 \n \t execute run \n \t until y [end]|[start] option : \n \t init a >= 0 \n \t execute use \n \t until a <= 2 [end]|[start] policy a := \n \t if b == y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a > x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position == y \n \t execute build \n \t until inventory > x [end]|[start] option : \n \t init b \n \t execute run \n \t until inventory >= y [end]|[start] policy b := \n \t if b <= x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 1 \n \t execute run \n \t until a < 1 [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n [end]|[start] policy b := \n \t if position < y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 2 \n \t execute use \n \t until a [end]|[start] policy b := \n \t if a >= y : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until b == 0 [end]|[start] policy a := \n \t if a >= y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until b <= x [end]|[start] policy a := \n \t if iron != 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b == y \n \t execute run \n \t until a != 1 [end]|[start] option : \n \t init b == 1 \n \t execute use \n \t until inventory == 0 [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until a > y [end]|[start] policy a := \n \t if a < y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 0 \n \t execute build \n \t until position >= y [end]|[start] policy a := \n \t if b > 2 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 0 \n \t execute build \n \t until b > 2 [end]|[start] policy a := \n \t if iron < 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b != x \n \t execute build \n \t until a <= x [end]|[start] policy a := \n \t if a >= 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b == x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 0 \n \t execute run \n \t until b >= y [end]|[start] option : \n \t init position <= 0 \n \t execute find \n \t until position == 2 [end]|[start] option : \n \t init a == x \n \t execute build \n \t until a > 2 [end]|[start] option : \n \t init b == 1 \n \t execute find \n \t until b < 0 [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until inventory < x [end]|[start] policy b := \n \t if a != 0 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= y \n \t execute run \n \t until a >= 1 [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until a != 2 [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until position >= 2 [end]|[start] policy a := \n \t if b == 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until a > y [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position != x \n \t execute build \n \t until position > 0 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b == y \n \t execute use \n \t until b != y [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until a <= 2 [end]|[start] option : \n \t init inventory < 1 \n \t execute run \n \t until inventory == 1 [end]|[start] option : \n \t init b != 0 \n \t execute build \n \t until a <= 0 [end]|[start] option : \n \t init inventory > 0 \n \t execute find \n \t until a >= 2 [end]|[start] option : \n \t init b > y \n \t execute run \n \t until b == 2 [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until a < 2 [end]|[start] option : \n \t init position <= 1 \n \t execute find \n \t until inventory > y [end]|[start] policy a := \n \t if b >= 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until b != 2 [end]|[start] policy b := \n \t if a > x : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= x : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a < x \n \t execute build \n \t until inventory <= y [end]|[start] option : \n \t init b == x \n \t execute run \n \t until a == 0 [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until position >= 0 [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until a == 0 [end]|[start] policy a := \n \t if position <= x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 2 \n \t execute run \n \t until a > y [end]|[start] policy b := \n \t if b < 2 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until a > x [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until a < 2 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until b < x [end]|[start] option : \n \t init inventory == y \n \t execute use \n \t until position <= y [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until b [end]|[start] policy a := \n \t if a > 1 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron != y : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a > y \n \t execute build \n \t until inventory == 0 [end]|[start] option : \n \t init a < y \n \t execute build \n \t until position == 1 [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until a >= 2 [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until inventory == 2 [end]|[start] option : \n \t init a > 2 \n \t execute build \n \t until position <= y [end]|[start] policy b := \n \t if b < y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until a > y [end]|[start] policy a := \n \t if b <= 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until b != 1 [end]|[start] policy b := \n \t if b < y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until a < y [end]|[start] policy a := \n \t if b < x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until position >= 2 [end]|[start] option : \n \t init a == y \n \t execute find \n \t until b < y [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until inventory != 2 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until b != y [end]|[start] policy b := \n \t if a < y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > y \n \t execute run \n \t until a < 2 [end]|[start] policy a := \n \t if position > 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until a > 0 [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until inventory >= y [end]|[start] policy a := \n \t if a >= x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= y \n \t execute run \n \t until b < 2 [end]|[start] policy b := \n \t if b != x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 1 \n \t execute jump \n \t until a != 2 [end]|[start] option : \n \t init position <= 1 \n \t execute jump \n \t until position >= y [end]|[start] option : \n \t init position <= x \n \t execute run \n \t until inventory <= x [end]|[start] option : \n \t init a == y \n \t execute find \n \t until inventory >= 0 [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until a <= 2 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= x \n \t execute find \n \t until position != y [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until a < 1 [end]|[start] option : \n \t init a >= y \n \t execute find \n \t until b >= x [end]|[start] policy a := \n \t if b == 2 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 2 \n \t execute build \n \t until inventory <= 2 [end]|[start] policy b := \n \t if iron < x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until b > y [end]|[start] policy b := \n \t if iron < y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position < y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != y \n \t execute use \n \t until inventory != 1 [end]|[start] option : \n \t init a \n \t execute find \n \t until b > x [end]|[start] option : \n \t init inventory > 1 \n \t execute find \n \t until inventory == y [end]|[start] policy b := \n \t if a != 0 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until a > x [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until inventory != y [end]|[start] policy a := \n \t if a <= x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until position >= 2 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until a < 1 [end]|[start] option : \n \t init position != 2 \n \t execute run \n \t until b != x [end]|[start] policy a := \n \t if iron > y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until position >= 0 [end]|[start] option : \n \t init position != 2 \n \t execute jump \n \t until a <= 2 [end]|[start] policy a := \n \t if b == 2 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until inventory != 0 [end]|[start] policy b := \n \t if b <= x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 1 \n \t execute jump \n \t until inventory >= y [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position < x \n \t execute build \n \t until x [end]|[start] option : \n \t init b == y \n \t execute run \n \t until a == 0 [end]|[start] option : \n \t init inventory == y \n \t execute run \n \t until a >= y [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until a <= 0 [end]|[start] policy a := \n \t if b < y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute build \n \t until inventory == 1 [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until a <= x [end]|[start] policy b := \n \t if iron : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < y \n \t execute build \n \t until b == 1 [end]|[start] policy a := \n \t if iron >= y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position != x \n \t execute jump \n \t until a != y [end]|[start] policy a := \n \t if iron >= x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until inventory >= y [end]|[start] policy b := \n \t if position >= x : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until position <= 1 [end]|[start] option : \n \t init b \n \t execute build \n \t until position <= x [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until b >= x [end]|[start] option : \n \t init position == 1 \n \t execute build \n \t until b > 0 [end]|[start] policy b := \n \t if position != y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < x \n \t execute run \n \t until a <= 2 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until b != 0 [end]|[start] policy a := \n \t if b >= x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b == y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b < x \n \t execute use \n \t until position > 2 [end]|[start] policy a := \n \t if b == 0 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until position > 0 [end]|[start] policy a := \n \t if b == x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until a > x [end]|[start] option : \n \t init b != x \n \t execute run \n \t until a < x [end]|[start] policy a := \n \t if b >= 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until b == y [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until b != 2 [end]|[start] option : \n \t init position != x \n \t execute build \n \t until inventory != 1 [end]|[start] option : \n \t init a < 0 \n \t execute find \n \t until position <= 2 [end]|[start] policy a := \n \t if a == 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 2 \n \t execute find \n \t until position [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == x : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 2 \n \t execute find \n \t until position <= 1 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 1 \n \t execute find \n \t until b == 2 [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until a >= x [end]|[start] policy b := \n \t if position == x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 2 \n \t execute find \n \t until b != x [end]|[start] option : \n \t init a <= y \n \t execute find \n \t until a != x [end]|[start] policy a := \n \t if iron > 2 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 0 \n \t execute build \n \t until b >= 0 [end]|[start] policy b := \n \t if a != x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 2 \n \t execute build \n \t until a != 1 [end]|[start] option : \n \t init position == 2 \n \t execute find \n \t until position > 2 [end]|[start] policy b := \n \t if iron != x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 0 \n \t execute use \n \t until position < 0 [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= y : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > 2 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < y \n \t execute find \n \t until b <= x [end]|[start] option : \n \t init position != 1 \n \t execute jump \n \t until position == 1 [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until inventory < 2 [end]|[start] option : \n \t init b == 2 \n \t execute build \n \t until a == 0 [end]|[start] policy a := \n \t if b < y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 2 \n \t execute build \n \t until y [end]|[start] policy a := \n \t if position <= y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position != y \n \t execute find \n \t until position <= y [end]|[start] option : \n \t init inventory >= x \n \t execute jump \n \t until b > y [end]|[start] policy b := \n \t if iron : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 0 \n \t execute use \n \t until position > y [end]|[start] policy a := \n \t if b >= 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until b <= 0 [end]|[start] policy a := \n \t if b > y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 0 \n \t execute jump \n \t until inventory > x [end]|[start] option : \n \t init position < y \n \t execute run \n \t until b > y [end]|[start] option : \n \t init inventory <= 1 \n \t execute run \n \t until a > y [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until a < 0 [end]|[start] policy a := \n \t if a < y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until a <= y [end]|[start] policy b := \n \t if position == x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 0 \n \t execute run \n \t until inventory >= x [end]|[start] policy b := \n \t if b <= 2 : \n \t execute build \n [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until b >= 2 [end]|[start] policy a := \n \t if b > 1 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 0 \n \t execute jump \n \t until inventory <= y [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a < y \n \t execute run \n \t until a [end]|[start] option : \n \t init a != y \n \t execute build \n \t until b <= 1 [end]|[start] option : \n \t init inventory != 0 \n \t execute jump \n \t until a <= 0 [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until a <= 0 [end]|[start] policy b := \n \t if a >= x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 2 \n \t execute use \n \t until position != y [end]|[start] option : \n \t init position != x \n \t execute find \n \t until inventory > 1 [end]|[start] policy a := \n \t if position != y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b <= x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= x \n \t execute run \n \t until a > 1 [end]|[start] policy a := \n \t if b > 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until inventory != 2 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until position <= 2 [end]|[start] option : \n \t init a != x \n \t execute use \n \t until position != 1 [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until b <= y [end]|[start] option : \n \t init a != y \n \t execute run \n \t until position >= 2 [end]|[start] option : \n \t init b == y \n \t execute run \n \t until b != y [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 0 \n \t execute use \n \t until b <= 1 [end]|[start] policy a := \n \t if iron : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 1 \n \t execute jump \n \t until b < x [end]|[start] policy a := \n \t if iron >= y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until b != x [end]|[start] option : \n \t init b < y \n \t execute use \n \t until position >= 1 [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until b != 2 [end]|[start] policy b := \n \t if a > y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute use \n \t until a > 0 [end]|[start] option : \n \t init a != x \n \t execute find \n \t until a >= y [end]|[start] policy a := \n \t if position <= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a > x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= y : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until position == x [end]|[start] policy b := \n \t if a != 2 : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init y \n \t execute run \n \t until a <= y [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position > y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until b >= x [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until position == x [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until position <= y [end]|[start] option : \n \t init b < 1 \n \t execute build \n \t until inventory != y [end]|[start] policy a := \n \t if iron == 2 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until a >= y [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until inventory != 2 [end]|[start] option : \n \t init position < 1 \n \t execute find \n \t until b > 1 [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until position > 2 [end]|[start] policy a := \n \t if a < 2 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until a != 0 [end]|[start] option : \n \t init a >= 0 \n \t execute build \n \t until inventory >= 1 [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until a > x [end]|[start] option : \n \t init a < x \n \t execute build \n \t until b != x [end]|[start] policy a := \n \t if b == x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until b <= 2 [end]|[start] option : \n \t init position == x \n \t execute use \n \t until inventory > x [end]|[start] option : \n \t init a == 2 \n \t execute jump \n \t until position < 0 [end]|[start] policy b := \n \t if a != 0 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute run \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position > y \n \t execute build \n \t until a >= y [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until b >= 0 [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until position != 0 [end]|[start] option : \n \t init a < x \n \t execute jump \n \t until inventory != 1 [end]|[start] policy b := \n \t if position > x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < y \n \t execute build \n \t until b <= x [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron < 2 : \n \t execute run \n [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= y \n \t execute jump \n \t until a < 0 [end]|[start] option : \n \t init b <= y \n \t execute jump \n \t until position <= x [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until a < 1 [end]|[start] option : \n \t init position > x \n \t execute build \n \t until inventory <= x [end]|[start] option : \n \t init inventory <= 2 \n \t execute run \n \t until position > 1 [end]|[start] option : \n \t init inventory < x \n \t execute run \n \t until position >= 0 [end]|[start] option : \n \t init b < 1 \n \t execute run \n \t until position > y [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until a != y [end]|[start] policy a := \n \t if iron != 2 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b \n \t execute use \n \t until a < 0 [end]|[start] option : \n \t init inventory >= y \n \t execute find \n \t until inventory == y [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until inventory > x [end]|[start] policy b := \n \t if b : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until inventory != y [end]|[start] option : \n \t init a == y \n \t execute use \n \t until b <= 0 [end]|[start] policy a := \n \t if position > 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a < x \n \t execute use \n \t until position <= y [end]|[start] option : \n \t init b == y \n \t execute build \n \t until b >= 1 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until b < 0 [end]|[start] policy b := \n \t if a > 1 : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 2 \n \t execute use \n \t until y [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until inventory == y [end]|[start] policy a := \n \t if iron < 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a != y \n \t execute find \n \t until position > 0 [end]|[start] option : \n \t init position != x \n \t execute find \n \t until inventory > 2 [end]|[start] policy a := \n \t if b == y : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == y \n \t execute run \n \t until position >= 2 [end]|[start] policy a := \n \t if a <= 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until position < 1 [end]|[start] policy a := \n \t if iron == 2 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute use \n \t until position != y [end]|[start] policy b := \n \t if iron < y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position > x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron < y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until inventory < 1 [end]|[start] option : \n \t init a < 2 \n \t execute find \n \t until a == x [end]|[start] option : \n \t init inventory >= 1 \n \t execute use \n \t until y [end]|[start] policy a := \n \t if iron > 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b != x \n \t execute jump \n \t until inventory <= 1 [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until a != 2 [end]|[start] policy a := \n \t if a == y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until a >= 2 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a > y \n \t execute build \n \t until position == 1 [end]|[start] option : \n \t init b \n \t execute run \n \t until a == 1 [end]|[start] policy b := \n \t if b <= y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 1 \n \t execute run \n \t until b != 0 [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 0 \n \t execute find \n \t until a != 1 [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until b < 1 [end]|[start] option : \n \t init position < x \n \t execute jump \n \t until b < x [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until a > 0 [end]|[start] policy a := \n \t if position != 1 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b == y \n \t execute jump \n \t until b == y [end]|[start] policy b := \n \t if iron != y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position < y \n \t execute find \n \t until inventory != x [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until position < 1 [end]|[start] policy b := \n \t if a > x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until position > y [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 2 \n \t execute build \n \t until position == 2 [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until a >= 1 [end]|[start] policy a := \n \t if position == 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 2 \n \t execute run \n \t until a <= 2 [end]|[start] option : \n \t init inventory > 2 \n \t execute use \n \t until x [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until a > 0 [end]|[start] policy a := \n \t if b == 0 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until inventory > 0 [end]|[start] policy a := \n \t if b < x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until b <= y [end]|[start] policy b := \n \t if b <= y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 0 \n \t execute jump \n \t until a != 0 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron == x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b > y \n \t execute find \n \t until a < 2 [end]|[start] policy a := \n \t if b : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 2 \n \t execute run \n \t until inventory >= 0 [end]|[start] option : \n \t init b > y \n \t execute find \n \t until inventory < x [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory \n \t execute run \n \t until inventory != 1 [end]|[start] option : \n \t init x \n \t execute run \n \t until a == y [end]|[start] option : \n \t init b != y \n \t execute find \n \t until position [end]|[start] policy a := \n \t if position < 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b < y \n \t execute run \n \t until a == x [end]|[start] policy a := \n \t if b > x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != 0 : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= x \n \t execute run \n \t until a == 0 [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until b > x [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until position <= 2 [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 0 \n \t execute find \n \t until position <= 1 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b \n \t execute find \n \t until a < 0 [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until b != 1 [end]|[start] option : \n \t init position != 2 \n \t execute jump \n \t until inventory > 1 [end]|[start] policy b := \n \t if b > y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position > y \n \t execute build \n \t until position >= y [end]|[start] policy b := \n \t if b == x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position == x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron != x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until position > 0 [end]|[start] policy b := \n \t if b > x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until a > 0 [end]|[start] policy a := \n \t if a >= x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until inventory >= 1 [end]|[start] option : \n \t init b != x \n \t execute jump \n \t until a <= 1 [end]|[start] option : \n \t init a >= 2 \n \t execute jump \n \t until inventory > 2 [end]|[start] policy b := \n \t if position != x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until b == 0 [end]|[start] policy a := \n \t if iron > x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 2 \n \t execute build \n \t until inventory < y [end]|[start] policy a := \n \t if a != x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until inventory [end]|[start] policy a := \n \t if a > 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= y \n \t execute jump \n \t until position <= 0 [end]|[start] policy b := \n \t if a != 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until position > x [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until b < 2 [end]|[start] option : \n \t init inventory != x \n \t execute run \n \t until b < 2 [end]|[start] policy a := \n \t if b < x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == x \n \t execute find \n \t until inventory <= x [end]|[start] policy a := \n \t if a <= x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until b >= x [end]|[start] option : \n \t init position <= 0 \n \t execute find \n \t until b < x [end]|[start] option : \n \t init b <= y \n \t execute jump \n \t until position <= 1 [end]|[start] option : \n \t init a <= 0 \n \t execute run \n \t until b > y [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position >= y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron >= 1 : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a > y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until a <= x [end]|[start] policy a := \n \t if position != 0 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init x \n \t execute find \n \t until a > 0 [end]|[start] option : \n \t init b == x \n \t execute build \n \t until b == x [end]|[start] option : \n \t init a >= 0 \n \t execute build \n \t until position > x [end]|[start] policy a := \n \t if iron < x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until b < y [end]|[start] option : \n \t init position == 0 \n \t execute find \n \t until x [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until inventory <= x [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until inventory > 2 [end]|[start] option : \n \t init position == x \n \t execute build \n \t until x [end]|[start] option : \n \t init inventory != y \n \t execute jump \n \t until position == y [end]|[start] policy b := \n \t if a > x : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until a >= 1 [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until b != 1 [end]|[start] policy b := \n \t if a == 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 1 \n \t execute use \n \t until b > y [end]|[start] policy a := \n \t if iron != 2 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until a == y [end]|[start] option : \n \t init x \n \t execute jump \n \t until inventory < 0 [end]|[start] option : \n \t init inventory < 1 \n \t execute use \n \t until b != x [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until a [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until position < y [end]|[start] option : \n \t init a == x \n \t execute find \n \t until position < x [end]|[start] policy b := \n \t if position >= y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until a < 0 [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until a > y [end]|[start] option : \n \t init a <= x \n \t execute find \n \t until a != 1 [end]|[start] option : \n \t init a <= 2 \n \t execute build \n \t until position >= 1 [end]|[start] policy a := \n \t if b > 0 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 1 \n \t execute run \n \t until b > x [end]|[start] option : \n \t init inventory > 1 \n \t execute jump \n \t until b > y [end]|[start] policy a := \n \t if a < 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == y : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until inventory >= 1 [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b < x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b != y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until a >= x [end]|[start] option : \n \t init b == y \n \t execute run \n \t until position < 1 [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until a <= 1 [end]|[start] option : \n \t init a <= x \n \t execute jump \n \t until b != 2 [end]|[start] option : \n \t init inventory < 0 \n \t execute find \n \t until position < 2 [end]|[start] option : \n \t init position > y \n \t execute build \n \t until a == 1 [end]|[start] policy a := \n \t if a != y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position != x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= y \n \t execute run \n \t until b > 1 [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until inventory == x [end]|[start] policy b := \n \t if a <= 2 : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until y [end]|[start] option : \n \t init position < 1 \n \t execute use \n \t until a <= x [end]|[start] policy a := \n \t if iron < 1 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute find \n \t until b <= 2 [end]|[start] policy a := \n \t if position : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron < y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 1 \n \t execute jump \n \t until inventory < 2 [end]|[start] option : \n \t init b < 2 \n \t execute jump \n \t until x [end]|[start] option : \n \t init y \n \t execute use \n \t until position != 1 [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 0 \n \t execute use \n \t until inventory < y [end]|[start] option : \n \t init position != 1 \n \t execute use \n \t until a != 2 [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until inventory <= 1 [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until a >= 0 [end]|[start] policy b := \n \t if a : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a != y \n \t execute build \n \t until x [end]|[start] policy a := \n \t if a == y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until position >= 2 [end]|[start] policy b := \n \t if b >= y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron != x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 0 \n \t execute jump \n \t until b < x [end]|[start] option : \n \t init position > x \n \t execute run \n \t until b <= x [end]|[start] option : \n \t init position != 1 \n \t execute use \n \t until inventory >= 2 [end]|[start] policy a := \n \t if position < x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until position < 0 [end]|[start] option : \n \t init position <= 0 \n \t execute use \n \t until b < y [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until inventory != 1 [end]|[start] option : \n \t init a == 1 \n \t execute use \n \t until a != 2 [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until position <= y [end]|[start] policy a := \n \t if b != 1 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until inventory < x [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until inventory != 1 [end]|[start] policy a := \n \t if b == 2 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until a >= 1 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 1 \n \t execute jump \n \t until b != 1 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until position != 1 [end]|[start] policy a := \n \t if b == 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= x \n \t execute run \n \t until inventory == 1 [end]|[start] policy a := \n \t if a >= y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position > x \n \t execute run \n \t until position > x [end]|[start] policy b := \n \t if iron : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 0 \n \t execute build \n \t until position >= x [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until b < y [end]|[start] option : \n \t init position == x \n \t execute use \n \t until b <= y [end]|[start] policy a := \n \t if a <= 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until inventory <= x [end]|[start] option : \n \t init b != x \n \t execute find \n \t until a < 2 [end]|[start] policy b := \n \t if position <= y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > y \n \t execute use \n \t until inventory < 2 [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until position <= y [end]|[start] option : \n \t init a > y \n \t execute run \n \t until position != x [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init x \n \t execute jump \n \t until position == 1 [end]|[start] policy a := \n \t if position >= x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until b > 2 [end]|[start] policy a := \n \t if a != x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 0 \n \t execute run \n \t until b < 0 [end]|[start] policy b := \n \t if a <= y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init y \n \t execute build \n \t until inventory == x [end]|[start] policy a := \n \t if a <= 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until b != 1 [end]|[start] policy a := \n \t if iron : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until position != x [end]|[start] policy a := \n \t if position == 0 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 1 \n \t execute find \n \t until position >= 1 [end]|[start] policy a := \n \t if a < y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until inventory >= 0 [end]|[start] option : \n \t init inventory < 0 \n \t execute use \n \t until position <= 0 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= y \n \t execute jump \n \t until a != 1 [end]|[start] policy a := \n \t if position > y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a > x \n \t execute find \n \t until inventory < x [end]|[start] policy a := \n \t if position < 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 2 \n \t execute find \n \t until a < 1 [end]|[start] policy a := \n \t if position != 0 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 2 \n \t execute find \n \t until inventory <= 2 [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until position >= x [end]|[start] option : \n \t init a != x \n \t execute build \n \t until b <= 1 [end]|[start] option : \n \t init a == 2 \n \t execute run \n \t until a [end]|[start] option : \n \t init position < x \n \t execute build \n \t until a > 0 [end]|[start] option : \n \t init a != y \n \t execute run \n \t until position != y [end]|[start] policy a := \n \t if position < 1 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 0 \n \t execute jump \n \t until b <= 0 [end]|[start] policy b := \n \t if b == y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != x \n \t execute run \n \t until b > 1 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 1 \n \t execute jump \n \t until inventory != x [end]|[start] option : \n \t init position != 2 \n \t execute run \n \t until b == 1 [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until position == y [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until b == x [end]|[start] option : \n \t init a <= 2 \n \t execute find \n \t until b < x [end]|[start] policy a := \n \t if position < y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init y \n \t execute find \n \t until inventory >= x [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 0 \n \t execute run \n \t until a > 1 [end]|[start] policy a := \n \t if b == y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until position == y [end]|[start] policy b := \n \t if a == 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > y \n \t execute run \n \t until inventory != x [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until position >= y [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until inventory [end]|[start] option : \n \t init position == 1 \n \t execute build \n \t until a == y [end]|[start] policy a := \n \t if a <= 1 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until inventory == 0 [end]|[start] policy b := \n \t if b != x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != x \n \t execute run \n \t until position > y [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until b > 2 [end]|[start] policy a := \n \t if b != x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until inventory != x [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until inventory > 2 [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 2 \n \t execute find \n \t until inventory <= y [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b > y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a < y \n \t execute run \n \t until a >= y [end]|[start] policy a := \n \t if iron < y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b > x \n \t execute find \n \t until b < 0 [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until position <= 1 [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 2 \n \t execute build \n \t until position != 2 [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until a <= x [end]|[start] policy a := \n \t if b < 1 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until inventory == 1 [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until position <= 2 [end]|[start] option : \n \t init b > x \n \t execute use \n \t until inventory >= 0 [end]|[start] policy a := \n \t if a < x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position > y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position != x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 0 \n \t execute use \n \t until a > 2 [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b < x \n \t execute run \n \t until position != x [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 0 \n \t execute find \n \t until inventory != x [end]|[start] policy a := \n \t if a > 1 : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until inventory == 0 [end]|[start] option : \n \t init inventory == 2 \n \t execute find \n \t until position <= 2 [end]|[start] option : \n \t init a >= 0 \n \t execute run \n \t until inventory != x [end]|[start] policy b := \n \t if iron > y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until inventory != y [end]|[start] option : \n \t init b != 1 \n \t execute run \n \t until position != 1 [end]|[start] policy a := \n \t if b > x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < x \n \t execute jump \n \t until b > y [end]|[start] policy a := \n \t if b == x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 2 \n \t execute use \n \t until a < 2 [end]|[start] policy a := \n \t if b == 1 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n [end]|[start] policy a := \n \t if a < y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until inventory == 0 [end]|[start] option : \n \t init position > x \n \t execute find \n \t until position < 1 [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until b <= y [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until b > 2 [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until inventory [end]|[start] policy b := \n \t if b <= x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until b >= 1 [end]|[start] policy a := \n \t if iron > 0 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until a != 0 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a > y \n \t execute find \n \t until position < 1 [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until b != x [end]|[start] policy a := \n \t if iron == 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == y \n \t execute build \n \t until position > 0 [end]|[start] policy b := \n \t if a < 0 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until b >= 2 [end]|[start] policy a := \n \t if b == 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron <= 1 : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a < y \n \t execute find \n \t until inventory > 0 [end]|[start] option : \n \t init position >= 2 \n \t execute find \n \t until position > y [end]|[start] policy b := \n \t if a < 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until a < 2 [end]|[start] option : \n \t init inventory == x \n \t execute use \n \t until position > 2 [end]|[start] policy a := \n \t if b >= y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a != y \n \t execute use \n \t until position >= 2 [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until position != 2 [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until inventory != 0 [end]|[start] policy a := \n \t if b >= y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until inventory < 1 [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 2 \n \t execute jump \n \t until inventory < y [end]|[start] policy a := \n \t if position == 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 1 \n \t execute jump \n \t until a < 0 [end]|[start] policy b := \n \t if a != y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 0 \n \t execute jump \n \t until b < 0 [end]|[start] policy b := \n \t if b <= y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b != x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 1 \n \t execute run \n \t until a >= 1 [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until b <= 2 [end]|[start] policy a := \n \t if iron != x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b < y \n \t execute build \n \t until inventory >= 1 [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until b >= y [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until position < 2 [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until position < x [end]|[start] policy b := \n \t if position : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 2 \n \t execute run \n \t until b == 0 [end]|[start] policy a := \n \t if b > x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until inventory > y [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until a >= 1 [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b != y \n \t execute use \n \t until inventory <= 1 [end]|[start] policy b := \n \t if b : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until inventory >= 1 [end]|[start] option : \n \t init a >= y \n \t execute use \n \t until inventory < 2 [end]|[start] option : \n \t init inventory \n \t execute use \n \t until a != 1 [end]|[start] policy b := \n \t if a < y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == y \n \t execute find \n \t until inventory < y [end]|[start] option : \n \t init b > x \n \t execute run \n \t until b [end]|[start] policy b := \n \t if a < 1 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 1 \n \t execute use \n \t until position == 0 [end]|[start] policy a := \n \t if b == y : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 1 \n \t execute use \n \t until position >= 2 [end]|[start] policy a := \n \t if position <= y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute use \n \t until a < 0 [end]|[start] option : \n \t init position != x \n \t execute use \n \t until b <= y [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until b >= 0 [end]|[start] policy a := \n \t if a != y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 0 \n \t execute find \n \t until inventory == 0 [end]|[start] policy b := \n \t if a != 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 1 \n \t execute find \n \t until b >= y [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until b <= 1 [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until inventory == y [end]|[start] policy b := \n \t if position == x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 1 \n \t execute run \n \t until inventory != 2 [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until inventory != 2 [end]|[start] policy a := \n \t if position < y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until b < x [end]|[start] option : \n \t init a != x \n \t execute jump \n \t until b > 2 [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until a != 2 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b >= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until b < 1 [end]|[start] option : \n \t init a > x \n \t execute run \n \t until b == 0 [end]|[start] option : \n \t init position > x \n \t execute use \n \t until inventory < 0 [end]|[start] option : \n \t init position != 1 \n \t execute run \n \t until a == 1 [end]|[start] policy b := \n \t if position >= x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 2 \n \t execute use \n \t until a <= y [end]|[start] option : \n \t init a != y \n \t execute run \n \t until a == 1 [end]|[start] policy a := \n \t if position != y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != y : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a == x \n \t execute use \n \t until b > 2 [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until inventory == x [end]|[start] policy b := \n \t if a == 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b <= x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron > y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until a >= 0 [end]|[start] option : \n \t init position < y \n \t execute build \n \t until b < 2 [end]|[start] option : \n \t init x \n \t execute jump \n \t until position < 1 [end]|[start] option : \n \t init a == 0 \n \t execute build \n \t until b < 1 [end]|[start] policy a := \n \t if a != 2 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until inventory >= y [end]|[start] option : \n \t init b > x \n \t execute find \n \t until inventory == y [end]|[start] policy a := \n \t if a < y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b <= y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 1 \n \t execute build \n \t until x [end]|[start] option : \n \t init b != x \n \t execute run \n \t until a != 0 [end]|[start] policy a := \n \t if iron < 0 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 0 \n \t execute find \n \t until b <= y [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init x \n \t execute find \n \t until inventory >= 1 [end]|[start] option : \n \t init b < 1 \n \t execute jump \n \t until inventory > 1 [end]|[start] option : \n \t init position < y \n \t execute build \n \t until inventory < 1 [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until position > x [end]|[start] policy b := \n \t if b >= y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron != 1 : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 2 \n \t execute jump \n \t until position <= x [end]|[start] policy a := \n \t if iron : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < x \n \t execute find \n \t until inventory >= 1 [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until position >= 0 [end]|[start] option : \n \t init a < 0 \n \t execute build \n \t until inventory == y [end]|[start] policy b := \n \t if a == 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == y \n \t execute use \n \t until a <= 0 [end]|[start] option : \n \t init b != 0 \n \t execute build \n \t until inventory < 0 [end]|[start] option : \n \t init a < y \n \t execute use \n \t until position >= 2 [end]|[start] policy a := \n \t if iron != 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 0 \n \t execute run \n \t until inventory != 0 [end]|[start] policy a := \n \t if position > 1 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != x \n \t execute use \n \t until position >= y [end]|[start] option : \n \t init position == y \n \t execute run \n \t until inventory <= 0 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= 2 \n \t execute use \n \t until inventory < x [end]|[start] policy a := \n \t if b == 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init x \n \t execute run \n \t until inventory == y [end]|[start] policy b := \n \t if b == x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position <= 2 : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 1 \n \t execute jump \n \t until inventory > 0 [end]|[start] policy a := \n \t if position > 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 1 \n \t execute find \n \t until a == x [end]|[start] option : \n \t init b == 2 \n \t execute jump \n \t until inventory <= x [end]|[start] policy b := \n \t if position >= y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 2 \n \t execute build \n \t until inventory == x [end]|[start] option : \n \t init inventory <= 2 \n \t execute use \n \t until position > 1 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a \n \t execute jump \n \t until b <= 1 [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until a == x [end]|[start] option : \n \t init position != x \n \t execute build \n \t until b < 2 [end]|[start] policy a := \n \t if position < 0 : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 2 \n \t execute find \n \t until inventory != 0 [end]|[start] policy b := \n \t if iron == y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 1 \n \t execute run \n \t until inventory != 0 [end]|[start] option : \n \t init position == 0 \n \t execute jump \n \t until inventory < 0 [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 0 \n \t execute jump \n \t until position > 0 [end]|[start] option : \n \t init b != y \n \t execute find \n \t until b < 1 [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until position <= 0 [end]|[start] policy a := \n \t if a < 2 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until inventory <= 0 [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until b <= x [end]|[start] option : \n \t init inventory == 1 \n \t execute build \n \t until a < 1 [end]|[start] option : \n \t init b > 0 \n \t execute build \n \t until inventory < 0 [end]|[start] policy b := \n \t if iron <= y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > x : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until a < 0 [end]|[start] option : \n \t init b \n \t execute jump \n \t until x [end]|[start] option : \n \t init a < y \n \t execute find \n \t until inventory <= y [end]|[start] option : \n \t init position != 2 \n \t execute build \n \t until inventory >= 1 [end]|[start] policy a := \n \t if a <= x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b \n \t execute use \n \t until b [end]|[start] policy a := \n \t if b < x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 0 \n \t execute jump \n \t until a > y [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until inventory > x [end]|[start] option : \n \t init inventory > 2 \n \t execute jump \n \t until a > x [end]|[start] policy b := \n \t if a < x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until inventory <= 0 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a > x \n \t execute build \n \t until a != 1 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 1 \n \t execute use \n \t until position >= y [end]|[start] policy a := \n \t if position <= 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == x \n \t execute build \n \t until inventory == x [end]|[start] option : \n \t init b != 2 \n \t execute find \n \t until inventory > 2 [end]|[start] option : \n \t init position != x \n \t execute build \n \t until inventory != y [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 0 \n \t execute build \n \t until b < 1 [end]|[start] policy b := \n \t if position > x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until position >= y [end]|[start] option : \n \t init position == 2 \n \t execute build \n \t until b > y [end]|[start] policy a := \n \t if iron < y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 2 \n \t execute run \n \t until inventory != 0 [end]|[start] policy b := \n \t if a > y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position < x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 1 \n \t execute run \n \t until a == 0 [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until b != 1 [end]|[start] option : \n \t init inventory > 2 \n \t execute use \n \t until position > x [end]|[start] policy b := \n \t if position > x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until b < 2 [end]|[start] policy a := \n \t if iron != 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 1 \n \t execute run \n \t until a == 2 [end]|[start] policy b := \n \t if b : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position > x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > x \n \t execute build \n \t until position <= 2 [end]|[start] option : \n \t init inventory != 0 \n \t execute use \n \t until position < 1 [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 0 \n \t execute find \n \t until x [end]|[start] policy a := \n \t if a != 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b < x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until inventory < 0 [end]|[start] option : \n \t init position > 0 \n \t execute run \n \t until position < 1 [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until b >= 0 [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until a == 2 [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until a != y [end]|[start] option : \n \t init position > 2 \n \t execute use \n \t until position [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until x [end]|[start] option : \n \t init b > 2 \n \t execute build \n \t until b < 1 [end]|[start] option : \n \t init position == 2 \n \t execute use \n \t until b <= 1 [end]|[start] option : \n \t init b == y \n \t execute run \n \t until a == 2 [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until position <= x [end]|[start] policy a := \n \t if position >= y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a <= y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position > y \n \t execute run \n \t until position >= 2 [end]|[start] option : \n \t init a == 1 \n \t execute use \n \t until inventory != y [end]|[start] policy b := \n \t if a > x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position != y \n \t execute build \n \t until inventory != 2 [end]|[start] option : \n \t init a > 1 \n \t execute find \n \t until position <= 1 [end]|[start] policy b := \n \t if b > y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > x : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b < x \n \t execute build \n \t until b >= 2 [end]|[start] policy a := \n \t if a < 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until position >= y [end]|[start] policy b := \n \t if iron == y : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until b > x [end]|[start] option : \n \t init position == 2 \n \t execute use \n \t until b >= x [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until b < 0 [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until inventory == y [end]|[start] policy a := \n \t if a != 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until a <= 0 [end]|[start] option : \n \t init a < x \n \t execute build \n \t until b > 1 [end]|[start] policy b := \n \t if position <= x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until inventory [end]|[start] policy a := \n \t if b < 0 : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until a >= 1 [end]|[start] policy a := \n \t if position > 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 1 \n \t execute jump \n \t until y [end]|[start] policy a := \n \t if b >= 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init x \n \t execute find \n \t until a <= 2 [end]|[start] policy a := \n \t if iron > y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a != x \n \t execute find \n \t until b < y [end]|[start] policy a := \n \t if position <= 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 0 \n \t execute find \n \t until a == x [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until b < 0 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until position != 0 [end]|[start] policy b := \n \t if position < 1 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 0 \n \t execute run \n \t until position <= y [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until b >= y [end]|[start] policy b := \n \t if iron <= x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until b >= x [end]|[start] policy a := \n \t if a >= 2 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until inventory != 1 [end]|[start] policy a := \n \t if b < 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b \n \t execute run \n \t until a != y [end]|[start] policy b := \n \t if position <= x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until b <= 2 [end]|[start] option : \n \t init a < x \n \t execute build \n \t until b <= 0 [end]|[start] option : \n \t init inventory > y \n \t execute find \n \t until inventory [end]|[start] option : \n \t init b != 0 \n \t execute find \n \t until a == y [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 0 \n \t execute find \n \t until inventory <= y [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until b > 0 [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until inventory >= x [end]|[start] option : \n \t init inventory < x \n \t execute build \n \t until a > 1 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 1 \n \t execute use \n \t until position < 2 [end]|[start] option : \n \t init inventory \n \t execute use \n \t until position > 1 [end]|[start] option : \n \t init inventory < y \n \t execute use \n \t until b == y [end]|[start] option : \n \t init inventory > 1 \n \t execute jump \n \t until position < 0 [end]|[start] option : \n \t init a == 1 \n \t execute build \n \t until position <= 1 [end]|[start] option : \n \t init a != x \n \t execute build \n \t until a <= 2 [end]|[start] policy a := \n \t if b != 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until a == 0 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 1 \n \t execute build \n \t until b != 2 [end]|[start] option : \n \t init inventory >= 1 \n \t execute build \n \t until position [end]|[start] option : \n \t init a > y \n \t execute build \n \t until inventory > x [end]|[start] option : \n \t init a <= y \n \t execute run \n \t until a != 2 [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until position > 2 [end]|[start] policy b := \n \t if a <= y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute find \n \t until a > x [end]|[start] policy b := \n \t if iron >= x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position > y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until b == 1 [end]|[start] option : \n \t init a == y \n \t execute use \n \t until position > y [end]|[start] option : \n \t init b < 2 \n \t execute jump \n \t until position >= y [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until a <= y [end]|[start] option : \n \t init position >= y \n \t execute use \n \t until b != 1 [end]|[start] option : \n \t init inventory <= x \n \t execute use \n \t until a <= 2 [end]|[start] policy a := \n \t if position < 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b > y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position != y \n \t execute run \n \t until b > 2 [end]|[start] option : \n \t init position != x \n \t execute find \n \t until b == y [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 2 \n \t execute jump \n \t until a > x [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b <= y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory \n \t execute run \n \t until inventory < 2 [end]|[start] policy a := \n \t if b != 1 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 2 \n \t execute run \n \t until b != 2 [end]|[start] policy b := \n \t if a >= y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= x \n \t execute jump \n \t until a < 2 [end]|[start] option : \n \t init position == 2 \n \t execute build \n \t until a >= 2 [end]|[start] policy a := \n \t if a == x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != x \n \t execute use \n \t until y [end]|[start] policy a := \n \t if a > 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until b >= x [end]|[start] option : \n \t init position != 1 \n \t execute run \n \t until b == x [end]|[start] policy a := \n \t if b == x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until b <= 0 [end]|[start] option : \n \t init b == y \n \t execute use \n \t until a != 1 [end]|[start] policy b := \n \t if a == y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 2 \n \t execute use \n \t until inventory >= x [end]|[start] option : \n \t init position <= y \n \t execute find \n \t until inventory <= x [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until a > 2 [end]|[start] option : \n \t init a < 1 \n \t execute jump \n \t until b == x [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until a <= 0 [end]|[start] policy a := \n \t if iron != 1 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a > y \n \t execute build \n \t until position == 2 [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until inventory >= 1 [end]|[start] policy a := \n \t if b != y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init x \n \t execute build \n \t until inventory > 1 [end]|[start] option : \n \t init b > 0 \n \t execute use \n \t until b < x [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until b >= 1 [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until b == x [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute run \n \t until position == y [end]|[start] option : \n \t init inventory < 2 \n \t execute run \n \t until b != y [end]|[start] policy b := \n \t if position < y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 1 \n \t execute use \n \t until b > x [end]|[start] policy a := \n \t if iron == 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 1 \n \t execute run \n \t until b <= 1 [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= y \n \t execute run \n \t until position != 1 [end]|[start] option : \n \t init b < 2 \n \t execute use \n \t until a < x [end]|[start] policy b := \n \t if b <= x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= y \n \t execute run \n \t until b > x [end]|[start] policy a := \n \t if position != 0 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 0 \n \t execute jump \n \t until position == 2 [end]|[start] policy a := \n \t if b == y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != x : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until position > y [end]|[start] policy a := \n \t if position != x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute find \n \t until position < 2 [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until y [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until b != x [end]|[start] policy b := \n \t if position > x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a != x \n \t execute find \n \t until inventory > 0 [end]|[start] option : \n \t init inventory != x \n \t execute run \n \t until position != 0 [end]|[start] policy b := \n \t if b == x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < y \n \t execute build \n \t until inventory != x [end]|[start] policy b := \n \t if iron >= x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until position > 2 [end]|[start] option : \n \t init b > x \n \t execute find \n \t until position == 0 [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until a != 2 [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until b > 2 [end]|[start] policy a := \n \t if b < y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= x \n \t execute find \n \t until a > x [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until position <= y [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position != x \n \t execute run \n \t until position >= 0 [end]|[start] policy a := \n \t if b == y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until inventory != x [end]|[start] option : \n \t init position \n \t execute build \n \t until b == 1 [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until b != 2 [end]|[start] option : \n \t init inventory > 1 \n \t execute find \n \t until position != y [end]|[start] option : \n \t init b < y \n \t execute build \n \t until x [end]|[start] option : \n \t init position != y \n \t execute find \n \t until inventory <= 0 [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 2 \n \t execute jump \n \t until inventory <= x [end]|[start] policy b := \n \t if b <= y : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute use \n \t until a == 2 [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until position != y [end]|[start] policy a := \n \t if position >= 1 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute use \n \t until inventory < 2 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > x \n \t execute build \n \t until a == y [end]|[start] policy a := \n \t if b == y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position == y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until b == 1 [end]|[start] option : \n \t init b != 0 \n \t execute find \n \t until position < 0 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until position >= y [end]|[start] policy a := \n \t if iron < 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until a <= 2 [end]|[start] policy a := \n \t if a > 1 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b < x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until position != 2 [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until inventory <= 2 [end]|[start] policy a := \n \t if b > 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < x : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron != 1 : \n \t execute build \n [end]|[start] option : \n \t init a < 0 \n \t execute find \n \t until position != 0 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init y \n \t execute jump \n \t until a > x [end]|[start] option : \n \t init a == 2 \n \t execute jump \n \t until inventory != 1 [end]|[start] policy a := \n \t if position != 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 1 \n \t execute find \n \t until b >= 2 [end]|[start] option : \n \t init position \n \t execute use \n \t until b < 2 [end]|[start] option : \n \t init position != x \n \t execute find \n \t until b <= 2 [end]|[start] option : \n \t init b > x \n \t execute find \n \t until position > y [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == y \n \t execute run \n \t until b < x [end]|[start] policy b := \n \t if b <= x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until inventory >= 2 [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until inventory == x [end]|[start] policy b := \n \t if iron >= x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until inventory <= 0 [end]|[start] policy a := \n \t if iron : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until b != 2 [end]|[start] policy a := \n \t if position != 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a != x \n \t execute use \n \t until a != 0 [end]|[start] policy a := \n \t if b < x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position \n \t execute run \n \t until b == 1 [end]|[start] option : \n \t init b < 2 \n \t execute jump \n \t until position > x [end]|[start] option : \n \t init position >= x \n \t execute build \n \t until b < 0 [end]|[start] option : \n \t init position >= 0 \n \t execute find \n \t until inventory > x [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until a < x [end]|[start] policy b := \n \t if position == y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 2 \n \t execute build \n \t until inventory <= 1 [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until b < 0 [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until a > y [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until position != x [end]|[start] option : \n \t init a \n \t execute build \n \t until position != 0 [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b != x \n \t execute use \n \t until position > x [end]|[start] policy a := \n \t if position > x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until a == 1 [end]|[start] policy a := \n \t if iron == 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > y \n \t execute find \n \t until position == x [end]|[start] policy a := \n \t if a > 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > x \n \t execute use \n \t until inventory <= 0 [end]|[start] policy a := \n \t if iron != 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= y \n \t execute jump \n \t until inventory >= y [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init y \n \t execute jump \n \t until inventory >= x [end]|[start] policy b := \n \t if a < 2 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until position >= 0 [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until b == y [end]|[start] option : \n \t init position != x \n \t execute run \n \t until b == 2 [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until b != x [end]|[start] option : \n \t init inventory == x \n \t execute build \n \t until a >= 0 [end]|[start] policy b := \n \t if position > y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until inventory != 1 [end]|[start] policy b := \n \t if position <= x : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 2 \n \t execute use \n \t until inventory > y [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until a == 1 [end]|[start] policy b := \n \t if b != x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until position < 2 [end]|[start] option : \n \t init position <= 2 \n \t execute build \n \t until position <= 1 [end]|[start] option : \n \t init b > x \n \t execute build \n \t until position > x [end]|[start] policy b := \n \t if a == x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 1 \n \t execute build \n \t until b >= x [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until b <= y [end]|[start] policy a := \n \t if a <= x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute use \n \t until inventory == 2 [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until position < y [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until inventory < 0 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 2 \n \t execute build \n \t until position >= 1 [end]|[start] policy b := \n \t if iron < x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute run \n \t until a <= y [end]|[start] policy b := \n \t if a : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a <= x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 2 \n \t execute jump \n \t until a <= 2 [end]|[start] policy a := \n \t if a != 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until position < y [end]|[start] option : \n \t init inventory > 0 \n \t execute jump \n \t until inventory < x [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until b < y [end]|[start] policy a := \n \t if a == x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != x \n \t execute jump \n \t until b [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 2 \n \t execute build \n \t until inventory > 1 [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until position == 2 [end]|[start] option : \n \t init b == y \n \t execute build \n \t until inventory <= y [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron > 1 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > y \n \t execute build \n \t until inventory < y [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until b != y [end]|[start] option : \n \t init b != 1 \n \t execute find \n \t until b < 2 [end]|[start] policy a := \n \t if b == y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b > y \n \t execute run \n \t until position > 2 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until b == 0 [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= y \n \t execute find \n \t until b > 0 [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until inventory < y [end]|[start] policy b := \n \t if a >= y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until inventory > x [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until inventory > y [end]|[start] policy b := \n \t if iron : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b == y \n \t execute jump \n \t until inventory > y [end]|[start] policy b := \n \t if iron <= y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 2 \n \t execute run \n \t until position != 1 [end]|[start] option : \n \t init position <= 2 \n \t execute find \n \t until a != 2 [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 2 \n \t execute use \n \t until position == 2 [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until a >= x [end]|[start] option : \n \t init position < y \n \t execute run \n \t until a > x [end]|[start] policy a := \n \t if a != x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 2 \n \t execute find \n \t until a == x [end]|[start] policy a := \n \t if b >= x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 0 \n \t execute find \n \t until position < x [end]|[start] policy a := \n \t if iron == 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b > x \n \t execute build \n \t until b == 1 [end]|[start] policy a := \n \t if b > x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until b < 2 [end]|[start] option : \n \t init a != 2 \n \t execute find \n \t until inventory > y [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until b > y [end]|[start] policy b := \n \t if a >= y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= y \n \t execute use \n \t until inventory >= 1 [end]|[start] policy a := \n \t if b != x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until inventory != x [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until inventory >= y [end]|[start] option : \n \t init position > x \n \t execute run \n \t until position < y [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until a >= 0 [end]|[start] policy b := \n \t if b >= y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 1 \n \t execute find \n \t until inventory < 2 [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until b <= 1 [end]|[start] option : \n \t init inventory == 2 \n \t execute run \n \t until a < 0 [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until position >= 0 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > x \n \t execute run \n \t until position != 2 [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until b <= 0 [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until position > 0 [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until position <= 2 [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until a <= 1 [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a <= x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > y : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position > x \n \t execute run \n \t until b < 2 [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until inventory != x [end]|[start] policy a := \n \t if position <= 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a < y \n \t execute find \n \t until position == y [end]|[start] policy a := \n \t if position != 0 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position == y \n \t execute build \n \t until inventory == 1 [end]|[start] option : \n \t init b < 1 \n \t execute run \n \t until a > 0 [end]|[start] option : \n \t init position > 2 \n \t execute use \n \t until a != y [end]|[start] policy a := \n \t if iron < x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 1 \n \t execute use \n \t until b <= x [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until inventory [end]|[start] option : \n \t init a != 1 \n \t execute use \n \t until b == 0 [end]|[start] policy a := \n \t if position != 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 2 \n \t execute build \n \t until a == y [end]|[start] option : \n \t init a > y \n \t execute find \n \t until inventory < 2 [end]|[start] option : \n \t init position != 2 \n \t execute build \n \t until a < 1 [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until position >= 2 [end]|[start] policy b := \n \t if b <= 2 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b != x \n \t execute run \n \t until inventory != y [end]|[start] option : \n \t init inventory > 0 \n \t execute build \n \t until a != y [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until a >= 1 [end]|[start] option : \n \t init b \n \t execute jump \n \t until a <= x [end]|[start] policy b := \n \t if b >= y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != x \n \t execute run \n \t until a <= 0 [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until b <= 2 [end]|[start] policy a := \n \t if iron <= x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until a == x [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until position > y [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until position <= 1 [end]|[start] option : \n \t init b == 2 \n \t execute build \n \t until position == 2 [end]|[start] option : \n \t init a > 2 \n \t execute find \n \t until position >= y [end]|[start] option : \n \t init a < x \n \t execute find \n \t until b != y [end]|[start] policy a := \n \t if a <= 2 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a <= y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until position >= 0 [end]|[start] policy b := \n \t if position == y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 1 \n \t execute run \n \t until inventory != 0 [end]|[start] option : \n \t init position < 2 \n \t execute find \n \t until b < 1 [end]|[start] policy a := \n \t if iron > x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until inventory == 1 [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until position >= 2 [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position < x \n \t execute run \n \t until a > 2 [end]|[start] option : \n \t init position >= 2 \n \t execute use \n \t until b == y [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until a == 1 [end]|[start] option : \n \t init inventory != 1 \n \t execute use \n \t until inventory >= 0 [end]|[start] policy b := \n \t if position == x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 2 \n \t execute build \n \t until a > y [end]|[start] policy b := \n \t if a == x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until a [end]|[start] policy a := \n \t if position > 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 2 \n \t execute jump \n \t until inventory > x [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until b <= x [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until b == 0 [end]|[start] policy b := \n \t if b > 0 : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == y \n \t execute build \n \t until b >= 1 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a \n \t execute find \n \t until b [end]|[start] option : \n \t init position <= 1 \n \t execute use \n \t until inventory > x [end]|[start] policy a := \n \t if b < x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 0 \n \t execute find \n \t until inventory < 1 [end]|[start] policy b := \n \t if a < 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b <= 1 : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= y \n \t execute find \n \t until position < y [end]|[start] policy a := \n \t if b <= 1 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > x \n \t execute build \n \t until a != 1 [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until b != x [end]|[start] policy a := \n \t if b > 2 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until position == 2 [end]|[start] policy a := \n \t if b > y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until position < y [end]|[start] policy b := \n \t if a == y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute jump \n \t until b != 0 [end]|[start] option : \n \t init a \n \t execute build \n \t until position != 1 [end]|[start] option : \n \t init inventory > y \n \t execute jump \n \t until a <= 2 [end]|[start] policy a := \n \t if position >= y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 0 \n \t execute run \n \t until b >= x [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until inventory <= 0 [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until a < x [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 0 \n \t execute find \n \t until inventory > 2 [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until inventory <= 1 [end]|[start] option : \n \t init b <= x \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init a != x \n \t execute use \n \t until a < x [end]|[start] option : \n \t init b <= 2 \n \t execute build \n \t until position < 0 [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until position <= 1 [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 2 \n \t execute find \n \t until position <= 0 [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until inventory <= 1 [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until inventory == 1 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 1 \n \t execute find \n \t until b != 1 [end]|[start] policy b := \n \t if position > y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a > y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until b != 1 [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until a != 0 [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b == y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position < y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until b != 1 [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b != y \n \t execute use \n \t until position != y [end]|[start] policy a := \n \t if a != 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until b < y [end]|[start] policy b := \n \t if b < y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == x : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until position == y [end]|[start] policy a := \n \t if a == 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until inventory != 0 [end]|[start] policy a := \n \t if b > 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == y : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 0 \n \t execute build \n \t until b < y [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until position > y [end]|[start] policy a := \n \t if position == 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 1 \n \t execute jump \n \t until position >= 2 [end]|[start] option : \n \t init inventory == 0 \n \t execute find \n \t until a == x [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a < x \n \t execute use \n \t until position <= 2 [end]|[start] policy b := \n \t if iron > y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until inventory == y [end]|[start] option : \n \t init b == x \n \t execute run \n \t until a [end]|[start] policy b := \n \t if a < 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < 2 \n \t execute find \n \t until b == y [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until a == 2 [end]|[start] option : \n \t init position >= 0 \n \t execute build \n \t until a [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position == x \n \t execute use \n \t until a == 1 [end]|[start] option : \n \t init a <= 0 \n \t execute run \n \t until inventory > 2 [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b > y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < x \n \t execute build \n \t until a > 2 [end]|[start] policy b := \n \t if b >= x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until inventory != x [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until y [end]|[start] option : \n \t init inventory >= 0 \n \t execute build \n \t until b >= x [end]|[start] option : \n \t init inventory >= y \n \t execute run \n \t until b >= y [end]|[start] policy a := \n \t if a != 2 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory \n \t execute jump \n \t until a [end]|[start] policy b := \n \t if position == y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 0 \n \t execute use \n \t until b > 0 [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until b > 1 [end]|[start] option : \n \t init position > 0 \n \t execute build \n \t until b != 1 [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until a >= x [end]|[start] policy a := \n \t if a != x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 2 \n \t execute find \n \t until a >= 1 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b < y \n \t execute use \n \t until position <= 1 [end]|[start] policy a := \n \t if position == 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until a > 0 [end]|[start] policy b := \n \t if iron == y : \n \t execute find \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron == y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position == y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= 0 \n \t execute jump \n \t until b > x [end]|[start] policy b := \n \t if position != x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until a < 2 [end]|[start] option : \n \t init inventory < y \n \t execute use \n \t until b > x [end]|[start] policy a := \n \t if a < x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until a == y [end]|[start] policy b := \n \t if b >= y : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until position == 1 [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until inventory >= 1 [end]|[start] policy a := \n \t if b == 0 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= 2 : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != x \n \t execute use \n \t until position == y [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until inventory <= 1 [end]|[start] option : \n \t init inventory \n \t execute find \n \t until inventory >= 1 [end]|[start] option : \n \t init inventory > 0 \n \t execute jump \n \t until a < 1 [end]|[start] option : \n \t init a < 0 \n \t execute jump \n \t until position > x [end]|[start] option : \n \t init a >= x \n \t execute run \n \t until inventory > 1 [end]|[start] option : \n \t init a != 1 \n \t execute jump \n \t until inventory > x [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until a <= 1 [end]|[start] policy b := \n \t if b != x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until position [end]|[start] policy a := \n \t if b > 1 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= x \n \t execute jump \n \t until inventory >= 2 [end]|[start] policy b := \n \t if a >= x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 1 \n \t execute jump \n \t until a != x [end]|[start] policy a := \n \t if iron >= x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until a < y [end]|[start] option : \n \t init position < y \n \t execute use \n \t until a == y [end]|[start] policy a := \n \t if iron != 2 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position >= y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a != x \n \t execute build \n \t until a <= 1 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b == 2 \n \t execute build \n \t until position < y [end]|[start] policy a := \n \t if b > 1 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 1 \n \t execute find \n \t until b < 1 [end]|[start] policy a := \n \t if position >= 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 0 \n \t execute use \n \t until b > 1 [end]|[start] option : \n \t init b != 0 \n \t execute jump \n \t until position <= 0 [end]|[start] policy a := \n \t if iron == x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != y \n \t execute build \n \t until position < 1 [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b < y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until inventory >= x [end]|[start] policy b := \n \t if iron > x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 2 \n \t execute run \n \t until position == x [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until inventory > y [end]|[start] option : \n \t init inventory >= y \n \t execute run \n \t until position > 1 [end]|[start] policy b := \n \t if a == 2 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until b [end]|[start] option : \n \t init b <= 2 \n \t execute jump \n \t until inventory == 1 [end]|[start] policy a := \n \t if a != x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until a == x [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a > x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= 1 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 2 \n \t execute jump \n \t until inventory == x [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until inventory < x [end]|[start] policy a := \n \t if iron == 2 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until a < 2 [end]|[start] policy a := \n \t if position > 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position < y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == y \n \t execute jump \n \t until position < x [end]|[start] option : \n \t init a == 1 \n \t execute jump \n \t until position != y [end]|[start] option : \n \t init a != 2 \n \t execute use \n \t until inventory != 1 [end]|[start] policy a := \n \t if iron < 2 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 1 \n \t execute run \n \t until b == x [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > x \n \t execute use \n \t until position >= 2 [end]|[start] option : \n \t init a >= 2 \n \t execute run \n \t until position <= x [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until b >= y [end]|[start] option : \n \t init a != x \n \t execute find \n \t until inventory < 2 [end]|[start] policy b := \n \t if position >= y : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until b < x [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until position > 1 [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until inventory >= y [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until b <= 2 [end]|[start] option : \n \t init position < y \n \t execute find \n \t until a == y [end]|[start] policy a := \n \t if iron : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until b >= 2 [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until b [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position \n \t execute build \n \t until position >= 0 [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until a < y [end]|[start] option : \n \t init b == y \n \t execute jump \n \t until position != x [end]|[start] policy a := \n \t if position == 1 : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until inventory == x [end]|[start] policy a := \n \t if position == 0 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a < x \n \t execute build \n \t until b > 2 [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until b >= 1 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until inventory == 2 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a == x \n \t execute use \n \t until inventory < 0 [end]|[start] option : \n \t init b == 1 \n \t execute jump \n \t until inventory > y [end]|[start] policy b := \n \t if b != x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 1 \n \t execute jump \n \t until y [end]|[start] option : \n \t init position != 2 \n \t execute find \n \t until b < x [end]|[start] option : \n \t init a > 1 \n \t execute build \n \t until a > x [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until a != 0 [end]|[start] option : \n \t init position > x \n \t execute jump \n \t until position > 0 [end]|[start] option : \n \t init a > x \n \t execute build \n \t until b < 2 [end]|[start] policy b := \n \t if position < 2 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until inventory != x [end]|[start] policy b := \n \t if a < 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == y \n \t execute run \n \t until a >= 1 [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until b >= 0 [end]|[start] option : \n \t init a > 0 \n \t execute find \n \t until b <= x [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until position <= y [end]|[start] policy a := \n \t if iron : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron < x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron == x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == y \n \t execute run \n \t until a < x [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until inventory == y [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until a != 0 [end]|[start] policy b := \n \t if b <= x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until inventory > y [end]|[start] option : \n \t init a == 0 \n \t execute run \n \t until b != 0 [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until position > 1 [end]|[start] policy b := \n \t if position != y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= x \n \t execute use \n \t until position == 2 [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b == y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init x \n \t execute run \n \t until b == 1 [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until a > 1 [end]|[start] policy a := \n \t if position > 2 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until position != 2 [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until inventory != 1 [end]|[start] policy a := \n \t if a < 2 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 0 \n \t execute jump \n \t until b != 2 [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until b >= 2 [end]|[start] policy a := \n \t if a != x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 2 \n \t execute jump \n \t until inventory <= 1 [end]|[start] option : \n \t init position >= 0 \n \t execute find \n \t until a > 1 [end]|[start] option : \n \t init a == 0 \n \t execute run \n \t until a > y [end]|[start] policy a := \n \t if position == 0 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position == x \n \t execute build \n \t until b > 1 [end]|[start] policy a := \n \t if position == 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until b >= y [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until inventory [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until a != 1 [end]|[start] option : \n \t init b <= y \n \t execute jump \n \t until a == 2 [end]|[start] option : \n \t init b < 0 \n \t execute jump \n \t until b < 1 [end]|[start] policy a := \n \t if position < 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 1 \n \t execute build \n \t until inventory <= 2 [end]|[start] option : \n \t init inventory == 2 \n \t execute build \n \t until inventory < 1 [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until a <= y [end]|[start] option : \n \t init inventory > 0 \n \t execute build \n \t until b > y [end]|[start] option : \n \t init inventory > 0 \n \t execute jump \n \t until position == 2 [end]|[start] policy b := \n \t if b > y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 1 \n \t execute run \n \t until a >= 0 [end]|[start] policy a := \n \t if position < x : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 2 \n \t execute find \n \t until inventory >= 2 [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until b [end]|[start] option : \n \t init b > 2 \n \t execute build \n \t until b != 2 [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until a >= y [end]|[start] option : \n \t init a >= 1 \n \t execute run \n \t until a <= x [end]|[start] option : \n \t init b == 2 \n \t execute jump \n \t until inventory >= 1 [end]|[start] option : \n \t init a == y \n \t execute find \n \t until b <= 0 [end]|[start] policy b := \n \t if position != y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until position == x [end]|[start] policy a := \n \t if b < 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position < y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b != 0 : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute run \n \t until a != 0 [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until b <= 0 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == y : \n \t execute build \n [end]|[start] option : \n \t init a != x \n \t execute jump \n \t until inventory <= 2 [end]|[start] option : \n \t init b > x \n \t execute use \n \t until a <= 1 [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until a != 1 [end]|[start] option : \n \t init position > 2 \n \t execute build \n \t until b >= x [end]|[start] option : \n \t init a != 2 \n \t execute find \n \t until b <= 1 [end]|[start] option : \n \t init b < x \n \t execute build \n \t until a <= 2 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a >= x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 0 \n \t execute run \n \t until a <= y [end]|[start] policy b := \n \t if iron != 0 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init y \n \t execute run \n \t until b >= y [end]|[start] policy b := \n \t if a <= y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until a > y [end]|[start] policy a := \n \t if position : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute use \n \t until position != 1 [end]|[start] option : \n \t init inventory == 1 \n \t execute build \n \t until a != y [end]|[start] option : \n \t init a \n \t execute build \n \t until inventory <= 0 [end]|[start] policy b := \n \t if a != y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b >= x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a < y \n \t execute find \n \t until position <= 0 [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until b <= x [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until position < 2 [end]|[start] policy b := \n \t if b < y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 1 \n \t execute jump \n \t until a > 0 [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until inventory == 0 [end]|[start] policy a := \n \t if b == x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b != x \n \t execute build \n \t until b == x [end]|[start] option : \n \t init a == 0 \n \t execute find \n \t until a <= 1 [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until position == x [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= x \n \t execute build \n \t until position != 1 [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until b > 2 [end]|[start] option : \n \t init position >= x \n \t execute find \n \t until position < 0 [end]|[start] option : \n \t init b < 2 \n \t execute jump \n \t until a > 2 [end]|[start] option : \n \t init inventory != y \n \t execute build \n \t until inventory < 2 [end]|[start] policy b := \n \t if iron : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b != y \n \t execute use \n \t until inventory < 2 [end]|[start] option : \n \t init position <= 0 \n \t execute use \n \t until b <= y [end]|[start] policy a := \n \t if a <= 1 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until b == x [end]|[start] policy a := \n \t if a == 0 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 2 \n \t execute build \n \t until x [end]|[start] policy a := \n \t if position == x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until position >= 2 [end]|[start] policy b := \n \t if b <= y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init y \n \t execute use \n \t until b <= 1 [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until position < 0 [end]|[start] policy a := \n \t if iron <= x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= y \n \t execute jump \n \t until a == 1 [end]|[start] policy a := \n \t if iron >= x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b > y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 0 \n \t execute build \n \t until inventory > y [end]|[start] policy a := \n \t if iron : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b >= x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != y \n \t execute find \n \t until b >= x [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= x \n \t execute find \n \t until b <= 2 [end]|[start] policy b := \n \t if position < 0 : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until position >= y [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until b >= 1 [end]|[start] policy a := \n \t if iron != 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b < y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a == x \n \t execute use \n \t until inventory [end]|[start] option : \n \t init inventory > 2 \n \t execute use \n \t until a != 0 [end]|[start] option : \n \t init a <= 2 \n \t execute use \n \t until a > 1 [end]|[start] policy a := \n \t if a > 0 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until a >= y [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until inventory == 1 [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until b == 0 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 1 \n \t execute find \n \t until a != 2 [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 2 \n \t execute jump \n \t until a >= y [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until a == 2 [end]|[start] option : \n \t init position >= 0 \n \t execute jump \n \t until b != 2 [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until a > 1 [end]|[start] option : \n \t init x \n \t execute build \n \t until position == 2 [end]|[start] option : \n \t init b != x \n \t execute jump \n \t until a == 0 [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until position > 0 [end]|[start] option : \n \t init inventory != 0 \n \t execute use \n \t until x [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 1 \n \t execute find \n \t until a == 2 [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until position < 0 [end]|[start] policy b := \n \t if position != y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= x \n \t execute use \n \t until position >= 0 [end]|[start] policy b := \n \t if position <= x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b \n \t execute build \n \t until inventory != y [end]|[start] option : \n \t init inventory != x \n \t execute use \n \t until inventory < 2 [end]|[start] policy a := \n \t if position == x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b < y \n \t execute find \n \t until position != 0 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until position > 1 [end]|[start] policy b := \n \t if a < y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until a <= 1 [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until b != 2 [end]|[start] policy b := \n \t if a < 1 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until position < 2 [end]|[start] policy b := \n \t if iron > x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position != y \n \t execute use \n \t until inventory <= 2 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 0 \n \t execute jump \n \t until inventory == 1 [end]|[start] policy a := \n \t if a == y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 2 \n \t execute find \n \t until position != x [end]|[start] option : \n \t init position \n \t execute jump \n \t until b < 1 [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != x \n \t execute jump \n \t until b > 1 [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until position != 0 [end]|[start] option : \n \t init b <= y \n \t execute jump \n \t until a <= 2 [end]|[start] option : \n \t init a != y \n \t execute build \n \t until inventory >= 2 [end]|[start] option : \n \t init a == 1 \n \t execute use \n \t until a <= y [end]|[start] policy b := \n \t if iron < x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < x \n \t execute run \n \t until position != 1 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 0 \n \t execute build \n \t until position < x [end]|[start] option : \n \t init a == y \n \t execute build \n \t until position != 0 [end]|[start] option : \n \t init b == y \n \t execute use \n \t until b != 0 [end]|[start] policy b := \n \t if position : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > 1 : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n [end]|[start] policy a := \n \t if b != x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 2 \n \t execute build \n \t until inventory < 2 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position == x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > y : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 0 \n \t execute run \n \t until b >= 1 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until a != 1 [end]|[start] option : \n \t init x \n \t execute jump \n \t until position == y [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until inventory <= y [end]|[start] policy a := \n \t if a >= x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory \n \t execute build \n \t until inventory <= x [end]|[start] option : \n \t init b != y \n \t execute run \n \t until inventory >= 0 [end]|[start] policy a := \n \t if b != 2 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b < y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until a >= x [end]|[start] policy a := \n \t if b <= x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until a >= x [end]|[start] policy a := \n \t if a != x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 2 \n \t execute build \n \t until b < 2 [end]|[start] policy a := \n \t if b == y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 0 \n \t execute build \n \t until b < 1 [end]|[start] option : \n \t init inventory < y \n \t execute build \n \t until position < 1 [end]|[start] policy a := \n \t if position != y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b == y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 1 \n \t execute run \n \t until b == 0 [end]|[start] policy b := \n \t if iron >= y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b < x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > x : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a >= 1 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until b < 1 [end]|[start] policy a := \n \t if a > 1 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until b [end]|[start] policy a := \n \t if b > y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until inventory > 0 [end]|[start] policy b := \n \t if position == x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until b > 1 [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until a != 0 [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until position < 0 [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until position > 1 [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < x : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until b < 0 [end]|[start] policy b := \n \t if b == y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 0 \n \t execute use \n \t until a > 0 [end]|[start] policy b := \n \t if a != 1 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position != x \n \t execute build \n \t until inventory > x [end]|[start] policy a := \n \t if b > x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 1 \n \t execute use \n \t until position > 1 [end]|[start] policy a := \n \t if iron : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position < x \n \t execute jump \n \t until inventory != 1 [end]|[start] option : \n \t init position >= 1 \n \t execute build \n \t until b == 0 [end]|[start] option : \n \t init position >= 2 \n \t execute build \n \t until position >= 2 [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until position == x [end]|[start] policy a := \n \t if a <= 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 0 \n \t execute build \n \t until a != y [end]|[start] policy a := \n \t if a < x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until position != y [end]|[start] option : \n \t init b < x \n \t execute find \n \t until inventory < 0 [end]|[start] option : \n \t init position >= 0 \n \t execute jump \n \t until inventory == x [end]|[start] policy b := \n \t if a < y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b == y \n \t execute build \n \t until position < 0 [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute build \n \t until a < 0 [end]|[start] option : \n \t init b > x \n \t execute find \n \t until a > 2 [end]|[start] policy a := \n \t if a < 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until inventory != 0 [end]|[start] policy b := \n \t if a != x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until b > 0 [end]|[start] policy a := \n \t if iron < 1 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 1 \n \t execute run \n \t until y [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until inventory > y [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until b [end]|[start] option : \n \t init y \n \t execute use \n \t until position != 0 [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until inventory == 2 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until a < 1 [end]|[start] option : \n \t init inventory < 0 \n \t execute build \n \t until a != x [end]|[start] policy a := \n \t if b == x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 2 \n \t execute find \n \t until position == 1 [end]|[start] policy a := \n \t if position != y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a < x \n \t execute find \n \t until b > 2 [end]|[start] option : \n \t init position == x \n \t execute use \n \t until position > 2 [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until b > y [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until position <= x [end]|[start] policy a := \n \t if a != 1 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute run \n \t until b > x [end]|[start] policy b := \n \t if a < y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until position < y [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until inventory != y [end]|[start] option : \n \t init position != x \n \t execute find \n \t until inventory != 0 [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until inventory [end]|[start] option : \n \t init a > x \n \t execute use \n \t until b == 0 [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 2 \n \t execute jump \n \t until a <= 1 [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b != y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b == y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 0 \n \t execute use \n \t until a > 0 [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != y : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute run \n \t until b != 1 [end]|[start] policy a := \n \t if a <= x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b > x \n \t execute run \n \t until b != x [end]|[start] policy b := \n \t if a != 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a <= x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b == x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 0 \n \t execute jump \n \t until a > y [end]|[start] policy a := \n \t if b > 2 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position < x \n \t execute use \n \t until inventory == y [end]|[start] policy a := \n \t if a : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until position >= 0 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until position != x [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until inventory > 1 [end]|[start] option : \n \t init inventory > 0 \n \t execute find \n \t until a > 0 [end]|[start] policy b := \n \t if a >= x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until position == 2 [end]|[start] policy a := \n \t if iron < 2 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 1 \n \t execute run \n \t until a != 1 [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until y [end]|[start] policy b := \n \t if position == y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until position == 1 [end]|[start] option : \n \t init inventory < x \n \t execute run \n \t until inventory <= 2 [end]|[start] policy a := \n \t if a == y : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until position >= 1 [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until position != y [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until a >= y [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until position [end]|[start] policy b := \n \t if position : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == x \n \t execute build \n \t until b >= 0 [end]|[start] option : \n \t init b <= 2 \n \t execute build \n \t until b == 2 [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until inventory <= 1 [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < y : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 1 \n \t execute run \n \t until inventory <= 0 [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until position < 0 [end]|[start] policy b := \n \t if iron <= y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a != y \n \t execute use \n \t until a [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a > x \n \t execute find \n \t until a > y [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until a < 1 [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until a >= x [end]|[start] policy a := \n \t if iron < x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until b != y [end]|[start] option : \n \t init b >= 1 \n \t execute find \n \t until inventory == 1 [end]|[start] policy b := \n \t if a <= x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b != y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a <= x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until position == 1 [end]|[start] policy a := \n \t if a < x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 0 \n \t execute use \n \t until b > y [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until position > 2 [end]|[start] policy b := \n \t if a == x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= y \n \t execute jump \n \t until position < 2 [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until a > 2 [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 2 \n \t execute find \n \t until inventory < 1 [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until a <= 2 [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until a <= y [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until a == y [end]|[start] policy a := \n \t if a <= y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= y \n \t execute find \n \t until a >= 2 [end]|[start] policy a := \n \t if iron == x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position > x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until position < 0 [end]|[start] option : \n \t init position == y \n \t execute jump \n \t until position > 2 [end]|[start] policy a := \n \t if a < 2 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position <= y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 1 \n \t execute jump \n \t until inventory == 2 [end]|[start] policy b := \n \t if position >= x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= x \n \t execute use \n \t until inventory < 1 [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until position > 2 [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until a >= 0 [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until b <= 1 [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until inventory > 2 [end]|[start] policy a := \n \t if position < 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until inventory == 2 [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until position != 0 [end]|[start] policy b := \n \t if a > y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until b <= 2 [end]|[start] policy a := \n \t if position : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position == y \n \t execute jump \n \t until a > y [end]|[start] policy a := \n \t if position >= y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= y \n \t execute find \n \t until y [end]|[start] policy b := \n \t if a == 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != x : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until b <= 0 [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until position < x [end]|[start] policy a := \n \t if position <= 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == y \n \t execute build \n \t until b < y [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until inventory <= 2 [end]|[start] policy b := \n \t if a < y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position >= x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == y \n \t execute find \n \t until position >= 2 [end]|[start] option : \n \t init a < 1 \n \t execute use \n \t until b < y [end]|[start] policy a := \n \t if b >= x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until position != 1 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until inventory >= 2 [end]|[start] policy a := \n \t if iron <= x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b >= y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 2 \n \t execute build \n \t until inventory < x [end]|[start] policy a := \n \t if position > y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute use \n \t until position > 1 [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 2 \n \t execute jump \n \t until a <= 2 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != x \n \t execute jump \n \t until a < y [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until inventory > 2 [end]|[start] policy b := \n \t if b == y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until b >= y [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until position >= 0 [end]|[start] option : \n \t init inventory >= 1 \n \t execute build \n \t until b > x [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until b < 0 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 2 \n \t execute jump \n \t until b > y [end]|[start] option : \n \t init b < 2 \n \t execute find \n \t until inventory != 0 [end]|[start] policy b := \n \t if b != x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute use \n \t until b < x [end]|[start] policy a := \n \t if b : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= x \n \t execute run \n \t until inventory < y [end]|[start] option : \n \t init position >= 1 \n \t execute use \n \t until inventory >= 0 [end]|[start] policy a := \n \t if iron > 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 0 \n \t execute find \n \t until inventory >= x [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position != x \n \t execute find \n \t until position != x [end]|[start] policy a := \n \t if a == y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= x : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 2 \n \t execute use \n \t until position < 2 [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until inventory <= y [end]|[start] policy b := \n \t if position >= y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until b < 0 [end]|[start] option : \n \t init a < 2 \n \t execute find \n \t until inventory == 0 [end]|[start] policy a := \n \t if position != 0 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position <= y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until b > x [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until b < x [end]|[start] policy b := \n \t if position >= y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b >= y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b > x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 1 \n \t execute run \n \t until inventory < 2 [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until inventory >= 2 [end]|[start] option : \n \t init position == 0 \n \t execute build \n \t until inventory <= 0 [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 1 \n \t execute use \n \t until position < 1 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position \n \t execute find \n \t until a >= x [end]|[start] option : \n \t init position > y \n \t execute run \n \t until inventory > 2 [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until b >= y [end]|[start] option : \n \t init b >= 1 \n \t execute use \n \t until position >= 0 [end]|[start] policy a := \n \t if iron : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until b [end]|[start] option : \n \t init position == 2 \n \t execute use \n \t until b != y [end]|[start] policy a := \n \t if position > 2 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 2 \n \t execute find \n \t until position == y [end]|[start] policy b := \n \t if position > x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= y \n \t execute run \n \t until position == y [end]|[start] policy a := \n \t if a == 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until inventory >= 1 [end]|[start] policy a := \n \t if iron : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until b < y [end]|[start] policy a := \n \t if b > x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a != x \n \t execute jump \n \t until position > y [end]|[start] policy b := \n \t if b >= y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute use \n \t until position != 0 [end]|[start] policy a := \n \t if a != y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until position > 2 [end]|[start] option : \n \t init a > 0 \n \t execute find \n \t until x [end]|[start] policy b := \n \t if iron == x : \n \t execute use \n [end]|[start] option : \n \t init position < y \n \t execute run \n \t until a < y [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a >= y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > x \n \t execute find \n \t until position != y [end]|[start] policy a := \n \t if a >= y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= y \n \t execute run \n \t until inventory == x [end]|[start] option : \n \t init a > 2 \n \t execute find \n \t until a <= 2 [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until inventory < 1 [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until b <= 2 [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until inventory > 0 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b == x \n \t execute run \n \t until position == 0 [end]|[start] policy b := \n \t if iron > x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position <= y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a < y \n \t execute find \n \t until inventory != 1 [end]|[start] policy a := \n \t if position <= y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= y \n \t execute jump \n \t until inventory > 1 [end]|[start] option : \n \t init a \n \t execute find \n \t until a != x [end]|[start] policy a := \n \t if a <= 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 1 \n \t execute use \n \t until a > 2 [end]|[start] policy b := \n \t if iron != y : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a > x \n \t execute find \n \t until inventory >= x [end]|[start] policy a := \n \t if iron > 1 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until a == y [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until b > 1 [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until inventory < x [end]|[start] policy a := \n \t if b >= 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b != x \n \t execute use \n \t until position < y [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory \n \t execute build \n \t until inventory == y [end]|[start] policy a := \n \t if position < 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != y \n \t execute build \n \t until b > 1 [end]|[start] policy a := \n \t if iron < 1 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b == y \n \t execute run \n \t until b >= x [end]|[start] policy a := \n \t if iron == 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != y \n \t execute find \n \t until position == y [end]|[start] policy a := \n \t if a >= 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a != x \n \t execute run \n \t until inventory > y [end]|[start] policy a := \n \t if position != y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until position > x [end]|[start] option : \n \t init inventory != 0 \n \t execute jump \n \t until b != 2 [end]|[start] policy a := \n \t if iron >= x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 2 \n \t execute use \n \t until a <= 0 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b < x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b != y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b == x \n \t execute run \n \t until position < y [end]|[start] policy a := \n \t if a > 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 1 \n \t execute run \n \t until b [end]|[start] option : \n \t init b != x \n \t execute jump \n \t until b == 0 [end]|[start] policy a := \n \t if iron <= y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a != x \n \t execute build \n \t until inventory <= 1 [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until a < 1 [end]|[start] option : \n \t init position > 2 \n \t execute build \n \t until a == y [end]|[start] option : \n \t init a <= 1 \n \t execute run \n \t until inventory > x [end]|[start] policy b := \n \t if a > x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 2 \n \t execute jump \n \t until position > 1 [end]|[start] policy a := \n \t if iron < y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 2 \n \t execute build \n \t until a >= 1 [end]|[start] policy b := \n \t if iron < x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until position <= 1 [end]|[start] option : \n \t init a <= x \n \t execute jump \n \t until a >= 1 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b != x \n \t execute use \n \t until a == 0 [end]|[start] policy b := \n \t if b < y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute use \n \t until position >= 0 [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until position < y [end]|[start] policy a := \n \t if iron > 1 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until position <= 0 [end]|[start] option : \n \t init b > x \n \t execute run \n \t until a != x [end]|[start] policy a := \n \t if iron <= x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a <= x : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until inventory < x [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until inventory != 0 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 0 \n \t execute build \n \t until position < x [end]|[start] policy b := \n \t if position >= x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until position == 0 [end]|[start] option : \n \t init a > 2 \n \t execute jump \n \t until inventory != y [end]|[start] policy b := \n \t if a >= y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a != y \n \t execute use \n \t until inventory >= 0 [end]|[start] policy b := \n \t if a >= y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until position <= x [end]|[start] option : \n \t init a > y \n \t execute build \n \t until inventory != x [end]|[start] option : \n \t init b >= 0 \n \t execute jump \n \t until position <= x [end]|[start] policy a := \n \t if b >= 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position > x \n \t execute run \n \t until b == 1 [end]|[start] option : \n \t init position != 1 \n \t execute use \n \t until a < y [end]|[start] policy a := \n \t if position >= x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until a < y [end]|[start] option : \n \t init position < y \n \t execute run \n \t until position < 0 [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until position < 1 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until b == x [end]|[start] policy b := \n \t if iron != y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute find \n \t until a != 0 [end]|[start] policy a := \n \t if iron > x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute use \n \t until a != 0 [end]|[start] option : \n \t init inventory < 0 \n \t execute build \n \t until inventory < y [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until inventory >= 2 [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until a <= 2 [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until inventory >= y [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until b < 1 [end]|[start] policy a := \n \t if a < 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 1 \n \t execute use \n \t until position < 0 [end]|[start] policy a := \n \t if b < 2 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until position == 2 [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until inventory == 0 [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 0 \n \t execute jump \n \t until y [end]|[start] policy a := \n \t if iron : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until b < 2 [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until position != 0 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until position >= 1 [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= y \n \t execute run \n \t until a > x [end]|[start] option : \n \t init a \n \t execute jump \n \t until a >= x [end]|[start] option : \n \t init position == 2 \n \t execute find \n \t until inventory >= 1 [end]|[start] option : \n \t init inventory < y \n \t execute run \n \t until inventory >= 2 [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until position != 1 [end]|[start] policy a := \n \t if iron == y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until a < 2 [end]|[start] option : \n \t init a != x \n \t execute build \n \t until b <= 2 [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until b > y [end]|[start] option : \n \t init position > 2 \n \t execute use \n \t until a [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until inventory < 0 [end]|[start] option : \n \t init b != 0 \n \t execute find \n \t until position < x [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until position > y [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until inventory <= 1 [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until b == x [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until position <= 1 [end]|[start] option : \n \t init a < y \n \t execute find \n \t until a == y [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 2 \n \t execute run \n \t until position != 0 [end]|[start] policy a := \n \t if position <= x : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b != 2 : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b > y \n \t execute build \n \t until b < y [end]|[start] policy a := \n \t if a < y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == x \n \t execute run \n \t until inventory >= 1 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a == x \n \t execute run \n \t until a >= x [end]|[start] policy b := \n \t if iron : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 0 \n \t execute jump \n \t until a < x [end]|[start] option : \n \t init b > 0 \n \t execute use \n \t until b < 2 [end]|[start] policy a := \n \t if position == 1 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until position == 1 [end]|[start] option : \n \t init inventory <= 2 \n \t execute use \n \t until inventory == 1 [end]|[start] policy a := \n \t if a > 0 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 0 \n \t execute use \n \t until inventory <= 2 [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until inventory == x [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b > 0 \n \t execute use \n \t until position != 2 [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron != y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until a > 0 [end]|[start] option : \n \t init inventory \n \t execute build \n \t until inventory == 0 [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until a != 2 [end]|[start] policy b := \n \t if a != 1 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < y \n \t execute use \n \t until a <= 1 [end]|[start] option : \n \t init inventory < 1 \n \t execute find \n \t until b == y [end]|[start] policy b := \n \t if a == 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 2 \n \t execute use \n \t until position <= y [end]|[start] policy b := \n \t if iron > y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= y \n \t execute find \n \t until inventory < 1 [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until a > 2 [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until position != 2 [end]|[start] option : \n \t init b != 0 \n \t execute use \n \t until b != 1 [end]|[start] policy b := \n \t if iron > y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != x : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 2 \n \t execute run \n \t until position > 0 [end]|[start] option : \n \t init b < 2 \n \t execute use \n \t until a > 1 [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until b == 0 [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until b != 1 [end]|[start] option : \n \t init position < y \n \t execute use \n \t until a <= 1 [end]|[start] option : \n \t init inventory > y \n \t execute find \n \t until a <= 1 [end]|[start] policy a := \n \t if position == y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < 2 \n \t execute jump \n \t until position == 2 [end]|[start] option : \n \t init b >= 2 \n \t execute jump \n \t until a <= x [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until a <= 0 [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until b < 2 [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until inventory >= 1 [end]|[start] policy a := \n \t if b > x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until position > x [end]|[start] policy b := \n \t if a != y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute build \n \t until inventory != 2 [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until b >= 2 [end]|[start] policy a := \n \t if position <= y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until a >= x [end]|[start] policy a := \n \t if b == 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until b < y [end]|[start] policy a := \n \t if a > y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until position [end]|[start] policy a := \n \t if b > 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until a <= x [end]|[start] option : \n \t init b <= 2 \n \t execute find \n \t until inventory >= 0 [end]|[start] option : \n \t init position != x \n \t execute use \n \t until inventory != x [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until a >= 2 [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 2 \n \t execute jump \n \t until inventory [end]|[start] policy b := \n \t if a == x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= x \n \t execute find \n \t until inventory >= 1 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 0 \n \t execute use \n \t until b <= 0 [end]|[start] policy b := \n \t if b >= x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until position > 0 [end]|[start] policy a := \n \t if a > x : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= y \n \t execute build \n \t until position != x [end]|[start] policy b := \n \t if b < 0 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until inventory [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until position > x [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until a == 2 [end]|[start] policy a := \n \t if position != 1 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a <= x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 1 \n \t execute build \n \t until inventory <= 0 [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 2 \n \t execute jump \n \t until a >= x [end]|[start] policy b := \n \t if a == 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position < y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until b > y [end]|[start] policy a := \n \t if a > x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until position < 1 [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until b < 2 [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until b != 0 [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until a >= 2 [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until position > 1 [end]|[start] policy b := \n \t if position > y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position >= y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute find \n \t until a <= x [end]|[start] option : \n \t init b == x \n \t execute find \n \t until inventory >= 0 [end]|[start] option : \n \t init position != x \n \t execute use \n \t until position >= 0 [end]|[start] policy a := \n \t if iron < 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 2 \n \t execute build \n \t until inventory >= 1 [end]|[start] policy a := \n \t if position < 2 : \n \t execute run \n [end]|[start] policy b := \n \t if b != x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until position > y [end]|[start] policy b := \n \t if position : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b > y \n \t execute run \n \t until inventory < 2 [end]|[start] policy a := \n \t if position : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute find \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position > x \n \t execute build \n \t until inventory >= 0 [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until inventory != x [end]|[start] policy a := \n \t if b < x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != x \n \t execute jump \n \t until b < 1 [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until b [end]|[start] policy a := \n \t if b == 1 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until a > 0 [end]|[start] policy a := \n \t if position != x : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != y \n \t execute jump \n \t until a >= 0 [end]|[start] option : \n \t init b >= 0 \n \t execute jump \n \t until inventory != 2 [end]|[start] policy b := \n \t if iron < x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 1 \n \t execute use \n \t until position >= 0 [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until b == x [end]|[start] policy b := \n \t if position >= x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until inventory > 0 [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until a == 1 [end]|[start] policy a := \n \t if b != 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position <= y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 0 \n \t execute build \n \t until a != x [end]|[start] policy b := \n \t if a != y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position != y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 0 \n \t execute use \n \t until a <= 0 [end]|[start] option : \n \t init b > 1 \n \t execute run \n \t until position > 0 [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until a > y [end]|[start] policy b := \n \t if a <= y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until a [end]|[start] option : \n \t init b < 1 \n \t execute build \n \t until inventory > y [end]|[start] policy b := \n \t if a == 0 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until b == x [end]|[start] policy a := \n \t if b == x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 1 \n \t execute find \n \t until a < x [end]|[start] policy a := \n \t if iron == y : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute find \n \t until inventory <= x [end]|[start] policy a := \n \t if iron <= x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until inventory <= 0 [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until a > 2 [end]|[start] policy b := \n \t if a < y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position > y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a >= y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a > y \n \t execute run \n \t until b != y [end]|[start] policy a := \n \t if b > y : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 0 \n \t execute build \n \t until a == 1 [end]|[start] policy a := \n \t if position > x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > y \n \t execute find \n \t until inventory > 0 [end]|[start] option : \n \t init a == 0 \n \t execute run \n \t until a != 0 [end]|[start] policy a := \n \t if iron == y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a <= y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b == x \n \t execute build \n \t until a > 1 [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == y \n \t execute run \n \t until inventory == y [end]|[start] policy a := \n \t if iron : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 1 \n \t execute find \n \t until inventory < 2 [end]|[start] policy a := \n \t if iron <= x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 0 \n \t execute jump \n \t until a != 2 [end]|[start] policy b := \n \t if b >= y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < x \n \t execute find \n \t until position == x [end]|[start] policy b := \n \t if position > y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == y \n \t execute run \n \t until a <= 1 [end]|[start] option : \n \t init position > 0 \n \t execute run \n \t until b > y [end]|[start] policy a := \n \t if position <= x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init y \n \t execute find \n \t until position >= 2 [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until y [end]|[start] policy a := \n \t if iron != 1 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= y \n \t execute find \n \t until position <= 0 [end]|[start] policy b := \n \t if iron < y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until b != y [end]|[start] policy a := \n \t if b == 1 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > y \n \t execute jump \n \t until a >= x [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron == y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b <= 0 : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position \n \t execute use \n \t until b > x [end]|[start] option : \n \t init a == x \n \t execute build \n \t until a <= y [end]|[start] option : \n \t init inventory > 0 \n \t execute find \n \t until position < 2 [end]|[start] policy a := \n \t if a < 0 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position \n \t execute build \n \t until b >= x [end]|[start] policy b := \n \t if position < y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory \n \t execute find \n \t until inventory [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until inventory > 0 [end]|[start] policy a := \n \t if b > 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute jump \n [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until a <= 1 [end]|[start] policy a := \n \t if iron <= x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position >= y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position > x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until position != 1 [end]|[start] option : \n \t init position >= 2 \n \t execute run \n \t until position > 1 [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until inventory == 0 [end]|[start] policy b := \n \t if b >= y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until inventory == 2 [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until position > 2 [end]|[start] option : \n \t init position <= y \n \t execute jump \n \t until inventory < 1 [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until b < 0 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 2 \n \t execute jump \n \t until a == x [end]|[start] option : \n \t init inventory < 2 \n \t execute jump \n \t until position < 2 [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= y \n \t execute run \n \t until inventory > 0 [end]|[start] option : \n \t init b == y \n \t execute find \n \t until inventory >= 0 [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 2 \n \t execute use \n \t until inventory != x [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until inventory == y [end]|[start] policy b := \n \t if a != 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until inventory < 2 [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until position > 2 [end]|[start] policy b := \n \t if b < y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute use \n \t until a < y [end]|[start] option : \n \t init b <= 1 \n \t execute run \n \t until inventory <= 2 [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until a < y [end]|[start] option : \n \t init b >= x \n \t execute build \n \t until a == 0 [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until b > x [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until a >= 2 [end]|[start] policy a := \n \t if iron < x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron > x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a != y \n \t execute find \n \t until position != y [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until position >= x [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until b < x [end]|[start] policy a := \n \t if b == 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron < x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 0 \n \t execute jump \n \t until b == x [end]|[start] policy a := \n \t if position != 0 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until position == x [end]|[start] policy a := \n \t if position <= 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until position <= y [end]|[start] option : \n \t init a <= 2 \n \t execute use \n \t until position < 0 [end]|[start] option : \n \t init inventory > x \n \t execute use \n \t until position < x [end]|[start] policy b := \n \t if b != y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until b <= y [end]|[start] option : \n \t init inventory == x \n \t execute use \n \t until b != 2 [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b < x : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute jump \n \t until a == 1 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position > x \n \t execute build \n \t until b < y [end]|[start] policy b := \n \t if iron == x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 0 \n \t execute run \n \t until b >= 1 [end]|[start] option : \n \t init position > 2 \n \t execute build \n \t until b != 1 [end]|[start] option : \n \t init b == 1 \n \t execute find \n \t until position < y [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until a >= y [end]|[start] policy a := \n \t if b < y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until inventory == 0 [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 2 \n \t execute run \n \t until inventory < 0 [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position >= x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until a [end]|[start] option : \n \t init a != x \n \t execute jump \n \t until a >= 1 [end]|[start] policy a := \n \t if a != y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until position <= 2 [end]|[start] policy b := \n \t if iron >= x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b <= x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until b >= x [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until position <= 2 [end]|[start] policy b := \n \t if position <= x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until inventory != 0 [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until inventory == x [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until inventory < x [end]|[start] option : \n \t init inventory >= 0 \n \t execute use \n \t until b >= 1 [end]|[start] option : \n \t init position >= x \n \t execute use \n \t until position > x [end]|[start] option : \n \t init position > 0 \n \t execute build \n \t until position != y [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until b < 2 [end]|[start] policy b := \n \t if a < 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= y \n \t execute jump \n \t until inventory < 1 [end]|[start] policy a := \n \t if a > 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron != y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position == x \n \t execute find \n \t until b <= y [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 2 \n \t execute jump \n \t until position >= 1 [end]|[start] policy a := \n \t if iron < x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 2 \n \t execute jump \n \t until a != 0 [end]|[start] option : \n \t init inventory != 2 \n \t execute use \n \t until position [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > x \n \t execute jump \n \t until inventory < 1 [end]|[start] option : \n \t init b <= y \n \t execute find \n \t until a <= x [end]|[start] option : \n \t init inventory >= x \n \t execute use \n \t until b >= y [end]|[start] option : \n \t init inventory < 1 \n \t execute use \n \t until inventory == 1 [end]|[start] option : \n \t init position >= 2 \n \t execute find \n \t until b == 0 [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until inventory == 1 [end]|[start] policy a := \n \t if a == 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= 1 : \n \t execute jump \n [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until a >= 0 [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until position != x [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until inventory < y [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until a < y [end]|[start] policy b := \n \t if a > y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a <= y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 0 \n \t execute use \n \t until inventory != y [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b > 0 \n \t execute jump \n \t until inventory [end]|[start] option : \n \t init a != y \n \t execute use \n \t until inventory >= 1 [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until a == y [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b < y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until b <= 0 [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until a != x [end]|[start] policy a := \n \t if a < y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a <= 1 : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until a == 1 [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position == y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= y \n \t execute run \n \t until inventory != y [end]|[start] option : \n \t init position > y \n \t execute use \n \t until position [end]|[start] option : \n \t init inventory == 2 \n \t execute jump \n \t until a > x [end]|[start] policy b := \n \t if iron != x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a < x \n \t execute build \n \t until b < x [end]|[start] policy b := \n \t if position < x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b == x \n \t execute run \n \t until b <= 1 [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until b <= x [end]|[start] option : \n \t init b == y \n \t execute jump \n \t until b >= y [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until a > x [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until a == 1 [end]|[start] option : \n \t init a == 0 \n \t execute build \n \t until b < y [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until b >= 0 [end]|[start] option : \n \t init inventory != 2 \n \t execute use \n \t until inventory <= x [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until position == 1 [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until b < 2 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < y \n \t execute build \n \t until a == x [end]|[start] policy a := \n \t if a : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 2 \n \t execute use \n \t until b <= y [end]|[start] policy b := \n \t if iron >= y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position <= y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 0 \n \t execute use \n \t until a >= y [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 1 \n \t execute jump \n \t until a >= 0 [end]|[start] policy a := \n \t if a < 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < x \n \t execute build \n \t until position <= y [end]|[start] policy a := \n \t if position < 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until b == 2 [end]|[start] option : \n \t init b != 0 \n \t execute jump \n \t until a >= 2 [end]|[start] policy a := \n \t if iron <= y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init x \n \t execute use \n \t until inventory > 2 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until b >= y [end]|[start] policy a := \n \t if iron != 2 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until inventory < 0 [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute jump \n \t until a > 2 [end]|[start] policy b := \n \t if a < 2 : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron != y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until position < 1 [end]|[start] option : \n \t init position >= 0 \n \t execute use \n \t until y [end]|[start] option : \n \t init position <= 1 \n \t execute run \n \t until b != 0 [end]|[start] policy b := \n \t if a >= y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 1 \n \t execute jump \n \t until b == x [end]|[start] policy a := \n \t if position >= 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until inventory >= 1 [end]|[start] option : \n \t init position >= 2 \n \t execute use \n \t until a [end]|[start] option : \n \t init y \n \t execute jump \n \t until b > 0 [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position \n \t execute use \n \t until position > x [end]|[start] option : \n \t init a < 0 \n \t execute jump \n \t until a > y [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until position <= 1 [end]|[start] option : \n \t init inventory <= 1 \n \t execute run \n \t until inventory != y [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until inventory > 1 [end]|[start] policy a := \n \t if b > 1 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until position >= 0 [end]|[start] policy a := \n \t if b != x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= y \n \t execute run \n \t until position < 0 [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until position > 2 [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position <= x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= x \n \t execute run \n \t until a > 2 [end]|[start] policy b := \n \t if position : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init x \n \t execute find \n \t until position < x [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until b != x [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position != y \n \t execute run \n \t until position >= 2 [end]|[start] policy a := \n \t if b > 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until b > x [end]|[start] option : \n \t init inventory != 2 \n \t execute build \n \t until a == y [end]|[start] policy a := \n \t if position == 2 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 2 \n \t execute build \n \t until inventory == x [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until b > 1 [end]|[start] option : \n \t init position > x \n \t execute find \n \t until a [end]|[start] option : \n \t init a < y \n \t execute run \n \t until inventory == x [end]|[start] option : \n \t init b == 2 \n \t execute build \n \t until a < 0 [end]|[start] option : \n \t init a < 1 \n \t execute jump \n \t until position <= 2 [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until a != x [end]|[start] option : \n \t init a > 0 \n \t execute find \n \t until b <= 0 [end]|[start] option : \n \t init b \n \t execute jump \n \t until b < y [end]|[start] policy a := \n \t if position < 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != x : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= 2 : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 1 \n \t execute jump \n \t until a <= y [end]|[start] policy b := \n \t if iron <= y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until inventory != 0 [end]|[start] option : \n \t init inventory < 0 \n \t execute build \n \t until inventory <= 2 [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == y \n \t execute build \n \t until inventory < 2 [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until b < 0 [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until a == 0 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 2 \n \t execute build \n \t until a < x [end]|[start] policy a := \n \t if position < x : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > y \n \t execute use \n \t until b <= 0 [end]|[start] policy a := \n \t if a == x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 1 \n \t execute run \n \t until a < x [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until a > x [end]|[start] policy a := \n \t if b == x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a > x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until a > x [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until a <= x [end]|[start] policy b := \n \t if position < y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 1 \n \t execute run \n \t until position <= 0 [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= x \n \t execute build \n \t until position [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until inventory [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 1 \n \t execute use \n \t until b == 2 [end]|[start] option : \n \t init inventory != x \n \t execute use \n \t until inventory <= x [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until position > 1 [end]|[start] option : \n \t init a > x \n \t execute use \n \t until inventory == x [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until position != 0 [end]|[start] option : \n \t init a != y \n \t execute run \n \t until a > 1 [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until x [end]|[start] policy a := \n \t if b != 1 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == x \n \t execute build \n \t until position >= 1 [end]|[start] option : \n \t init position == x \n \t execute use \n \t until position < x [end]|[start] policy b := \n \t if a < x : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b > y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until position > y [end]|[start] policy a := \n \t if a != y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 0 \n \t execute use \n \t until position < x [end]|[start] option : \n \t init b <= y \n \t execute find \n \t until inventory == y [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until inventory < 0 [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until b <= x [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 0 \n \t execute use \n \t until position < x [end]|[start] option : \n \t init position == x \n \t execute run \n \t until a > 1 [end]|[start] policy a := \n \t if position >= 1 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until position > 2 [end]|[start] option : \n \t init inventory > 2 \n \t execute run \n \t until position >= 0 [end]|[start] option : \n \t init a >= 0 \n \t execute build \n \t until inventory != 2 [end]|[start] option : \n \t init position <= 2 \n \t execute build \n \t until b == 2 [end]|[start] option : \n \t init position != 0 \n \t execute use \n \t until inventory > 2 [end]|[start] policy a := \n \t if b >= x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 2 \n \t execute run \n \t until a <= 1 [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a <= x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 2 \n \t execute jump \n \t until y [end]|[start] policy b := \n \t if a < y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 1 \n \t execute use \n \t until a [end]|[start] policy a := \n \t if b <= y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init y \n \t execute jump \n \t until position <= y [end]|[start] policy a := \n \t if b == 2 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until a <= 0 [end]|[start] policy a := \n \t if iron < 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until inventory < x [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until position > 0 [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until inventory >= 0 [end]|[start] policy b := \n \t if a < 2 : \n \t execute build \n [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a <= x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until inventory <= 2 [end]|[start] policy a := \n \t if a > 0 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until b == 1 [end]|[start] policy a := \n \t if iron >= y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute run \n \t until inventory >= 1 [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until position <= 1 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until a < y [end]|[start] option : \n \t init b == y \n \t execute build \n \t until position > y [end]|[start] option : \n \t init b <= y \n \t execute use \n \t until inventory == 1 [end]|[start] policy a := \n \t if b <= 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 0 \n \t execute use \n \t until position <= 1 [end]|[start] policy a := \n \t if position <= 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= y \n \t execute use \n \t until a != 0 [end]|[start] policy a := \n \t if a != y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 2 \n \t execute build \n \t until b >= y [end]|[start] policy b := \n \t if position == y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until a == 0 [end]|[start] policy a := \n \t if a == 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until inventory == 2 [end]|[start] policy b := \n \t if position >= x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until inventory > y [end]|[start] option : \n \t init position == y \n \t execute build \n \t until b <= x [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until a == 0 [end]|[start] policy b := \n \t if position < x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until b > 2 [end]|[start] option : \n \t init a == y \n \t execute find \n \t until b > 2 [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until b != y [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > y \n \t execute find \n \t until position > 2 [end]|[start] policy a := \n \t if b > 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 1 \n \t execute use \n \t until a != 1 [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until position >= 0 [end]|[start] policy a := \n \t if position == 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron == x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 1 \n \t execute build \n \t until position <= 2 [end]|[start] policy a := \n \t if iron <= y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= x \n \t execute find \n \t until position != 0 [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until b <= 0 [end]|[start] policy a := \n \t if a > 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until inventory <= x [end]|[start] policy a := \n \t if position == x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > x \n \t execute build \n \t until inventory >= y [end]|[start] policy b := \n \t if position > y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute build \n \t until inventory < 1 [end]|[start] option : \n \t init position > x \n \t execute build \n \t until inventory != x [end]|[start] policy a := \n \t if a > x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 2 \n \t execute find \n \t until a >= 1 [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until position > 2 [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 0 \n \t execute jump \n \t until b >= 0 [end]|[start] policy b := \n \t if b < y : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < x \n \t execute find \n \t until inventory < 1 [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until a > y [end]|[start] option : \n \t init inventory == y \n \t execute run \n \t until y [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until b > y [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until b > 2 [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until position == 1 [end]|[start] policy b := \n \t if a : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == y \n \t execute run \n \t until b < 0 [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until a > x [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until position >= y [end]|[start] policy b := \n \t if position == y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position != y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 1 \n \t execute jump \n \t until a == y [end]|[start] policy a := \n \t if position > y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until a == 2 [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until a <= 0 [end]|[start] policy a := \n \t if a == 0 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron != x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until position < 0 [end]|[start] policy a := \n \t if iron == 2 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == y \n \t execute find \n \t until b == 0 [end]|[start] policy a := \n \t if a != 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until a == 0 [end]|[start] policy a := \n \t if position == y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 2 \n \t execute jump \n \t until a > y [end]|[start] policy a := \n \t if a > 0 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position > x \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until b >= x [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until inventory != 1 [end]|[start] option : \n \t init inventory == 2 \n \t execute build \n \t until a < x [end]|[start] option : \n \t init a <= y \n \t execute jump \n \t until position [end]|[start] option : \n \t init b != 2 \n \t execute jump \n \t until inventory <= 0 [end]|[start] policy a := \n \t if iron < y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= y \n \t execute find \n \t until b <= 1 [end]|[start] policy a := \n \t if iron == x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until a < y [end]|[start] option : \n \t init inventory > x \n \t execute run \n \t until a <= 2 [end]|[start] option : \n \t init a \n \t execute run \n \t until a > y [end]|[start] policy a := \n \t if position < 2 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == y \n \t execute run \n \t until position != 1 [end]|[start] policy a := \n \t if position > 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position >= y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until position == 1 [end]|[start] policy a := \n \t if iron != x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a == y \n \t execute run \n \t until a <= y [end]|[start] option : \n \t init b > 0 \n \t execute run \n \t until position <= y [end]|[start] policy b := \n \t if position >= y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until position > 2 [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until inventory != x [end]|[start] option : \n \t init inventory <= 2 \n \t execute use \n \t until inventory < 2 [end]|[start] option : \n \t init a <= 2 \n \t execute find \n \t until a != 2 [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until b >= x [end]|[start] policy a := \n \t if b == 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 2 \n \t execute find \n \t until inventory != 0 [end]|[start] policy b := \n \t if b != x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 1 \n \t execute use \n \t until inventory == 2 [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until position == 0 [end]|[start] option : \n \t init a > 2 \n \t execute find \n \t until position < x [end]|[start] policy a := \n \t if position != 1 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position > x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 0 \n \t execute use \n \t until inventory < 1 [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= x \n \t execute find \n \t until a >= 1 [end]|[start] policy a := \n \t if b <= x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position < y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until b > 1 [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until position <= 1 [end]|[start] policy a := \n \t if iron >= x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b > y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until inventory <= 2 [end]|[start] policy a := \n \t if b > y : \n \t execute use \n [end]|[start] policy a := \n \t if position >= x : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 2 \n \t execute run \n \t until inventory [end]|[start] policy b := \n \t if position != y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position != 0 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 0 \n \t execute run \n \t until a == 2 [end]|[start] policy a := \n \t if iron : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position <= x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position != y \n \t execute find \n \t until a != 2 [end]|[start] option : \n \t init b > y \n \t execute jump \n \t until b < 0 [end]|[start] option : \n \t init inventory >= x \n \t execute use \n \t until inventory < 0 [end]|[start] policy a := \n \t if position <= x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 2 \n \t execute run \n \t until b >= 1 [end]|[start] option : \n \t init a >= y \n \t execute find \n \t until inventory != 1 [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until position >= 0 [end]|[start] option : \n \t init position <= x \n \t execute build \n \t until a == 0 [end]|[start] policy a := \n \t if b < x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until inventory <= x [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until a >= 0 [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until position < 0 [end]|[start] policy a := \n \t if position < 2 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < x : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory \n \t execute build \n \t until a <= 1 [end]|[start] policy a := \n \t if b <= 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 2 \n \t execute find \n \t until inventory == 1 [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until position == x [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 0 \n \t execute find \n \t until a < 2 [end]|[start] policy a := \n \t if b < 1 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until a >= x [end]|[start] policy a := \n \t if iron > 2 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until position == x [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until inventory <= 2 [end]|[start] policy b := \n \t if position >= y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until b < 0 [end]|[start] option : \n \t init b <= y \n \t execute use \n \t until position != 2 [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until inventory == 1 [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= y \n \t execute find \n \t until b < y [end]|[start] option : \n \t init position > y \n \t execute run \n \t until inventory <= 2 [end]|[start] policy a := \n \t if a > 1 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == y \n \t execute jump \n \t until b <= x [end]|[start] policy a := \n \t if a <= y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until position <= 2 [end]|[start] policy a := \n \t if position : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until b == 2 [end]|[start] policy a := \n \t if position <= 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until inventory == y [end]|[start] policy b := \n \t if a != 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until b > 0 [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until a > 1 [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until position >= x [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until position > 2 [end]|[start] option : \n \t init position <= 1 \n \t execute find \n \t until b > 0 [end]|[start] policy a := \n \t if position > y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init y \n \t execute build \n \t until position == y [end]|[start] policy b := \n \t if a > x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= x \n \t execute find \n \t until position < 2 [end]|[start] policy a := \n \t if a > y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until a == x [end]|[start] policy a := \n \t if a > y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 2 \n \t execute jump \n \t until a <= 1 [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until position < 1 [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until inventory == x [end]|[start] policy a := \n \t if a == 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 0 \n \t execute find \n \t until b == 1 [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until a <= 1 [end]|[start] option : \n \t init inventory == 2 \n \t execute jump \n \t until inventory [end]|[start] option : \n \t init a < y \n \t execute build \n \t until a >= 1 [end]|[start] policy b := \n \t if position <= y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 2 \n \t execute find \n \t until b != 2 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b < y \n \t execute use \n \t until a == 0 [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until position >= y [end]|[start] option : \n \t init a >= y \n \t execute find \n \t until b < x [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until a [end]|[start] option : \n \t init inventory <= 2 \n \t execute run \n \t until a == y [end]|[start] policy b := \n \t if position == y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until b != 2 [end]|[start] option : \n \t init a >= 0 \n \t execute use \n \t until inventory > y [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until position != x [end]|[start] policy a := \n \t if iron > 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b <= y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until b < y [end]|[start] option : \n \t init b < 2 \n \t execute build \n \t until b > 0 [end]|[start] policy a := \n \t if a != x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init x \n \t execute find \n \t until a <= 1 [end]|[start] policy b := \n \t if a >= x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 2 \n \t execute build \n \t until inventory > 1 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until b == 0 [end]|[start] option : \n \t init position >= 2 \n \t execute build \n \t until b > 1 [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until position <= 1 [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until b <= x [end]|[start] option : \n \t init b == 1 \n \t execute jump \n \t until position != x [end]|[start] policy b := \n \t if a != x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 1 \n \t execute run \n \t until inventory >= y [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute use \n \t until inventory == 0 [end]|[start] option : \n \t init inventory != 0 \n \t execute run \n \t until a <= x [end]|[start] policy a := \n \t if iron > 2 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b != x \n \t execute build \n \t until inventory >= 0 [end]|[start] option : \n \t init inventory == 2 \n \t execute build \n \t until a > y [end]|[start] policy a := \n \t if b < 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 1 \n \t execute find \n \t until a > 0 [end]|[start] option : \n \t init b == 2 \n \t execute run \n \t until b > 0 [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until b > 0 [end]|[start] option : \n \t init position >= 2 \n \t execute use \n \t until a < 1 [end]|[start] policy b := \n \t if a <= x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until position < 0 [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until a == y [end]|[start] policy a := \n \t if position != 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= y \n \t execute jump \n \t until inventory > 2 [end]|[start] policy a := \n \t if iron == y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until b <= x [end]|[start] policy a := \n \t if position <= x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == x \n \t execute build \n \t until a > y [end]|[start] policy a := \n \t if a >= 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until inventory != x [end]|[start] option : \n \t init a != 0 \n \t execute use \n \t until b >= 0 [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != y \n \t execute build \n \t until a > 1 [end]|[start] policy a := \n \t if iron < y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 2 \n \t execute jump \n \t until a < 2 [end]|[start] policy a := \n \t if a == 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init y \n \t execute build \n \t until b > 2 [end]|[start] policy b := \n \t if position > x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 0 \n \t execute run \n \t until position <= x [end]|[start] policy a := \n \t if iron < x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= y \n \t execute run \n \t until inventory > 2 [end]|[start] policy a := \n \t if position >= y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 0 \n \t execute jump \n \t until inventory <= x [end]|[start] policy a := \n \t if b >= y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 2 \n \t execute build \n \t until a != 2 [end]|[start] option : \n \t init position <= 2 \n \t execute build \n \t until inventory > x [end]|[start] policy b := \n \t if iron >= y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until a < 0 [end]|[start] option : \n \t init inventory > 0 \n \t execute find \n \t until inventory [end]|[start] option : \n \t init position > x \n \t execute run \n \t until a > x [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until position < y [end]|[start] option : \n \t init inventory < 0 \n \t execute run \n \t until position > y [end]|[start] policy b := \n \t if position == x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a != x \n \t execute run \n \t until a != x [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until b > 1 [end]|[start] option : \n \t init position >= 1 \n \t execute find \n \t until b > y [end]|[start] policy a := \n \t if position > y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init y \n \t execute find \n \t until position != y [end]|[start] policy b := \n \t if a < 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 1 \n \t execute run \n \t until b != 2 [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != y \n \t execute find \n \t until position > 2 [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until inventory >= 2 [end]|[start] policy a := \n \t if iron > y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 2 \n \t execute use \n \t until inventory == 1 [end]|[start] option : \n \t init inventory == 2 \n \t execute run \n \t until inventory > 2 [end]|[start] policy b := \n \t if a == 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 0 \n \t execute build \n \t until a >= 2 [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until b >= y [end]|[start] policy a := \n \t if a >= 2 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until b > x [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until a != 1 [end]|[start] option : \n \t init a <= 2 \n \t execute find \n \t until position >= x [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > y \n \t execute find \n \t until position <= 2 [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 1 \n \t execute run \n \t until inventory >= x [end]|[start] option : \n \t init position != 2 \n \t execute find \n \t until b > y [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until position == 1 [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until b <= x [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until a == x [end]|[start] option : \n \t init a >= y \n \t execute jump \n \t until inventory == 2 [end]|[start] option : \n \t init b > 0 \n \t execute jump \n \t until position < x [end]|[start] option : \n \t init a < 0 \n \t execute jump \n \t until position != 1 [end]|[start] option : \n \t init b < 1 \n \t execute jump \n \t until b == x [end]|[start] policy b := \n \t if position > x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 2 \n \t execute find \n \t until inventory > 1 [end]|[start] policy a := \n \t if a <= x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position == y \n \t execute run \n \t until b > y [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until b != x [end]|[start] policy a := \n \t if position : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b < 2 : \n \t execute use \n [end]|[start] option : \n \t init b \n \t execute find \n \t until position < 1 [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 2 \n \t execute build \n \t until a < 2 [end]|[start] policy b := \n \t if a <= y : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until b < 2 [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until inventory < x [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until a >= y [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until inventory > x [end]|[start] policy a := \n \t if a != 1 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until b >= x [end]|[start] policy a := \n \t if a > 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until position > 0 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until position >= 0 [end]|[start] option : \n \t init position != x \n \t execute use \n \t until inventory <= 2 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until inventory < x [end]|[start] policy a := \n \t if position < x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position \n \t execute find \n \t until a > 2 [end]|[start] option : \n \t init a > x \n \t execute build \n \t until inventory >= 1 [end]|[start] policy a := \n \t if a == y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position \n \t execute build \n \t until position == 1 [end]|[start] policy b := \n \t if b <= y : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b < x \n \t execute run \n \t until inventory != y [end]|[start] option : \n \t init inventory != 2 \n \t execute build \n \t until position < 2 [end]|[start] policy b := \n \t if a == x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until a <= 1 [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until position >= 1 [end]|[start] policy a := \n \t if b : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until position >= 2 [end]|[start] policy b := \n \t if position <= x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b > x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until a <= 0 [end]|[start] option : \n \t init a < x \n \t execute find \n \t until inventory < x [end]|[start] option : \n \t init position >= 0 \n \t execute run \n \t until position >= x [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b < x : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until y [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until b >= y [end]|[start] policy b := \n \t if b >= y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until b == x [end]|[start] policy a := \n \t if iron > 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b < x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 1 \n \t execute use \n \t until inventory >= y [end]|[start] option : \n \t init a >= y \n \t execute jump \n \t until inventory == 1 [end]|[start] policy b := \n \t if position <= y : \n \t execute use \n [end]|[start] option : \n \t init a == 2 \n \t execute run \n \t until inventory != x [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until a >= y [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until a == x [end]|[start] policy b := \n \t if position > 0 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until position == y [end]|[start] policy a := \n \t if b < 2 : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a > x \n \t execute build \n \t until position < 1 [end]|[start] option : \n \t init inventory < 0 \n \t execute find \n \t until b < x [end]|[start] option : \n \t init inventory == y \n \t execute jump \n \t until b < x [end]|[start] policy b := \n \t if a < 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 2 \n \t execute build \n \t until position >= 2 [end]|[start] option : \n \t init position == 2 \n \t execute use \n \t until inventory < x [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b > y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until inventory == 2 [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b < y \n \t execute use \n \t until inventory > 0 [end]|[start] option : \n \t init b > 1 \n \t execute build \n \t until inventory == x [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < y : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until a == 0 [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until position <= 1 [end]|[start] option : \n \t init b != x \n \t execute use \n \t until position <= 1 [end]|[start] policy b := \n \t if iron < y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until position >= 1 [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a \n \t execute find \n \t until x [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != y : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until a > 0 [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b < x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b <= y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a == x \n \t execute build \n \t until inventory > x [end]|[start] option : \n \t init b != 0 \n \t execute build \n \t until inventory <= x [end]|[start] policy b := \n \t if b > x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position > x \n \t execute use \n \t until a == 0 [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until inventory < y [end]|[start] policy a := \n \t if iron == 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 0 \n \t execute jump \n \t until b == 0 [end]|[start] policy b := \n \t if b != x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= y \n \t execute run \n \t until inventory >= x [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until inventory != 1 [end]|[start] policy b := \n \t if a == y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position != x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a < x \n \t execute find \n \t until b != x [end]|[start] policy a := \n \t if iron == 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= x \n \t execute run \n \t until position == x [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until inventory == y [end]|[start] option : \n \t init position <= 2 \n \t execute run \n \t until b != 0 [end]|[start] policy b := \n \t if iron > x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until b <= y [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until inventory < 0 [end]|[start] option : \n \t init a > y \n \t execute find \n \t until inventory > 1 [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until b == 1 [end]|[start] policy b := \n \t if a : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until inventory != 0 [end]|[start] policy b := \n \t if position == y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 1 \n \t execute run \n \t until b != 1 [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until a >= 1 [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until a <= y [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until inventory < y [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until a <= x [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position <= x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 0 \n \t execute jump \n \t until a < 1 [end]|[start] option : \n \t init position >= 0 \n \t execute build \n \t until a < 0 [end]|[start] option : \n \t init b == 2 \n \t execute build \n \t until a != 2 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until inventory != 1 [end]|[start] policy a := \n \t if b >= y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until a < 1 [end]|[start] policy a := \n \t if a == 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position == 0 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 1 \n \t execute run \n \t until inventory <= x [end]|[start] policy a := \n \t if position <= 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until a != 2 [end]|[start] option : \n \t init inventory >= x \n \t execute run \n \t until a > 0 [end]|[start] option : \n \t init b == y \n \t execute find \n \t until position != 0 [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until inventory < 0 [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until a < 2 [end]|[start] option : \n \t init inventory == 2 \n \t execute run \n \t until a <= 0 [end]|[start] policy b := \n \t if a != 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until position < x [end]|[start] option : \n \t init position > x \n \t execute use \n \t until b == 0 [end]|[start] option : \n \t init position < 1 \n \t execute use \n \t until b < x [end]|[start] option : \n \t init inventory != y \n \t execute find \n \t until inventory != 2 [end]|[start] policy a := \n \t if a >= x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute build \n \t until a == x [end]|[start] option : \n \t init position <= 0 \n \t execute find \n \t until a <= x [end]|[start] policy a := \n \t if b < 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= y \n \t execute find \n \t until inventory > x [end]|[start] policy b := \n \t if position <= x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until b [end]|[start] policy b := \n \t if a > y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position > x \n \t execute run \n \t until inventory == 1 [end]|[start] option : \n \t init position < 1 \n \t execute run \n \t until b == 2 [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until a != x [end]|[start] option : \n \t init a == y \n \t execute build \n \t until inventory <= y [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position != y \n \t execute use \n \t until position > x [end]|[start] option : \n \t init b < 1 \n \t execute jump \n \t until b != y [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position <= y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until a >= y [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until a <= y [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b > 0 \n \t execute run \n \t until b != x [end]|[start] policy a := \n \t if iron <= y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until b == x [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until b >= x [end]|[start] option : \n \t init a > 0 \n \t execute jump \n \t until a <= y [end]|[start] policy b := \n \t if a <= y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init y \n \t execute find \n \t until a == y [end]|[start] option : \n \t init x \n \t execute find \n \t until inventory > 1 [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until a > 1 [end]|[start] option : \n \t init a < 1 \n \t execute find \n \t until b <= 2 [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != x \n \t execute use \n \t until inventory == 1 [end]|[start] policy a := \n \t if position > 2 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron < x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until position == 0 [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until a != x [end]|[start] option : \n \t init inventory == x \n \t execute use \n \t until a < x [end]|[start] policy a := \n \t if iron != 1 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 2 \n \t execute find \n \t until b > 2 [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until b != x [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until position < y [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until inventory < 0 [end]|[start] policy b := \n \t if iron < y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until inventory > 0 [end]|[start] policy a := \n \t if a < y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until position [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until b < 1 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until inventory <= 1 [end]|[start] option : \n \t init position == 2 \n \t execute use \n \t until b == x [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until inventory >= y [end]|[start] option : \n \t init b <= 2 \n \t execute find \n \t until inventory < 0 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until position > y [end]|[start] option : \n \t init inventory == y \n \t execute jump \n \t until position < y [end]|[start] policy a := \n \t if position >= y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until a < 2 [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until inventory != x [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until b >= 2 [end]|[start] option : \n \t init a > 0 \n \t execute jump \n \t until inventory != x [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until a >= x [end]|[start] option : \n \t init position == y \n \t execute build \n \t until position == 1 [end]|[start] option : \n \t init position < x \n \t execute use \n \t until b == x [end]|[start] option : \n \t init inventory <= 2 \n \t execute use \n \t until a >= y [end]|[start] policy a := \n \t if b >= x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 2 \n \t execute jump \n \t until inventory [end]|[start] option : \n \t init inventory == y \n \t execute run \n \t until b >= 1 [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until position < 1 [end]|[start] option : \n \t init b == 2 \n \t execute jump \n \t until inventory != x [end]|[start] option : \n \t init a == 2 \n \t execute run \n \t until inventory != 2 [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until position > y [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until a <= 2 [end]|[start] policy a := \n \t if b > 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 0 \n \t execute find \n \t until position < 1 [end]|[start] option : \n \t init a < x \n \t execute use \n \t until inventory >= 2 [end]|[start] policy a := \n \t if b > 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a != y \n \t execute run \n \t until a > y [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b > y \n \t execute run \n \t until inventory > x [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until b >= 2 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= 0 : \n \t execute build \n [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until position < 0 [end]|[start] option : \n \t init inventory != 1 \n \t execute use \n \t until inventory > 1 [end]|[start] option : \n \t init b > y \n \t execute find \n \t until a <= 2 [end]|[start] option : \n \t init position >= 0 \n \t execute use \n \t until inventory < 1 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute run \n [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until inventory == 1 [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until a < x [end]|[start] option : \n \t init inventory > x \n \t execute run \n \t until b != 1 [end]|[start] policy a := \n \t if a > y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until b > 2 [end]|[start] policy a := \n \t if position < 2 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until inventory > 2 [end]|[start] policy a := \n \t if iron == x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= x \n \t execute jump \n \t until b [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until b >= x [end]|[start] policy b := \n \t if iron > x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b == x \n \t execute find \n \t until a < 2 [end]|[start] policy a := \n \t if a : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 0 \n \t execute build \n \t until a >= y [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until b <= y [end]|[start] policy a := \n \t if position != 2 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until b != 0 [end]|[start] option : \n \t init b < y \n \t execute use \n \t until b >= 1 [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 1 \n \t execute find \n \t until inventory <= 0 [end]|[start] policy a := \n \t if position <= 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until position [end]|[start] policy a := \n \t if b >= y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b < x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute jump \n \t until position == x [end]|[start] policy a := \n \t if position > x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position != y \n \t execute use \n \t until inventory < 0 [end]|[start] policy a := \n \t if a != 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < y \n \t execute build \n \t until b != 2 [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until b >= 1 [end]|[start] policy a := \n \t if a == y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 1 \n \t execute run \n \t until b != x [end]|[start] policy a := \n \t if position > y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != y \n \t execute run \n \t until a != 2 [end]|[start] option : \n \t init position > x \n \t execute use \n \t until a >= x [end]|[start] option : \n \t init b != x \n \t execute jump \n \t until inventory < 2 [end]|[start] policy a := \n \t if b > 2 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b < x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute jump \n \t until a < 0 [end]|[start] policy a := \n \t if a >= y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 2 \n \t execute build \n \t until inventory < 2 [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until inventory > 0 [end]|[start] policy a := \n \t if position != 2 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < y \n \t execute run \n \t until inventory >= 1 [end]|[start] policy b := \n \t if b != y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 1 \n \t execute run \n \t until position != 0 [end]|[start] option : \n \t init inventory == 2 \n \t execute build \n \t until a <= 0 [end]|[start] policy a := \n \t if a >= y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == y : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a != x \n \t execute build \n \t until inventory < 2 [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= y \n \t execute run \n \t until b == 0 [end]|[start] option : \n \t init b >= 1 \n \t execute use \n \t until b > 2 [end]|[start] option : \n \t init b > 2 \n \t execute build \n \t until inventory < 2 [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until a >= 0 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until inventory < 1 [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until b < 0 [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until a == y [end]|[start] policy a := \n \t if b <= y : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until a > 2 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 1 \n \t execute jump \n \t until position <= 1 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 1 \n \t execute run \n \t until a <= 1 [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until a == x [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until b != 2 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < 2 \n \t execute jump \n \t until inventory >= y [end]|[start] option : \n \t init b < x \n \t execute build \n \t until inventory == 2 [end]|[start] policy a := \n \t if a <= y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until a < 2 [end]|[start] policy a := \n \t if position < 1 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b <= y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 0 \n \t execute find \n \t until a > 2 [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until b >= y [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until inventory >= y [end]|[start] option : \n \t init inventory < y \n \t execute run \n \t until inventory > 2 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until a >= 1 [end]|[start] option : \n \t init b == x \n \t execute run \n \t until position != 0 [end]|[start] policy a := \n \t if iron != x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until inventory >= 2 [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until inventory [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until b != y [end]|[start] policy a := \n \t if b < x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute build \n \t until x [end]|[start] policy b := \n \t if a != y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position > 2 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b > x \n \t execute find \n \t until inventory == 0 [end]|[start] option : \n \t init a < x \n \t execute build \n \t until a != 1 [end]|[start] option : \n \t init inventory >= 0 \n \t execute run \n \t until a <= x [end]|[start] option : \n \t init position \n \t execute run \n \t until inventory > 1 [end]|[start] policy a := \n \t if position != 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until inventory < x [end]|[start] policy a := \n \t if a != x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 2 \n \t execute run \n \t until inventory <= 2 [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until position < 0 [end]|[start] policy a := \n \t if b > 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until inventory >= 1 [end]|[start] option : \n \t init inventory < 0 \n \t execute find \n \t until a [end]|[start] policy a := \n \t if iron != y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a != y \n \t execute use \n \t until a == 1 [end]|[start] policy b := \n \t if b != y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a >= x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 1 \n \t execute find \n \t until a != y [end]|[start] policy b := \n \t if a == 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until b != 2 [end]|[start] policy a := \n \t if b > 1 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= x \n \t execute run \n \t until b == 0 [end]|[start] policy b := \n \t if a == 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 1 \n \t execute use \n \t until a >= 0 [end]|[start] policy b := \n \t if iron >= y : \n \t execute use \n [end]|[start] option : \n \t init a \n \t execute use \n \t until position != x [end]|[start] policy a := \n \t if position > 2 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b != x \n \t execute jump \n \t until inventory > 0 [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until b >= x [end]|[start] policy a := \n \t if a >= x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b \n \t execute jump \n \t until b == 0 [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until b < y [end]|[start] policy b := \n \t if iron <= y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 1 \n \t execute find \n \t until b > 1 [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until position <= 1 [end]|[start] policy b := \n \t if a != 0 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b < y \n \t execute use \n \t until inventory != 1 [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until a == 2 [end]|[start] option : \n \t init position == y \n \t execute use \n \t until a > 1 [end]|[start] option : \n \t init inventory >= 2 \n \t execute build \n \t until inventory [end]|[start] option : \n \t init inventory != 0 \n \t execute find \n \t until inventory == 1 [end]|[start] policy b := \n \t if b : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 0 \n \t execute jump \n \t until position == 1 [end]|[start] policy a := \n \t if position < 0 : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 1 \n \t execute jump \n \t until b >= 0 [end]|[start] policy a := \n \t if position <= y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until position != 2 [end]|[start] policy b := \n \t if a <= x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 2 \n \t execute jump \n \t until b >= 0 [end]|[start] policy a := \n \t if a < 1 : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 2 \n \t execute build \n \t until b <= 1 [end]|[start] option : \n \t init a >= y \n \t execute use \n \t until a > 0 [end]|[start] option : \n \t init inventory \n \t execute run \n \t until b != 1 [end]|[start] option : \n \t init a <= x \n \t execute run \n \t until a < 1 [end]|[start] policy b := \n \t if position == y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until b >= x [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a >= 0 : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b < x \n \t execute build \n \t until inventory <= y [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == y \n \t execute run \n \t until a <= 0 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position >= x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 2 \n \t execute run \n \t until a > 0 [end]|[start] policy a := \n \t if position >= 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until inventory <= x [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until b > 0 [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until position == x [end]|[start] option : \n \t init position < y \n \t execute find \n \t until inventory >= 1 [end]|[start] option : \n \t init b < y \n \t execute build \n \t until position > 1 [end]|[start] option : \n \t init position > y \n \t execute use \n \t until b <= 2 [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until inventory >= 2 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until a == y [end]|[start] option : \n \t init b != x \n \t execute use \n \t until position == 2 [end]|[start] option : \n \t init position >= 0 \n \t execute run \n \t until a != 1 [end]|[start] option : \n \t init inventory != x \n \t execute jump \n \t until a > x [end]|[start] policy b := \n \t if a < 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a < x \n \t execute jump \n \t until a > 2 [end]|[start] policy a := \n \t if a == 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != y \n \t execute jump \n \t until b < y [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until b <= 2 [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until b == 0 [end]|[start] policy a := \n \t if b != x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until inventory == 1 [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until position >= y [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until position != x [end]|[start] option : \n \t init inventory < 0 \n \t execute run \n \t until b != x [end]|[start] option : \n \t init a <= 1 \n \t execute find \n \t until position >= 2 [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until a <= x [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until b <= 2 [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until a == 2 [end]|[start] policy a := \n \t if b <= 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron < y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 1 \n \t execute find \n \t until b == x [end]|[start] policy a := \n \t if b == x : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 2 \n \t execute find \n \t until position >= y [end]|[start] policy b := \n \t if b : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position \n \t execute find \n \t until position != x [end]|[start] policy a := \n \t if b != 0 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position == y : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until a == y [end]|[start] policy a := \n \t if a > x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until b [end]|[start] option : \n \t init b > 1 \n \t execute run \n \t until position != 0 [end]|[start] policy a := \n \t if iron != y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 2 \n \t execute run \n \t until b > 0 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 0 \n \t execute build \n \t until position [end]|[start] policy b := \n \t if b <= x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until inventory != 1 [end]|[start] policy a := \n \t if position : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until a == y [end]|[start] option : \n \t init b < 2 \n \t execute build \n \t until a > 2 [end]|[start] option : \n \t init b > y \n \t execute find \n \t until position != y [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until position [end]|[start] policy a := \n \t if a > 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until position >= y [end]|[start] policy a := \n \t if iron > 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a <= x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 1 \n \t execute run \n \t until inventory < x [end]|[start] option : \n \t init inventory > 0 \n \t execute build \n \t until inventory < y [end]|[start] policy a := \n \t if a >= y : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until position >= x [end]|[start] option : \n \t init b > y \n \t execute find \n \t until a > 2 [end]|[start] policy a := \n \t if b > 1 : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until a <= y [end]|[start] policy a := \n \t if iron >= x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until b > x [end]|[start] option : \n \t init position < 1 \n \t execute run \n \t until position > 2 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until inventory >= x [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 0 \n \t execute use \n \t until b >= 0 [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until position != y [end]|[start] policy a := \n \t if b >= x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a > y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until a == 1 [end]|[start] policy a := \n \t if a == 1 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until a == 2 [end]|[start] policy a := \n \t if iron < 2 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until inventory != x [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until position == 1 [end]|[start] policy a := \n \t if b < 1 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until b == 1 [end]|[start] policy a := \n \t if b >= y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 1 \n \t execute use \n \t until inventory >= 0 [end]|[start] policy a := \n \t if a >= x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < y : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until b > 0 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position != x \n \t execute find \n \t until b >= x [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until inventory >= 2 [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until inventory <= x [end]|[start] policy b := \n \t if position <= x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 0 \n \t execute use \n \t until position > 2 [end]|[start] policy b := \n \t if position > x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute find \n \t until b < 2 [end]|[start] policy a := \n \t if position != 1 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b != y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 2 \n \t execute run \n \t until inventory == x [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until a < 1 [end]|[start] option : \n \t init x \n \t execute find \n \t until b != 1 [end]|[start] policy b := \n \t if a < 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= x \n \t execute find \n \t until position >= 1 [end]|[start] policy a := \n \t if b > 0 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a == x \n \t execute run \n \t until a > 2 [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until a < 1 [end]|[start] policy a := \n \t if position == x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until inventory <= 1 [end]|[start] policy a := \n \t if position > x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until position >= x [end]|[start] policy a := \n \t if a > x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= x \n \t execute build \n \t until position != 2 [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until b != 1 [end]|[start] option : \n \t init position < 2 \n \t execute build \n \t until a == 2 [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > y \n \t execute use \n \t until inventory > 1 [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until b >= y [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position > x \n \t execute use \n \t until position != x [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b <= y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute use \n \t until a > 2 [end]|[start] option : \n \t init position \n \t execute use \n \t until inventory [end]|[start] option : \n \t init a == x \n \t execute run \n \t until position <= y [end]|[start] policy a := \n \t if a > y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == x \n \t execute use \n \t until position > y [end]|[start] policy b := \n \t if position > x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > x \n \t execute run \n \t until position == y [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 1 \n \t execute use \n \t until a == 0 [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 2 \n \t execute run \n \t until position >= x [end]|[start] policy b := \n \t if b > y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until a == 0 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b <= y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != y \n \t execute use \n \t until b <= y [end]|[start] policy b := \n \t if a == y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= x \n \t execute build \n \t until a != 0 [end]|[start] policy a := \n \t if a == y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < x \n \t execute find \n \t until a == 1 [end]|[start] policy b := \n \t if iron : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position >= y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < x \n \t execute use \n \t until b > y [end]|[start] policy a := \n \t if iron > 2 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until b < 0 [end]|[start] option : \n \t init a < y \n \t execute build \n \t until a != 1 [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until a != 2 [end]|[start] policy b := \n \t if b >= 1 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == y : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 1 \n \t execute run \n \t until position < 1 [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until b > y [end]|[start] option : \n \t init position > x \n \t execute find \n \t until a >= 1 [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b != x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 1 \n \t execute jump \n \t until inventory == x [end]|[start] option : \n \t init b < 2 \n \t execute find \n \t until b == 0 [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < x : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron > y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 2 \n \t execute find \n \t until a == y [end]|[start] policy a := \n \t if iron > 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until a != 2 [end]|[start] policy b := \n \t if position == x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 0 \n \t execute jump \n \t until a > y [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a > x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= 2 : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= y \n \t execute jump \n \t until position == y [end]|[start] policy b := \n \t if b <= x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= x \n \t execute find \n \t until position > 2 [end]|[start] policy b := \n \t if a != 2 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until b != y [end]|[start] policy a := \n \t if position == 0 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 0 \n \t execute use \n \t until inventory == y [end]|[start] policy b := \n \t if iron > y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until b <= 0 [end]|[start] option : \n \t init position > x \n \t execute run \n \t until a < 0 [end]|[start] policy b := \n \t if a < x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position == x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until position == y [end]|[start] policy a := \n \t if b : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 1 \n \t execute run \n \t until inventory != 2 [end]|[start] option : \n \t init position < 1 \n \t execute find \n \t until inventory > x [end]|[start] option : \n \t init inventory == 2 \n \t execute find \n \t until a >= x [end]|[start] option : \n \t init b != x \n \t execute build \n \t until inventory > 2 [end]|[start] policy a := \n \t if a <= y : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until inventory <= 2 [end]|[start] policy a := \n \t if a < 2 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until a < x [end]|[start] policy a := \n \t if position != 2 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 0 \n \t execute jump \n \t until b == y [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until a < 2 [end]|[start] policy b := \n \t if position <= x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b != y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != y : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory \n \t execute find \n \t until position != 0 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b == x \n \t execute build \n \t until position > 2 [end]|[start] policy b := \n \t if position > y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until a >= x [end]|[start] policy a := \n \t if a == y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position > y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 1 \n \t execute use \n \t until b == y [end]|[start] policy a := \n \t if position != y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 0 \n \t execute jump \n \t until position >= x [end]|[start] option : \n \t init x \n \t execute run \n \t until a >= 1 [end]|[start] policy b := \n \t if position >= x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 2 \n \t execute build \n \t until position < y [end]|[start] policy a := \n \t if iron > y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= x : \n \t execute jump \n [end]|[start] option : \n \t init inventory != y \n \t execute find \n \t until inventory >= 0 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until inventory == y [end]|[start] option : \n \t init inventory >= 0 \n \t execute build \n \t until b < 1 [end]|[start] option : \n \t init a >= 2 \n \t execute run \n \t until inventory [end]|[start] option : \n \t init inventory >= 1 \n \t execute run \n \t until inventory [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until b == 1 [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != x \n \t execute use \n \t until b > 1 [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= y \n \t execute find \n \t until position >= 0 [end]|[start] option : \n \t init b <= y \n \t execute run \n \t until position != 2 [end]|[start] option : \n \t init position > y \n \t execute build \n \t until b == 1 [end]|[start] policy a := \n \t if position != y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= 1 \n \t execute run \n \t until inventory <= 1 [end]|[start] policy a := \n \t if iron > y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute run \n \t until a != 0 [end]|[start] policy a := \n \t if b >= y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != 0 : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until position < y [end]|[start] policy b := \n \t if position != y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < x : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b > y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until a < 0 [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until position == 1 [end]|[start] option : \n \t init a < x \n \t execute build \n \t until inventory != 2 [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until b >= 2 [end]|[start] policy a := \n \t if iron == x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 2 \n \t execute find \n \t until position == 2 [end]|[start] option : \n \t init b != x \n \t execute build \n \t until b != 2 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until inventory > 2 [end]|[start] option : \n \t init b == 1 \n \t execute run \n \t until b != y [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until a == x [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until b <= 0 [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until b > x [end]|[start] option : \n \t init position > x \n \t execute build \n \t until inventory > 2 [end]|[start] policy a := \n \t if position < x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 1 \n \t execute run \n \t until position == 1 [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 0 \n \t execute use \n \t until b > 1 [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until b != 0 [end]|[start] policy a := \n \t if b < x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= y \n \t execute jump \n \t until inventory < 0 [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a > x \n \t execute run \n \t until a <= 2 [end]|[start] policy b := \n \t if position != y : \n \t execute use \n [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until b == 2 [end]|[start] option : \n \t init position == 1 \n \t execute build \n \t until inventory < 2 [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a \n \t execute find \n \t until position <= x [end]|[start] policy b := \n \t if position >= y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= y \n \t execute find \n \t until a [end]|[start] policy a := \n \t if a >= 2 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until a != 2 [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until a <= 1 [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until b <= 0 [end]|[start] option : \n \t init position < 0 \n \t execute build \n \t until a < y [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until a != x [end]|[start] policy a := \n \t if b : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 1 \n \t execute use \n \t until inventory >= x [end]|[start] option : \n \t init inventory != 1 \n \t execute use \n \t until inventory < 2 [end]|[start] policy a := \n \t if a == x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > y \n \t execute run \n \t until inventory >= x [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= y \n \t execute run \n \t until position != x [end]|[start] policy a := \n \t if iron == y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until position < 0 [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until position <= 1 [end]|[start] policy b := \n \t if iron > y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until inventory != 0 [end]|[start] policy a := \n \t if b < x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until inventory >= 0 [end]|[start] option : \n \t init x \n \t execute jump \n \t until inventory != 0 [end]|[start] policy a := \n \t if b > 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 0 \n \t execute find \n \t until a > 1 [end]|[start] option : \n \t init position > x \n \t execute use \n \t until b != 0 [end]|[start] policy a := \n \t if a <= 1 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until position != 0 [end]|[start] policy b := \n \t if b >= y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until b <= 1 [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b != x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a < x \n \t execute jump \n \t until a <= 2 [end]|[start] option : \n \t init b == y \n \t execute run \n \t until b <= 2 [end]|[start] option : \n \t init a > x \n \t execute run \n \t until b == x [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until a != 2 [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until position > y [end]|[start] option : \n \t init a < y \n \t execute use \n \t until a != 2 [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until b == 1 [end]|[start] policy b := \n \t if iron < y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 0 \n \t execute find \n \t until b >= 1 [end]|[start] option : \n \t init a == y \n \t execute find \n \t until position != 1 [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 0 \n \t execute build \n \t until position != 1 [end]|[start] policy a := \n \t if iron > x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position < 1 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b < x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until position [end]|[start] option : \n \t init a < 0 \n \t execute use \n \t until b >= 1 [end]|[start] option : \n \t init inventory > y \n \t execute find \n \t until inventory != 0 [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init inventory == x \n \t execute build \n \t until a == 0 [end]|[start] option : \n \t init a > x \n \t execute build \n \t until position != 2 [end]|[start] option : \n \t init b \n \t execute jump \n \t until b < 1 [end]|[start] option : \n \t init a < 1 \n \t execute use \n \t until a >= x [end]|[start] option : \n \t init a <= x \n \t execute jump \n \t until position < 1 [end]|[start] option : \n \t init a < 1 \n \t execute jump \n \t until a < y [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 0 \n \t execute run \n \t until b <= 2 [end]|[start] policy a := \n \t if position != 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until b >= y [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until position < 1 [end]|[start] policy b := \n \t if b < x : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b < y \n \t execute build \n \t until position != 1 [end]|[start] policy b := \n \t if position < y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 2 \n \t execute build \n \t until a > 0 [end]|[start] option : \n \t init inventory >= 0 \n \t execute build \n \t until inventory < x [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until a < 0 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute run \n \t until position [end]|[start] policy b := \n \t if a == x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position >= 1 : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a > x \n \t execute find \n \t until a != 1 [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until b <= 1 [end]|[start] option : \n \t init position != x \n \t execute find \n \t until a > 0 [end]|[start] option : \n \t init position > y \n \t execute find \n \t until a >= 2 [end]|[start] policy a := \n \t if position <= y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 2 \n \t execute run \n \t until inventory != 0 [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until inventory > 0 [end]|[start] policy b := \n \t if a != 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until position < x [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until position == 2 [end]|[start] policy a := \n \t if a >= y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until a >= x [end]|[start] option : \n \t init position > 0 \n \t execute jump \n \t until position < 2 [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 0 \n \t execute jump \n \t until inventory >= y [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until inventory > y [end]|[start] option : \n \t init b <= 2 \n \t execute find \n \t until inventory >= 1 [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until a >= 0 [end]|[start] option : \n \t init b \n \t execute use \n \t until inventory >= 0 [end]|[start] option : \n \t init position != x \n \t execute use \n \t until a <= y [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until position >= x [end]|[start] policy a := \n \t if a != 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until b <= 2 [end]|[start] option : \n \t init inventory < 2 \n \t execute jump \n \t until b > 2 [end]|[start] option : \n \t init a > 2 \n \t execute jump \n \t until position == 1 [end]|[start] policy a := \n \t if position > 2 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= y \n \t execute run \n \t until inventory >= y [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until y [end]|[start] policy a := \n \t if b >= y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= y \n \t execute build \n \t until position > y [end]|[start] policy b := \n \t if a <= x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until inventory >= x [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until position < 0 [end]|[start] policy a := \n \t if b <= y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init y \n \t execute build \n \t until a < 1 [end]|[start] option : \n \t init b != y \n \t execute find \n \t until inventory > 0 [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until inventory <= 0 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= x \n \t execute build \n \t until a != 0 [end]|[start] policy b := \n \t if b > 1 : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until b <= 1 [end]|[start] option : \n \t init position < y \n \t execute use \n \t until b <= y [end]|[start] policy b := \n \t if a > x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 1 \n \t execute find \n \t until a != y [end]|[start] policy a := \n \t if position == y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a \n \t execute find \n \t until position <= y [end]|[start] policy a := \n \t if position > x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a <= y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position > x \n \t execute run \n \t until b > 0 [end]|[start] policy a := \n \t if iron < 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until position >= y [end]|[start] policy a := \n \t if a != 0 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until b < 2 [end]|[start] option : \n \t init position < 0 \n \t execute run \n \t until b > 2 [end]|[start] option : \n \t init b > 2 \n \t execute run \n \t until position >= x [end]|[start] policy a := \n \t if iron >= x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b != y : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until a <= 2 [end]|[start] option : \n \t init b > x \n \t execute run \n \t until position > 2 [end]|[start] option : \n \t init b >= y \n \t execute use \n \t until b == y [end]|[start] policy b := \n \t if position > x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b != y \n \t execute run \n \t until a < x [end]|[start] policy b := \n \t if iron != y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until inventory == 2 [end]|[start] option : \n \t init b != x \n \t execute run \n \t until a < y [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until inventory <= 1 [end]|[start] policy a := \n \t if a < 0 : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until a <= 1 [end]|[start] policy b := \n \t if a > x : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= x \n \t execute use \n \t until inventory > x [end]|[start] policy a := \n \t if a > 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b \n \t execute jump \n \t until a >= 1 [end]|[start] policy b := \n \t if a <= y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until y [end]|[start] policy a := \n \t if position >= x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 2 \n \t execute find \n \t until b < x [end]|[start] policy b := \n \t if iron : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until position > 2 [end]|[start] policy b := \n \t if b : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until b == y [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until inventory == 2 [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until position < 2 [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until a < x [end]|[start] policy a := \n \t if b == 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 0 \n \t execute find \n \t until inventory > 0 [end]|[start] policy b := \n \t if position <= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position != x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until inventory < y [end]|[start] policy b := \n \t if iron != x : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b != x \n \t execute jump \n \t until b != x [end]|[start] policy a := \n \t if a != 2 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init y \n \t execute jump \n \t until b == 2 [end]|[start] policy b := \n \t if position >= 0 : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 1 \n \t execute use \n \t until inventory <= 1 [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < 2 \n \t execute use \n \t until inventory != 0 [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until position > 1 [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until position <= y [end]|[start] policy b := \n \t if b <= y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position == y \n \t execute find \n \t until position <= y [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until position == x [end]|[start] policy a := \n \t if iron : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 2 \n \t execute find \n \t until position <= x [end]|[start] policy b := \n \t if position < x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute jump \n \t until a >= 2 [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until b >= 2 [end]|[start] policy a := \n \t if a < 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until position == y [end]|[start] option : \n \t init position == 1 \n \t execute jump \n \t until inventory > y [end]|[start] policy a := \n \t if position < 0 : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= x : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 1 \n \t execute run \n \t until inventory == 0 [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b != y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until inventory < 2 [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until inventory <= 2 [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until inventory >= x [end]|[start] option : \n \t init b >= 0 \n \t execute jump \n \t until a < 1 [end]|[start] policy a := \n \t if a > 0 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute run \n \t until b == y [end]|[start] policy a := \n \t if position >= 0 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until inventory > 2 [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until b == x [end]|[start] option : \n \t init inventory <= 2 \n \t execute find \n \t until b <= y [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until inventory < 0 [end]|[start] policy a := \n \t if position == y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 1 \n \t execute use \n \t until b == 0 [end]|[start] option : \n \t init a >= 1 \n \t execute run \n \t until position != 1 [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until a != y [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until position == 2 [end]|[start] policy b := \n \t if b > y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until b <= 2 [end]|[start] policy b := \n \t if b > x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory \n \t execute jump \n \t until b < 2 [end]|[start] option : \n \t init inventory \n \t execute find \n \t until b == x [end]|[start] policy a := \n \t if position == 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until position >= 1 [end]|[start] policy b := \n \t if b >= y : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until b == 0 [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until b != y [end]|[start] option : \n \t init position < x \n \t execute run \n \t until inventory != 0 [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until position != 0 [end]|[start] option : \n \t init inventory > y \n \t execute jump \n \t until b == 2 [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until b > 2 [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until position <= x [end]|[start] option : \n \t init a < y \n \t execute build \n \t until inventory < y [end]|[start] policy a := \n \t if a > 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != y : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < x \n \t execute use \n \t until a <= x [end]|[start] policy b := \n \t if iron == x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until inventory >= y [end]|[start] option : \n \t init b < x \n \t execute build \n \t until position < 0 [end]|[start] policy a := \n \t if position == y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position \n \t execute run \n \t until b < 1 [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until a < 2 [end]|[start] policy a := \n \t if iron < 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 0 \n \t execute jump \n \t until b < 0 [end]|[start] option : \n \t init position == 0 \n \t execute build \n \t until a < 0 [end]|[start] option : \n \t init a <= x \n \t execute jump \n \t until a >= x [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until inventory == x [end]|[start] policy b := \n \t if b == y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a > y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until a == 1 [end]|[start] policy b := \n \t if b <= x : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 0 \n \t execute build \n \t until a == 0 [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron > y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until b != x [end]|[start] option : \n \t init a < y \n \t execute use \n \t until position == y [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b > 0 \n \t execute build \n \t until a < 2 [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until position <= 1 [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until position < 0 [end]|[start] policy a := \n \t if position <= x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 0 \n \t execute run \n \t until position > 1 [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until a < x [end]|[start] policy a := \n \t if a <= 1 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a <= y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until a <= 1 [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until a < x [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until position != 1 [end]|[start] policy b := \n \t if iron == x : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position < 0 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > y \n \t execute jump \n \t until position > 0 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until position >= 2 [end]|[start] option : \n \t init position \n \t execute build \n \t until position <= y [end]|[start] policy a := \n \t if b == 2 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= x \n \t execute find \n \t until position == 2 [end]|[start] policy a := \n \t if iron > 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until position < y [end]|[start] policy a := \n \t if b != 0 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == x : \n \t execute find \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until position == x [end]|[start] policy a := \n \t if iron != 0 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 1 \n \t execute use \n \t until y [end]|[start] policy a := \n \t if position != 2 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b != y \n \t execute build \n \t until position == x [end]|[start] policy b := \n \t if iron > 1 : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron >= 0 : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b > x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until position [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until position > 0 [end]|[start] option : \n \t init b >= 1 \n \t execute run \n \t until inventory == 1 [end]|[start] option : \n \t init inventory > 2 \n \t execute jump \n \t until position == 2 [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until position > 2 [end]|[start] option : \n \t init a <= y \n \t execute find \n \t until inventory < y [end]|[start] policy b := \n \t if a > y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until b != 0 [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until b <= x [end]|[start] option : \n \t init position > y \n \t execute run \n \t until inventory == y [end]|[start] option : \n \t init a != y \n \t execute use \n \t until b == 0 [end]|[start] option : \n \t init position == y \n \t execute find \n \t until b != y [end]|[start] option : \n \t init position <= x \n \t execute find \n \t until position >= y [end]|[start] option : \n \t init b < 1 \n \t execute build \n \t until b < 1 [end]|[start] option : \n \t init b <= 2 \n \t execute find \n \t until b <= 1 [end]|[start] option : \n \t init a != y \n \t execute find \n \t until b != 1 [end]|[start] policy b := \n \t if a != 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= x \n \t execute build \n \t until a > x [end]|[start] policy a := \n \t if iron : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 0 \n \t execute find \n \t until a < 1 [end]|[start] option : \n \t init a <= 0 \n \t execute find \n \t until position >= 0 [end]|[start] policy a := \n \t if b >= y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until b <= x [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until inventory > y [end]|[start] policy a := \n \t if a >= 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until inventory > 0 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 1 \n \t execute build \n \t until a != y [end]|[start] policy a := \n \t if b < 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until inventory <= 2 [end]|[start] option : \n \t init b \n \t execute run \n \t until b < 2 [end]|[start] option : \n \t init b \n \t execute find \n \t until position <= 2 [end]|[start] policy b := \n \t if iron >= x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory \n \t execute find \n \t until b <= 1 [end]|[start] option : \n \t init b > y \n \t execute build \n \t until a < y [end]|[start] policy a := \n \t if iron == 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == x : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a \n \t execute find \n \t until position > 0 [end]|[start] option : \n \t init a != y \n \t execute build \n \t until position != 2 [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until b != 2 [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until inventory < x [end]|[start] policy a := \n \t if iron != x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until b != 0 [end]|[start] policy b := \n \t if b > x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until position != x [end]|[start] policy a := \n \t if position >= y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until b >= x [end]|[start] policy b := \n \t if position >= x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until position == 2 [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until a < 2 [end]|[start] option : \n \t init a <= 0 \n \t execute jump \n \t until a < y [end]|[start] policy a := \n \t if a > y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until a > x [end]|[start] policy b := \n \t if b : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position >= y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == y : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= x \n \t execute run \n \t until a > 0 [end]|[start] policy b := \n \t if a >= y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until a != x [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until inventory > 1 [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until inventory != 0 [end]|[start] policy b := \n \t if position < y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 1 \n \t execute run \n \t until position == 0 [end]|[start] option : \n \t init inventory >= 2 \n \t execute use \n \t until a >= x [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until b >= y [end]|[start] option : \n \t init a < y \n \t execute run \n \t until position != y [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until inventory == y [end]|[start] option : \n \t init y \n \t execute use \n \t until inventory <= x [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position \n \t execute run \n \t until inventory == x [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until a > x [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until position <= 1 [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until position == 2 [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until a > x [end]|[start] option : \n \t init b \n \t execute run \n \t until position > y [end]|[start] policy a := \n \t if b == x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position == x \n \t execute build \n \t until position >= y [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron > x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position < 0 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position == y \n \t execute build \n \t until b >= 2 [end]|[start] policy a := \n \t if position > y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= y \n \t execute run \n \t until inventory < 2 [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until position != y [end]|[start] policy a := \n \t if b < 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b == y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 0 \n \t execute build \n \t until inventory <= 0 [end]|[start] policy a := \n \t if b == x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 2 \n \t execute run \n \t until position < 1 [end]|[start] option : \n \t init b > 0 \n \t execute build \n \t until a == 1 [end]|[start] policy b := \n \t if position == y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until inventory >= 0 [end]|[start] policy a := \n \t if position == x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until position != y [end]|[start] policy a := \n \t if position > 1 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b > 1 \n \t execute use \n \t until a < x [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until inventory <= y [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until position == 2 [end]|[start] policy b := \n \t if b <= 0 : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 0 \n \t execute build \n \t until b <= 1 [end]|[start] option : \n \t init a > y \n \t execute use \n \t until position < y [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init x \n \t execute build \n \t until b != y [end]|[start] policy a := \n \t if a >= 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != y \n \t execute jump \n \t until inventory [end]|[start] option : \n \t init b == 0 \n \t execute use \n \t until position >= 0 [end]|[start] policy a := \n \t if position < 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until inventory >= 0 [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until inventory == 0 [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until a <= 1 [end]|[start] option : \n \t init position < y \n \t execute build \n \t until a > 0 [end]|[start] option : \n \t init b == 2 \n \t execute build \n \t until position >= y [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until position <= x [end]|[start] policy a := \n \t if a <= 0 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= x : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until inventory > 0 [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute build \n \t until a < x [end]|[start] option : \n \t init b > y \n \t execute build \n \t until position == 2 [end]|[start] policy a := \n \t if b < 0 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 0 \n \t execute find \n \t until inventory != 0 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 1 \n \t execute build \n \t until a == 1 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != y : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until position == y [end]|[start] policy b := \n \t if a >= y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 2 \n \t execute build \n \t until inventory != 0 [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position \n \t execute build \n \t until inventory != 1 [end]|[start] option : \n \t init a <= y \n \t execute find \n \t until position < 1 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until b == 0 [end]|[start] option : \n \t init a >= 1 \n \t execute run \n \t until a < 0 [end]|[start] policy a := \n \t if b == y : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 0 \n \t execute run \n \t until inventory > x [end]|[start] policy b := \n \t if a != x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 2 \n \t execute jump \n \t until inventory <= y [end]|[start] policy a := \n \t if iron == 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until inventory > 2 [end]|[start] policy a := \n \t if position < x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 1 \n \t execute find \n \t until b [end]|[start] option : \n \t init a < x \n \t execute use \n \t until inventory != 0 [end]|[start] option : \n \t init a < 0 \n \t execute jump \n \t until position != 2 [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until b == 2 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position <= y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until inventory >= x [end]|[start] option : \n \t init position != y \n \t execute build \n \t until b > x [end]|[start] policy a := \n \t if a >= x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 0 \n \t execute run \n \t until a != x [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until inventory > 1 [end]|[start] policy b := \n \t if position != x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until b >= 1 [end]|[start] option : \n \t init inventory < 2 \n \t execute jump \n \t until position > y [end]|[start] option : \n \t init a \n \t execute use \n \t until inventory < x [end]|[start] policy a := \n \t if position > x : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 1 \n \t execute jump \n \t until a == 1 [end]|[start] option : \n \t init position > x \n \t execute build \n \t until inventory < 0 [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 1 \n \t execute run \n \t until inventory == y [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until inventory > y [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until position == y [end]|[start] policy a := \n \t if b > 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until a >= y [end]|[start] policy a := \n \t if b >= x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= x \n \t execute use \n \t until a == y [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b != x \n \t execute find \n \t until a > x [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until inventory == 2 [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until b <= y [end]|[start] policy a := \n \t if b >= 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position == y \n \t execute build \n \t until position != 2 [end]|[start] policy b := \n \t if iron >= y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 1 \n \t execute use \n \t until a > 0 [end]|[start] option : \n \t init a <= 1 \n \t execute find \n \t until a <= y [end]|[start] policy a := \n \t if a == x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until b == 0 [end]|[start] option : \n \t init position \n \t execute build \n \t until position >= 2 [end]|[start] policy a := \n \t if iron == x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position <= x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b > x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until a == 1 [end]|[start] option : \n \t init b \n \t execute find \n \t until position > 2 [end]|[start] option : \n \t init a > x \n \t execute run \n \t until a > 1 [end]|[start] option : \n \t init b != x \n \t execute find \n \t until b > 2 [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != y : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until a <= x [end]|[start] option : \n \t init x \n \t execute use \n \t until inventory != 2 [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until a == y [end]|[start] option : \n \t init inventory <= 2 \n \t execute use \n \t until inventory <= 2 [end]|[start] policy a := \n \t if b < x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position != x \n \t execute find \n \t until inventory == 2 [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until position <= 2 [end]|[start] option : \n \t init position <= y \n \t execute run \n \t until inventory [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 1 \n \t execute build \n \t until inventory > x [end]|[start] option : \n \t init position > 1 \n \t execute jump \n \t until a >= x [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until b == 1 [end]|[start] option : \n \t init y \n \t execute build \n \t until a < y [end]|[start] policy b := \n \t if a < y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < y \n \t execute run \n \t until b >= x [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until position == 2 [end]|[start] policy b := \n \t if b > y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a > y \n \t execute build \n \t until a <= y [end]|[start] option : \n \t init b != x \n \t execute find \n \t until b < 0 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position < x \n \t execute build \n \t until a >= 2 [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b > y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until position >= y [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until inventory < 1 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 2 \n \t execute use \n \t until a == 2 [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until position == 0 [end]|[start] policy a := \n \t if position != 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron != 0 : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute run \n \t until inventory > 0 [end]|[start] policy b := \n \t if a < x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until a < y [end]|[start] policy b := \n \t if b <= y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until position != 1 [end]|[start] policy a := \n \t if iron >= y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < y \n \t execute build \n \t until b != y [end]|[start] policy b := \n \t if b != y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until inventory > 0 [end]|[start] option : \n \t init position <= 2 \n \t execute use \n \t until a != y [end]|[start] option : \n \t init position >= 2 \n \t execute build \n \t until inventory < 0 [end]|[start] policy b := \n \t if a < 2 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until b >= y [end]|[start] option : \n \t init a \n \t execute jump \n \t until position <= 2 [end]|[start] policy a := \n \t if position > x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 2 \n \t execute jump \n \t until a < 1 [end]|[start] option : \n \t init a != 0 \n \t execute find \n \t until position <= 0 [end]|[start] policy a := \n \t if a != y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 0 \n \t execute use \n \t until a <= y [end]|[start] policy b := \n \t if position < y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until position == x [end]|[start] policy a := \n \t if b : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 1 \n \t execute jump \n \t until inventory == 2 [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until y [end]|[start] policy b := \n \t if position > y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 2 \n \t execute use \n \t until a > x [end]|[start] policy a := \n \t if iron <= y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= x \n \t execute use \n \t until inventory >= 1 [end]|[start] policy a := \n \t if b <= x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until b >= 0 [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until a > 1 [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 1 \n \t execute find \n \t until inventory > 0 [end]|[start] policy b := \n \t if iron <= x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= y \n \t execute use \n \t until position == 0 [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until a < y [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until position > 1 [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until position < x [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until position == 2 [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 2 \n \t execute build \n \t until b > 2 [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until b == 0 [end]|[start] option : \n \t init inventory == 0 \n \t execute find \n \t until a >= 0 [end]|[start] option : \n \t init a < x \n \t execute use \n \t until position > 1 [end]|[start] policy a := \n \t if position < 0 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= x \n \t execute use \n \t until position >= y [end]|[start] option : \n \t init a != 1 \n \t execute run \n \t until position [end]|[start] policy b := \n \t if b >= y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until position != 2 [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init x \n \t execute build \n \t until position < 1 [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until x [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > x \n \t execute run \n \t until b < 1 [end]|[start] option : \n \t init a == x \n \t execute run \n \t until inventory == 1 [end]|[start] policy b := \n \t if b == y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until position < 0 [end]|[start] option : \n \t init a == 0 \n \t execute find \n \t until b == 0 [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until b <= x [end]|[start] policy b := \n \t if position < y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until b < x [end]|[start] option : \n \t init inventory > y \n \t execute jump \n \t until b != x [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until inventory != 0 [end]|[start] option : \n \t init a < 2 \n \t execute find \n \t until position <= y [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until position <= y [end]|[start] policy b := \n \t if position : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until inventory <= 2 [end]|[start] policy a := \n \t if b != y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 0 \n \t execute run \n \t until a == 0 [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b > y \n \t execute run \n \t until b >= y [end]|[start] policy b := \n \t if a == 1 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= y \n \t execute run \n \t until a [end]|[start] option : \n \t init a > 1 \n \t execute build \n \t until b == 2 [end]|[start] policy a := \n \t if position != x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until position < 2 [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute jump \n \t until position == y [end]|[start] option : \n \t init a \n \t execute run \n \t until a >= 2 [end]|[start] option : \n \t init b < y \n \t execute build \n \t until position > 2 [end]|[start] policy a := \n \t if a < 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position >= y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b < x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until inventory > y [end]|[start] option : \n \t init a != y \n \t execute run \n \t until a < 0 [end]|[start] policy b := \n \t if b != y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position > y \n \t execute build \n \t until b != 2 [end]|[start] option : \n \t init a > x \n \t execute use \n \t until b != y [end]|[start] policy a := \n \t if iron < 1 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position > x \n \t execute use \n \t until b >= 1 [end]|[start] policy a := \n \t if a < 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == y \n \t execute use \n \t until b == 2 [end]|[start] policy a := \n \t if iron > 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 0 \n \t execute use \n \t until inventory != 0 [end]|[start] policy a := \n \t if iron != 1 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 2 \n \t execute run \n \t until a > 1 [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= x \n \t execute run \n \t until inventory != 1 [end]|[start] policy a := \n \t if b >= y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 0 \n \t execute find \n \t until b < 1 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until a > 1 [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until a > y [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= x \n \t execute build \n \t until inventory == 0 [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 0 \n \t execute use \n \t until b >= 2 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until a > 0 [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until position < 2 [end]|[start] policy a := \n \t if a > 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until inventory >= x [end]|[start] option : \n \t init a != x \n \t execute use \n \t until b > y [end]|[start] policy a := \n \t if position < 1 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a > x \n \t execute build \n \t until b <= 0 [end]|[start] policy b := \n \t if iron == x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 1 \n \t execute build \n \t until inventory == 2 [end]|[start] option : \n \t init a >= 0 \n \t execute run \n \t until position > y [end]|[start] policy b := \n \t if iron < y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position == y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until inventory >= 0 [end]|[start] policy a := \n \t if b >= y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 0 \n \t execute build \n \t until inventory != y [end]|[start] option : \n \t init inventory != 2 \n \t execute use \n \t until a < 0 [end]|[start] policy a := \n \t if b >= y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 2 \n \t execute jump \n \t until b > x [end]|[start] policy a := \n \t if a < x : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init y \n \t execute run \n \t until inventory < 2 [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until a > 0 [end]|[start] option : \n \t init position > 0 \n \t execute jump \n \t until position <= 2 [end]|[start] policy a := \n \t if position < y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until position >= x [end]|[start] option : \n \t init inventory >= x \n \t execute use \n \t until b > 1 [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until b == y [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 2 \n \t execute find \n \t until inventory >= 2 [end]|[start] policy a := \n \t if a < 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until b != 1 [end]|[start] option : \n \t init position <= x \n \t execute jump \n \t until inventory == x [end]|[start] policy b := \n \t if b <= x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 2 \n \t execute build \n \t until inventory [end]|[start] option : \n \t init a <= y \n \t execute find \n \t until inventory > 0 [end]|[start] policy b := \n \t if position == y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init y \n \t execute use \n \t until inventory == y [end]|[start] policy a := \n \t if b == 2 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 1 \n \t execute build \n \t until b == y [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until a == 1 [end]|[start] option : \n \t init inventory < 1 \n \t execute find \n \t until a >= 0 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 2 \n \t execute build \n \t until a >= y [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= x \n \t execute build \n \t until position != 1 [end]|[start] option : \n \t init position < x \n \t execute run \n \t until inventory > x [end]|[start] option : \n \t init a != 2 \n \t execute jump \n \t until position < 2 [end]|[start] policy a := \n \t if b >= x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until position <= y [end]|[start] policy b := \n \t if b : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position > 2 : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 0 \n \t execute jump \n \t until inventory <= 0 [end]|[start] policy a := \n \t if b > x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 0 \n \t execute build \n \t until b >= y [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until a < x [end]|[start] policy a := \n \t if position != 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until position <= 1 [end]|[start] policy a := \n \t if position <= x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 0 \n \t execute find \n \t until position >= 0 [end]|[start] option : \n \t init a >= 1 \n \t execute run \n \t until b == 1 [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until b != x [end]|[start] policy a := \n \t if position < 2 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= y \n \t execute jump \n \t until b [end]|[start] option : \n \t init position >= 1 \n \t execute build \n \t until inventory > x [end]|[start] option : \n \t init inventory <= 2 \n \t execute use \n \t until inventory >= 2 [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until inventory > x [end]|[start] policy b := \n \t if a < x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until a <= 1 [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until b != y [end]|[start] option : \n \t init position > y \n \t execute use \n \t until inventory <= x [end]|[start] policy a := \n \t if position != 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 0 \n \t execute find \n \t until inventory > y [end]|[start] option : \n \t init inventory <= x \n \t execute find \n \t until b > 0 [end]|[start] policy a := \n \t if a >= 1 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a <= x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a <= y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= x \n \t execute find \n \t until b == 1 [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until a > 0 [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until a == 2 [end]|[start] policy a := \n \t if iron > 0 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron != x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b == 1 \n \t execute find \n \t until b <= y [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until inventory >= 0 [end]|[start] policy b := \n \t if iron > 0 : \n \t execute use \n [end]|[start] policy b := \n \t if position <= y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until inventory != 1 [end]|[start] policy b := \n \t if position > x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron <= 1 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until position > x [end]|[start] policy b := \n \t if a > x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until a >= x [end]|[start] policy b := \n \t if b < y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b < x \n \t execute find \n \t until b == y [end]|[start] policy a := \n \t if position > x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init y \n \t execute run \n \t until position [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position > x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until a != x [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until b > x [end]|[start] policy b := \n \t if b < 2 : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position > y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b == y \n \t execute build \n \t until position > 2 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == y : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until b == x [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until inventory < y [end]|[start] policy a := \n \t if iron != y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until b <= x [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 2 \n \t execute run \n \t until position != 0 [end]|[start] option : \n \t init b < 0 \n \t execute jump \n \t until inventory == x [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until a [end]|[start] policy b := \n \t if a < 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a != y \n \t execute find \n \t until inventory == x [end]|[start] option : \n \t init inventory <= 0 \n \t execute use \n \t until a >= 2 [end]|[start] policy a := \n \t if a : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == x \n \t execute run \n \t until b != 0 [end]|[start] policy a := \n \t if position < x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron > x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a <= y : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 0 \n \t execute jump \n \t until position == 0 [end]|[start] policy b := \n \t if iron >= 2 : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 0 \n \t execute jump \n \t until inventory > 2 [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a < y \n \t execute jump \n \t until b <= 1 [end]|[start] option : \n \t init a < x \n \t execute jump \n \t until inventory >= x [end]|[start] policy a := \n \t if iron > x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until a >= 0 [end]|[start] policy a := \n \t if position <= x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until position > x [end]|[start] option : \n \t init position > y \n \t execute build \n \t until b == 2 [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b < y \n \t execute build \n \t until inventory != 2 [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until inventory <= 0 [end]|[start] policy a := \n \t if position > y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= y \n \t execute run \n \t until a >= 2 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until a != x [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position == y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 1 \n \t execute find \n \t until b == x [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 0 \n \t execute use \n \t until a >= 2 [end]|[start] policy b := \n \t if iron != y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 1 \n \t execute find \n \t until b < 2 [end]|[start] option : \n \t init position >= 0 \n \t execute build \n \t until inventory <= 1 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until b != 1 [end]|[start] option : \n \t init a == x \n \t execute run \n \t until a >= y [end]|[start] option : \n \t init b != 2 \n \t execute find \n \t until position != 2 [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until b > 0 [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until inventory < y [end]|[start] policy a := \n \t if a > 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a > 2 : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 2 \n \t execute find \n \t until b != x [end]|[start] policy a := \n \t if b < 1 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a == x \n \t execute run \n \t until position >= 1 [end]|[start] policy b := \n \t if position < y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until position > 1 [end]|[start] option : \n \t init inventory < 2 \n \t execute jump \n \t until b >= x [end]|[start] option : \n \t init a <= 0 \n \t execute jump \n \t until a <= y [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until inventory <= y [end]|[start] option : \n \t init a <= y \n \t execute build \n \t until a >= x [end]|[start] option : \n \t init b != y \n \t execute run \n \t until a > 2 [end]|[start] option : \n \t init a > 1 \n \t execute build \n \t until position > 2 [end]|[start] policy b := \n \t if position < y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until b <= 1 [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until b >= 1 [end]|[start] option : \n \t init position \n \t execute find \n \t until position [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until inventory < x [end]|[start] policy a := \n \t if iron < 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 2 \n \t execute build \n \t until inventory [end]|[start] option : \n \t init position == y \n \t execute find \n \t until a [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position < x \n \t execute use \n \t until a > 2 [end]|[start] policy b := \n \t if a >= y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b > y \n \t execute find \n \t until position [end]|[start] option : \n \t init position > x \n \t execute jump \n \t until inventory < 1 [end]|[start] option : \n \t init position > x \n \t execute use \n \t until position >= 1 [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init y \n \t execute jump \n \t until inventory != x [end]|[start] policy b := \n \t if a < y : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b < y \n \t execute run \n \t until position <= x [end]|[start] policy b := \n \t if a == y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a > y \n \t execute run \n \t until position <= y [end]|[start] option : \n \t init a < 0 \n \t execute build \n \t until inventory != y [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > y \n \t execute run \n \t until a >= x [end]|[start] option : \n \t init x \n \t execute find \n \t until inventory <= y [end]|[start] policy a := \n \t if position > 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until b < x [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b <= y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= x : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute build \n [end]|[start] policy a := \n \t if position <= x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a <= x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b == y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until inventory >= 1 [end]|[start] policy a := \n \t if a < 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < x \n \t execute find \n \t until inventory > 1 [end]|[start] option : \n \t init a == 0 \n \t execute run \n \t until inventory <= x [end]|[start] policy b := \n \t if b <= y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until inventory <= 0 [end]|[start] policy a := \n \t if a > y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until position < 0 [end]|[start] option : \n \t init a >= y \n \t execute build \n \t until a < 0 [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until inventory < x [end]|[start] policy a := \n \t if position < x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until inventory > 1 [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until position == 1 [end]|[start] policy b := \n \t if a < x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b != y \n \t execute run \n \t until a != 0 [end]|[start] option : \n \t init inventory != 0 \n \t execute use \n \t until position > 2 [end]|[start] policy a := \n \t if a != 2 : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 1 \n \t execute run \n \t until position > 2 [end]|[start] policy b := \n \t if position > x : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position != y : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until b < 1 [end]|[start] policy a := \n \t if position == y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until a <= y [end]|[start] option : \n \t init a < 2 \n \t execute build \n \t until position <= x [end]|[start] policy a := \n \t if a > 2 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute run \n \t until y [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until a < y [end]|[start] option : \n \t init position < y \n \t execute use \n \t until inventory < y [end]|[start] option : \n \t init inventory <= 1 \n \t execute find \n \t until b > 1 [end]|[start] policy a := \n \t if iron == y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 0 \n \t execute run \n \t until a == 2 [end]|[start] option : \n \t init position >= 2 \n \t execute find \n \t until b <= 2 [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until b < x [end]|[start] option : \n \t init inventory <= x \n \t execute find \n \t until b != 2 [end]|[start] option : \n \t init b > 1 \n \t execute build \n \t until position == 2 [end]|[start] option : \n \t init position > y \n \t execute find \n \t until b != 0 [end]|[start] policy a := \n \t if a == x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a == x \n \t execute build \n \t until a <= 1 [end]|[start] option : \n \t init b < 1 \n \t execute jump \n \t until b >= x [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until a < x [end]|[start] option : \n \t init inventory < y \n \t execute use \n \t until position != y [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until inventory <= x [end]|[start] policy a := \n \t if b != 2 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a < y \n \t execute run \n \t until inventory <= 0 [end]|[start] policy a := \n \t if iron <= x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position < x \n \t execute jump \n \t until a == 2 [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until a != y [end]|[start] option : \n \t init position < 1 \n \t execute run \n \t until inventory != 2 [end]|[start] policy a := \n \t if a == x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until inventory [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until x [end]|[start] policy b := \n \t if b == y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b > x : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 0 \n \t execute jump \n \t until inventory != x [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until position < 2 [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until position == x [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until b != x [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until a <= x [end]|[start] option : \n \t init inventory != 0 \n \t execute jump \n \t until a < 2 [end]|[start] policy a := \n \t if a < x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a == y \n \t execute use \n \t until inventory == 0 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 1 \n \t execute find \n \t until position == 1 [end]|[start] option : \n \t init inventory > 0 \n \t execute jump \n \t until a > y [end]|[start] option : \n \t init position < y \n \t execute use \n \t until position <= 2 [end]|[start] option : \n \t init position <= 1 \n \t execute jump \n \t until position < 1 [end]|[start] option : \n \t init b <= x \n \t execute find \n \t until inventory < 1 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position < y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a == x \n \t execute build \n \t until a <= 2 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b > 1 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until position >= 2 [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until position != 0 [end]|[start] policy b := \n \t if iron != y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position > y \n \t execute run \n \t until a [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until position == 1 [end]|[start] policy b := \n \t if b > y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a != x \n \t execute run \n \t until position != 2 [end]|[start] policy b := \n \t if a < 2 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position == x \n \t execute use \n \t until a > 0 [end]|[start] policy a := \n \t if b < 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a > y \n \t execute use \n \t until b <= 2 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until b == x [end]|[start] policy a := \n \t if a >= x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b == x \n \t execute use \n \t until a >= x [end]|[start] option : \n \t init b == 2 \n \t execute jump \n \t until b >= x [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until b <= 1 [end]|[start] option : \n \t init inventory >= 1 \n \t execute find \n \t until b >= y [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until b >= 2 [end]|[start] policy a := \n \t if b != 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron > 1 : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until a <= 0 [end]|[start] option : \n \t init a != x \n \t execute use \n \t until inventory <= 2 [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until a <= 1 [end]|[start] policy b := \n \t if position <= y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init x \n \t execute use \n \t until a > 0 [end]|[start] option : \n \t init position <= 1 \n \t execute run \n \t until inventory > y [end]|[start] policy b := \n \t if a >= x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 0 \n \t execute run \n \t until b != 1 [end]|[start] policy b := \n \t if a < y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= y \n \t execute build \n \t until a != y [end]|[start] option : \n \t init inventory > x \n \t execute jump \n \t until b < 2 [end]|[start] policy a := \n \t if position != y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until b <= x [end]|[start] policy b := \n \t if iron < x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until b < y [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a > y : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute use \n \t until a == 0 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a > y \n \t execute use \n \t until position == 1 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until b < x [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until a [end]|[start] option : \n \t init inventory \n \t execute use \n \t until b >= 0 [end]|[start] policy a := \n \t if b != 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= x \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until b <= 2 [end]|[start] policy b := \n \t if b > y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 0 \n \t execute find \n \t until b < y [end]|[start] option : \n \t init position < x \n \t execute use \n \t until a != 2 [end]|[start] policy a := \n \t if b >= y : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b < x \n \t execute run \n \t until inventory < 2 [end]|[start] option : \n \t init b >= 1 \n \t execute run \n \t until inventory <= x [end]|[start] policy a := \n \t if position != y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until b <= 2 [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a < x \n \t execute jump \n \t until position >= 0 [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until b <= x [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until a [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until a <= y [end]|[start] option : \n \t init b \n \t execute find \n \t until b < 2 [end]|[start] policy a := \n \t if a != 0 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until inventory >= 2 [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until b != 2 [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until inventory [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until a != 0 [end]|[start] policy a := \n \t if a < 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until inventory >= x [end]|[start] policy a := \n \t if b >= 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 0 \n \t execute run \n \t until a < x [end]|[start] policy b := \n \t if b != y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until position != 2 [end]|[start] policy a := \n \t if position == x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= y \n \t execute run \n \t until inventory <= x [end]|[start] policy a := \n \t if a < 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= 1 \n \t execute jump \n \t until a < 0 [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 1 \n \t execute build \n \t until inventory < 2 [end]|[start] policy b := \n \t if b != x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until a != y [end]|[start] policy a := \n \t if a <= y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 2 \n \t execute jump \n \t until inventory == 2 [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until inventory != 2 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until position == 2 [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until b > y [end]|[start] option : \n \t init inventory < x \n \t execute use \n \t until position > 2 [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until position > 1 [end]|[start] policy a := \n \t if position < 0 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until a < 2 [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until inventory > 1 [end]|[start] policy a := \n \t if a == 1 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until a != x [end]|[start] policy a := \n \t if b == y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b <= y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= x \n \t execute run \n \t until a <= 1 [end]|[start] option : \n \t init inventory \n \t execute use \n \t until b != y [end]|[start] policy b := \n \t if a < 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until position == 0 [end]|[start] option : \n \t init position == x \n \t execute run \n \t until b < y [end]|[start] policy a := \n \t if iron == 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position > x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until a < 0 [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until position == 0 [end]|[start] policy a := \n \t if position : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until inventory <= 2 [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until position < x [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until position == x [end]|[start] policy b := \n \t if a != 2 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until inventory == 0 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 2 \n \t execute jump \n \t until inventory > y [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until inventory >= 2 [end]|[start] option : \n \t init position <= x \n \t execute run \n \t until b == y [end]|[start] policy a := \n \t if a != x : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 0 \n \t execute find \n \t until b <= y [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until position > 1 [end]|[start] policy b := \n \t if a >= y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a <= x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 0 \n \t execute use \n \t until inventory > 0 [end]|[start] option : \n \t init b > y \n \t execute use \n \t until b <= y [end]|[start] policy b := \n \t if iron != x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b > y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position <= y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 2 \n \t execute jump \n \t until inventory != 0 [end]|[start] option : \n \t init inventory < y \n \t execute run \n \t until b > 1 [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron == x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 1 \n \t execute use \n \t until position < 2 [end]|[start] option : \n \t init position >= 1 \n \t execute use \n \t until position >= y [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 2 \n \t execute build \n \t until position <= 1 [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until position > x [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until position >= 0 [end]|[start] policy a := \n \t if b < y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 0 \n \t execute build \n \t until a != 1 [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until inventory < 1 [end]|[start] option : \n \t init position == 2 \n \t execute use \n \t until b != 2 [end]|[start] policy a := \n \t if b == 2 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until y [end]|[start] policy b := \n \t if a != 0 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until inventory < 2 [end]|[start] option : \n \t init position < y \n \t execute build \n \t until position <= 1 [end]|[start] policy b := \n \t if a > x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= y \n \t execute find \n \t until a >= x [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until position != 1 [end]|[start] policy a := \n \t if b > 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a > x \n \t execute run \n \t until position >= y [end]|[start] policy a := \n \t if position >= x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= x \n \t execute run \n \t until position <= y [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 0 \n \t execute run \n \t until inventory < y [end]|[start] policy b := \n \t if iron == x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 1 \n \t execute find \n \t until b != 0 [end]|[start] policy a := \n \t if position > 1 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until inventory != 1 [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 2 \n \t execute jump \n \t until inventory == 0 [end]|[start] policy a := \n \t if position < 2 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until b > x [end]|[start] policy a := \n \t if position == 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until b < y [end]|[start] option : \n \t init b != 2 \n \t execute jump \n \t until position > y [end]|[start] option : \n \t init position == 0 \n \t execute find \n \t until inventory >= x [end]|[start] policy b := \n \t if position > x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until y [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until a == 1 [end]|[start] option : \n \t init inventory < 2 \n \t execute run \n \t until inventory < 2 [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until inventory > 2 [end]|[start] option : \n \t init a < 0 \n \t execute find \n \t until a > 2 [end]|[start] policy b := \n \t if iron >= y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != y \n \t execute build \n \t until position >= x [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until a < 0 [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position != x \n \t execute use \n \t until b >= 1 [end]|[start] option : \n \t init position == 0 \n \t execute jump \n \t until a == x [end]|[start] option : \n \t init position <= 0 \n \t execute find \n \t until a < 2 [end]|[start] policy b := \n \t if b > x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until position > y [end]|[start] option : \n \t init position >= 1 \n \t execute build \n \t until a > x [end]|[start] policy a := \n \t if a > x : \n \t execute build \n [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until inventory >= y [end]|[start] policy a := \n \t if a >= 0 : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until b < y [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until b > y [end]|[start] option : \n \t init inventory != 0 \n \t execute find \n \t until b >= 2 [end]|[start] option : \n \t init b < 2 \n \t execute jump \n \t until b == 2 [end]|[start] policy a := \n \t if b < 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 2 \n \t execute use \n \t until position == 2 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until a > 2 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position == y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b != y \n \t execute run \n \t until a != x [end]|[start] policy b := \n \t if iron < y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until position > y [end]|[start] policy a := \n \t if position == 0 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory \n \t execute build \n \t until position > 1 [end]|[start] option : \n \t init a < 2 \n \t execute build \n \t until position >= 0 [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until inventory >= 0 [end]|[start] policy a := \n \t if a > 2 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 1 \n \t execute build \n \t until inventory >= 0 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position > x \n \t execute find \n \t until b [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until b == 0 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until a [end]|[start] policy a := \n \t if position == y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until x [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until position >= 2 [end]|[start] option : \n \t init position < x \n \t execute use \n \t until y [end]|[start] option : \n \t init position \n \t execute run \n \t until position <= 2 [end]|[start] policy a := \n \t if iron == y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b != y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 0 \n \t execute jump \n \t until a != 1 [end]|[start] policy a := \n \t if iron <= y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 0 \n \t execute use \n \t until a != 1 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 2 \n \t execute use \n \t until b != 0 [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until b != 1 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 2 \n \t execute find \n \t until inventory >= 0 [end]|[start] option : \n \t init b < 0 \n \t execute jump \n \t until b != x [end]|[start] option : \n \t init inventory <= x \n \t execute find \n \t until inventory != 1 [end]|[start] policy b := \n \t if b != y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b == x \n \t execute build \n \t until inventory < 2 [end]|[start] option : \n \t init inventory < 0 \n \t execute use \n \t until b == 0 [end]|[start] option : \n \t init position < y \n \t execute build \n \t until inventory == x [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until position >= 0 [end]|[start] policy b := \n \t if b < y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a < x \n \t execute build \n \t until inventory >= y [end]|[start] option : \n \t init b == x \n \t execute find \n \t until position != 1 [end]|[start] policy b := \n \t if a == x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position >= y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 1 \n \t execute jump \n \t until a >= x [end]|[start] policy a := \n \t if position >= 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 1 \n \t execute jump \n \t until position >= 2 [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until inventory < x [end]|[start] policy a := \n \t if iron >= y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until position > y [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until position > 2 [end]|[start] option : \n \t init b <= x \n \t execute run \n \t until position == 2 [end]|[start] policy a := \n \t if position >= x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position <= x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute run \n \t until position < y [end]|[start] policy b := \n \t if position != y : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > x \n \t execute build \n \t until position <= y [end]|[start] option : \n \t init position >= 2 \n \t execute find \n \t until position <= x [end]|[start] policy a := \n \t if a >= 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until a >= 1 [end]|[start] policy a := \n \t if position < 0 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until inventory == 2 [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until b <= y [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 2 \n \t execute use \n \t until a == 0 [end]|[start] option : \n \t init position == 2 \n \t execute find \n \t until position == x [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > y \n \t execute run \n \t until inventory == 0 [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until b != 1 [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until a < 1 [end]|[start] option : \n \t init position < 2 \n \t execute find \n \t until inventory < y [end]|[start] option : \n \t init b == x \n \t execute find \n \t until b != 2 [end]|[start] policy b := \n \t if iron < y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until position >= 0 [end]|[start] option : \n \t init position != 1 \n \t execute jump \n \t until inventory != 1 [end]|[start] policy a := \n \t if iron > x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until a != x [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until position > y [end]|[start] policy a := \n \t if iron == 2 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > x \n \t execute use \n \t until position >= 0 [end]|[start] policy b := \n \t if position <= y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= y \n \t execute run \n \t until b == 0 [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until b != y [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a <= x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until position >= x [end]|[start] option : \n \t init b < x \n \t execute run \n \t until a <= 1 [end]|[start] policy b := \n \t if iron <= x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until a >= 2 [end]|[start] policy b := \n \t if b == y : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until b [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a > x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > y \n \t execute build \n \t until a > y [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until inventory != 0 [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until b == 0 [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init y \n \t execute find \n \t until position < x [end]|[start] option : \n \t init position >= x \n \t execute jump \n \t until b == 0 [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until inventory <= x [end]|[start] policy a := \n \t if b <= y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a != x \n \t execute find \n \t until position != 2 [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until a > y [end]|[start] policy b := \n \t if a > x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < y \n \t execute run \n \t until position > y [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until b == y [end]|[start] option : \n \t init b > x \n \t execute run \n \t until b == 0 [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until position != 0 [end]|[start] option : \n \t init a != x \n \t execute find \n \t until b <= y [end]|[start] policy b := \n \t if a > 2 : \n \t execute run \n [end]|[start] policy a := \n \t if b == y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 0 \n \t execute build \n \t until b == 2 [end]|[start] policy a := \n \t if position > x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b < x \n \t execute run \n \t until inventory > x [end]|[start] policy b := \n \t if position == y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b != x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a != x \n \t execute use \n \t until b < 2 [end]|[start] option : \n \t init b > 0 \n \t execute run \n \t until inventory <= 1 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b == y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a == x \n \t execute use \n \t until position > 1 [end]|[start] policy a := \n \t if position != 1 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a > x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 0 \n \t execute run \n \t until a >= 0 [end]|[start] option : \n \t init inventory >= 0 \n \t execute build \n \t until a < 1 [end]|[start] policy a := \n \t if position < 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until y [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until position <= 0 [end]|[start] policy a := \n \t if position <= 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b == y : \n \t execute run \n [end]|[start] option : \n \t init a < y \n \t execute jump \n \t until b > 1 [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until position >= 1 [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until b <= 2 [end]|[start] policy a := \n \t if a <= x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init x \n \t execute run \n \t until inventory != y [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until inventory == 1 [end]|[start] policy a := \n \t if a >= x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 0 \n \t execute find \n \t until position <= 1 [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until a != 1 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until a == 0 [end]|[start] policy b := \n \t if position >= y : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until a == 2 [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != x \n \t execute build \n \t until b == 0 [end]|[start] option : \n \t init inventory > x \n \t execute run \n \t until inventory != 0 [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until b >= 2 [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until b == 2 [end]|[start] policy a := \n \t if position > y : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until b > y [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until a != 0 [end]|[start] option : \n \t init inventory < y \n \t execute run \n \t until inventory < x [end]|[start] option : \n \t init b != 1 \n \t execute find \n \t until position != 0 [end]|[start] policy b := \n \t if b < y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= y \n \t execute run \n \t until inventory < 0 [end]|[start] policy a := \n \t if b != 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b > y \n \t execute run \n \t until inventory >= 0 [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until inventory < x [end]|[start] policy a := \n \t if a > y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron != x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 0 \n \t execute find \n \t until position > x [end]|[start] option : \n \t init position == x \n \t execute build \n \t until a != y [end]|[start] policy a := \n \t if position == y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until inventory != 2 [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until inventory != 1 [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until position >= 2 [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until a != x [end]|[start] policy b := \n \t if position <= y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b == y \n \t execute use \n \t until a <= x [end]|[start] option : \n \t init position == 0 \n \t execute find \n \t until a < 1 [end]|[start] policy b := \n \t if iron < x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b <= x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until inventory != 2 [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until position <= 0 [end]|[start] policy a := \n \t if position > x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until position >= 2 [end]|[start] policy b := \n \t if position == y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a > y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until position <= 2 [end]|[start] option : \n \t init x \n \t execute build \n \t until position < y [end]|[start] policy b := \n \t if position != y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b != y \n \t execute use \n \t until inventory < 0 [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until position == y [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= y \n \t execute jump \n \t until b >= 2 [end]|[start] policy b := \n \t if iron <= x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute run \n \t until a >= 2 [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until inventory <= y [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute run \n \t until a != y [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until position != x [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until inventory < 0 [end]|[start] option : \n \t init a == y \n \t execute build \n \t until inventory >= 1 [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until a < 0 [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until inventory > y [end]|[start] policy a := \n \t if b != 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until a < 2 [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until b > 1 [end]|[start] option : \n \t init b == x \n \t execute use \n \t until b < 0 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b \n \t execute jump \n \t until a <= 0 [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until a > 0 [end]|[start] option : \n \t init inventory <= x \n \t execute use \n \t until inventory != x [end]|[start] option : \n \t init b >= 1 \n \t execute find \n \t until inventory > 1 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < x : \n \t execute use \n [end]|[start] option : \n \t init a != 0 \n \t execute find \n \t until a <= 1 [end]|[start] policy a := \n \t if position < 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 1 \n \t execute find \n \t until inventory > 2 [end]|[start] option : \n \t init a < y \n \t execute use \n \t until b != 0 [end]|[start] option : \n \t init position \n \t execute jump \n \t until position != x [end]|[start] policy a := \n \t if a != 2 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 0 \n \t execute use \n \t until position > 1 [end]|[start] policy a := \n \t if position >= x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 1 \n \t execute use \n \t until a <= 0 [end]|[start] policy a := \n \t if a == 1 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b > y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b > x \n \t execute find \n \t until b == 2 [end]|[start] policy b := \n \t if iron : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until a > 2 [end]|[start] option : \n \t init position >= 2 \n \t execute run \n \t until position < 2 [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until b >= 0 [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until position > x [end]|[start] option : \n \t init a >= y \n \t execute build \n \t until position < 1 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until a <= 2 [end]|[start] policy a := \n \t if position != 1 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a != x \n \t execute run \n \t until position >= 1 [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until position <= 2 [end]|[start] policy b := \n \t if position > x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 2 \n \t execute use \n \t until b < 1 [end]|[start] option : \n \t init inventory >= x \n \t execute run \n \t until a <= x [end]|[start] option : \n \t init position >= 2 \n \t execute find \n \t until a < 2 [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until position == 0 [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until b < 2 [end]|[start] option : \n \t init b <= x \n \t execute run \n \t until position > y [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until position >= y [end]|[start] policy b := \n \t if a < x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a == x \n \t execute run \n \t until b == 1 [end]|[start] option : \n \t init position >= 2 \n \t execute build \n \t until inventory != 2 [end]|[start] policy a := \n \t if iron < 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < y : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b \n \t execute use \n \t until a == y [end]|[start] policy a := \n \t if position >= 2 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until a != 0 [end]|[start] policy b := \n \t if position <= y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until position >= x [end]|[start] policy b := \n \t if iron == x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 0 \n \t execute build \n \t until a == 0 [end]|[start] policy a := \n \t if iron < 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until position >= 2 [end]|[start] policy a := \n \t if position > x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 2 \n \t execute run \n \t until inventory < 1 [end]|[start] policy a := \n \t if position < 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position == x \n \t execute find \n \t until inventory > 0 [end]|[start] policy b := \n \t if b >= 2 : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until b > 2 [end]|[start] option : \n \t init b != 1 \n \t execute find \n \t until b <= x [end]|[start] policy a := \n \t if a <= 1 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until x [end]|[start] option : \n \t init position <= 1 \n \t execute build \n \t until b < 1 [end]|[start] option : \n \t init position < 2 \n \t execute use \n \t until inventory > 0 [end]|[start] policy b := \n \t if iron <= y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= y \n \t execute find \n \t until a > 0 [end]|[start] policy a := \n \t if a != y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until position < x [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until inventory > 0 [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until a == 0 [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until position >= 1 [end]|[start] policy b := \n \t if a > x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 1 \n \t execute find \n \t until inventory == 1 [end]|[start] policy a := \n \t if position == 0 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b != x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a > y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until inventory >= 2 [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == x \n \t execute build \n \t until inventory > 1 [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until position < 1 [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until inventory > 1 [end]|[start] policy a := \n \t if a < x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 2 \n \t execute build \n \t until position != y [end]|[start] policy b := \n \t if position != x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until b > 0 [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until inventory > 0 [end]|[start] option : \n \t init position == x \n \t execute use \n \t until position >= 1 [end]|[start] policy b := \n \t if iron : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a > 0 : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute use \n \t until position < y [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until b == 1 [end]|[start] option : \n \t init a < 0 \n \t execute jump \n \t until inventory <= 0 [end]|[start] option : \n \t init position == 0 \n \t execute build \n \t until inventory != 2 [end]|[start] policy a := \n \t if a <= x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init x \n \t execute build \n \t until inventory == 1 [end]|[start] policy a := \n \t if a > 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until a > 2 [end]|[start] option : \n \t init inventory <= y \n \t execute build \n \t until a >= 1 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until inventory <= 0 [end]|[start] option : \n \t init position < 1 \n \t execute find \n \t until position [end]|[start] option : \n \t init inventory > x \n \t execute run \n \t until inventory >= 1 [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until position > 0 [end]|[start] policy b := \n \t if a == 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until inventory <= x [end]|[start] option : \n \t init position == 2 \n \t execute jump \n \t until b < 2 [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until y [end]|[start] policy a := \n \t if a < 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b < x \n \t execute run \n \t until a == 2 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until a == y [end]|[start] policy a := \n \t if a == 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b != y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 2 \n \t execute jump \n \t until a < 2 [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until position >= 1 [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until a < y [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until a == 1 [end]|[start] option : \n \t init a <= 2 \n \t execute run \n \t until b != x [end]|[start] option : \n \t init inventory > 1 \n \t execute jump \n \t until position == 1 [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until b != y [end]|[start] option : \n \t init b == x \n \t execute build \n \t until b == 2 [end]|[start] policy a := \n \t if a >= 1 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 2 \n \t execute jump \n \t until b <= y [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until position > 0 [end]|[start] policy b := \n \t if b > y : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until inventory != 2 [end]|[start] policy a := \n \t if b > y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until inventory > x [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b > 2 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until b < x [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until inventory == x [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position > x \n \t execute use \n \t until position >= x [end]|[start] option : \n \t init position > y \n \t execute find \n \t until inventory == y [end]|[start] option : \n \t init a == y \n \t execute build \n \t until a != 2 [end]|[start] option : \n \t init a == x \n \t execute use \n \t until inventory >= 2 [end]|[start] policy a := \n \t if a == y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == y : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 0 \n \t execute find \n \t until a >= x [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 1 \n \t execute find \n \t until inventory != 1 [end]|[start] policy b := \n \t if position >= y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 2 \n \t execute find \n \t until inventory <= 1 [end]|[start] option : \n \t init a < x \n \t execute find \n \t until b > y [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until b != x [end]|[start] policy a := \n \t if iron != y : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b > y \n \t execute jump \n \t until b <= 0 [end]|[start] policy a := \n \t if a != 1 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until inventory >= 1 [end]|[start] policy b := \n \t if iron <= y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until b != 0 [end]|[start] policy a := \n \t if b == 1 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a != y \n \t execute find \n \t until a == x [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until inventory == 2 [end]|[start] option : \n \t init a \n \t execute jump \n \t until a < 1 [end]|[start] policy a := \n \t if b != 2 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute find \n [end]|[start] policy b := \n \t if a != x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position < x \n \t execute build \n \t until inventory <= x [end]|[start] option : \n \t init position == y \n \t execute build \n \t until b < y [end]|[start] policy a := \n \t if a <= 1 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > y \n \t execute use \n \t until inventory <= x [end]|[start] option : \n \t init a == x \n \t execute build \n \t until b < 2 [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until inventory < y [end]|[start] option : \n \t init b == 0 \n \t execute use \n \t until b > 0 [end]|[start] policy a := \n \t if iron == x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position == x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until b == 2 [end]|[start] policy b := \n \t if a == 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 1 \n \t execute jump \n \t until position != 2 [end]|[start] policy b := \n \t if a > 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute use \n [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until inventory <= 0 [end]|[start] policy b := \n \t if a > x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b != x \n \t execute run \n \t until inventory != 2 [end]|[start] option : \n \t init position < 0 \n \t execute build \n \t until position == 2 [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until b == x [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until a >= 1 [end]|[start] policy a := \n \t if a <= 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b != x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute jump \n \t until a != x [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until position >= 2 [end]|[start] policy a := \n \t if iron : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until inventory <= 0 [end]|[start] option : \n \t init inventory < 1 \n \t execute run \n \t until a != x [end]|[start] policy a := \n \t if b < 1 : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position == y \n \t execute find \n \t until a >= 0 [end]|[start] option : \n \t init x \n \t execute find \n \t until a < y [end]|[start] option : \n \t init inventory != x \n \t execute jump \n \t until a == 0 [end]|[start] option : \n \t init b >= y \n \t execute find \n \t until a >= y [end]|[start] option : \n \t init position != 2 \n \t execute jump \n \t until inventory != y [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position == x \n \t execute use \n \t until a < x [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 0 \n \t execute use \n \t until b == 2 [end]|[start] policy a := \n \t if a < 2 : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until position < 0 [end]|[start] policy a := \n \t if iron == 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 0 \n \t execute run \n \t until a >= 0 [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until a >= 1 [end]|[start] policy a := \n \t if position == 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init x \n \t execute jump \n \t until a <= 1 [end]|[start] option : \n \t init position < 2 \n \t execute run \n \t until inventory < 2 [end]|[start] option : \n \t init inventory < 1 \n \t execute use \n \t until inventory [end]|[start] policy b := \n \t if b : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= x \n \t execute use \n \t until inventory > 2 [end]|[start] policy a := \n \t if b : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= y \n \t execute jump \n \t until inventory <= y [end]|[start] policy b := \n \t if a == 2 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron < y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b != x \n \t execute run \n \t until b > 2 [end]|[start] policy a := \n \t if a != y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute run \n \t until position == 0 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 1 \n \t execute find \n \t until inventory <= y [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until position == x [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= y \n \t execute run \n \t until b == 1 [end]|[start] policy a := \n \t if b > 0 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until b != y [end]|[start] policy a := \n \t if iron >= x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init y \n \t execute run \n \t until a <= 0 [end]|[start] policy b := \n \t if a <= y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position <= y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 1 \n \t execute build \n \t until b < x [end]|[start] policy b := \n \t if iron >= y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 0 \n \t execute jump \n \t until b >= 0 [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until position > 2 [end]|[start] option : \n \t init position == 0 \n \t execute use \n \t until position <= 0 [end]|[start] option : \n \t init y \n \t execute jump \n \t until b == 0 [end]|[start] option : \n \t init inventory == y \n \t execute jump \n \t until b != 0 [end]|[start] option : \n \t init a != 2 \n \t execute use \n \t until b >= y [end]|[start] option : \n \t init b >= 2 \n \t execute jump \n \t until b == 1 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= y \n \t execute run \n \t until position == 2 [end]|[start] policy b := \n \t if a < 2 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until inventory != 1 [end]|[start] policy b := \n \t if b < y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= y \n \t execute use \n \t until b != 2 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 0 \n \t execute use \n \t until inventory >= 0 [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until a != 1 [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= x \n \t execute run \n \t until position != x [end]|[start] option : \n \t init inventory <= 2 \n \t execute find \n \t until position >= y [end]|[start] option : \n \t init b <= y \n \t execute run \n \t until position != 1 [end]|[start] policy a := \n \t if a < y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 0 \n \t execute jump \n \t until a > 2 [end]|[start] option : \n \t init b >= 2 \n \t execute jump \n \t until position < x [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until b < 0 [end]|[start] option : \n \t init a != x \n \t execute jump \n \t until a > 1 [end]|[start] policy a := \n \t if position >= x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute find \n \t until position > y [end]|[start] option : \n \t init position >= x \n \t execute build \n \t until position < x [end]|[start] policy a := \n \t if b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b > 1 : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until b <= 0 [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until a < x [end]|[start] option : \n \t init a <= 2 \n \t execute build \n \t until position == 1 [end]|[start] policy b := \n \t if b >= x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute build \n \t until a == 1 [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init y \n \t execute find \n \t until inventory != y [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until inventory == x [end]|[start] policy a := \n \t if position > x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 2 \n \t execute run \n \t until inventory >= y [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until position != 2 [end]|[start] option : \n \t init a >= 2 \n \t execute run \n \t until inventory > x [end]|[start] policy a := \n \t if position <= 1 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 2 \n \t execute build \n \t until position < 1 [end]|[start] policy a := \n \t if iron == x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != x \n \t execute jump \n \t until b != 2 [end]|[start] policy a := \n \t if position == x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init y \n \t execute run \n \t until b == 1 [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until b >= 2 [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until b <= x [end]|[start] policy a := \n \t if b <= 1 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a == x \n \t execute use \n \t until inventory > 0 [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until b == 1 [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until b <= x [end]|[start] policy a := \n \t if position <= 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position != x \n \t execute build \n \t until position != x [end]|[start] option : \n \t init a == 0 \n \t execute build \n \t until b == x [end]|[start] policy b := \n \t if a > y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < x \n \t execute build \n \t until inventory > y [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until b <= x [end]|[start] policy b := \n \t if a != y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 0 \n \t execute find \n \t until inventory == y [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until inventory <= 1 [end]|[start] policy a := \n \t if iron < 1 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 0 \n \t execute find \n \t until inventory > 1 [end]|[start] option : \n \t init b != x \n \t execute find \n \t until b <= 0 [end]|[start] policy a := \n \t if position > 0 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 2 \n \t execute build \n \t until position < 2 [end]|[start] policy b := \n \t if b > y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > y \n \t execute run \n \t until a <= y [end]|[start] option : \n \t init inventory <= 1 \n \t execute jump \n \t until inventory == y [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until b == 0 [end]|[start] option : \n \t init a <= y \n \t execute run \n \t until b > y [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position > x \n \t execute build \n \t until inventory <= 1 [end]|[start] option : \n \t init inventory >= 0 \n \t execute use \n \t until b != 2 [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until b < 1 [end]|[start] policy a := \n \t if b < 1 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position == y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a > 1 : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 0 \n \t execute build \n \t until a < 2 [end]|[start] option : \n \t init inventory < 1 \n \t execute find \n \t until b <= y [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until b == y [end]|[start] option : \n \t init inventory >= x \n \t execute find \n \t until a != 2 [end]|[start] policy a := \n \t if position < y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until b < 0 [end]|[start] policy b := \n \t if iron : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 0 \n \t execute jump \n \t until inventory == 1 [end]|[start] policy a := \n \t if b != 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 0 \n \t execute jump \n \t until inventory < 2 [end]|[start] option : \n \t init a <= 2 \n \t execute run \n \t until a >= 2 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 0 \n \t execute jump \n \t until b == 0 [end]|[start] option : \n \t init b > x \n \t execute find \n \t until b < x [end]|[start] option : \n \t init position != 0 \n \t execute jump \n \t until a != 2 [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until b < y [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until position <= 0 [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until position == x [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until inventory <= 1 [end]|[start] policy a := \n \t if position > 2 : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == 2 : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 1 \n \t execute jump \n \t until a <= 1 [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position != y \n \t execute build \n \t until a [end]|[start] policy a := \n \t if a != x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until position != 2 [end]|[start] option : \n \t init b > 1 \n \t execute find \n \t until position != 1 [end]|[start] policy b := \n \t if position <= y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= x \n \t execute use \n \t until a <= y [end]|[start] policy b := \n \t if b != y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b == y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until b <= x [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until inventory < 0 [end]|[start] policy a := \n \t if position != 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b == y \n \t execute build \n \t until b == x [end]|[start] policy a := \n \t if position >= 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= x \n \t execute jump \n \t until inventory <= 1 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 0 \n \t execute find \n \t until b == y [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until inventory > x [end]|[start] policy b := \n \t if a != 2 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a == x \n \t execute build \n \t until b >= y [end]|[start] policy a := \n \t if a > 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until position <= x [end]|[start] policy a := \n \t if a != 1 : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position \n \t execute run \n \t until b >= x [end]|[start] option : \n \t init b != 0 \n \t execute find \n \t until b <= y [end]|[start] policy a := \n \t if b == x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a >= x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron >= 0 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > y : \n \t execute use \n [end]|[start] option : \n \t init y \n \t execute use \n \t until inventory <= y [end]|[start] option : \n \t init x \n \t execute use \n \t until b != 2 [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 2 \n \t execute find \n \t until a > y [end]|[start] policy b := \n \t if b <= x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a != x \n \t execute jump \n \t until inventory >= y [end]|[start] policy b := \n \t if a <= y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= y \n \t execute use \n \t until position == 0 [end]|[start] policy b := \n \t if iron <= x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position > 2 : \n \t execute run \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b > y \n \t execute jump \n \t until position != x [end]|[start] policy b := \n \t if b != x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until a >= y [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until b >= 2 [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until position > 2 [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position == x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 2 \n \t execute run \n \t until b > 2 [end]|[start] policy a := \n \t if a == 1 : \n \t execute use \n [end]|[start] option : \n \t init position < y \n \t execute find \n \t until a > x [end]|[start] policy a := \n \t if iron < y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 1 \n \t execute build \n \t until a <= 1 [end]|[start] policy b := \n \t if iron <= x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 0 \n \t execute build \n \t until b <= x [end]|[start] option : \n \t init a == 0 \n \t execute run \n \t until b < x [end]|[start] option : \n \t init position < y \n \t execute run \n \t until position > 0 [end]|[start] policy b := \n \t if b > y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 0 \n \t execute find \n \t until b >= 1 [end]|[start] policy a := \n \t if b >= x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until inventory <= 2 [end]|[start] option : \n \t init b > 1 \n \t execute find \n \t until a > 1 [end]|[start] policy b := \n \t if a >= x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until b >= 0 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until inventory > 0 [end]|[start] option : \n \t init position < 1 \n \t execute use \n \t until inventory < 1 [end]|[start] policy a := \n \t if a <= y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 1 \n \t execute find \n \t until b < x [end]|[start] policy b := \n \t if a >= y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position != y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 0 \n \t execute run \n \t until inventory <= 2 [end]|[start] option : \n \t init position < y \n \t execute use \n \t until inventory >= y [end]|[start] option : \n \t init position >= x \n \t execute find \n \t until inventory >= 2 [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until position < 0 [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until a == 0 [end]|[start] policy a := \n \t if position == 2 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until a == 0 [end]|[start] option : \n \t init b \n \t execute build \n \t until inventory > x [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until a != 0 [end]|[start] policy a := \n \t if position != y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= x \n \t execute find \n \t until position <= y [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until inventory < y [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until b >= y [end]|[start] option : \n \t init b == 1 \n \t execute jump \n \t until b == 0 [end]|[start] policy a := \n \t if iron != 1 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a \n \t execute build \n \t until a == 0 [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until inventory != 2 [end]|[start] policy b := \n \t if b > x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until a > y [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > x \n \t execute run \n \t until b < 1 [end]|[start] policy b := \n \t if a <= y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 1 \n \t execute find \n \t until b > y [end]|[start] option : \n \t init position >= x \n \t execute build \n \t until b <= 1 [end]|[start] policy b := \n \t if b > x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 0 \n \t execute run \n \t until a == x [end]|[start] policy a := \n \t if a >= x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b == y \n \t execute run \n \t until position < 0 [end]|[start] policy b := \n \t if a != x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b == x \n \t execute run \n \t until inventory > 0 [end]|[start] policy a := \n \t if position <= x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until a > 1 [end]|[start] option : \n \t init inventory \n \t execute find \n \t until inventory >= 2 [end]|[start] policy b := \n \t if a == 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b <= y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute jump \n \t until inventory >= x [end]|[start] policy a := \n \t if a < x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a != y \n \t execute run \n \t until inventory == y [end]|[start] option : \n \t init a > 2 \n \t execute build \n \t until b != 2 [end]|[start] policy a := \n \t if a >= 1 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until position == 0 [end]|[start] policy b := \n \t if position >= y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= y \n \t execute run \n \t until inventory == 1 [end]|[start] policy a := \n \t if position <= x : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= y \n \t execute run \n \t until inventory != x [end]|[start] option : \n \t init a > 1 \n \t execute run \n \t until inventory >= x [end]|[start] policy a := \n \t if position <= x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b != x \n \t execute run \n \t until position > 1 [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 0 \n \t execute find \n \t until position >= 0 [end]|[start] policy b := \n \t if iron == x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position < y \n \t execute find \n \t until b == 2 [end]|[start] policy b := \n \t if b : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until b == 1 [end]|[start] option : \n \t init a >= y \n \t execute jump \n \t until a < 1 [end]|[start] policy b := \n \t if a < 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 0 \n \t execute find \n \t until inventory != x [end]|[start] policy b := \n \t if iron <= y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until a <= x [end]|[start] option : \n \t init b > x \n \t execute build \n \t until inventory <= 1 [end]|[start] policy a := \n \t if iron != 2 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= 2 : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until position <= y [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b <= y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until inventory == y [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until b < x [end]|[start] policy a := \n \t if a > 1 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position == x \n \t execute find \n \t until a <= 1 [end]|[start] policy a := \n \t if iron != x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until position == 1 [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until position [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a > y \n \t execute build \n \t until position == x [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until inventory != 2 [end]|[start] option : \n \t init position > x \n \t execute build \n \t until inventory >= x [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until a != 1 [end]|[start] policy a := \n \t if iron == 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a == y \n \t execute build \n \t until b > 0 [end]|[start] option : \n \t init position >= 0 \n \t execute jump \n \t until b > 1 [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until a >= x [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until a >= 0 [end]|[start] option : \n \t init inventory == x \n \t execute use \n \t until position < x [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until a != 1 [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position > y \n \t execute build \n \t until a <= 2 [end]|[start] policy a := \n \t if position != y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= x \n \t execute run \n \t until b <= 2 [end]|[start] policy b := \n \t if iron != x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a <= y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 2 \n \t execute jump \n \t until b != 2 [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < y \n \t execute use \n \t until position > y [end]|[start] option : \n \t init position != 1 \n \t execute jump \n \t until inventory < x [end]|[start] option : \n \t init a >= y \n \t execute jump \n \t until b != 1 [end]|[start] policy b := \n \t if a == 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != x \n \t execute jump \n \t until inventory == x [end]|[start] policy a := \n \t if iron >= x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until position < 1 [end]|[start] policy a := \n \t if iron >= y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= 2 \n \t execute use \n \t until position <= x [end]|[start] policy a := \n \t if position != 1 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position != x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until position <= 2 [end]|[start] policy b := \n \t if iron <= y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until position <= 1 [end]|[start] option : \n \t init position < y \n \t execute run \n \t until inventory <= 1 [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until b <= y [end]|[start] option : \n \t init b != y \n \t execute find \n \t until inventory > 2 [end]|[start] policy b := \n \t if iron > y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a < x \n \t execute jump \n \t until b >= 2 [end]|[start] policy a := \n \t if position < 1 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != y \n \t execute find \n \t until b < y [end]|[start] option : \n \t init inventory >= y \n \t execute find \n \t until a <= 2 [end]|[start] policy a := \n \t if a > 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until a < x [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until a < x [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= y \n \t execute find \n \t until position == y [end]|[start] policy a := \n \t if iron > 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a < y \n \t execute jump \n \t until a < 1 [end]|[start] option : \n \t init inventory >= 1 \n \t execute find \n \t until position >= 2 [end]|[start] policy a := \n \t if position <= 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 2 \n \t execute run \n \t until a != 2 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b \n \t execute build \n \t until b > x [end]|[start] option : \n \t init inventory >= y \n \t execute find \n \t until inventory == 0 [end]|[start] policy a := \n \t if position > 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a \n \t execute jump \n \t until b != y [end]|[start] policy b := \n \t if iron > y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until b <= 2 [end]|[start] option : \n \t init b > x \n \t execute find \n \t until a > y [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until b < 0 [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until b == 0 [end]|[start] option : \n \t init b > 2 \n \t execute run \n \t until position > x [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until a != x [end]|[start] policy b := \n \t if a <= y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 1 \n \t execute build \n \t until position != y [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 2 \n \t execute jump \n \t until position == 1 [end]|[start] option : \n \t init a != 2 \n \t execute jump \n \t until a == 1 [end]|[start] option : \n \t init b > 1 \n \t execute build \n \t until position == 1 [end]|[start] policy b := \n \t if a > 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 0 \n \t execute run \n \t until inventory >= y [end]|[start] policy b := \n \t if a == 1 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until position != 2 [end]|[start] option : \n \t init a != y \n \t execute find \n \t until a == y [end]|[start] option : \n \t init position < 1 \n \t execute build \n \t until b == x [end]|[start] option : \n \t init position > y \n \t execute find \n \t until a != 2 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 0 \n \t execute jump \n \t until a > 1 [end]|[start] option : \n \t init a < 2 \n \t execute build \n \t until position >= y [end]|[start] policy a := \n \t if a == 2 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until position == x [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until b != x [end]|[start] policy a := \n \t if a <= 1 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 1 \n \t execute jump \n \t until b [end]|[start] policy a := \n \t if iron <= x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until position > x [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 2 \n \t execute jump \n \t until a < 1 [end]|[start] policy a := \n \t if position <= y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n [end]|[start] policy b := \n \t if b < y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until a == 2 [end]|[start] policy a := \n \t if a >= y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until b >= 2 [end]|[start] option : \n \t init position == x \n \t execute run \n \t until a != 0 [end]|[start] policy b := \n \t if b : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 0 \n \t execute jump \n \t until position <= y [end]|[start] option : \n \t init position <= 2 \n \t execute find \n \t until a < y [end]|[start] policy b := \n \t if iron : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until inventory == y [end]|[start] option : \n \t init position <= 1 \n \t execute build \n \t until a < 2 [end]|[start] policy b := \n \t if position == x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > x \n \t execute run \n \t until b != 2 [end]|[start] policy a := \n \t if a != x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until position != x [end]|[start] policy b := \n \t if b < y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position > x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a > y \n \t execute use \n \t until position != x [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until a >= 0 [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until a [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until b <= 1 [end]|[start] option : \n \t init b >= 1 \n \t execute use \n \t until inventory >= 2 [end]|[start] policy b := \n \t if a != 1 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 0 \n \t execute use \n \t until inventory < 1 [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until position >= y [end]|[start] policy a := \n \t if iron > 2 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until a == y [end]|[start] policy a := \n \t if a <= 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 2 \n \t execute build \n \t until position != x [end]|[start] option : \n \t init b == 1 \n \t execute run \n \t until a [end]|[start] policy a := \n \t if b != x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b \n \t execute find \n \t until b != 2 [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until a >= 0 [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until b > 1 [end]|[start] policy a := \n \t if iron != y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position \n \t execute build \n \t until a <= 2 [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until x [end]|[start] policy a := \n \t if b <= y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b > y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a > y \n \t execute run \n \t until a >= 0 [end]|[start] policy a := \n \t if a : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < y : \n \t execute use \n [end]|[start] option : \n \t init a != 2 \n \t execute jump \n \t until a < 2 [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position == y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 0 \n \t execute find \n \t until position == 2 [end]|[start] policy b := \n \t if position < y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 2 \n \t execute find \n \t until b == x [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a \n \t execute find \n \t until b >= x [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until b >= y [end]|[start] policy b := \n \t if iron == y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute use \n \t until inventory <= 2 [end]|[start] policy a := \n \t if position == y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until b >= 0 [end]|[start] policy b := \n \t if iron <= y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until a != x [end]|[start] policy b := \n \t if iron != y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a <= y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position != y \n \t execute run \n \t until position >= y [end]|[start] option : \n \t init a > 0 \n \t execute jump \n \t until a != y [end]|[start] policy b := \n \t if iron >= x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position == y \n \t execute build \n \t until b == 0 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b \n \t execute jump \n \t until a > 1 [end]|[start] policy a := \n \t if b == 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until a >= 1 [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until inventory >= x [end]|[start] policy a := \n \t if iron < 0 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until b == y [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until position != 0 [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until inventory >= x [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until a > 2 [end]|[start] policy a := \n \t if position <= y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute build \n \t until b < y [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until inventory < 2 [end]|[start] policy b := \n \t if b : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 1 \n \t execute run \n \t until position != 1 [end]|[start] policy b := \n \t if a > y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until inventory < 1 [end]|[start] option : \n \t init b == x \n \t execute build \n \t until b <= 0 [end]|[start] policy a := \n \t if a < 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 1 \n \t execute run \n \t until b == x [end]|[start] policy a := \n \t if a > 2 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until position != y [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a < x \n \t execute use \n \t until inventory >= 0 [end]|[start] policy a := \n \t if position >= x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= x \n \t execute build \n \t until b != y [end]|[start] option : \n \t init b <= 2 \n \t execute jump \n \t until position <= 2 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < x : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a > x \n \t execute build \n \t until position < 0 [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until b <= 2 [end]|[start] policy a := \n \t if position != 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a > y \n \t execute use \n \t until position == x [end]|[start] policy a := \n \t if b < x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a == y \n \t execute use \n \t until inventory < 2 [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until inventory != 1 [end]|[start] policy b := \n \t if position : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until b <= y [end]|[start] policy a := \n \t if b < x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b > y \n \t execute run \n \t until b <= y [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until a != y [end]|[start] policy a := \n \t if b < 1 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b != y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position > x \n \t execute run \n \t until inventory <= y [end]|[start] policy a := \n \t if iron <= x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until position == 1 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > y \n \t execute jump \n \t until inventory == x [end]|[start] option : \n \t init inventory \n \t execute run \n \t until b != 0 [end]|[start] option : \n \t init inventory < 2 \n \t execute run \n \t until inventory < 0 [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init y \n \t execute use \n \t until b <= 0 [end]|[start] option : \n \t init a == x \n \t execute find \n \t until a > y [end]|[start] option : \n \t init b > 2 \n \t execute build \n \t until position <= 0 [end]|[start] policy b := \n \t if position < x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position != x \n \t execute use \n \t until a > y [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until inventory >= 1 [end]|[start] policy b := \n \t if position != y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until inventory >= y [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until a <= 1 [end]|[start] policy a := \n \t if a == 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position >= x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until b == x [end]|[start] policy b := \n \t if a >= y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until inventory < 1 [end]|[start] policy b := \n \t if position == x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until position == x [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until inventory == x [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until inventory == 0 [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b > x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until b >= 1 [end]|[start] option : \n \t init a >= 1 \n \t execute run \n \t until position != y [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b < y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != y : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 1 \n \t execute find \n \t until b > x [end]|[start] policy a := \n \t if position <= x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until a >= 2 [end]|[start] policy b := \n \t if iron : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until b > y [end]|[start] option : \n \t init a < y \n \t execute use \n \t until b >= 0 [end]|[start] policy b := \n \t if position : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until b >= 1 [end]|[start] policy b := \n \t if a != 2 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute jump \n \t until inventory == 0 [end]|[start] policy b := \n \t if position == y : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 1 \n \t execute use \n \t until a > x [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 0 \n \t execute build \n \t until position > 0 [end]|[start] option : \n \t init position < x \n \t execute run \n \t until inventory <= 2 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 2 \n \t execute build \n \t until b > 2 [end]|[start] option : \n \t init a > 2 \n \t execute jump \n \t until inventory <= y [end]|[start] policy a := \n \t if iron > y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until position != 0 [end]|[start] policy a := \n \t if a >= x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 1 \n \t execute find \n \t until position == x [end]|[start] policy b := \n \t if iron == x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until b < 1 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 0 \n \t execute find \n \t until inventory != 2 [end]|[start] policy a := \n \t if iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a \n \t execute jump \n \t until b >= 0 [end]|[start] policy b := \n \t if a >= 2 : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b == x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b >= x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until b >= 0 [end]|[start] policy b := \n \t if a == 2 : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 2 \n \t execute find \n \t until a >= 1 [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until inventory == 0 [end]|[start] option : \n \t init a < 0 \n \t execute use \n \t until b == x [end]|[start] option : \n \t init a != y \n \t execute use \n \t until position < 0 [end]|[start] option : \n \t init x \n \t execute use \n \t until position > 2 [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until a <= y [end]|[start] option : \n \t init position <= 1 \n \t execute run \n \t until b > 0 [end]|[start] option : \n \t init position > y \n \t execute build \n \t until inventory <= 1 [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until position >= 1 [end]|[start] policy b := \n \t if b == y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until inventory != y [end]|[start] policy a := \n \t if position != x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position > y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 2 \n \t execute jump \n \t until inventory >= 2 [end]|[start] option : \n \t init position < x \n \t execute run \n \t until position != x [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until a > 0 [end]|[start] policy b := \n \t if b >= x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 0 \n \t execute jump \n \t until position == x [end]|[start] policy a := \n \t if iron : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b < y : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until y [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until b != x [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until position == y [end]|[start] policy a := \n \t if position != y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= y \n \t execute run \n \t until inventory != 2 [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until b != 0 [end]|[start] option : \n \t init inventory == y \n \t execute use \n \t until b < 2 [end]|[start] policy b := \n \t if b > y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until a < 2 [end]|[start] option : \n \t init a == y \n \t execute build \n \t until inventory == x [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until a >= y [end]|[start] option : \n \t init inventory > x \n \t execute run \n \t until position > 2 [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until a == 0 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 0 \n \t execute jump \n \t until inventory == 0 [end]|[start] policy a := \n \t if b > y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 2 \n \t execute find \n \t until position > y [end]|[start] policy a := \n \t if a <= x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until y [end]|[start] option : \n \t init a >= y \n \t execute build \n \t until inventory != 0 [end]|[start] option : \n \t init b == 2 \n \t execute build \n \t until position == y [end]|[start] option : \n \t init a > 2 \n \t execute run \n \t until inventory != y [end]|[start] option : \n \t init a == y \n \t execute use \n \t until x [end]|[start] option : \n \t init a > x \n \t execute use \n \t until position != 0 [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until b <= x [end]|[start] option : \n \t init b <= 1 \n \t execute use \n \t until a <= y [end]|[start] policy b := \n \t if position != x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position >= x : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until position > y [end]|[start] policy a := \n \t if a != y : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= y \n \t execute use \n \t until position != 1 [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until b == 1 [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 2 \n \t execute build \n \t until position == 1 [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b > x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > 0 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position > x \n \t execute find \n \t until position != 2 [end]|[start] policy b := \n \t if b > x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= x \n \t execute build \n \t until b == x [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until a < 2 [end]|[start] policy a := \n \t if position < y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 2 \n \t execute run \n \t until inventory <= x [end]|[start] policy a := \n \t if position > x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b <= y : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b > x \n \t execute run \n \t until a != 0 [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until inventory <= 0 [end]|[start] policy b := \n \t if a != 1 : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position != x \n \t execute use \n \t until b >= x [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until position > y [end]|[start] policy b := \n \t if position < x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute find \n [end]|[start] option : \n \t init position > y \n \t execute find \n \t until position == 2 [end]|[start] option : \n \t init a >= 0 \n \t execute build \n \t until b >= y [end]|[start] option : \n \t init position < 2 \n \t execute use \n \t until position <= 1 [end]|[start] policy b := \n \t if a <= 0 : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until a >= x [end]|[start] option : \n \t init b != 2 \n \t execute find \n \t until a != 2 [end]|[start] option : \n \t init a \n \t execute run \n \t until position > 1 [end]|[start] policy a := \n \t if iron < 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until a == y [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until a == 0 [end]|[start] policy a := \n \t if iron < 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 2 \n \t execute find \n \t until inventory > 2 [end]|[start] option : \n \t init inventory < x \n \t execute use \n \t until a == 0 [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron > y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position > x \n \t execute jump \n \t until position > y [end]|[start] policy a := \n \t if position == 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a < y \n \t execute use \n \t until b != y [end]|[start] policy a := \n \t if b >= 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position \n \t execute use \n \t until a > 1 [end]|[start] policy b := \n \t if b > y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until inventory <= y [end]|[start] option : \n \t init b \n \t execute find \n \t until a [end]|[start] option : \n \t init inventory >= 1 \n \t execute use \n \t until inventory >= 1 [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until inventory != 0 [end]|[start] policy b := \n \t if a != x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init x \n \t execute use \n \t until inventory > 0 [end]|[start] policy a := \n \t if a >= 1 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until inventory > 2 [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until inventory != 1 [end]|[start] policy b := \n \t if a <= y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until position < y [end]|[start] option : \n \t init inventory < 1 \n \t execute find \n \t until position == 2 [end]|[start] option : \n \t init a != x \n \t execute find \n \t until inventory < y [end]|[start] policy a := \n \t if a >= 1 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 2 \n \t execute use \n \t until a > x [end]|[start] policy a := \n \t if a < 2 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 1 \n \t execute find \n \t until position == 0 [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until x [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until inventory != 0 [end]|[start] option : \n \t init position > x \n \t execute find \n \t until inventory >= 0 [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until position != y [end]|[start] policy b := \n \t if b < x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a \n \t execute find \n \t until inventory >= 0 [end]|[start] policy a := \n \t if a >= y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 2 \n \t execute use \n \t until b != x [end]|[start] policy a := \n \t if b == 2 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until b >= 1 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until inventory > x [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= x \n \t execute jump \n \t until b < y [end]|[start] policy a := \n \t if b >= 2 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 1 \n \t execute find \n \t until a == y [end]|[start] option : \n \t init a <= 1 \n \t execute run \n \t until position == 0 [end]|[start] option : \n \t init b != 2 \n \t execute jump \n \t until b <= 1 [end]|[start] policy b := \n \t if iron : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == y \n \t execute find \n \t until inventory >= x [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= 0 \n \t execute build \n \t until b >= 2 [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until b != x [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until b [end]|[start] option : \n \t init a > x \n \t execute run \n \t until a >= 0 [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until position > 1 [end]|[start] option : \n \t init a != 0 \n \t execute build \n \t until inventory == 2 [end]|[start] option : \n \t init b < 0 \n \t execute jump \n \t until b >= x [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b == 2 : \n \t execute use \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position != x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until b != y [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until inventory == 2 [end]|[start] policy a := \n \t if position < 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until position > y [end]|[start] policy a := \n \t if position > 2 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until position < 2 [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until b != 0 [end]|[start] policy b := \n \t if position : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != x \n \t execute build \n \t until b >= x [end]|[start] policy a := \n \t if position == x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until inventory == 2 [end]|[start] option : \n \t init position == 0 \n \t execute find \n \t until position != 1 [end]|[start] option : \n \t init inventory > x \n \t execute run \n \t until position == 1 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until b > 1 [end]|[start] policy a := \n \t if iron != x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b != x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until inventory > 0 [end]|[start] policy b := \n \t if position <= x : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until inventory < x [end]|[start] option : \n \t init position >= y \n \t execute jump \n \t until position == y [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron < x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until b != 0 [end]|[start] policy b := \n \t if b > x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 1 \n \t execute use \n \t until inventory != 0 [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until b >= x [end]|[start] policy b := \n \t if iron <= y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == y \n \t execute find \n \t until position > 2 [end]|[start] policy b := \n \t if a < 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until position < x [end]|[start] policy b := \n \t if iron == y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a <= x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= x \n \t execute find \n \t until position >= x [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a != y \n \t execute use \n \t until inventory != 0 [end]|[start] policy a := \n \t if a <= 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= x \n \t execute use \n \t until b > 2 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b == y \n \t execute use \n \t until position <= x [end]|[start] policy a := \n \t if a != 2 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until a < 2 [end]|[start] policy a := \n \t if position >= x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until position >= 1 [end]|[start] policy b := \n \t if iron < x : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 2 \n \t execute run \n \t until inventory >= 2 [end]|[start] option : \n \t init position < y \n \t execute find \n \t until inventory >= 0 [end]|[start] option : \n \t init inventory < 0 \n \t execute use \n \t until inventory <= 2 [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 2 \n \t execute find \n \t until position >= y [end]|[start] option : \n \t init b > y \n \t execute use \n \t until position < 0 [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until b <= 0 [end]|[start] option : \n \t init b <= x \n \t execute run \n \t until a > y [end]|[start] policy a := \n \t if iron : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 0 \n \t execute build \n \t until position >= 1 [end]|[start] option : \n \t init a > 2 \n \t execute run \n \t until position < 0 [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a > x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until b >= y [end]|[start] policy a := \n \t if position != 1 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 0 \n \t execute find \n \t until b < y [end]|[start] policy a := \n \t if a >= 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute use \n \t until b == 2 [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 2 \n \t execute jump \n \t until b != 0 [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until b != x [end]|[start] option : \n \t init b < 0 \n \t execute jump \n \t until a <= y [end]|[start] option : \n \t init b == 0 \n \t execute use \n \t until a < x [end]|[start] option : \n \t init b < 2 \n \t execute build \n \t until inventory != 1 [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until position <= 2 [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > y \n \t execute find \n \t until inventory != 1 [end]|[start] policy a := \n \t if position == 0 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position \n \t execute use \n \t until inventory > 2 [end]|[start] option : \n \t init b < y \n \t execute run \n \t until inventory != 2 [end]|[start] policy b := \n \t if position == y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until inventory > 2 [end]|[start] option : \n \t init inventory >= 2 \n \t execute build \n \t until a > 0 [end]|[start] policy b := \n \t if position >= y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 0 \n \t execute build \n \t until b >= 2 [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until a [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until a > 2 [end]|[start] policy a := \n \t if b >= x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 2 \n \t execute use \n \t until b == 0 [end]|[start] option : \n \t init inventory < y \n \t execute run \n \t until position > 0 [end]|[start] policy a := \n \t if position != x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 0 \n \t execute jump \n \t until a <= y [end]|[start] option : \n \t init y \n \t execute find \n \t until b <= 2 [end]|[start] option : \n \t init inventory != x \n \t execute run \n \t until position != x [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 2 \n \t execute find \n \t until inventory < 1 [end]|[start] option : \n \t init inventory <= 1 \n \t execute run \n \t until b > 1 [end]|[start] policy b := \n \t if a > y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until inventory >= x [end]|[start] policy b := \n \t if a == 2 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position \n \t execute build \n \t until inventory < x [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until a <= 1 [end]|[start] policy b := \n \t if b != x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a > y \n \t execute build \n \t until a >= y [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until position < 1 [end]|[start] policy b := \n \t if b < y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until b <= 2 [end]|[start] policy b := \n \t if a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 0 \n \t execute run \n \t until inventory >= 2 [end]|[start] policy b := \n \t if a <= 2 : \n \t execute jump \n [end]|[start] policy b := \n \t if a >= x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a < x \n \t execute jump \n \t until inventory < x [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until a < 1 [end]|[start] option : \n \t init position == y \n \t execute jump \n \t until a > 0 [end]|[start] policy a := \n \t if b < 0 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 1 \n \t execute jump \n \t until inventory < 2 [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until b >= x [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until position > 2 [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until inventory <= 1 [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until b == y [end]|[start] policy a := \n \t if a <= 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= y \n \t execute use \n \t until position != 0 [end]|[start] policy b := \n \t if iron < y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > x \n \t execute use \n \t until inventory > y [end]|[start] policy a := \n \t if position == 2 : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 2 \n \t execute build \n \t until a > 1 [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until position >= x [end]|[start] option : \n \t init position != 1 \n \t execute jump \n \t until a < 1 [end]|[start] policy b := \n \t if position <= 0 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute build \n \t until b >= x [end]|[start] policy a := \n \t if b <= 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 0 \n \t execute find \n \t until inventory <= 1 [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until a >= 0 [end]|[start] policy a := \n \t if b != 2 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute use \n \t until inventory >= 2 [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron != x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until a > y [end]|[start] policy a := \n \t if a == 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 2 \n \t execute run \n \t until inventory == x [end]|[start] policy a := \n \t if position == x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b > 1 : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > y \n \t execute find \n \t until a <= x [end]|[start] policy b := \n \t if position >= 1 : \n \t execute run \n [end]|[start] option : \n \t init inventory >= x \n \t execute use \n \t until position <= x [end]|[start] option : \n \t init inventory == 0 \n \t execute find \n \t until inventory != 1 [end]|[start] option : \n \t init position == 0 \n \t execute find \n \t until a >= 0 [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 2 \n \t execute build \n \t until b >= y [end]|[start] policy b := \n \t if position != x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a > x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 1 \n \t execute run \n \t until position < x [end]|[start] policy b := \n \t if b < x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until b == x [end]|[start] policy a := \n \t if a < y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until position <= 1 [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until inventory <= y [end]|[start] option : \n \t init a == y \n \t execute use \n \t until b > 1 [end]|[start] option : \n \t init position == 1 \n \t execute build \n \t until a <= 2 [end]|[start] policy a := \n \t if b < y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until position <= 0 [end]|[start] policy b := \n \t if iron != y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a != y \n \t execute run \n \t until position <= x [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b < x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 2 \n \t execute build \n \t until a == 1 [end]|[start] option : \n \t init position != y \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init a == x \n \t execute run \n \t until b >= 0 [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until a != 0 [end]|[start] option : \n \t init b != y \n \t execute build \n \t until position <= 0 [end]|[start] policy a := \n \t if a >= x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until position <= 2 [end]|[start] policy b := \n \t if iron != x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 2 \n \t execute build \n \t until inventory > 1 [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 0 \n \t execute build \n \t until inventory > x [end]|[start] policy a := \n \t if b > 2 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position != y \n \t execute build \n \t until position > 0 [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until inventory > 0 [end]|[start] policy a := \n \t if b == x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position >= x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > x \n \t execute run \n \t until a > 0 [end]|[start] option : \n \t init position >= 1 \n \t execute find \n \t until position == x [end]|[start] policy a := \n \t if b == 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position > x \n \t execute jump \n \t until b != x [end]|[start] policy a := \n \t if iron > y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until a <= x [end]|[start] policy a := \n \t if b < 0 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 2 \n \t execute build \n \t until inventory <= 1 [end]|[start] option : \n \t init b != 2 \n \t execute find \n \t until position > x [end]|[start] option : \n \t init position < y \n \t execute use \n \t until b == 0 [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until a != 0 [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron < 2 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute jump \n \t until a >= 2 [end]|[start] policy a := \n \t if b == 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position == x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 2 \n \t execute build \n \t until b < 2 [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until inventory <= 1 [end]|[start] policy b := \n \t if b < 0 : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != x : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > x \n \t execute build \n \t until a != y [end]|[start] option : \n \t init a >= 1 \n \t execute use \n \t until inventory < 2 [end]|[start] policy a := \n \t if position > 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b <= x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until b [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until position <= y [end]|[start] option : \n \t init b > y \n \t execute find \n \t until inventory == 2 [end]|[start] policy b := \n \t if position <= x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 2 \n \t execute run \n \t until a <= 0 [end]|[start] policy a := \n \t if b >= y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 1 \n \t execute use \n \t until inventory != x [end]|[start] option : \n \t init position != 0 \n \t execute jump \n \t until b < x [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until position == y [end]|[start] option : \n \t init a <= 2 \n \t execute use \n \t until b == y [end]|[start] policy a := \n \t if iron : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < y \n \t execute run \n \t until b == 2 [end]|[start] policy b := \n \t if position != y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position \n \t execute use \n \t until position != 1 [end]|[start] option : \n \t init a < 2 \n \t execute find \n \t until inventory > x [end]|[start] policy b := \n \t if position == y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until a != x [end]|[start] policy b := \n \t if a == 2 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 1 \n \t execute use \n \t until inventory < y [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until b != 1 [end]|[start] option : \n \t init position <= 1 \n \t execute jump \n \t until b >= x [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a \n \t execute find \n \t until position != 0 [end]|[start] policy b := \n \t if iron <= y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b < y \n \t execute use \n \t until b <= 2 [end]|[start] policy a := \n \t if position < y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= y \n \t execute find \n \t until b <= x [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until inventory != 1 [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init position > y \n \t execute find \n \t until x [end]|[start] policy a := \n \t if iron == x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < x \n \t execute build \n \t until a <= y [end]|[start] policy a := \n \t if a >= 2 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == y \n \t execute use \n \t until position < y [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until inventory > 0 [end]|[start] policy a := \n \t if b != y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until a > 1 [end]|[start] option : \n \t init a <= 0 \n \t execute find \n \t until position == 0 [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until position != 2 [end]|[start] option : \n \t init a != 1 \n \t execute use \n \t until a < 2 [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until position != 0 [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until inventory >= 1 [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until position < 0 [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until position > 0 [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until position != x [end]|[start] option : \n \t init inventory <= 1 \n \t execute jump \n \t until position != y [end]|[start] option : \n \t init position != y \n \t execute build \n \t until position != 0 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until b != 2 [end]|[start] option : \n \t init b > 0 \n \t execute run \n \t until inventory > y [end]|[start] option : \n \t init position \n \t execute jump \n \t until position <= 2 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position != x \n \t execute use \n \t until inventory == x [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 1 \n \t execute jump \n \t until b != 1 [end]|[start] policy a := \n \t if a <= y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until a <= x [end]|[start] policy b := \n \t if position >= x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until a > 2 [end]|[start] policy a := \n \t if a > x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 1 \n \t execute jump \n \t until inventory != x [end]|[start] policy a := \n \t if position != x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until inventory > 1 [end]|[start] policy b := \n \t if position < y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 2 \n \t execute find \n \t until position > 0 [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until inventory < 2 [end]|[start] policy a := \n \t if position < x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position != y \n \t execute build \n \t until a < y [end]|[start] option : \n \t init position >= y \n \t execute use \n \t until b > 2 [end]|[start] policy a := \n \t if b : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until position > 1 [end]|[start] policy b := \n \t if iron <= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until a < 1 [end]|[start] policy b := \n \t if a > x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b > y \n \t execute use \n \t until inventory >= 1 [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until a >= 1 [end]|[start] policy a := \n \t if a == 2 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 0 \n \t execute jump \n \t until inventory <= x [end]|[start] policy b := \n \t if position >= 1 : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b \n \t execute build \n \t until position <= 1 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init x \n \t execute use \n \t until inventory >= x [end]|[start] policy a := \n \t if a == 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until position > 2 [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until inventory != y [end]|[start] option : \n \t init position >= 0 \n \t execute use \n \t until a == 2 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute use \n \t until a != 2 [end]|[start] option : \n \t init a < 2 \n \t execute find \n \t until a > 2 [end]|[start] policy b := \n \t if position < x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron == y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 2 \n \t execute use \n \t until a <= y [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position < y \n \t execute run \n \t until a != x [end]|[start] policy b := \n \t if b > x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a == x \n \t execute build \n \t until a != 2 [end]|[start] policy a := \n \t if a > x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 2 \n \t execute build \n \t until inventory == 1 [end]|[start] policy a := \n \t if position != 1 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until inventory >= y [end]|[start] option : \n \t init b > 2 \n \t execute run \n \t until a [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until b < x [end]|[start] policy a := \n \t if position != y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position <= x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until b <= 0 [end]|[start] policy b := \n \t if iron > y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == y \n \t execute find \n \t until b < 1 [end]|[start] policy a := \n \t if b != y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until position [end]|[start] policy b := \n \t if position <= x : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position == y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until a >= y [end]|[start] policy a := \n \t if iron == 2 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until inventory < 2 [end]|[start] policy b := \n \t if iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until b < 1 [end]|[start] policy a := \n \t if a < 2 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until inventory >= 0 [end]|[start] option : \n \t init y \n \t execute run \n \t until inventory > x [end]|[start] policy a := \n \t if b < y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until b > 1 [end]|[start] policy a := \n \t if b > 2 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b > y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a <= y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until x [end]|[start] option : \n \t init inventory < 1 \n \t execute find \n \t until position > 1 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until a == x [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until position != y [end]|[start] policy a := \n \t if b != x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= x \n \t execute run \n \t until position > 2 [end]|[start] option : \n \t init position == y \n \t execute use \n \t until inventory != 1 [end]|[start] option : \n \t init a != 1 \n \t execute run \n \t until b < 2 [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until inventory == 0 [end]|[start] policy a := \n \t if iron < 0 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until inventory != 2 [end]|[start] policy a := \n \t if position < 2 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until b != 2 [end]|[start] option : \n \t init b != x \n \t execute use \n \t until position >= 1 [end]|[start] policy a := \n \t if position != 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position == y \n \t execute build \n \t until position < y [end]|[start] policy b := \n \t if position == x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a > y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a == y \n \t execute run \n \t until inventory >= 1 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > x \n \t execute use \n \t until a >= 0 [end]|[start] option : \n \t init position <= 0 \n \t execute find \n \t until position >= y [end]|[start] policy a := \n \t if b > x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until position >= 2 [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until b < y [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until position <= x [end]|[start] option : \n \t init position != y \n \t execute use \n \t until b < x [end]|[start] policy a := \n \t if iron < 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until a <= 1 [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until x [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until inventory <= 1 [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute find \n \t until a [end]|[start] option : \n \t init a != 1 \n \t execute jump \n \t until a < 0 [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position < x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 0 \n \t execute use \n \t until inventory > 2 [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until b == 0 [end]|[start] option : \n \t init b == y \n \t execute find \n \t until a != x [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until inventory <= 0 [end]|[start] policy b := \n \t if a < 2 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron > 0 : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position > x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < x \n \t execute use \n \t until a > 0 [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until a < 1 [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == x \n \t execute run \n \t until position > 1 [end]|[start] option : \n \t init a <= 1 \n \t execute jump \n \t until position == y [end]|[start] option : \n \t init b == 2 \n \t execute jump \n \t until b != x [end]|[start] policy a := \n \t if a >= x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a \n \t execute use \n \t until b < 0 [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until a < y [end]|[start] option : \n \t init a == y \n \t execute use \n \t until position > 1 [end]|[start] option : \n \t init b > 0 \n \t execute build \n \t until b != x [end]|[start] option : \n \t init a \n \t execute find \n \t until a >= 1 [end]|[start] policy b := \n \t if iron < y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute build \n [end]|[start] policy a := \n \t if a < y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != 2 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a \n \t execute use \n \t until inventory >= 0 [end]|[start] policy b := \n \t if a != 0 : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 2 \n \t execute jump \n \t until y [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until inventory > x [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= x \n \t execute jump \n \t until a <= x [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b == y \n \t execute run \n \t until b != 2 [end]|[start] policy a := \n \t if a < x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position > y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b != x \n \t execute use \n \t until position <= 2 [end]|[start] policy a := \n \t if iron > 0 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b \n \t execute use \n \t until a <= 0 [end]|[start] option : \n \t init b < 2 \n \t execute build \n \t until b != 0 [end]|[start] option : \n \t init position < 2 \n \t execute find \n \t until a >= y [end]|[start] option : \n \t init a < x \n \t execute find \n \t until a >= x [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until position != 1 [end]|[start] policy b := \n \t if iron > x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= 0 : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position == y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a < y \n \t execute find \n \t until b <= 1 [end]|[start] option : \n \t init position == y \n \t execute jump \n \t until b != 0 [end]|[start] policy b := \n \t if b > x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute run \n \t until a == 1 [end]|[start] option : \n \t init a != y \n \t execute find \n \t until a != 0 [end]|[start] policy b := \n \t if iron < y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until a == 1 [end]|[start] option : \n \t init b != x \n \t execute build \n \t until position != x [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until a [end]|[start] policy a := \n \t if iron < 1 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= y \n \t execute find \n \t until inventory >= 1 [end]|[start] policy b := \n \t if a != 1 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until b < 1 [end]|[start] policy b := \n \t if position != y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a != x \n \t execute find \n \t until position < 0 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 0 \n \t execute build \n \t until a == 0 [end]|[start] policy a := \n \t if a < y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until inventory < x [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until b <= x [end]|[start] policy b := \n \t if a <= x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == x \n \t execute build \n \t until a < y [end]|[start] option : \n \t init a <= x \n \t execute find \n \t until b <= 0 [end]|[start] policy b := \n \t if a <= y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until b < y [end]|[start] policy a := \n \t if position == y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= y \n \t execute find \n \t until a <= x [end]|[start] policy a := \n \t if position != 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position == y \n \t execute build \n \t until b [end]|[start] policy a := \n \t if position != y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 2 \n \t execute run \n \t until a < 1 [end]|[start] option : \n \t init position > 2 \n \t execute use \n \t until position < x [end]|[start] policy b := \n \t if position == x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 2 \n \t execute jump \n \t until inventory == 2 [end]|[start] policy b := \n \t if a != 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron > y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 0 \n \t execute build \n \t until position > 1 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == y \n \t execute build \n \t until inventory < 1 [end]|[start] policy a := \n \t if iron > 1 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 2 \n \t execute run \n \t until a == 0 [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until a [end]|[start] option : \n \t init b <= 2 \n \t execute build \n \t until position <= 2 [end]|[start] policy a := \n \t if b <= x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b != y \n \t execute use \n \t until a <= y [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until a > x [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 0 \n \t execute build \n \t until b != x [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until a == 0 [end]|[start] policy a := \n \t if position < y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b > y \n \t execute build \n \t until b <= x [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until b <= y [end]|[start] policy b := \n \t if a < x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b <= x : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a <= 0 : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position == y \n \t execute run \n \t until inventory < y [end]|[start] policy a := \n \t if b != y : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until b == 0 [end]|[start] policy a := \n \t if position != 0 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 0 \n \t execute use \n \t until x [end]|[start] policy a := \n \t if position < 0 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until position <= y [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until a != 0 [end]|[start] policy b := \n \t if iron >= x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until b > 0 [end]|[start] option : \n \t init b <= 2 \n \t execute build \n \t until b != x [end]|[start] policy b := \n \t if a != 2 : \n \t execute run \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron == x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 2 \n \t execute find \n \t until position > 1 [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until inventory != x [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until b > y [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until inventory >= y [end]|[start] policy b := \n \t if position : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b != y \n \t execute find \n \t until inventory >= 1 [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until position == x [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until b <= 0 [end]|[start] policy b := \n \t if iron >= y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until position > y [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute run \n \t until inventory == 0 [end]|[start] policy a := \n \t if iron <= y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= y \n \t execute jump \n \t until inventory == x [end]|[start] policy a := \n \t if position >= y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until b > y [end]|[start] option : \n \t init position >= 2 \n \t execute find \n \t until a >= 0 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until b > 1 [end]|[start] policy b := \n \t if a <= x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron > 0 : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= y \n \t execute find \n \t until b == 0 [end]|[start] policy a := \n \t if b <= x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until a != 2 [end]|[start] policy b := \n \t if a < x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 1 \n \t execute run \n \t until b != 2 [end]|[start] policy a := \n \t if b == 0 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until position != y [end]|[start] option : \n \t init b == 0 \n \t execute use \n \t until position <= x [end]|[start] option : \n \t init position != y \n \t execute find \n \t until position >= 0 [end]|[start] option : \n \t init a < 0 \n \t execute find \n \t until a < 1 [end]|[start] policy a := \n \t if b > 1 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 0 \n \t execute run \n \t until b == 2 [end]|[start] option : \n \t init inventory <= 2 \n \t execute jump \n \t until inventory > y [end]|[start] policy b := \n \t if a == 0 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 1 \n \t execute run \n \t until inventory != x [end]|[start] policy b := \n \t if iron <= y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n [end]|[start] option : \n \t init a \n \t execute run \n \t until b < 2 [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= x \n \t execute find \n \t until position <= 0 [end]|[start] option : \n \t init position <= 1 \n \t execute find \n \t until position >= y [end]|[start] option : \n \t init position >= 0 \n \t execute use \n \t until b >= 2 [end]|[start] policy a := \n \t if iron < 2 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until position != 1 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= y : \n \t execute run \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until a == 2 [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until position <= y [end]|[start] policy b := \n \t if a : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until position >= 1 [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until b <= 0 [end]|[start] option : \n \t init inventory < x \n \t execute build \n \t until a == y [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until a != x [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until position >= x [end]|[start] policy a := \n \t if b >= 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b == y \n \t execute use \n \t until a <= 0 [end]|[start] policy a := \n \t if b < y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until inventory == 0 [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= x \n \t execute jump \n \t until a != 1 [end]|[start] option : \n \t init a < y \n \t execute jump \n \t until inventory <= x [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a < y \n \t execute use \n \t until position != 2 [end]|[start] option : \n \t init b >= y \n \t execute run \n \t until position > 1 [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until position <= 0 [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until inventory == 1 [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until a <= 0 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until inventory == 0 [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until a != 2 [end]|[start] policy b := \n \t if a : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a == x \n \t execute build \n \t until position <= 1 [end]|[start] option : \n \t init inventory > x \n \t execute use \n \t until a <= x [end]|[start] option : \n \t init b < 1 \n \t execute run \n \t until position <= 0 [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until inventory >= 2 [end]|[start] option : \n \t init b != y \n \t execute run \n \t until b != 1 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= x \n \t execute build \n \t until inventory <= y [end]|[start] policy b := \n \t if iron >= y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute find \n \t until a > 1 [end]|[start] policy a := \n \t if b > 1 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= y \n \t execute use \n \t until inventory != y [end]|[start] policy a := \n \t if position : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until a <= 2 [end]|[start] policy a := \n \t if iron <= x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until position > x [end]|[start] policy a := \n \t if a <= x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > x \n \t execute build \n \t until position == 2 [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until position != x [end]|[start] policy a := \n \t if iron == x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until position > y [end]|[start] policy a := \n \t if b == x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until position >= x [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until b >= 2 [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position > y \n \t execute build \n \t until b > x [end]|[start] policy a := \n \t if b > 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron != 2 : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until a == y [end]|[start] policy a := \n \t if position <= 2 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 0 \n \t execute build \n \t until y [end]|[start] policy a := \n \t if iron > x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until b [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until position >= 0 [end]|[start] option : \n \t init a >= 2 \n \t execute build \n \t until b > 0 [end]|[start] policy b := \n \t if a > y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < y \n \t execute use \n \t until b >= y [end]|[start] option : \n \t init inventory > y \n \t execute run \n \t until position >= y [end]|[start] policy b := \n \t if iron : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until inventory <= y [end]|[start] policy a := \n \t if position > 2 : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a != y \n \t execute run \n \t until a < 1 [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until position <= 0 [end]|[start] policy b := \n \t if position >= y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b > x \n \t execute find \n \t until b == 0 [end]|[start] option : \n \t init position != 1 \n \t execute run \n \t until a != y [end]|[start] policy b := \n \t if a < y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until inventory != 0 [end]|[start] policy a := \n \t if position == 1 : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b == y \n \t execute find \n \t until a < y [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until b == 0 [end]|[start] policy b := \n \t if a < 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until inventory == 0 [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b != y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 1 \n \t execute use \n \t until inventory == 0 [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until a > 1 [end]|[start] option : \n \t init a < y \n \t execute find \n \t until position <= x [end]|[start] policy a := \n \t if b < y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= y \n \t execute use \n \t until b >= y [end]|[start] policy a := \n \t if a >= 1 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init y \n \t execute use \n \t until a > x [end]|[start] policy a := \n \t if a < 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until b <= y [end]|[start] policy a := \n \t if a >= 1 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute run \n \t until a != x [end]|[start] option : \n \t init inventory >= 0 \n \t execute build \n \t until a >= 0 [end]|[start] option : \n \t init b \n \t execute find \n \t until position != 0 [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until a <= 0 [end]|[start] policy b := \n \t if a < x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 2 \n \t execute run \n \t until inventory == y [end]|[start] policy a := \n \t if b < 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 1 \n \t execute use \n \t until a != y [end]|[start] policy a := \n \t if position != 1 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until b >= x [end]|[start] option : \n \t init a < 1 \n \t execute use \n \t until a [end]|[start] option : \n \t init a < x \n \t execute build \n \t until position > 2 [end]|[start] option : \n \t init position >= 0 \n \t execute build \n \t until b > 0 [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until inventory [end]|[start] option : \n \t init a < 2 \n \t execute find \n \t until a >= x [end]|[start] option : \n \t init position > x \n \t execute jump \n \t until position != x [end]|[start] policy b := \n \t if position >= y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until position < x [end]|[start] option : \n \t init position >= 2 \n \t execute run \n \t until b >= 1 [end]|[start] policy a := \n \t if b == 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a < x \n \t execute build \n \t until position > x [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until b >= 1 [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until position < y [end]|[start] policy a := \n \t if a < 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != x \n \t execute run \n \t until b != 0 [end]|[start] option : \n \t init b == 1 \n \t execute jump \n \t until a <= 0 [end]|[start] option : \n \t init position != 1 \n \t execute use \n \t until b >= 2 [end]|[start] policy a := \n \t if position >= y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute find \n \t until position < 2 [end]|[start] policy a := \n \t if position != y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until inventory < y [end]|[start] option : \n \t init a < x \n \t execute run \n \t until inventory < y [end]|[start] policy a := \n \t if iron != x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until a < y [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b == x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != x \n \t execute use \n \t until a [end]|[start] policy a := \n \t if b < y : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a == y \n \t execute build \n \t until a <= 2 [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until a < 0 [end]|[start] policy b := \n \t if b == x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until b > 1 [end]|[start] option : \n \t init a == y \n \t execute build \n \t until b < y [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until inventory > 1 [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until inventory < 2 [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until b == 0 [end]|[start] policy a := \n \t if iron < x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until b >= x [end]|[start] option : \n \t init inventory > 2 \n \t execute jump \n \t until inventory == 1 [end]|[start] option : \n \t init x \n \t execute jump \n \t until inventory > 0 [end]|[start] policy a := \n \t if a < 1 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until b > 2 [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position == x \n \t execute find \n \t until a == 0 [end]|[start] policy a := \n \t if iron > x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 2 \n \t execute build \n \t until inventory < 0 [end]|[start] policy a := \n \t if b != 2 : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b < x \n \t execute build \n \t until b >= x [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == y \n \t execute use \n \t until position > 2 [end]|[start] policy a := \n \t if position <= x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until position == 1 [end]|[start] option : \n \t init inventory < 0 \n \t execute use \n \t until a == 2 [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until b > x [end]|[start] option : \n \t init position == 2 \n \t execute build \n \t until a > 0 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until a <= x [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until position < 2 [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b < x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position == y \n \t execute run \n \t until a == y [end]|[start] option : \n \t init inventory < x \n \t execute find \n \t until inventory == 1 [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until a > 1 [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until b == 1 [end]|[start] option : \n \t init a > 2 \n \t execute build \n \t until position == 1 [end]|[start] option : \n \t init b != 0 \n \t execute find \n \t until position <= 2 [end]|[start] policy b := \n \t if iron > x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b == x \n \t execute build \n \t until position != x [end]|[start] policy a := \n \t if b < 1 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until inventory >= x [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= y : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position > x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position < x \n \t execute jump \n \t until inventory < x [end]|[start] policy b := \n \t if iron > x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init x \n \t execute run \n \t until position > x [end]|[start] option : \n \t init a != y \n \t execute run \n \t until inventory > 0 [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until position != 2 [end]|[start] policy a := \n \t if b < 2 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until position <= y [end]|[start] policy a := \n \t if iron != x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until b <= 2 [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until a != x [end]|[start] policy a := \n \t if b <= 2 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position < x \n \t execute run \n \t until a < 2 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until a > x [end]|[start] policy a := \n \t if iron == y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position == x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position != y \n \t execute run \n \t until b < y [end]|[start] policy b := \n \t if b <= y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position \n \t execute build \n \t until b < 1 [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= 2 : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position == y \n \t execute run \n \t until b < 2 [end]|[start] policy a := \n \t if position == 0 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 1 \n \t execute jump \n \t until b > y [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 0 \n \t execute use \n \t until position == 1 [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until b < x [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position < x \n \t execute use \n \t until inventory >= y [end]|[start] option : \n \t init position >= x \n \t execute use \n \t until b == 0 [end]|[start] option : \n \t init position <= 2 \n \t execute run \n \t until position != 0 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 2 \n \t execute jump \n \t until b <= 0 [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until a <= y [end]|[start] policy a := \n \t if iron < 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == x : \n \t execute find \n [end]|[start] option : \n \t init b >= y \n \t execute find \n \t until b > x [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until position > 0 [end]|[start] policy b := \n \t if position >= y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= x \n \t execute run \n \t until inventory <= 0 [end]|[start] option : \n \t init a >= 0 \n \t execute find \n \t until a == 2 [end]|[start] option : \n \t init inventory < 2 \n \t execute jump \n \t until position != 0 [end]|[start] option : \n \t init b \n \t execute find \n \t until position == 1 [end]|[start] policy b := \n \t if a > y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 0 \n \t execute find \n \t until inventory [end]|[start] option : \n \t init b <= 2 \n \t execute build \n \t until a == 1 [end]|[start] policy a := \n \t if a > y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position > y \n \t execute jump \n \t until a < 2 [end]|[start] policy a := \n \t if position < 2 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until inventory >= y [end]|[start] policy a := \n \t if iron < 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until position < y [end]|[start] policy b := \n \t if a <= x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= x \n \t execute jump \n \t until a != x [end]|[start] option : \n \t init inventory > y \n \t execute jump \n \t until a == 1 [end]|[start] option : \n \t init b != 0 \n \t execute jump \n \t until b < y [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until a != x [end]|[start] option : \n \t init position == 2 \n \t execute use \n \t until inventory != 1 [end]|[start] policy a := \n \t if iron < 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position < x \n \t execute use \n \t until b == 2 [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until b >= 0 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until b >= 0 [end]|[start] policy b := \n \t if position >= y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until position >= 2 [end]|[start] policy b := \n \t if b < y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 2 \n \t execute run \n \t until inventory >= 1 [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until inventory == y [end]|[start] policy a := \n \t if b != 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b <= y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 1 \n \t execute use \n \t until inventory <= 0 [end]|[start] policy b := \n \t if iron >= y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 2 \n \t execute jump \n \t until b <= x [end]|[start] option : \n \t init position >= 0 \n \t execute build \n \t until b < y [end]|[start] option : \n \t init a >= y \n \t execute jump \n \t until position <= 1 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b <= y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= 1 : \n \t execute run \n [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until a < x [end]|[start] option : \n \t init inventory >= 1 \n \t execute build \n \t until b == 0 [end]|[start] option : \n \t init position < y \n \t execute build \n \t until a <= x [end]|[start] option : \n \t init inventory > 1 \n \t execute run \n \t until inventory > 1 [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > x \n \t execute run \n \t until inventory >= y [end]|[start] policy b := \n \t if a <= y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= x \n \t execute find \n \t until a >= x [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until a > 2 [end]|[start] policy a := \n \t if a > y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until b > x [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until b <= 0 [end]|[start] policy a := \n \t if position >= y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute find \n \t until b != 2 [end]|[start] option : \n \t init b < y \n \t execute find \n \t until inventory <= y [end]|[start] policy a := \n \t if a >= 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until position < x [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until position > 2 [end]|[start] option : \n \t init b != y \n \t execute find \n \t until position <= 2 [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until a < x [end]|[start] option : \n \t init position != x \n \t execute build \n \t until a <= 1 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until b < y [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until b > x [end]|[start] policy a := \n \t if iron > 2 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 2 \n \t execute run \n \t until inventory >= x [end]|[start] policy a := \n \t if b == y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == x \n \t execute find \n \t until a <= x [end]|[start] policy a := \n \t if a : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < y \n \t execute run \n \t until position > 1 [end]|[start] policy a := \n \t if b <= y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= x \n \t execute run \n \t until a == 0 [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= y \n \t execute jump \n \t until position > x [end]|[start] option : \n \t init a < y \n \t execute build \n \t until inventory >= 1 [end]|[start] policy a := \n \t if b < x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute jump \n \t until position != y [end]|[start] policy a := \n \t if a == x : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= y \n \t execute find \n \t until position < 1 [end]|[start] option : \n \t init a <= 0 \n \t execute find \n \t until position < 1 [end]|[start] policy a := \n \t if iron <= x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != y : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until a <= 1 [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until b == 0 [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until b <= x [end]|[start] option : \n \t init inventory == y \n \t execute run \n \t until inventory != 1 [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position <= x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position < x \n \t execute use \n \t until a >= y [end]|[start] option : \n \t init inventory < 0 \n \t execute use \n \t until position != y [end]|[start] policy a := \n \t if iron == 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a != y \n \t execute build \n \t until a >= y [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until inventory == y [end]|[start] policy a := \n \t if iron <= y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 0 \n \t execute jump \n \t until a < 2 [end]|[start] policy b := \n \t if b != y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until inventory != 2 [end]|[start] option : \n \t init position \n \t execute run \n \t until inventory == 2 [end]|[start] policy b := \n \t if b <= 2 : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until inventory >= y [end]|[start] policy a := \n \t if b != x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b < y \n \t execute find \n \t until a >= 2 [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position == y \n \t execute jump \n \t until inventory > 2 [end]|[start] policy b := \n \t if a == 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b < y \n \t execute build \n \t until inventory <= 2 [end]|[start] option : \n \t init inventory != 2 \n \t execute build \n \t until b >= 0 [end]|[start] policy a := \n \t if position < y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b == y \n \t execute build \n \t until a >= 0 [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 0 \n \t execute jump \n \t until b >= 1 [end]|[start] policy a := \n \t if iron < 0 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= y \n \t execute use \n \t until a < 1 [end]|[start] option : \n \t init position > y \n \t execute use \n \t until b <= 0 [end]|[start] policy a := \n \t if a <= 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == y \n \t execute run \n \t until position >= 2 [end]|[start] policy a := \n \t if a == 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position != x \n \t execute find \n \t until inventory != 1 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= y \n \t execute jump \n \t until inventory < x [end]|[start] policy a := \n \t if iron >= x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until position > 0 [end]|[start] policy b := \n \t if iron : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 2 \n \t execute build \n \t until b != 0 [end]|[start] option : \n \t init position < 1 \n \t execute build \n \t until b != 2 [end]|[start] option : \n \t init position == x \n \t execute find \n \t until a < 1 [end]|[start] policy b := \n \t if position < 0 : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 1 \n \t execute find \n \t until a != 1 [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until b < 2 [end]|[start] option : \n \t init a >= y \n \t execute find \n \t until position < 2 [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until a >= 1 [end]|[start] policy a := \n \t if iron > 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a >= 2 : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b > y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until inventory > y [end]|[start] policy b := \n \t if a >= x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= x \n \t execute run \n \t until b < y [end]|[start] option : \n \t init inventory < y \n \t execute use \n \t until b > 1 [end]|[start] policy b := \n \t if a < y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < x \n \t execute build \n \t until position >= x [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until position <= 2 [end]|[start] policy b := \n \t if a != 2 : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init x \n \t execute find \n \t until position != 0 [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != y \n \t execute jump \n \t until b != x [end]|[start] option : \n \t init a != 1 \n \t execute jump \n \t until a == 0 [end]|[start] option : \n \t init a >= 0 \n \t execute find \n \t until inventory <= 0 [end]|[start] policy a := \n \t if b == 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= y \n \t execute run \n \t until b == 1 [end]|[start] option : \n \t init inventory == 2 \n \t execute find \n \t until inventory <= x [end]|[start] policy a := \n \t if a < 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 1 \n \t execute use \n \t until b > y [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until inventory < y [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a < x \n \t execute find \n \t until position > 1 [end]|[start] policy b := \n \t if iron > 1 : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 0 \n \t execute run \n \t until b != y [end]|[start] option : \n \t init b > 2 \n \t execute run \n \t until b < 0 [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until a == 0 [end]|[start] option : \n \t init inventory \n \t execute run \n \t until inventory > x [end]|[start] option : \n \t init inventory \n \t execute jump \n \t until inventory == 0 [end]|[start] option : \n \t init a >= y \n \t execute jump \n \t until a < 0 [end]|[start] policy a := \n \t if position : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b < y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 2 \n \t execute run \n \t until a <= 0 [end]|[start] policy a := \n \t if a >= 1 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until a < 2 [end]|[start] option : \n \t init inventory > x \n \t execute run \n \t until a <= y [end]|[start] policy a := \n \t if a >= y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron == y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > x \n \t execute use \n \t until position == x [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b != y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b == 0 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until a != y [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until position == 1 [end]|[start] option : \n \t init inventory == 2 \n \t execute find \n \t until b != 2 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 0 \n \t execute use \n \t until inventory > 1 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 1 \n \t execute build \n \t until a >= 2 [end]|[start] option : \n \t init position != x \n \t execute jump \n \t until inventory <= 2 [end]|[start] policy b := \n \t if b != x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 2 \n \t execute jump \n \t until a <= 2 [end]|[start] policy b := \n \t if b != 1 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 0 \n \t execute find \n \t until a <= 0 [end]|[start] policy a := \n \t if iron != 1 : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 1 \n \t execute find \n \t until position <= y [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until inventory <= 0 [end]|[start] policy a := \n \t if position == x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 0 \n \t execute run \n \t until b != 0 [end]|[start] policy a := \n \t if b <= 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until a != 1 [end]|[start] option : \n \t init a <= 2 \n \t execute use \n \t until a == y [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until b >= 1 [end]|[start] policy a := \n \t if position <= x : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until b >= 0 [end]|[start] option : \n \t init a <= 2 \n \t execute run \n \t until b != 0 [end]|[start] policy a := \n \t if b != 0 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b != x \n \t execute use \n \t until b == 1 [end]|[start] policy a := \n \t if a == 0 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a < x \n \t execute find \n \t until position == y [end]|[start] policy a := \n \t if position >= 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= y \n \t execute run \n \t until b < 0 [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= y \n \t execute use \n \t until b < 2 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 2 \n \t execute build \n \t until position == x [end]|[start] policy a := \n \t if a != y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a \n \t execute build \n \t until b > y [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 0 \n \t execute jump \n \t until b > 2 [end]|[start] option : \n \t init b < 1 \n \t execute run \n \t until b < 1 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < x : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > x \n \t execute build \n \t until position == y [end]|[start] policy b := \n \t if iron > y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position \n \t execute jump \n \t until a != 0 [end]|[start] option : \n \t init a != x \n \t execute build \n \t until inventory > 1 [end]|[start] policy a := \n \t if a < 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until b != x [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until b > 0 [end]|[start] policy b := \n \t if iron <= y : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a == y \n \t execute use \n \t until a > x [end]|[start] policy b := \n \t if position > y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 0 \n \t execute find \n \t until position == 1 [end]|[start] policy b := \n \t if a == x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= y \n \t execute build \n \t until inventory < y [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron != y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= x \n \t execute run \n \t until inventory < y [end]|[start] policy a := \n \t if a > 2 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= y \n \t execute use \n \t until inventory [end]|[start] option : \n \t init b != x \n \t execute jump \n \t until position == 0 [end]|[start] option : \n \t init b < y \n \t execute find \n \t until position != 1 [end]|[start] policy b := \n \t if a > x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a > x \n \t execute use \n \t until position <= 1 [end]|[start] policy a := \n \t if b > 1 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b < y \n \t execute find \n \t until b != 0 [end]|[start] option : \n \t init inventory != x \n \t execute run \n \t until b == y [end]|[start] policy b := \n \t if iron : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until position <= x [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 1 \n \t execute run \n \t until b == y [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until b > x [end]|[start] option : \n \t init b == x \n \t execute build \n \t until position != 0 [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until position == 0 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until inventory >= 1 [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until a >= x [end]|[start] option : \n \t init inventory == y \n \t execute use \n \t until inventory > x [end]|[start] policy a := \n \t if iron >= x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until a == y [end]|[start] policy a := \n \t if position > 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= y \n \t execute use \n \t until position > 0 [end]|[start] option : \n \t init a > 1 \n \t execute run \n \t until a == 1 [end]|[start] option : \n \t init inventory <= 1 \n \t execute use \n \t until inventory <= 0 [end]|[start] option : \n \t init position < 1 \n \t execute find \n \t until position < 0 [end]|[start] policy b := \n \t if a <= y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute run \n \t until b < 2 [end]|[start] policy a := \n \t if b : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position == y \n \t execute use \n \t until b >= 1 [end]|[start] policy b := \n \t if iron == x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 2 \n \t execute use \n \t until inventory [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until a <= 2 [end]|[start] policy a := \n \t if position != 0 : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= x \n \t execute find \n \t until position > 0 [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 0 \n \t execute jump \n \t until y [end]|[start] option : \n \t init inventory < 0 \n \t execute find \n \t until position > y [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until inventory >= 0 [end]|[start] policy b := \n \t if iron <= y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b != x \n \t execute run \n \t until b == 1 [end]|[start] policy b := \n \t if a : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute build \n \t until a == 2 [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until a > 2 [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until inventory < y [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until b <= y [end]|[start] policy a := \n \t if position != 2 : \n \t execute jump \n [end]|[start] policy b := \n \t if b > x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 2 \n \t execute jump \n \t until inventory != 0 [end]|[start] option : \n \t init position >= x \n \t execute use \n \t until a >= 1 [end]|[start] policy b := \n \t if b == x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= y \n \t execute find \n \t until a != x [end]|[start] option : \n \t init position < 1 \n \t execute jump \n \t until a > y [end]|[start] policy a := \n \t if a <= 2 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron != x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until b >= 0 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until position >= 1 [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron != x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b > y \n \t execute use \n \t until position <= 1 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron != x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until position >= x [end]|[start] policy a := \n \t if b != 1 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b < y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until b <= x [end]|[start] policy a := \n \t if iron >= y : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until position <= y [end]|[start] policy a := \n \t if iron != 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until b > 0 [end]|[start] option : \n \t init a \n \t execute run \n \t until position >= x [end]|[start] option : \n \t init b != x \n \t execute use \n \t until inventory <= 1 [end]|[start] policy a := \n \t if a > 2 : \n \t execute use \n [end]|[start] option : \n \t init position > 2 \n \t execute jump \n \t until b >= 0 [end]|[start] policy b := \n \t if a < 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a > x \n \t execute build \n \t until b != x [end]|[start] option : \n \t init inventory >= 1 \n \t execute use \n \t until position >= 2 [end]|[start] policy a := \n \t if a < 2 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 0 \n \t execute jump \n \t until position <= 2 [end]|[start] policy a := \n \t if position >= y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 1 \n \t execute find \n \t until inventory < 0 [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until inventory == y [end]|[start] option : \n \t init a == x \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until inventory < y [end]|[start] option : \n \t init inventory != x \n \t execute build \n \t until inventory <= x [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until position != x [end]|[start] policy a := \n \t if b < 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until b == 1 [end]|[start] option : \n \t init a < 0 \n \t execute build \n \t until b < y [end]|[start] option : \n \t init position <= 2 \n \t execute run \n \t until b > 2 [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until position == x [end]|[start] policy a := \n \t if b >= 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != x : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b == y \n \t execute run \n \t until inventory != y [end]|[start] policy a := \n \t if position > x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until b < x [end]|[start] policy a := \n \t if a <= y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until position == 2 [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until position <= y [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 2 \n \t execute jump \n \t until position == 0 [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b > y \n \t execute jump \n \t until inventory >= y [end]|[start] policy a := \n \t if position <= y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until position != y [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until inventory > y [end]|[start] policy a := \n \t if position != 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a < x \n \t execute build \n \t until position != 0 [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != x \n \t execute find \n \t until position == 1 [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until position <= 1 [end]|[start] policy b := \n \t if b < y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until a == x [end]|[start] policy a := \n \t if b == 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 0 \n \t execute use \n \t until b > 2 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position > x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until a <= 2 [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until b >= 2 [end]|[start] policy b := \n \t if a >= x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until inventory < x [end]|[start] policy a := \n \t if position == x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until a < y [end]|[start] policy a := \n \t if a > 2 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= x \n \t execute jump \n \t until position < 0 [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until b == y [end]|[start] option : \n \t init b == y \n \t execute build \n \t until a [end]|[start] option : \n \t init b < 1 \n \t execute build \n \t until a <= x [end]|[start] policy b := \n \t if a != 2 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position > 0 : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b != y \n \t execute build \n \t until inventory != 0 [end]|[start] policy b := \n \t if position > x : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < x \n \t execute run \n \t until inventory < y [end]|[start] option : \n \t init position <= 2 \n \t execute use \n \t until inventory >= 0 [end]|[start] option : \n \t init b \n \t execute use \n \t until y [end]|[start] option : \n \t init inventory \n \t execute find \n \t until a > 0 [end]|[start] option : \n \t init position > 1 \n \t execute jump \n \t until b <= 0 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until position > 0 [end]|[start] policy a := \n \t if position >= x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < y \n \t execute use \n \t until a > 2 [end]|[start] policy b := \n \t if b >= x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until inventory < 1 [end]|[start] policy b := \n \t if a <= x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until b > x [end]|[start] policy a := \n \t if a >= x : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a < y \n \t execute run \n \t until b > x [end]|[start] policy a := \n \t if iron > 1 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= x \n \t execute find \n \t until inventory < x [end]|[start] policy a := \n \t if a >= 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until position >= x [end]|[start] option : \n \t init a < y \n \t execute build \n \t until inventory >= 2 [end]|[start] policy a := \n \t if a > 2 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position != y \n \t execute run \n \t until inventory > 0 [end]|[start] policy a := \n \t if iron > y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute use \n \t until inventory != 1 [end]|[start] policy b := \n \t if a > x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 1 \n \t execute find \n \t until b > x [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until b [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until a > 2 [end]|[start] policy a := \n \t if b : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position == y \n \t execute find \n \t until inventory == 2 [end]|[start] policy a := \n \t if b > y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != y \n \t execute build \n \t until a >= y [end]|[start] option : \n \t init a \n \t execute find \n \t until inventory <= 2 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until a < 2 [end]|[start] option : \n \t init b > 2 \n \t execute build \n \t until b < 0 [end]|[start] policy a := \n \t if a >= 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 1 \n \t execute use \n \t until a == 1 [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until b <= 0 [end]|[start] policy a := \n \t if position : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 2 \n \t execute build \n \t until inventory > 1 [end]|[start] policy a := \n \t if position == 2 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == y : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 0 \n \t execute run \n \t until a != 0 [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= 2 \n \t execute use \n \t until b <= 1 [end]|[start] policy a := \n \t if iron < 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until a == 2 [end]|[start] policy a := \n \t if a > x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until inventory != 1 [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until position != 0 [end]|[start] option : \n \t init position >= x \n \t execute run \n \t until a >= 0 [end]|[start] policy a := \n \t if a < 0 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position < y \n \t execute use \n \t until b >= y [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until position < 0 [end]|[start] option : \n \t init b < 1 \n \t execute run \n \t until a <= 1 [end]|[start] policy a := \n \t if a > 0 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a <= y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until position < x [end]|[start] option : \n \t init position < 2 \n \t execute use \n \t until b < y [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until a < 1 [end]|[start] policy a := \n \t if iron < 2 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron <= 0 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until a <= 1 [end]|[start] policy b := \n \t if iron != y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until a >= 0 [end]|[start] policy a := \n \t if b == y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 1 \n \t execute jump \n \t until b == 0 [end]|[start] policy b := \n \t if position == y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a <= y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b < x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= y \n \t execute build \n \t until position > 1 [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until position > 0 [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until inventory == 1 [end]|[start] policy b := \n \t if b >= y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 2 \n \t execute run \n \t until b >= x [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until inventory == x [end]|[start] policy a := \n \t if iron != x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron > y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until b >= x [end]|[start] policy a := \n \t if a == 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until position >= 0 [end]|[start] policy a := \n \t if b : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until a != x [end]|[start] policy b := \n \t if iron <= 2 : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= 0 : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until position > x [end]|[start] policy b := \n \t if iron >= y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until position != 0 [end]|[start] policy b := \n \t if b != y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == y \n \t execute use \n \t until b == 0 [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until a <= x [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until position < 1 [end]|[start] policy b := \n \t if position < x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until b <= 0 [end]|[start] policy a := \n \t if position < 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 0 \n \t execute find \n \t until position <= x [end]|[start] policy a := \n \t if iron != 2 : \n \t execute jump \n [end]|[start] option : \n \t init position == 2 \n \t execute find \n \t until b < x [end]|[start] option : \n \t init a == 1 \n \t execute jump \n \t until inventory >= 1 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until inventory < y [end]|[start] policy a := \n \t if position != 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != x : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until position != x [end]|[start] option : \n \t init position <= 1 \n \t execute find \n \t until inventory == x [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until inventory [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < x \n \t execute build \n \t until inventory == x [end]|[start] policy a := \n \t if position > 2 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron >= 2 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 1 \n \t execute find \n \t until b > 2 [end]|[start] policy a := \n \t if a != 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until position == 0 [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until a == y [end]|[start] policy b := \n \t if a == 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init x \n \t execute find \n \t until position <= y [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until position != x [end]|[start] policy b := \n \t if a : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < y : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b != x \n \t execute run \n \t until a != x [end]|[start] policy a := \n \t if b >= 1 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != x \n \t execute run \n \t until inventory > 2 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until position <= y [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until inventory <= x [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > x \n \t execute jump \n \t until position == 1 [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until a < 1 [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until a > y [end]|[start] option : \n \t init b != y \n \t execute use \n \t until a <= 0 [end]|[start] policy a := \n \t if position == 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 1 \n \t execute run \n \t until a != 0 [end]|[start] policy a := \n \t if iron == x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= x \n \t execute find \n \t until inventory < x [end]|[start] policy a := \n \t if position >= 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until inventory > 2 [end]|[start] option : \n \t init b != y \n \t execute run \n \t until a > y [end]|[start] option : \n \t init position <= x \n \t execute build \n \t until inventory < x [end]|[start] policy a := \n \t if b : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until b == 1 [end]|[start] policy a := \n \t if iron > y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 1 \n \t execute find \n \t until b >= x [end]|[start] policy b := \n \t if position : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < y \n \t execute run \n \t until b > y [end]|[start] option : \n \t init inventory < x \n \t execute use \n \t until b <= 0 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 1 \n \t execute run \n \t until inventory <= y [end]|[start] policy a := \n \t if a < y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 2 \n \t execute find \n \t until b > y [end]|[start] policy b := \n \t if a == 1 : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a \n \t execute jump \n \t until a != 1 [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until a == x [end]|[start] option : \n \t init position >= 0 \n \t execute run \n \t until b <= x [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until a != x [end]|[start] option : \n \t init a >= y \n \t execute build \n \t until position > 0 [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until a [end]|[start] policy a := \n \t if a > x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute find \n \t until inventory == 1 [end]|[start] policy b := \n \t if a < 0 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= x \n \t execute find \n \t until inventory >= 0 [end]|[start] option : \n \t init position >= y \n \t execute jump \n \t until b == 0 [end]|[start] option : \n \t init inventory < x \n \t execute run \n \t until a == y [end]|[start] policy a := \n \t if a >= y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > x : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != x \n \t execute find \n \t until b < x [end]|[start] policy b := \n \t if b >= y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute use \n \t until inventory > y [end]|[start] policy a := \n \t if position < 2 : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b == y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until inventory > 1 [end]|[start] option : \n \t init position < 2 \n \t execute use \n \t until b != 0 [end]|[start] policy a := \n \t if b != x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until inventory >= y [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 1 \n \t execute find \n \t until inventory <= 2 [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b == y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == x \n \t execute build \n \t until a <= 2 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until b >= x [end]|[start] policy a := \n \t if iron == x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b \n \t execute run \n \t until position > x [end]|[start] option : \n \t init inventory < 0 \n \t execute use \n \t until inventory <= y [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until inventory < 1 [end]|[start] policy a := \n \t if b < y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > x : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= 1 \n \t execute build \n \t until b < 0 [end]|[start] policy a := \n \t if position > x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b < x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until position > x [end]|[start] policy a := \n \t if a < 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until position >= 0 [end]|[start] policy a := \n \t if b == 0 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 2 \n \t execute find \n \t until a > y [end]|[start] policy a := \n \t if a == x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 2 \n \t execute use \n \t until inventory == 2 [end]|[start] policy a := \n \t if iron >= x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a != x \n \t execute run \n \t until a != 1 [end]|[start] policy b := \n \t if a < 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position > y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a < y \n \t execute find \n \t until inventory == 1 [end]|[start] option : \n \t init a != x \n \t execute build \n \t until b > 1 [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until inventory < x [end]|[start] option : \n \t init a >= y \n \t execute find \n \t until a <= y [end]|[start] policy b := \n \t if a : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 2 \n \t execute run \n \t until inventory >= 1 [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b != y \n \t execute run \n \t until inventory < 2 [end]|[start] policy b := \n \t if a != 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position == y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init x \n \t execute build \n \t until inventory <= y [end]|[start] option : \n \t init position == 1 \n \t execute jump \n \t until a != 2 [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until position != 1 [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until a == 2 [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until inventory <= 0 [end]|[start] option : \n \t init b \n \t execute use \n \t until inventory <= y [end]|[start] option : \n \t init a <= x \n \t execute find \n \t until inventory != 0 [end]|[start] option : \n \t init position == 2 \n \t execute jump \n \t until b > y [end]|[start] option : \n \t init position <= x \n \t execute jump \n \t until position != 0 [end]|[start] policy a := \n \t if a == 0 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b < 2 : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init x \n \t execute use \n \t until b == 0 [end]|[start] policy b := \n \t if position < y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until position == y [end]|[start] policy b := \n \t if a >= x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position <= x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 0 \n \t execute run \n \t until b >= 0 [end]|[start] policy a := \n \t if b > x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until a > y [end]|[start] policy a := \n \t if a > 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > y \n \t execute run \n \t until a != 1 [end]|[start] policy b := \n \t if position > x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > y : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until inventory <= 1 [end]|[start] option : \n \t init position < 0 \n \t execute build \n \t until position <= y [end]|[start] policy a := \n \t if b != x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 1 \n \t execute run \n \t until inventory != 0 [end]|[start] option : \n \t init b < x \n \t execute use \n \t until position != y [end]|[start] policy b := \n \t if position <= x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > x : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 1 \n \t execute build \n \t until b != 0 [end]|[start] option : \n \t init position < y \n \t execute use \n \t until inventory < 2 [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until b == 1 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= 1 : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b < x \n \t execute find \n \t until a != 2 [end]|[start] policy a := \n \t if position <= x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == y \n \t execute use \n \t until position <= 0 [end]|[start] policy b := \n \t if a < y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 1 \n \t execute jump \n \t until inventory < y [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 2 \n \t execute find \n \t until inventory != 1 [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 0 \n \t execute find \n \t until inventory != x [end]|[start] policy a := \n \t if position >= x : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < y : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until a >= 2 [end]|[start] option : \n \t init inventory > y \n \t execute run \n \t until a >= 0 [end]|[start] policy b := \n \t if b != y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > x \n \t execute jump \n \t until b >= 1 [end]|[start] policy a := \n \t if position == y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 0 \n \t execute use \n \t until a < 1 [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until inventory < 1 [end]|[start] option : \n \t init b > x \n \t execute run \n \t until inventory < 2 [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until position != 0 [end]|[start] option : \n \t init a <= x \n \t execute find \n \t until position < 1 [end]|[start] option : \n \t init a == x \n \t execute build \n \t until inventory <= x [end]|[start] policy a := \n \t if a == 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position != y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 1 \n \t execute find \n \t until a <= x [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until a >= x [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until b > 1 [end]|[start] policy b := \n \t if b >= x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until a > 2 [end]|[start] policy b := \n \t if b <= x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 0 \n \t execute find \n \t until position != 1 [end]|[start] policy a := \n \t if b != 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until b > x [end]|[start] policy b := \n \t if a == x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until position > 1 [end]|[start] policy a := \n \t if a == x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a <= x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 0 \n \t execute find \n \t until position > 0 [end]|[start] option : \n \t init a == 1 \n \t execute build \n \t until position < x [end]|[start] policy a := \n \t if b != 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= x \n \t execute jump \n \t until b == 0 [end]|[start] policy a := \n \t if b > 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until a > 2 [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until position < 1 [end]|[start] policy a := \n \t if b > 2 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron > y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b <= x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until inventory == 0 [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until inventory != 0 [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until position > y [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a \n \t execute jump \n \t until a > 2 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == x \n \t execute build \n \t until b <= 0 [end]|[start] policy b := \n \t if position != y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 1 \n \t execute jump \n \t until inventory > 1 [end]|[start] option : \n \t init a != 1 \n \t execute run \n \t until a > y [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position > x \n \t execute jump \n \t until a == 0 [end]|[start] option : \n \t init a >= y \n \t execute find \n \t until a > x [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a == y \n \t execute find \n \t until b > y [end]|[start] option : \n \t init inventory <= y \n \t execute build \n \t until position <= 2 [end]|[start] option : \n \t init inventory >= 1 \n \t execute build \n \t until inventory >= x [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until inventory < x [end]|[start] option : \n \t init inventory != y \n \t execute build \n \t until inventory <= x [end]|[start] policy b := \n \t if b == y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until a >= 0 [end]|[start] policy a := \n \t if a > x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 2 \n \t execute find \n \t until y [end]|[start] policy b := \n \t if a > y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until position <= 0 [end]|[start] policy a := \n \t if position == 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position < y \n \t execute find \n \t until inventory < x [end]|[start] policy b := \n \t if position >= x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position != y \n \t execute use \n \t until b >= 0 [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until inventory < 1 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until inventory == 2 [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until inventory < 2 [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until inventory <= x [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until position <= 1 [end]|[start] policy b := \n \t if position > x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 2 \n \t execute use \n \t until b <= x [end]|[start] policy a := \n \t if a > 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a : \n \t execute jump \n [end]|[start] policy b := \n \t if b <= x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position == x \n \t execute use \n \t until b == y [end]|[start] option : \n \t init a >= 0 \n \t execute use \n \t until b != y [end]|[start] option : \n \t init position <= 1 \n \t execute use \n \t until a >= 2 [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until b >= 2 [end]|[start] policy a := \n \t if b >= y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until b == x [end]|[start] policy a := \n \t if iron < 1 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until inventory != y [end]|[start] policy a := \n \t if iron != y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == y : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until position > 2 [end]|[start] policy a := \n \t if a < 0 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 1 \n \t execute run \n \t until b < 1 [end]|[start] option : \n \t init b == y \n \t execute jump \n \t until position == 0 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until b < x [end]|[start] policy b := \n \t if position > y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b >= y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron != x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position <= x : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until b == 1 [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until a >= x [end]|[start] option : \n \t init b <= 1 \n \t execute use \n \t until b < 2 [end]|[start] option : \n \t init a == 2 \n \t execute run \n \t until b == 2 [end]|[start] option : \n \t init b > 0 \n \t execute use \n \t until b >= 1 [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until position <= 0 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until b > y [end]|[start] policy b := \n \t if a <= x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron > y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == y \n \t execute jump \n \t until b >= 1 [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until inventory >= 1 [end]|[start] policy a := \n \t if b > 1 : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < y : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until b > x [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until position >= 1 [end]|[start] option : \n \t init b != 0 \n \t execute build \n \t until position == 1 [end]|[start] option : \n \t init b < 0 \n \t execute run \n \t until b != 1 [end]|[start] policy a := \n \t if b : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 1 \n \t execute build \n \t until b <= 0 [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= x \n \t execute jump \n \t until b == 0 [end]|[start] policy b := \n \t if a > y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until inventory == 1 [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until a > y [end]|[start] policy a := \n \t if iron == 0 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < y \n \t execute run \n \t until a [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a \n \t execute build \n \t until a > 0 [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until b < 0 [end]|[start] policy b := \n \t if b > y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until position > 0 [end]|[start] policy b := \n \t if iron != y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute jump \n \t until a >= x [end]|[start] option : \n \t init b != 1 \n \t execute use \n \t until b [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until b == 1 [end]|[start] policy b := \n \t if a > y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a != x \n \t execute jump \n \t until b < y [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < x \n \t execute find \n \t until y [end]|[start] policy a := \n \t if a < 2 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 1 \n \t execute run \n \t until b > y [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position < x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == y \n \t execute run \n \t until position > 0 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until a != y [end]|[start] option : \n \t init inventory == 0 \n \t execute find \n \t until a == 0 [end]|[start] policy a := \n \t if iron != x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until a < 1 [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until inventory <= 0 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 2 \n \t execute find \n \t until position > x [end]|[start] policy b := \n \t if position >= x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until a > y [end]|[start] policy b := \n \t if position >= x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= x : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 0 \n \t execute use \n \t until position < y [end]|[start] policy b := \n \t if a == y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 1 \n \t execute build \n \t until b != x [end]|[start] policy a := \n \t if a : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init y \n \t execute use \n \t until position < y [end]|[start] option : \n \t init position < y \n \t execute run \n \t until position > 2 [end]|[start] option : \n \t init b < 1 \n \t execute jump \n \t until b != x [end]|[start] policy a := \n \t if position != 2 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position == x \n \t execute build \n \t until position == x [end]|[start] policy a := \n \t if iron != 1 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until position != x [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until position >= y [end]|[start] option : \n \t init a > y \n \t execute find \n \t until b > y [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until inventory <= 0 [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until inventory >= 0 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 1 \n \t execute find \n \t until b <= 1 [end]|[start] policy a := \n \t if a <= y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron != y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 1 \n \t execute find \n \t until inventory >= x [end]|[start] option : \n \t init position == y \n \t execute use \n \t until a < 1 [end]|[start] policy a := \n \t if iron > 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 0 \n \t execute run \n \t until b > 2 [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until position == 2 [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until inventory > 0 [end]|[start] policy b := \n \t if b > x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until b != 1 [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until position <= 0 [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 2 \n \t execute use \n \t until b < x [end]|[start] option : \n \t init inventory <= x \n \t execute use \n \t until inventory > 2 [end]|[start] policy b := \n \t if position : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory \n \t execute find \n \t until b > 0 [end]|[start] policy a := \n \t if a < x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < x : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until a < x [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until position >= 0 [end]|[start] policy a := \n \t if a < 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 0 \n \t execute jump \n \t until position >= 2 [end]|[start] option : \n \t init a > 2 \n \t execute build \n \t until a <= y [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until position <= 2 [end]|[start] option : \n \t init a != x \n \t execute jump \n \t until b >= y [end]|[start] policy a := \n \t if iron < 0 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b > y \n \t execute find \n \t until inventory >= x [end]|[start] policy b := \n \t if position <= y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until b != 0 [end]|[start] option : \n \t init a <= y \n \t execute find \n \t until b < 2 [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until a != x [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until b != y [end]|[start] policy b := \n \t if b == x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position < x \n \t execute build \n \t until position > 1 [end]|[start] policy b := \n \t if b == x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 2 \n \t execute use \n \t until inventory == y [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until inventory == y [end]|[start] policy b := \n \t if iron < x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b != y \n \t execute build \n \t until position != 0 [end]|[start] policy b := \n \t if a <= x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position <= x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == y \n \t execute run \n \t until b < 2 [end]|[start] option : \n \t init x \n \t execute build \n \t until inventory > x [end]|[start] policy b := \n \t if iron < y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron < x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 1 \n \t execute find \n \t until position > y [end]|[start] policy b := \n \t if position < y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 1 \n \t execute find \n \t until b > 0 [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a >= x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == x : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 1 \n \t execute find \n \t until a == 2 [end]|[start] policy a := \n \t if iron != y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 2 \n \t execute run \n \t until a >= 0 [end]|[start] option : \n \t init position == x \n \t execute build \n \t until a > x [end]|[start] policy b := \n \t if a < y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 2 \n \t execute jump \n \t until a >= 0 [end]|[start] policy b := \n \t if iron <= x : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory \n \t execute run \n \t until inventory > 0 [end]|[start] policy b := \n \t if a != y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until position < 2 [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until position == y [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until b >= x [end]|[start] policy a := \n \t if a == x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 0 \n \t execute use \n \t until inventory < 1 [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until a == 2 [end]|[start] option : \n \t init b <= 1 \n \t execute run \n \t until inventory != x [end]|[start] policy a := \n \t if b < 2 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a < x \n \t execute run \n \t until position != y [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until b < 2 [end]|[start] option : \n \t init b <= x \n \t execute run \n \t until b > 0 [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until b >= x [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 0 \n \t execute jump \n \t until position < y [end]|[start] option : \n \t init position != 2 \n \t execute find \n \t until a <= x [end]|[start] policy a := \n \t if a < 0 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 1 \n \t execute find \n \t until inventory == 2 [end]|[start] policy a := \n \t if position > 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= x \n \t execute jump \n \t until a < x [end]|[start] option : \n \t init inventory <= 0 \n \t execute find \n \t until position != 2 [end]|[start] policy a := \n \t if position == x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init y \n \t execute build \n \t until a >= 2 [end]|[start] policy a := \n \t if position == 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b < x \n \t execute use \n \t until a <= 1 [end]|[start] policy a := \n \t if b : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == y \n \t execute jump \n \t until position [end]|[start] option : \n \t init inventory <= y \n \t execute build \n \t until position >= y [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until b <= 2 [end]|[start] policy a := \n \t if b > 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == x : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 0 \n \t execute jump \n \t until b == x [end]|[start] policy b := \n \t if b > y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a <= x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until inventory != y [end]|[start] option : \n \t init b > x \n \t execute find \n \t until a == y [end]|[start] option : \n \t init a == y \n \t execute jump \n \t until inventory >= 2 [end]|[start] policy a := \n \t if a <= x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute jump \n \t until position != 1 [end]|[start] policy a := \n \t if position < y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= y \n \t execute jump \n \t until position != 0 [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until b < y [end]|[start] option : \n \t init b <= 1 \n \t execute jump \n \t until position != 2 [end]|[start] policy a := \n \t if position > 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute use \n [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until inventory <= y [end]|[start] option : \n \t init b < x \n \t execute build \n \t until a == 1 [end]|[start] policy a := \n \t if a < 1 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= x \n \t execute build \n \t until position < 1 [end]|[start] policy b := \n \t if a >= y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position < y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until inventory != x [end]|[start] option : \n \t init inventory \n \t execute find \n \t until a >= y [end]|[start] option : \n \t init a >= y \n \t execute build \n \t until position < x [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until a == x [end]|[start] policy a := \n \t if position == x : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b == y \n \t execute build \n \t until b < 0 [end]|[start] policy b := \n \t if a != 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until inventory == y [end]|[start] option : \n \t init b < 2 \n \t execute jump \n \t until b < x [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until a > 1 [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until position > y [end]|[start] policy b := \n \t if iron < 2 : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position <= y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 1 \n \t execute run \n \t until b < x [end]|[start] policy a := \n \t if a > 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until a == 0 [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until inventory != 2 [end]|[start] option : \n \t init a == y \n \t execute build \n \t until inventory == y [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until position < 1 [end]|[start] policy b := \n \t if b != y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until inventory <= y [end]|[start] policy a := \n \t if position : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until a <= 0 [end]|[start] policy a := \n \t if position < x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 0 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == y \n \t execute jump \n \t until inventory != 1 [end]|[start] policy a := \n \t if a < x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute run \n \t until inventory >= 1 [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a == x \n \t execute build \n \t until a >= x [end]|[start] option : \n \t init position <= 2 \n \t execute use \n \t until position > x [end]|[start] policy b := \n \t if position <= 2 : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until b == 2 [end]|[start] policy b := \n \t if b > y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until inventory <= 0 [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until a <= y [end]|[start] policy a := \n \t if iron < 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until position == x [end]|[start] option : \n \t init position <= x \n \t execute find \n \t until b != 1 [end]|[start] policy b := \n \t if iron == y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 0 \n \t execute use \n \t until inventory [end]|[start] policy b := \n \t if b > y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until b <= x [end]|[start] option : \n \t init position >= x \n \t execute jump \n \t until inventory >= 1 [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until a <= y [end]|[start] policy a := \n \t if a == x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position >= y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until inventory [end]|[start] policy a := \n \t if a < x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a > 2 \n \t execute jump \n \t until position <= 0 [end]|[start] option : \n \t init y \n \t execute build \n \t until b == 1 [end]|[start] option : \n \t init b >= y \n \t execute run \n \t until position >= y [end]|[start] policy a := \n \t if a < 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != 2 : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 2 \n \t execute build \n \t until inventory > y [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until position < 2 [end]|[start] option : \n \t init inventory < 1 \n \t execute run \n \t until a > 2 [end]|[start] policy b := \n \t if iron <= y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute use \n \t until position < x [end]|[start] policy a := \n \t if a < 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a == y \n \t execute use \n \t until inventory > 2 [end]|[start] policy a := \n \t if b >= y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until position == 0 [end]|[start] option : \n \t init y \n \t execute use \n \t until inventory != 2 [end]|[start] policy a := \n \t if a != 0 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until y [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until inventory >= x [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == y \n \t execute build \n \t until inventory >= 1 [end]|[start] option : \n \t init a < 0 \n \t execute find \n \t until inventory <= x [end]|[start] option : \n \t init inventory \n \t execute jump \n \t until inventory > x [end]|[start] policy a := \n \t if position >= x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until inventory == x [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until inventory != y [end]|[start] option : \n \t init b <= x \n \t execute jump \n \t until a >= 2 [end]|[start] policy a := \n \t if iron > y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b != x \n \t execute run \n \t until position == 2 [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron < x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != y \n \t execute find \n \t until inventory != 0 [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until b >= x [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b \n \t execute use \n \t until a > 2 [end]|[start] policy a := \n \t if a < 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 2 \n \t execute run \n \t until position > x [end]|[start] option : \n \t init b == 1 \n \t execute run \n \t until b != 2 [end]|[start] policy a := \n \t if a == 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until a == 1 [end]|[start] policy a := \n \t if b < x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a != x \n \t execute run \n \t until b == 1 [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until b > 1 [end]|[start] option : \n \t init position < y \n \t execute build \n \t until inventory >= y [end]|[start] policy b := \n \t if a <= 1 : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until a <= 1 [end]|[start] policy a := \n \t if b != 2 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= y \n \t execute jump \n \t until position >= 2 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position != x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until position < y [end]|[start] option : \n \t init a > y \n \t execute build \n \t until position < 0 [end]|[start] option : \n \t init position != 0 \n \t execute use \n \t until a > x [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until a != 2 [end]|[start] policy b := \n \t if b : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 1 \n \t execute build \n \t until b >= 2 [end]|[start] policy b := \n \t if b < 1 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute use \n \t until position >= 1 [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until inventory < 1 [end]|[start] policy a := \n \t if a > x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > 2 : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until a > 2 [end]|[start] policy a := \n \t if a < 1 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position == x \n \t execute run \n \t until position < y [end]|[start] option : \n \t init position != x \n \t execute run \n \t until b == x [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until position <= 1 [end]|[start] policy b := \n \t if position < y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= y \n \t execute run \n \t until inventory >= x [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until inventory <= 2 [end]|[start] policy a := \n \t if b >= y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until b > 1 [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until a != 1 [end]|[start] policy a := \n \t if b : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until a < 1 [end]|[start] policy b := \n \t if b <= y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b > y \n \t execute use \n \t until b == 0 [end]|[start] policy b := \n \t if a >= 0 : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= y \n \t execute run \n \t until b == y [end]|[start] option : \n \t init inventory >= 2 \n \t execute use \n \t until inventory != 1 [end]|[start] policy a := \n \t if iron <= x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until position != y [end]|[start] policy b := \n \t if position == x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until b >= 0 [end]|[start] option : \n \t init a != 0 \n \t execute find \n \t until a >= y [end]|[start] option : \n \t init a >= y \n \t execute jump \n \t until position <= y [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until inventory < 0 [end]|[start] option : \n \t init position >= 2 \n \t execute build \n \t until b < 1 [end]|[start] option : \n \t init position \n \t execute jump \n \t until position <= 1 [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position > y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b < x \n \t execute find \n \t until inventory >= 0 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= x \n \t execute build \n \t until inventory >= y [end]|[start] option : \n \t init position < y \n \t execute use \n \t until inventory < x [end]|[start] policy a := \n \t if iron : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until inventory >= x [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until position < 1 [end]|[start] policy a := \n \t if iron >= y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 2 \n \t execute use \n \t until y [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until inventory > x [end]|[start] policy b := \n \t if iron >= y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == 0 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != 0 \n \t execute run \n \t until position < x [end]|[start] policy a := \n \t if a > 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= y \n \t execute find \n \t until a < y [end]|[start] option : \n \t init a != 1 \n \t execute find \n \t until position > 2 [end]|[start] policy b := \n \t if a == y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until b [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until position > 1 [end]|[start] policy b := \n \t if a >= x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until a != x [end]|[start] policy a := \n \t if position >= y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 0 \n \t execute find \n \t until b != y [end]|[start] policy a := \n \t if position == y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until inventory [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until a > x [end]|[start] option : \n \t init position >= x \n \t execute jump \n \t until inventory <= x [end]|[start] policy a := \n \t if position <= 2 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 1 \n \t execute find \n \t until a <= 2 [end]|[start] policy b := \n \t if position <= x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until a > 0 [end]|[start] option : \n \t init position \n \t execute build \n \t until a <= 0 [end]|[start] option : \n \t init inventory >= 2 \n \t execute build \n \t until a >= 2 [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until b == 0 [end]|[start] policy a := \n \t if a > 2 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until b <= 1 [end]|[start] policy b := \n \t if iron != x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until a >= 0 [end]|[start] policy a := \n \t if b < 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until position < 0 [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until a < y [end]|[start] option : \n \t init a < x \n \t execute jump \n \t until a == 2 [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= x \n \t execute run \n \t until a == x [end]|[start] policy a := \n \t if a >= 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 0 \n \t execute build \n \t until position > y [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until inventory >= x [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until b != 1 [end]|[start] option : \n \t init a < 2 \n \t execute find \n \t until position < 1 [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until a == 1 [end]|[start] policy a := \n \t if a != 2 : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until inventory != x [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a <= y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 1 \n \t execute jump \n \t until position > 2 [end]|[start] option : \n \t init b \n \t execute use \n \t until a >= y [end]|[start] option : \n \t init a > 1 \n \t execute find \n \t until a != y [end]|[start] policy a := \n \t if a >= y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until inventory <= 0 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute run \n \t until b >= 2 [end]|[start] option : \n \t init inventory >= y \n \t execute find \n \t until position <= 2 [end]|[start] option : \n \t init inventory <= 1 \n \t execute run \n \t until a < y [end]|[start] policy b := \n \t if position != y : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute build \n \t until inventory != 0 [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until a >= 1 [end]|[start] option : \n \t init inventory >= x \n \t execute find \n \t until a <= 1 [end]|[start] policy a := \n \t if a > 0 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a > 0 \n \t execute find \n \t until position <= 0 [end]|[start] option : \n \t init b != y \n \t execute run \n \t until inventory != x [end]|[start] policy a := \n \t if iron != x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute run \n \t until position <= 1 [end]|[start] policy a := \n \t if a == 2 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 0 \n \t execute jump \n \t until a < 0 [end]|[start] policy b := \n \t if b >= 0 : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until b > x [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b < x : \n \t execute use \n [end]|[start] option : \n \t init b < 2 \n \t execute find \n \t until inventory >= y [end]|[start] policy a := \n \t if position >= y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until a <= x [end]|[start] option : \n \t init position \n \t execute find \n \t until a <= y [end]|[start] option : \n \t init a >= 2 \n \t execute find \n \t until a >= y [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until a > y [end]|[start] policy b := \n \t if a > y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == x : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 2 \n \t execute jump \n \t until b > x [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until y [end]|[start] option : \n \t init a < 0 \n \t execute build \n \t until position < y [end]|[start] option : \n \t init inventory < 1 \n \t execute find \n \t until y [end]|[start] policy a := \n \t if a : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position > y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until inventory >= y [end]|[start] option : \n \t init b <= 1 \n \t execute find \n \t until b <= 1 [end]|[start] policy a := \n \t if a > 1 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > y \n \t execute use \n \t until position == 2 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until inventory == 0 [end]|[start] policy b := \n \t if a <= x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position > y \n \t execute run \n \t until inventory > x [end]|[start] policy b := \n \t if b >= y : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position < x \n \t execute use \n \t until inventory < 0 [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until b <= x [end]|[start] policy b := \n \t if position > 1 : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute find \n \t until inventory != x [end]|[start] policy a := \n \t if iron <= y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b == 1 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != x : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until position != 1 [end]|[start] policy b := \n \t if b > y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until b != y [end]|[start] option : \n \t init position != 1 \n \t execute use \n \t until inventory < 0 [end]|[start] option : \n \t init b != x \n \t execute run \n \t until a >= x [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until position <= 1 [end]|[start] option : \n \t init y \n \t execute find \n \t until b [end]|[start] policy a := \n \t if b > y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= x \n \t execute build \n \t until b != 1 [end]|[start] policy a := \n \t if b : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a <= x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == y \n \t execute jump \n \t until position > y [end]|[start] policy b := \n \t if b < x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 2 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron < 0 : \n \t execute use \n [end]|[start] option : \n \t init position == y \n \t execute use \n \t until a < x [end]|[start] policy b := \n \t if b == x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until b < 1 [end]|[start] option : \n \t init position != 2 \n \t execute build \n \t until b > x [end]|[start] option : \n \t init inventory != x \n \t execute build \n \t until b < x [end]|[start] policy a := \n \t if iron > 1 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init y \n \t execute jump \n \t until inventory >= 2 [end]|[start] policy a := \n \t if position > y : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute jump \n \t until b < y [end]|[start] option : \n \t init inventory < x \n \t execute run \n \t until position < y [end]|[start] option : \n \t init b <= 1 \n \t execute jump \n \t until inventory <= y [end]|[start] policy b := \n \t if position < x : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 2 \n \t execute build \n \t until inventory != 2 [end]|[start] option : \n \t init a < y \n \t execute run \n \t until b != 1 [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until inventory <= 2 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == x \n \t execute build \n \t until a < 2 [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until inventory > y [end]|[start] policy b := \n \t if iron != x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b != y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until position >= 1 [end]|[start] option : \n \t init a <= 2 \n \t execute build \n \t until position != y [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until b <= y [end]|[start] policy a := \n \t if iron != 1 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 1 \n \t execute find \n \t until a < 1 [end]|[start] option : \n \t init position != x \n \t execute find \n \t until a > y [end]|[start] policy a := \n \t if a : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory \n \t execute jump \n \t until b > x [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until inventory == x [end]|[start] option : \n \t init position != 1 \n \t execute use \n \t until b >= 1 [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > y \n \t execute jump \n \t until a < 1 [end]|[start] policy a := \n \t if a >= 2 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until y [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b < x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until b <= 1 [end]|[start] policy a := \n \t if b > y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 0 \n \t execute build \n \t until b [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until a < x [end]|[start] option : \n \t init a >= 2 \n \t execute build \n \t until position > 0 [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until position != 1 [end]|[start] policy b := \n \t if a != 1 : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until b > x [end]|[start] option : \n \t init inventory == x \n \t execute use \n \t until b != 1 [end]|[start] policy a := \n \t if a <= y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 2 \n \t execute jump \n \t until inventory >= x [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 0 \n \t execute run \n \t until inventory > 2 [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until position < y [end]|[start] option : \n \t init position < y \n \t execute use \n \t until a < 2 [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until a > 2 [end]|[start] policy b := \n \t if b == y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position != y \n \t execute run \n \t until b <= 0 [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until a < 1 [end]|[start] policy a := \n \t if b : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < y \n \t execute jump \n \t until inventory > 1 [end]|[start] policy a := \n \t if a >= 1 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until position == 2 [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until b >= 2 [end]|[start] policy a := \n \t if a >= y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != x \n \t execute find \n \t until inventory == y [end]|[start] option : \n \t init inventory < x \n \t execute use \n \t until inventory [end]|[start] policy a := \n \t if b >= y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a == y \n \t execute run \n \t until inventory <= 2 [end]|[start] policy b := \n \t if position < 1 : \n \t execute run \n [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until position <= x [end]|[start] option : \n \t init inventory > y \n \t execute jump \n \t until inventory != 1 [end]|[start] policy a := \n \t if iron != 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron > x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until b == 1 [end]|[start] policy a := \n \t if a <= 0 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= 2 \n \t execute build \n \t until inventory [end]|[start] policy a := \n \t if b < 1 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= y \n \t execute use \n \t until a < y [end]|[start] option : \n \t init b > y \n \t execute use \n \t until a >= x [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until a > 0 [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until a >= 1 [end]|[start] option : \n \t init inventory != 1 \n \t execute use \n \t until b != y [end]|[start] option : \n \t init position == 0 \n \t execute find \n \t until a <= 0 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init y \n \t execute run \n \t until position < y [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until b == 1 [end]|[start] option : \n \t init a <= y \n \t execute run \n \t until b < 2 [end]|[start] option : \n \t init b >= 1 \n \t execute run \n \t until inventory <= 1 [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until inventory > 1 [end]|[start] policy a := \n \t if b == 2 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until inventory == x [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 1 \n \t execute jump \n \t until position >= 0 [end]|[start] policy b := \n \t if a != y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position > y \n \t execute find \n \t until b > 0 [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position != y \n \t execute run \n \t until position > x [end]|[start] option : \n \t init a < 0 \n \t execute find \n \t until y [end]|[start] option : \n \t init a >= 2 \n \t execute jump \n \t until inventory == 0 [end]|[start] policy a := \n \t if position : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 1 \n \t execute find \n \t until a < 1 [end]|[start] policy a := \n \t if position != x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= y \n \t execute run \n \t until b > y [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > 1 \n \t execute use \n \t until a >= x [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until a == y [end]|[start] policy a := \n \t if a <= 1 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until a != 1 [end]|[start] policy a := \n \t if iron >= y : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 2 \n \t execute build \n \t until position > 0 [end]|[start] policy b := \n \t if iron <= y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b != x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until a > 0 [end]|[start] option : \n \t init a == x \n \t execute build \n \t until position >= y [end]|[start] policy a := \n \t if position < 1 : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until a > 1 [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until a <= 0 [end]|[start] policy a := \n \t if a > 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 2 \n \t execute run \n \t until a > 1 [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until b >= 2 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 1 \n \t execute run \n \t until a != x [end]|[start] policy a := \n \t if b >= x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= x \n \t execute run \n \t until inventory == y [end]|[start] option : \n \t init b > y \n \t execute build \n \t until position < 1 [end]|[start] option : \n \t init inventory >= 0 \n \t execute build \n \t until inventory <= x [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until position != 0 [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= y \n \t execute run \n \t until b != 1 [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= y \n \t execute jump \n \t until position != 1 [end]|[start] option : \n \t init inventory != 2 \n \t execute find \n \t until a < 0 [end]|[start] policy a := \n \t if position == 0 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until b >= 1 [end]|[start] option : \n \t init position < 1 \n \t execute run \n \t until b == y [end]|[start] policy a := \n \t if position != y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until a < 1 [end]|[start] option : \n \t init b \n \t execute run \n \t until inventory >= 0 [end]|[start] option : \n \t init position == y \n \t execute find \n \t until a <= 0 [end]|[start] policy a := \n \t if b > y : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until position > 1 [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until position < 1 [end]|[start] option : \n \t init b > 0 \n \t execute run \n \t until a != y [end]|[start] policy a := \n \t if b >= x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until position <= y [end]|[start] option : \n \t init position > y \n \t execute use \n \t until inventory < 2 [end]|[start] option : \n \t init b >= y \n \t execute build \n \t until b == x [end]|[start] option : \n \t init position > y \n \t execute find \n \t until a == y [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until position <= 0 [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a <= y : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == y : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until a != 1 [end]|[start] policy a := \n \t if a > y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b > y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= 2 \n \t execute find \n \t until a > 0 [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 0 \n \t execute find \n \t until inventory > y [end]|[start] policy a := \n \t if b == y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until b < 0 [end]|[start] option : \n \t init b <= y \n \t execute find \n \t until b > 2 [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until a > 2 [end]|[start] policy a := \n \t if position > 1 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until a > y [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= x \n \t execute run \n \t until a <= 2 [end]|[start] option : \n \t init inventory >= 1 \n \t execute build \n \t until inventory > y [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until b <= y [end]|[start] policy a := \n \t if position > 1 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until position >= 0 [end]|[start] option : \n \t init position != 2 \n \t execute find \n \t until a == x [end]|[start] policy b := \n \t if b <= y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 1 \n \t execute find \n \t until b != 2 [end]|[start] option : \n \t init position < 2 \n \t execute build \n \t until inventory == y [end]|[start] option : \n \t init inventory != 0 \n \t execute use \n \t until position >= 0 [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until b [end]|[start] option : \n \t init inventory != 0 \n \t execute find \n \t until inventory != y [end]|[start] policy a := \n \t if position > y : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a < 1 \n \t execute find \n \t until position < y [end]|[start] policy a := \n \t if iron <= x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 2 \n \t execute jump \n \t until inventory >= 1 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute run \n \t until position >= 0 [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until inventory <= 1 [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position > y \n \t execute run \n \t until position == 1 [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until inventory > y [end]|[start] policy b := \n \t if a < 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < y : \n \t execute build \n [end]|[start] policy b := \n \t if a != y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b == y \n \t execute build \n \t until position == y [end]|[start] policy a := \n \t if a < 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position == 0 \n \t execute jump \n \t until position != 1 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 2 \n \t execute find \n \t until inventory != x [end]|[start] option : \n \t init position != x \n \t execute build \n \t until a <= x [end]|[start] option : \n \t init a >= y \n \t execute find \n \t until inventory >= x [end]|[start] option : \n \t init b >= 0 \n \t execute jump \n \t until position == y [end]|[start] policy b := \n \t if a < 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 0 \n \t execute use \n \t until position == 2 [end]|[start] option : \n \t init position < x \n \t execute build \n \t until position != y [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b == x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position >= y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 1 \n \t execute use \n \t until a <= y [end]|[start] policy b := \n \t if b > y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 0 \n \t execute use \n \t until inventory != 2 [end]|[start] option : \n \t init b <= x \n \t execute build \n \t until a > 2 [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a <= y : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 0 \n \t execute find \n \t until b == 0 [end]|[start] policy a := \n \t if b > 1 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < y : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == y \n \t execute jump \n \t until a != y [end]|[start] option : \n \t init b < y \n \t execute use \n \t until position == x [end]|[start] option : \n \t init inventory == y \n \t execute run \n \t until b <= x [end]|[start] policy a := \n \t if a < x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b > x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b != x \n \t execute run \n \t until b < 2 [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until inventory == 0 [end]|[start] policy b := \n \t if b >= y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position != y \n \t execute use \n \t until a < x [end]|[start] policy a := \n \t if b == y : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until position != 0 [end]|[start] policy b := \n \t if position != x : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != y : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until x [end]|[start] option : \n \t init position \n \t execute jump \n \t until inventory == 1 [end]|[start] policy a := \n \t if a <= x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == y \n \t execute find \n \t until inventory [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until inventory [end]|[start] policy b := \n \t if b : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b >= y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 2 \n \t execute use \n \t until inventory [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until position >= x [end]|[start] option : \n \t init b <= x \n \t execute run \n \t until a != 1 [end]|[start] policy a := \n \t if b : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init y \n \t execute use \n \t until b < x [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until position > 1 [end]|[start] policy b := \n \t if a == 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b > y \n \t execute run \n \t until b >= 0 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until b == 2 [end]|[start] option : \n \t init position != 1 \n \t execute use \n \t until a < 1 [end]|[start] policy b := \n \t if b != x : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until inventory == 0 [end]|[start] option : \n \t init position < 2 \n \t execute find \n \t until b != y [end]|[start] policy a := \n \t if b < 2 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a <= x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 1 \n \t execute build \n \t until position == y [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until position < 1 [end]|[start] option : \n \t init position >= x \n \t execute use \n \t until position != x [end]|[start] policy a := \n \t if b == x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < y \n \t execute find \n \t until b <= y [end]|[start] option : \n \t init inventory == 0 \n \t execute use \n \t until position >= x [end]|[start] policy a := \n \t if position == 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until b >= 0 [end]|[start] option : \n \t init b != y \n \t execute build \n \t until position <= y [end]|[start] policy a := \n \t if a : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 0 \n \t execute build \n \t until inventory <= 1 [end]|[start] policy a := \n \t if position < 0 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute jump \n \t until inventory == 0 [end]|[start] option : \n \t init inventory != y \n \t execute find \n \t until a >= 2 [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until inventory > 0 [end]|[start] option : \n \t init a >= 2 \n \t execute jump \n \t until b < y [end]|[start] option : \n \t init inventory >= y \n \t execute build \n \t until inventory < 0 [end]|[start] policy a := \n \t if position >= 1 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until a != x [end]|[start] option : \n \t init position == 1 \n \t execute build \n \t until position > 0 [end]|[start] option : \n \t init b != 2 \n \t execute find \n \t until b != 1 [end]|[start] policy a := \n \t if position == x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until a < y [end]|[start] policy b := \n \t if position <= y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until b < x [end]|[start] policy a := \n \t if a > x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b < y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 2 \n \t execute use \n \t until position <= y [end]|[start] policy a := \n \t if b < 2 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != y \n \t execute jump \n \t until a [end]|[start] policy a := \n \t if b : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < x \n \t execute find \n \t until b > 1 [end]|[start] option : \n \t init a >= x \n \t execute jump \n \t until position < 1 [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 1 \n \t execute jump \n \t until inventory >= 2 [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until b < 1 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a == x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until inventory != y [end]|[start] policy a := \n \t if iron != y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 0 \n \t execute run \n \t until inventory < x [end]|[start] policy b := \n \t if position < y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory \n \t execute use \n \t until position < y [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until b != x [end]|[start] policy a := \n \t if iron < y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 0 \n \t execute use \n \t until inventory >= y [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position \n \t execute jump \n \t until position <= 0 [end]|[start] option : \n \t init b > y \n \t execute run \n \t until b != 1 [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until inventory < x [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until b == 0 [end]|[start] policy b := \n \t if b == 2 : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until b != 1 [end]|[start] policy a := \n \t if position != 1 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 2 \n \t execute use \n \t until inventory < y [end]|[start] option : \n \t init a == 0 \n \t execute jump \n \t until position > x [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until position < 0 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 2 \n \t execute find \n \t until a [end]|[start] option : \n \t init a >= 2 \n \t execute find \n \t until b != 1 [end]|[start] option : \n \t init x \n \t execute find \n \t until a > 2 [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until position >= 1 [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until b < x [end]|[start] option : \n \t init position != x \n \t execute run \n \t until position < 0 [end]|[start] policy b := \n \t if position >= 2 : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a < y \n \t execute build \n \t until a <= y [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b < y \n \t execute build \n \t until inventory > 0 [end]|[start] policy b := \n \t if position : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b \n \t execute use \n \t until inventory > 0 [end]|[start] option : \n \t init position != 2 \n \t execute run \n \t until b >= 2 [end]|[start] policy a := \n \t if a < 1 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 0 \n \t execute run \n \t until position > 1 [end]|[start] policy a := \n \t if b : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until a [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != y \n \t execute run \n \t until a >= 1 [end]|[start] option : \n \t init inventory >= x \n \t execute jump \n \t until inventory == y [end]|[start] policy a := \n \t if a > 1 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 0 \n \t execute find \n \t until inventory > y [end]|[start] option : \n \t init position < x \n \t execute run \n \t until b [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron < x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position == x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= x \n \t execute find \n \t until inventory == 2 [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init inventory > 0 \n \t execute jump \n \t until a [end]|[start] policy a := \n \t if iron : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position != y \n \t execute use \n \t until position != x [end]|[start] option : \n \t init position < 0 \n \t execute build \n \t until inventory > 0 [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until inventory >= 0 [end]|[start] policy b := \n \t if a >= y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b != x \n \t execute use \n \t until inventory != 0 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == y : \n \t execute use \n [end]|[start] policy a := \n \t if iron != x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > y \n \t execute run \n \t until a == x [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until b >= 1 [end]|[start] policy a := \n \t if a < 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron <= 2 : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= 0 \n \t execute run \n \t until a <= x [end]|[start] policy a := \n \t if iron != x : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until position <= x [end]|[start] policy a := \n \t if a != x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= y \n \t execute jump \n \t until b < 0 [end]|[start] option : \n \t init position == x \n \t execute use \n \t until inventory >= y [end]|[start] option : \n \t init a < 0 \n \t execute use \n \t until position <= 0 [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until a != y [end]|[start] policy b := \n \t if position > y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a \n \t execute use \n \t until a [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= x \n \t execute find \n \t until position <= 1 [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until position < 2 [end]|[start] policy a := \n \t if position >= x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until inventory <= y [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 2 \n \t execute run \n \t until position >= y [end]|[start] policy b := \n \t if a < 0 : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != x \n \t execute jump \n \t until b > 2 [end]|[start] option : \n \t init inventory > 0 \n \t execute find \n \t until a <= 2 [end]|[start] option : \n \t init position <= 0 \n \t execute find \n \t until inventory != x [end]|[start] policy a := \n \t if a > 0 : \n \t execute build \n [end]|[start] option : \n \t init a == 1 \n \t execute find \n \t until a < y [end]|[start] policy b := \n \t if a != 0 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < y : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 0 \n \t execute use \n \t until inventory >= 0 [end]|[start] option : \n \t init a >= 2 \n \t execute build \n \t until inventory < 0 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= 2 \n \t execute run \n \t until a > 2 [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron < x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until b == 2 [end]|[start] option : \n \t init position >= 2 \n \t execute jump \n \t until b < y [end]|[start] policy a := \n \t if iron != x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until a <= x [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until b > 1 [end]|[start] option : \n \t init position < y \n \t execute run \n \t until b > x [end]|[start] policy b := \n \t if position < x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 2 \n \t execute run \n \t until a > x [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until a != 2 [end]|[start] option : \n \t init position > y \n \t execute run \n \t until position <= 1 [end]|[start] policy b := \n \t if a > x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron > x : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 1 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 0 \n \t execute use \n \t until a != 0 [end]|[start] option : \n \t init position != y \n \t execute run \n \t until a != 1 [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until position < 1 [end]|[start] policy a := \n \t if position > 2 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= x \n \t execute jump \n \t until a >= y [end]|[start] option : \n \t init a <= y \n \t execute jump \n \t until inventory > y [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until inventory == 0 [end]|[start] option : \n \t init b != y \n \t execute build \n \t until b >= 0 [end]|[start] policy b := \n \t if iron : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until inventory == 0 [end]|[start] option : \n \t init x \n \t execute find \n \t until inventory < 0 [end]|[start] option : \n \t init position == x \n \t execute use \n \t until a >= y [end]|[start] option : \n \t init inventory > 2 \n \t execute find \n \t until position >= 1 [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until b != 2 [end]|[start] policy a := \n \t if a : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until b < y [end]|[start] policy a := \n \t if position == x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a > y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until position != 1 [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != x \n \t execute find \n \t until position == 1 [end]|[start] option : \n \t init b < 2 \n \t execute find \n \t until a >= 1 [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != y : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != 0 \n \t execute jump \n \t until position == x [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position \n \t execute find \n \t until position >= 1 [end]|[start] policy a := \n \t if position < 0 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 2 \n \t execute build \n \t until b >= 1 [end]|[start] policy a := \n \t if a != 0 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 2 \n \t execute jump \n \t until position > 0 [end]|[start] option : \n \t init position < 1 \n \t execute use \n \t until b != y [end]|[start] policy b := \n \t if a != 1 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b == 0 \n \t execute use \n \t until position != y [end]|[start] policy a := \n \t if a >= 0 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until a < 1 [end]|[start] option : \n \t init inventory <= 0 \n \t execute use \n \t until position >= x [end]|[start] policy a := \n \t if position > x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron != x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 0 \n \t execute use \n \t until a > 1 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a < x \n \t execute jump \n \t until b != 2 [end]|[start] policy b := \n \t if a >= x : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b \n \t execute use \n \t until position >= 1 [end]|[start] option : \n \t init a < 0 \n \t execute find \n \t until a != 0 [end]|[start] option : \n \t init b != y \n \t execute build \n \t until a >= 0 [end]|[start] policy b := \n \t if position < 0 : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 2 \n \t execute run \n \t until b <= 1 [end]|[start] policy a := \n \t if b < 0 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until position < x [end]|[start] option : \n \t init inventory < y \n \t execute use \n \t until b >= x [end]|[start] option : \n \t init a >= y \n \t execute build \n \t until a < x [end]|[start] policy a := \n \t if iron != y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until b >= x [end]|[start] policy a := \n \t if a < 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b <= x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a != y \n \t execute find \n \t until inventory == 1 [end]|[start] option : \n \t init b < 1 \n \t execute use \n \t until a [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 0 \n \t execute jump \n \t until a >= x [end]|[start] policy a := \n \t if position >= y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < 1 \n \t execute find \n \t until inventory > 2 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b != y \n \t execute find \n \t until position > x [end]|[start] option : \n \t init position < x \n \t execute run \n \t until inventory != 2 [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until a [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until b <= 1 [end]|[start] policy b := \n \t if a != y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until a <= x [end]|[start] option : \n \t init b < 0 \n \t execute jump \n \t until inventory < x [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until inventory != 2 [end]|[start] option : \n \t init a >= x \n \t execute run \n \t until a != x [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 1 \n \t execute build \n \t until a > 0 [end]|[start] option : \n \t init b >= 2 \n \t execute jump \n \t until b < 1 [end]|[start] policy b := \n \t if b <= x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != x : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 2 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a < x \n \t execute jump \n \t until b < 1 [end]|[start] policy a := \n \t if a == 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until a == 0 [end]|[start] policy a := \n \t if iron >= y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= x \n \t execute find \n \t until a > y [end]|[start] policy a := \n \t if b == 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 1 \n \t execute find \n \t until a >= y [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= y \n \t execute use \n \t until b <= 0 [end]|[start] policy b := \n \t if iron > y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a >= y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= 1 \n \t execute use \n \t until position >= 0 [end]|[start] policy a := \n \t if b < 0 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == y \n \t execute find \n \t until a > 1 [end]|[start] policy a := \n \t if b <= y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init y \n \t execute find \n \t until inventory > 1 [end]|[start] policy a := \n \t if position < 2 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute find \n [end]|[start] policy b := \n \t if a > 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b < y \n \t execute build \n \t until position != 2 [end]|[start] policy b := \n \t if a != x : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 1 \n \t execute run \n \t until position != 0 [end]|[start] policy b := \n \t if a <= y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b > y \n \t execute find \n \t until position == 2 [end]|[start] option : \n \t init position > 2 \n \t execute use \n \t until inventory <= y [end]|[start] option : \n \t init inventory >= 2 \n \t execute jump \n \t until position >= 0 [end]|[start] policy b := \n \t if position == y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute build \n \t until a < y [end]|[start] option : \n \t init position > y \n \t execute run \n \t until position != x [end]|[start] policy b := \n \t if b >= 1 : \n \t execute find \n [end]|[start] policy b := \n \t if iron : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b < y \n \t execute jump \n \t until b == 0 [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position <= x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 1 \n \t execute find \n \t until b < 0 [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 0 \n \t execute jump \n \t until a < 1 [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until b <= 2 [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until inventory >= x [end]|[start] option : \n \t init b == 1 \n \t execute find \n \t until a > 0 [end]|[start] option : \n \t init inventory == x \n \t execute use \n \t until position > x [end]|[start] option : \n \t init y \n \t execute build \n \t until b >= 0 [end]|[start] policy b := \n \t if a != 1 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= 2 \n \t execute run \n \t until position <= y [end]|[start] policy a := \n \t if iron < y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != x : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position <= y : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until b <= 0 [end]|[start] option : \n \t init b < 0 \n \t execute find \n \t until b != 1 [end]|[start] option : \n \t init position != 2 \n \t execute build \n \t until position <= 2 [end]|[start] policy b := \n \t if iron <= y : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 2 \n \t execute build \n \t until position >= x [end]|[start] policy a := \n \t if b == 0 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 2 \n \t execute run \n \t until position == 2 [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until b >= 0 [end]|[start] policy a := \n \t if b <= 1 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > x : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until b < y [end]|[start] policy a := \n \t if a == y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 2 \n \t execute jump \n \t until b >= y [end]|[start] option : \n \t init a > 1 \n \t execute run \n \t until position != 0 [end]|[start] option : \n \t init inventory == y \n \t execute use \n \t until a [end]|[start] policy b := \n \t if iron != y : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 2 \n \t execute build \n \t until b != y [end]|[start] policy b := \n \t if b < y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b > x : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= x \n \t execute jump \n \t until b != 2 [end]|[start] option : \n \t init b == x \n \t execute find \n \t until inventory > 1 [end]|[start] policy b := \n \t if a >= x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= y : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until b > 1 [end]|[start] option : \n \t init b > y \n \t execute jump \n \t until b == 1 [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a > x \n \t execute run \n \t until a <= x [end]|[start] policy b := \n \t if b <= x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until inventory < 1 [end]|[start] policy a := \n \t if iron > x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= x \n \t execute find \n \t until inventory <= 0 [end]|[start] policy b := \n \t if position : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b > y : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != x \n \t execute use \n \t until inventory != x [end]|[start] policy a := \n \t if a <= x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= y \n \t execute find \n \t until b >= 2 [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until inventory [end]|[start] option : \n \t init position <= 1 \n \t execute use \n \t until position == 1 [end]|[start] option : \n \t init a >= 2 \n \t execute run \n \t until inventory >= 0 [end]|[start] policy a := \n \t if b == 0 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a >= y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a == y \n \t execute run \n \t until a >= 1 [end]|[start] option : \n \t init position < 1 \n \t execute build \n \t until inventory <= 0 [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until x [end]|[start] option : \n \t init inventory < x \n \t execute build \n \t until a >= 1 [end]|[start] option : \n \t init a == 0 \n \t execute build \n \t until inventory [end]|[start] policy a := \n \t if position > 1 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > y \n \t execute build \n \t until b == 0 [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until position <= 2 [end]|[start] policy a := \n \t if position == 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until b > 0 [end]|[start] policy a := \n \t if b > 1 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until a > 2 [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until b >= 0 [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until position == 2 [end]|[start] policy a := \n \t if position >= x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b > 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until inventory > 2 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron > x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position == x \n \t execute build \n \t until b <= 2 [end]|[start] option : \n \t init position < x \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until position <= 1 [end]|[start] option : \n \t init b >= y \n \t execute run \n \t until inventory != 0 [end]|[start] policy b := \n \t if a != 0 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == 1 \n \t execute find \n \t until a >= 0 [end]|[start] policy b := \n \t if iron != y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init x \n \t execute jump \n \t until position != x [end]|[start] option : \n \t init a < x \n \t execute run \n \t until b >= y [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until b != 0 [end]|[start] option : \n \t init b >= 1 \n \t execute find \n \t until inventory >= 1 [end]|[start] option : \n \t init a > 0 \n \t execute run \n \t until inventory <= y [end]|[start] policy b := \n \t if a != 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until position <= y [end]|[start] policy b := \n \t if iron > x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= 1 \n \t execute jump \n \t until position != y [end]|[start] option : \n \t init position >= x \n \t execute jump \n \t until inventory == 1 [end]|[start] policy a := \n \t if a < y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute use \n \t until a != 1 [end]|[start] policy b := \n \t if iron != x : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until b != 0 [end]|[start] policy a := \n \t if position != y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 0 \n \t execute jump \n \t until position >= x [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until inventory < 0 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 1 \n \t execute find \n \t until b >= 2 [end]|[start] option : \n \t init inventory <= 0 \n \t execute run \n \t until b <= y [end]|[start] option : \n \t init a == 1 \n \t execute use \n \t until b <= 1 [end]|[start] option : \n \t init a > 0 \n \t execute build \n \t until inventory == x [end]|[start] option : \n \t init a >= y \n \t execute use \n \t until position <= 0 [end]|[start] policy a := \n \t if position <= 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position == x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b <= x : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until b >= y [end]|[start] option : \n \t init inventory > x \n \t execute find \n \t until inventory != 1 [end]|[start] policy a := \n \t if a : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 2 \n \t execute jump \n \t until position <= 1 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= y \n \t execute jump \n \t until a > x [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until b > x [end]|[start] policy a := \n \t if a >= 0 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < y : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= y \n \t execute find \n \t until inventory == x [end]|[start] option : \n \t init inventory >= 2 \n \t execute jump \n \t until a >= 0 [end]|[start] option : \n \t init position > y \n \t execute use \n \t until b != 2 [end]|[start] option : \n \t init position > 0 \n \t execute run \n \t until a <= y [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until b != 1 [end]|[start] option : \n \t init b != 0 \n \t execute jump \n \t until b == 0 [end]|[start] policy b := \n \t if a == 2 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 1 \n \t execute use \n \t until a != 2 [end]|[start] option : \n \t init position == x \n \t execute jump \n \t until a != 1 [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until b >= y [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != y : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 2 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 0 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 2 \n \t execute jump \n \t until inventory <= 0 [end]|[start] policy a := \n \t if a <= 1 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 2 \n \t execute find \n \t until b != y [end]|[start] policy a := \n \t if a > y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a <= y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > y \n \t execute find \n \t until a > 2 [end]|[start] option : \n \t init inventory <= y \n \t execute run \n \t until a > 2 [end]|[start] option : \n \t init position <= 2 \n \t execute use \n \t until b >= 2 [end]|[start] policy a := \n \t if a == 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 0 \n \t execute run \n \t until a < x [end]|[start] policy b := \n \t if b < 0 : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b == 2 \n \t execute run \n \t until b <= 2 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 2 \n \t execute build \n \t until inventory <= 1 [end]|[start] option : \n \t init position <= 0 \n \t execute run \n \t until inventory <= 2 [end]|[start] option : \n \t init b >= 1 \n \t execute jump \n \t until b != x [end]|[start] policy b := \n \t if b == y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until a >= 0 [end]|[start] policy a := \n \t if position != x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b == y : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 1 \n \t execute jump \n \t until position >= 2 [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until a > y [end]|[start] policy a := \n \t if b <= x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b != x : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until inventory < x [end]|[start] policy a := \n \t if a > 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until inventory >= 1 [end]|[start] option : \n \t init b == x \n \t execute find \n \t until b < x [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until inventory != 0 [end]|[start] policy a := \n \t if b == 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= x : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a \n \t execute run \n \t until position > y [end]|[start] policy a := \n \t if b > 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a == y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 1 \n \t execute use \n \t until b < 2 [end]|[start] policy b := \n \t if iron <= y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until position == 2 [end]|[start] option : \n \t init inventory != 0 \n \t execute run \n \t until position <= y [end]|[start] policy a := \n \t if iron != 1 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until b < 2 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == x \n \t execute use \n \t until position < 1 [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until b <= x [end]|[start] option : \n \t init a > 1 \n \t execute run \n \t until position > 2 [end]|[start] option : \n \t init a >= y \n \t execute find \n \t until b != 2 [end]|[start] option : \n \t init inventory < 1 \n \t execute use \n \t until a [end]|[start] policy b := \n \t if b < y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until a != 0 [end]|[start] option : \n \t init b > 0 \n \t execute run \n \t until a < x [end]|[start] policy b := \n \t if position < x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron != y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until a <= 2 [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != x \n \t execute build \n \t until a == y [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until a == y [end]|[start] policy a := \n \t if a > 2 : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position < 2 \n \t execute find \n \t until b <= y [end]|[start] policy a := \n \t if iron <= y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until position < 0 [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until position <= 0 [end]|[start] option : \n \t init inventory >= 0 \n \t execute use \n \t until a == y [end]|[start] policy b := \n \t if position <= y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory > x \n \t execute use \n \t until inventory > x [end]|[start] policy a := \n \t if position != y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < x \n \t execute build \n \t until a < 1 [end]|[start] policy a := \n \t if position != 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 2 \n \t execute run \n \t until position < 2 [end]|[start] policy a := \n \t if position <= 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position != y \n \t execute jump \n \t until inventory <= 2 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 1 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute use \n [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position > 0 \n \t execute jump \n \t until position >= 1 [end]|[start] policy a := \n \t if a == x : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position != 1 \n \t execute jump \n \t until b < x [end]|[start] policy a := \n \t if position == y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position >= y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until a [end]|[start] policy a := \n \t if position <= 2 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= y \n \t execute jump \n \t until a >= 1 [end]|[start] policy b := \n \t if position > x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b <= x \n \t execute run \n \t until position != 0 [end]|[start] option : \n \t init b == y \n \t execute find \n \t until b == 1 [end]|[start] policy a := \n \t if b < x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != x : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= y \n \t execute jump \n \t until a > 0 [end]|[start] option : \n \t init position != x \n \t execute jump \n \t until a < y [end]|[start] policy a := \n \t if position == 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until position == 1 [end]|[start] policy a := \n \t if position <= x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= y \n \t execute run \n \t until b != 0 [end]|[start] option : \n \t init position == y \n \t execute run \n \t until position <= y [end]|[start] policy b := \n \t if a != 1 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron == y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron != 1 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 1 \n \t execute jump \n \t until b != x [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until a <= 2 [end]|[start] policy a := \n \t if b == y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != x : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position == 2 \n \t execute run \n \t until inventory >= 1 [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until position != y [end]|[start] option : \n \t init inventory <= 2 \n \t execute use \n \t until a == x [end]|[start] option : \n \t init inventory == 1 \n \t execute run \n \t until a >= 0 [end]|[start] policy a := \n \t if a >= y : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until inventory == 0 [end]|[start] policy a := \n \t if position > 0 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 0 \n \t execute use \n \t until inventory == y [end]|[start] policy a := \n \t if position < 1 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < x \n \t execute find \n \t until position >= 1 [end]|[start] policy a := \n \t if a > x : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > y : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a \n \t execute run \n \t until inventory <= 1 [end]|[start] option : \n \t init a < 2 \n \t execute jump \n \t until b > 0 [end]|[start] policy a := \n \t if position >= 1 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b == y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a > y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until position != y [end]|[start] option : \n \t init position != x \n \t execute run \n \t until position != 1 [end]|[start] policy a := \n \t if a < y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until b <= x [end]|[start] policy b := \n \t if position == x : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == x \n \t execute use \n \t until a >= 0 [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory \n \t execute use \n \t until inventory != x [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until a <= 1 [end]|[start] policy a := \n \t if a == 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b \n \t execute run \n \t until a != x [end]|[start] policy b := \n \t if a != 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute find \n \t until position != 0 [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 2 \n \t execute run \n \t until inventory < y [end]|[start] policy a := \n \t if a > y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until inventory != y [end]|[start] option : \n \t init b == 0 \n \t execute run \n \t until a >= y [end]|[start] option : \n \t init inventory > 0 \n \t execute build \n \t until position == 0 [end]|[start] policy a := \n \t if b != x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until inventory != y [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until inventory == 1 [end]|[start] policy a := \n \t if position < 2 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until position != 2 [end]|[start] option : \n \t init a > y \n \t execute use \n \t until position < x [end]|[start] policy a := \n \t if iron : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b < y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 2 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 2 \n \t execute run \n \t until position [end]|[start] policy a := \n \t if b >= x : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position >= y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until b <= 0 [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until inventory > 0 [end]|[start] option : \n \t init position <= 2 \n \t execute jump \n \t until position > x [end]|[start] option : \n \t init inventory == 2 \n \t execute use \n \t until a [end]|[start] policy b := \n \t if b < 0 : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 2 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b != y \n \t execute use \n \t until position >= x [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a > 1 \n \t execute build \n \t until position > y [end]|[start] option : \n \t init inventory == 1 \n \t execute use \n \t until a < 1 [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until inventory [end]|[start] option : \n \t init a <= 1 \n \t execute find \n \t until position == 2 [end]|[start] option : \n \t init inventory != y \n \t execute build \n \t until inventory < y [end]|[start] option : \n \t init b == y \n \t execute run \n \t until a [end]|[start] option : \n \t init a >= y \n \t execute build \n \t until a < 1 [end]|[start] option : \n \t init position != 2 \n \t execute find \n \t until b >= y [end]|[start] option : \n \t init a > 0 \n \t execute find \n \t until position == 2 [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until a > y [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until a != 2 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a >= x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b != x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= 2 \n \t execute build \n \t until inventory != y [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a > y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until inventory == x [end]|[start] policy b := \n \t if b > y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= x : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b == 2 : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b > x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == x \n \t execute build \n \t until inventory != 0 [end]|[start] option : \n \t init inventory <= 1 \n \t execute jump \n \t until inventory <= 1 [end]|[start] policy a := \n \t if a != y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position == y \n \t execute find \n \t until a >= 2 [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < y : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b == x \n \t execute build \n \t until inventory < y [end]|[start] option : \n \t init position == y \n \t execute run \n \t until b != 0 [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until position > 0 [end]|[start] policy a := \n \t if iron == y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 0 \n \t execute use \n \t until b != x [end]|[start] policy a := \n \t if a > 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute build \n \t until position == 1 [end]|[start] option : \n \t init inventory \n \t execute build \n \t until position > y [end]|[start] policy a := \n \t if a == y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b != 1 \n \t execute run \n \t until inventory >= 2 [end]|[start] option : \n \t init b != 1 \n \t execute use \n \t until inventory != y [end]|[start] policy a := \n \t if iron > y : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a >= x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a > x \n \t execute build \n \t until inventory < y [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 2 \n \t execute run \n \t until b != 2 [end]|[start] policy a := \n \t if a > 0 : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != x \n \t execute build \n \t until inventory > 0 [end]|[start] policy a := \n \t if b > 2 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != 1 \n \t execute use \n \t until position < 2 [end]|[start] policy a := \n \t if b >= y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron != y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a <= 2 \n \t execute run \n \t until b != 1 [end]|[start] option : \n \t init a != 0 \n \t execute jump \n \t until inventory > x [end]|[start] option : \n \t init position >= 2 \n \t execute use \n \t until b > y [end]|[start] policy a := \n \t if iron >= y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position \n \t execute find \n \t until b > y [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 2 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b > x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 1 \n \t execute use \n \t until b > y [end]|[start] option : \n \t init a == x \n \t execute jump \n \t until position < 2 [end]|[start] policy b := \n \t if iron >= y : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position > x \n \t execute run \n \t until inventory != 0 [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until position > x [end]|[start] option : \n \t init a == y \n \t execute build \n \t until inventory <= 2 [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until b != x [end]|[start] policy a := \n \t if position == 0 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == y : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b >= x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= y : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until position < 2 [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until position <= y [end]|[start] option : \n \t init position <= 2 \n \t execute build \n \t until b == x [end]|[start] option : \n \t init inventory > x \n \t execute run \n \t until inventory == 1 [end]|[start] policy a := \n \t if position != 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a \n \t execute use \n \t until a > y [end]|[start] policy a := \n \t if b != 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init b == x \n \t execute build \n \t until inventory <= 1 [end]|[start] policy b := \n \t if b : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 1 \n \t execute build \n \t until b != 2 [end]|[start] option : \n \t init position != 1 \n \t execute jump \n \t until a == y [end]|[start] policy a := \n \t if b != 0 : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until b == 2 [end]|[start] policy a := \n \t if b != 0 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > y \n \t execute build \n \t until a == y [end]|[start] policy b := \n \t if position != y : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 0 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b != y \n \t execute run \n \t until a <= 2 [end]|[start] policy a := \n \t if a > 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute use \n \t until a < 0 [end]|[start] option : \n \t init a > 0 \n \t execute use \n \t until a == 2 [end]|[start] policy b := \n \t if b < x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a != x \n \t execute build \n \t until b >= 2 [end]|[start] option : \n \t init position < x \n \t execute build \n \t until b <= y [end]|[start] policy b := \n \t if position <= y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == x \n \t execute jump \n \t until position >= x [end]|[start] policy a := \n \t if a <= x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != y : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 2 \n \t execute build \n \t until position < 2 [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory > 2 \n \t execute jump \n \t until inventory >= y [end]|[start] policy b := \n \t if a < x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute find \n \t until inventory >= 2 [end]|[start] option : \n \t init y \n \t execute find \n \t until a <= 0 [end]|[start] option : \n \t init a > y \n \t execute use \n \t until inventory >= 2 [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 0 \n \t execute find \n \t until inventory <= y [end]|[start] policy a := \n \t if position >= y : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= 0 \n \t execute use \n \t until b == 1 [end]|[start] policy a := \n \t if b < 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until position != 2 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 0 \n \t execute use \n \t until a <= y [end]|[start] policy b := \n \t if a == y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 0 \n \t execute run \n \t until b < 2 [end]|[start] option : \n \t init position <= x \n \t execute jump \n \t until position <= x [end]|[start] option : \n \t init inventory != 0 \n \t execute find \n \t until b < 2 [end]|[start] option : \n \t init a >= x \n \t execute find \n \t until inventory < y [end]|[start] policy a := \n \t if b <= 0 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 1 \n \t execute jump \n \t until inventory == x [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until position != y [end]|[start] policy a := \n \t if a == 1 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position != y \n \t execute build \n \t until b != x [end]|[start] option : \n \t init a > y \n \t execute run \n \t until inventory >= 1 [end]|[start] option : \n \t init b == 2 \n \t execute find \n \t until a <= 0 [end]|[start] policy a := \n \t if position >= 2 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= y \n \t execute find \n \t until a == x [end]|[start] policy b := \n \t if position < y : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until position != y [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until inventory != 1 [end]|[start] policy a := \n \t if b == x : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b != y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > x \n \t execute build \n \t until a != 2 [end]|[start] policy b := \n \t if a >= 1 : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory \n \t execute run \n \t until position != y [end]|[start] policy a := \n \t if a != 1 : \n \t execute find \n [end]|[start] option : \n \t init position != x \n \t execute build \n \t until a < 1 [end]|[start] option : \n \t init b != x \n \t execute use \n \t until inventory <= 0 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 1 \n \t execute find \n \t until inventory >= 0 [end]|[start] policy a := \n \t if b < 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until position != 0 [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until a < 1 [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until b == 0 [end]|[start] option : \n \t init b != 2 \n \t execute use \n \t until position <= 1 [end]|[start] policy b := \n \t if b : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until inventory == 0 [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until position == 1 [end]|[start] option : \n \t init position < 0 \n \t execute run \n \t until position >= y [end]|[start] policy a := \n \t if a >= 0 : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 1 \n \t execute find \n \t until inventory <= 0 [end]|[start] policy b := \n \t if position != x : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 1 \n \t execute run \n \t until inventory <= 1 [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until inventory >= x [end]|[start] option : \n \t init b >= 2 \n \t execute find \n \t until a <= 0 [end]|[start] option : \n \t init b == y \n \t execute jump \n \t until a <= x [end]|[start] policy a := \n \t if iron != 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 2 \n \t execute find \n \t until inventory > 0 [end]|[start] policy b := \n \t if a < x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until inventory < 2 [end]|[start] option : \n \t init a > 2 \n \t execute build \n \t until inventory >= 1 [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until inventory == x [end]|[start] policy a := \n \t if b < x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= 1 \n \t execute jump \n \t until b != 2 [end]|[start] option : \n \t init inventory > x \n \t execute build \n \t until position >= 2 [end]|[start] policy a := \n \t if position != 2 : \n \t execute run \n [end]|[start] option : \n \t init position < y \n \t execute use \n \t until a > x [end]|[start] option : \n \t init a <= x \n \t execute use \n \t until position >= 1 [end]|[start] option : \n \t init b != 1 \n \t execute run \n \t until a > y [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until inventory != y [end]|[start] policy b := \n \t if b <= y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory != 1 \n \t execute run \n \t until b < 1 [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 2 \n \t execute run \n \t until position >= 2 [end]|[start] option : \n \t init inventory == 0 \n \t execute jump \n \t until inventory < y [end]|[start] policy a := \n \t if position < 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= x \n \t execute run \n \t until a == 2 [end]|[start] option : \n \t init a == x \n \t execute find \n \t until position != y [end]|[start] policy a := \n \t if position <= y : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron != 1 : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if b == x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > y \n \t execute build \n \t until x [end]|[start] policy b := \n \t if b < x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron != 0 : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron == x : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b < y \n \t execute build \n \t until b > 1 [end]|[start] option : \n \t init a != 0 \n \t execute run \n \t until position < 2 [end]|[start] option : \n \t init inventory != 2 \n \t execute run \n \t until inventory > y [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position < x : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position >= y : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b != 1 \n \t execute use \n \t until b < 2 [end]|[start] option : \n \t init inventory > 0 \n \t execute build \n \t until b == y [end]|[start] policy b := \n \t if position < x : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until b > y [end]|[start] option : \n \t init position < 1 \n \t execute jump \n \t until position == 2 [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until inventory >= 1 [end]|[start] policy b := \n \t if iron >= x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 1 \n \t execute build \n \t until b >= 0 [end]|[start] policy a := \n \t if position > y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b \n \t execute find \n \t until position >= 1 [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until inventory <= 2 [end]|[start] option : \n \t init a <= 0 \n \t execute find \n \t until b != y [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until position > 2 [end]|[start] policy a := \n \t if position : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b \n \t execute use \n \t until position == y [end]|[start] policy a := \n \t if position == 1 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= 0 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position <= 1 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute build \n \t until x [end]|[start] option : \n \t init inventory > y \n \t execute use \n \t until b == 0 [end]|[start] policy a := \n \t if iron != x : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != y : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron <= 2 : \n \t execute build \n [end]|[start] option : \n \t init a == 0 \n \t execute run \n \t until inventory >= 2 [end]|[start] option : \n \t init inventory > 1 \n \t execute run \n \t until position >= 1 [end]|[start] option : \n \t init b >= 1 \n \t execute use \n \t until a == 1 [end]|[start] option : \n \t init a < 1 \n \t execute find \n \t until position >= 0 [end]|[start] option : \n \t init b > 2 \n \t execute build \n \t until a < 1 [end]|[start] option : \n \t init b != 0 \n \t execute jump \n \t until inventory > 1 [end]|[start] option : \n \t init b >= x \n \t execute build \n \t until b >= 0 [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until a <= 1 [end]|[start] option : \n \t init b != 2 \n \t execute jump \n \t until position > 1 [end]|[start] policy b := \n \t if a == x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position < x : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= x : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a == y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= x \n \t execute use \n \t until inventory == 0 [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until a [end]|[start] policy b := \n \t if iron == y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute find \n \t until position > 2 [end]|[start] policy b := \n \t if iron > x : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init x \n \t execute use \n \t until b != y [end]|[start] option : \n \t init inventory < 1 \n \t execute build \n \t until position < y [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until a >= 2 [end]|[start] option : \n \t init b <= 0 \n \t execute find \n \t until a [end]|[start] policy b := \n \t if iron >= x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until b < 1 [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until a <= y [end]|[start] policy a := \n \t if position >= 1 : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= x \n \t execute jump \n \t until position >= 2 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b != x \n \t execute run \n \t until a > 2 [end]|[start] policy b := \n \t if b >= x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 1 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron == x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron < y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 2 \n \t execute build \n \t until inventory == 0 [end]|[start] option : \n \t init inventory >= x \n \t execute jump \n \t until inventory != 2 [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until b <= 0 [end]|[start] option : \n \t init position < x \n \t execute run \n \t until position == 2 [end]|[start] policy a := \n \t if a : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until inventory != 0 [end]|[start] policy a := \n \t if b != 0 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until a != 2 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < y \n \t execute use \n \t until b >= x [end]|[start] policy a := \n \t if position < 1 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory >= y \n \t execute run \n \t until position <= 0 [end]|[start] policy b := \n \t if a >= y : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a != 0 \n \t execute use \n \t until position < 0 [end]|[start] option : \n \t init b != 1 \n \t execute jump \n \t until a != 1 [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until inventory >= 1 [end]|[start] option : \n \t init position >= y \n \t execute use \n \t until a < y [end]|[start] option : \n \t init b == 0 \n \t execute build \n \t until position >= y [end]|[start] policy a := \n \t if iron >= y : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory == 0 \n \t execute find \n \t until inventory >= 2 [end]|[start] option : \n \t init position == 0 \n \t execute find \n \t until inventory [end]|[start] option : \n \t init a == 1 \n \t execute find \n \t until a != y [end]|[start] policy a := \n \t if iron > 0 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 2 \n \t execute find \n \t until inventory != 0 [end]|[start] option : \n \t init b >= 1 \n \t execute run \n \t until x [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until b < 2 [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until b < 2 [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 1 \n \t execute run \n \t until position >= 2 [end]|[start] option : \n \t init b >= x \n \t execute run \n \t until a > 1 [end]|[start] policy a := \n \t if b <= x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a == x \n \t execute build \n \t until a < 2 [end]|[start] policy a := \n \t if position >= x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b == y \n \t execute use \n \t until b <= 2 [end]|[start] option : \n \t init position == 1 \n \t execute use \n \t until a <= 1 [end]|[start] policy b := \n \t if b == x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 2 \n \t execute build \n \t until inventory == y [end]|[start] policy a := \n \t if position >= x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != y : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 1 \n \t execute build \n \t until inventory != x [end]|[start] policy a := \n \t if position <= 2 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 0 \n \t execute use \n \t until a < 1 [end]|[start] policy a := \n \t if b == 1 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute use \n \t until a != 1 [end]|[start] policy a := \n \t if position == y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a < y \n \t execute run \n \t until b <= y [end]|[start] policy a := \n \t if b >= x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != y : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 0 \n \t execute find \n \t until a > y [end]|[start] option : \n \t init position != x \n \t execute find \n \t until position < y [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b == y \n \t execute use \n \t until inventory == y [end]|[start] option : \n \t init a != 2 \n \t execute build \n \t until a != 0 [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until inventory == y [end]|[start] policy a := \n \t if b : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= x \n \t execute run \n \t until a < 2 [end]|[start] policy a := \n \t if a <= y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b != 0 \n \t execute build \n \t until position < y [end]|[start] policy b := \n \t if a != 2 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until inventory <= x [end]|[start] option : \n \t init a > y \n \t execute build \n \t until a != 0 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < y \n \t execute build \n \t until b == y [end]|[start] option : \n \t init a <= 2 \n \t execute use \n \t until position != 2 [end]|[start] option : \n \t init inventory == 2 \n \t execute jump \n \t until position >= 2 [end]|[start] policy b := \n \t if b == x : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b < x \n \t execute use \n \t until inventory >= x [end]|[start] policy a := \n \t if iron >= 0 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until a < y [end]|[start] option : \n \t init position < x \n \t execute build \n \t until inventory > y [end]|[start] policy b := \n \t if iron >= x : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until b > 0 [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until inventory > x [end]|[start] option : \n \t init position == y \n \t execute run \n \t until position < y [end]|[start] policy b := \n \t if a != 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until inventory > 1 [end]|[start] policy a := \n \t if position > 2 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 0 \n \t execute build \n \t until inventory == x [end]|[start] option : \n \t init a > 2 \n \t execute run \n \t until position <= 2 [end]|[start] policy b := \n \t if iron >= y : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until position < 2 [end]|[start] option : \n \t init a >= 1 \n \t execute jump \n \t until inventory == y [end]|[start] policy a := \n \t if a >= y : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= 2 \n \t execute find \n \t until b <= x [end]|[start] policy a := \n \t if a >= x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == 0 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init position > x \n \t execute build \n \t until b <= 1 [end]|[start] option : \n \t init inventory > y \n \t execute run \n \t until position == 0 [end]|[start] policy b := \n \t if iron <= x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b == 2 \n \t execute build \n \t until position == x [end]|[start] policy b := \n \t if iron > y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position > y : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 2 \n \t execute run \n \t until b == 2 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == y \n \t execute build \n \t until b <= y [end]|[start] policy a := \n \t if position >= 2 : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b == x \n \t execute use \n \t until a >= 1 [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until a <= 1 [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until inventory > 1 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute run \n \t until inventory > x [end]|[start] policy a := \n \t if a != 1 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b <= y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until b >= 2 [end]|[start] option : \n \t init b >= y \n \t execute run \n \t until position < 1 [end]|[start] policy a := \n \t if a <= x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b != y \n \t execute find \n \t until a >= x [end]|[start] option : \n \t init b > y \n \t execute use \n \t until position <= 2 [end]|[start] policy b := \n \t if position == x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 2 \n \t execute jump \n \t until a < 2 [end]|[start] policy a := \n \t if position < 1 : \n \t execute jump \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == x \n \t execute build \n \t until inventory < 0 [end]|[start] policy a := \n \t if position > y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 2 \n \t execute build \n \t until position == 2 [end]|[start] policy b := \n \t if iron < x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 1 \n \t execute find \n \t until a != y [end]|[start] policy a := \n \t if position <= 2 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > x : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 1 \n \t execute jump \n \t until position > 1 [end]|[start] policy a := \n \t if position > 1 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 1 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 0 \n \t execute build \n \t until b > y [end]|[start] policy b := \n \t if position > x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a != x \n \t execute run \n \t until inventory < 2 [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until b == x [end]|[start] option : \n \t init a == y \n \t execute find \n \t until a != 2 [end]|[start] policy a := \n \t if a < 1 : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= y \n \t execute run \n \t until position > 0 [end]|[start] policy b := \n \t if b <= x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 0 \n \t execute run \n \t until inventory > x [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until inventory >= 2 [end]|[start] policy a := \n \t if b == 2 : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b < x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a == x : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron != x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= y \n \t execute find \n \t until b < y [end]|[start] option : \n \t init b > 1 \n \t execute build \n \t until a > x [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until b >= 0 [end]|[start] option : \n \t init b < y \n \t execute use \n \t until inventory == 2 [end]|[start] policy a := \n \t if b < 0 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until position >= x [end]|[start] option : \n \t init a != 0 \n \t execute find \n \t until b != 2 [end]|[start] option : \n \t init b != y \n \t execute run \n \t until a != y [end]|[start] option : \n \t init a != 1 \n \t execute build \n \t until b >= 2 [end]|[start] policy a := \n \t if position != 0 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= x : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position >= 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 2 \n \t execute run \n \t until position != 1 [end]|[start] policy a := \n \t if a > 0 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= 1 \n \t execute build \n \t until b < 1 [end]|[start] policy b := \n \t if position < x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b == x \n \t execute run \n \t until inventory <= x [end]|[start] option : \n \t init a == 2 \n \t execute build \n \t until a < 2 [end]|[start] policy a := \n \t if a == y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position < x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron >= 1 : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until position >= 1 [end]|[start] policy a := \n \t if position == 0 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute find \n \t until a < x [end]|[start] option : \n \t init inventory == x \n \t execute use \n \t until inventory <= x [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > 1 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b > y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if iron == 0 : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > y \n \t execute jump \n \t until position != 1 [end]|[start] policy a := \n \t if a != 1 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute find \n \t until a >= 0 [end]|[start] policy a := \n \t if position > y : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until inventory > 1 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a > x \n \t execute find \n \t until position > 2 [end]|[start] option : \n \t init inventory >= x \n \t execute run \n \t until position != y [end]|[start] policy a := \n \t if a != 1 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 1 \n \t execute jump \n \t until position <= 2 [end]|[start] policy a := \n \t if b <= y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 2 \n \t execute jump \n \t until a != 1 [end]|[start] policy b := \n \t if a <= x : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > y : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b <= x : \n \t execute jump \n [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 2 \n \t execute run \n \t until inventory <= y [end]|[start] policy a := \n \t if iron < y : \n \t execute jump \n [end]|[start] option : \n \t init position > x \n \t execute use \n \t until position != y [end]|[start] policy b := \n \t if a == 1 : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 0 : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron >= x : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron != x : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a <= 1 : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until position == x [end]|[start] option : \n \t init position <= 2 \n \t execute run \n \t until position > x [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until position == 0 [end]|[start] policy b := \n \t if a < x : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > y : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute run \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= x \n \t execute use \n \t until position < x [end]|[start] policy b := \n \t if b > x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 0 \n \t execute run \n \t until inventory < y [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 0 \n \t execute use \n \t until inventory <= 2 [end]|[start] option : \n \t init inventory <= x \n \t execute build \n \t until b < y [end]|[start] option : \n \t init inventory != y \n \t execute jump \n \t until a != y [end]|[start] policy a := \n \t if b >= y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 2 \n \t execute run \n \t until a == y [end]|[start] option : \n \t init position > y \n \t execute run \n \t until inventory > y [end]|[start] policy a := \n \t if iron > y : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 0 \n \t execute build \n \t until position < 1 [end]|[start] policy a := \n \t if a == 2 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= 0 \n \t execute run \n \t until a [end]|[start] policy a := \n \t if b != y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position == y \n \t execute jump \n \t until inventory != x [end]|[start] option : \n \t init inventory != y \n \t execute jump \n \t until a <= 2 [end]|[start] policy a := \n \t if a > y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b == x : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > y : \n \t execute use \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > y : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= x \n \t execute use \n \t until a < 2 [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b < x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < y \n \t execute jump \n \t until inventory == 0 [end]|[start] policy a := \n \t if b > 2 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 2 \n \t execute build \n \t until position < 0 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b > 2 \n \t execute jump \n \t until inventory > x [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 1 \n \t execute use \n \t until a > x [end]|[start] policy a := \n \t if a < y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a < x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron >= y : \n \t execute jump \n elif a : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b != x : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a > y : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != y : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position <= y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > y \n \t execute jump \n \t until inventory < 1 [end]|[start] policy a := \n \t if b >= 0 : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a >= y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron <= y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= x \n \t execute jump \n \t until b >= y [end]|[start] policy b := \n \t if a != 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a != 2 \n \t execute find \n \t until b < 2 [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position == x \n \t execute use \n \t until position != 0 [end]|[start] policy a := \n \t if a <= x : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < x \n \t execute build \n \t until b >= 0 [end]|[start] option : \n \t init inventory < y \n \t execute run \n \t until a <= 2 [end]|[start] option : \n \t init b != x \n \t execute run \n \t until x [end]|[start] option : \n \t init a <= x \n \t execute run \n \t until position > x [end]|[start] option : \n \t init a == 1 \n \t execute use \n \t until a < 2 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a > x \n \t execute run \n \t until inventory >= x [end]|[start] policy b := \n \t if position > x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory >= 0 \n \t execute build \n \t until position >= 0 [end]|[start] policy a := \n \t if a <= y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != 2 \n \t execute use \n \t until a != 0 [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until inventory < y [end]|[start] policy a := \n \t if iron == 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until position < 0 [end]|[start] policy b := \n \t if iron < y : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until position <= 1 [end]|[start] option : \n \t init position >= 2 \n \t execute find \n \t until a < x [end]|[start] policy a := \n \t if b >= x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position >= y : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 0 \n \t execute run \n \t until inventory < 2 [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until b < x [end]|[start] option : \n \t init b < x \n \t execute build \n \t until a < 2 [end]|[start] policy a := \n \t if a <= 2 : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until inventory [end]|[start] policy a := \n \t if iron >= x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position <= y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a == x : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 2 \n \t execute jump \n \t until position <= y [end]|[start] option : \n \t init b \n \t execute build \n \t until b != 2 [end]|[start] option : \n \t init position >= 1 \n \t execute build \n \t until b == 2 [end]|[start] policy a := \n \t if a == 1 : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b >= x : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 0 \n \t execute run \n \t until inventory <= y [end]|[start] policy a := \n \t if a : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a >= x : \n \t execute use \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if position > x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init b > 1 \n \t execute jump \n \t until a >= 2 [end]|[start] policy a := \n \t if b > x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= 2 \n \t execute run \n \t until b != y [end]|[start] policy a := \n \t if b : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < y \n \t execute find \n \t until a <= y [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until a == x [end]|[start] policy a := \n \t if a != 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until a < 2 [end]|[start] policy b := \n \t if b == 2 : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init a == 2 \n \t execute use \n \t until inventory <= 1 [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until position == 0 [end]|[start] policy a := \n \t if iron == y : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 2 \n \t execute run \n \t until b > 2 [end]|[start] policy b := \n \t if a < 1 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until position < y [end]|[start] option : \n \t init b < 2 \n \t execute run \n \t until position < 0 [end]|[start] policy a := \n \t if position == 0 : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b < x : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b > y \n \t execute use \n \t until inventory >= x [end]|[start] option : \n \t init b == 1 \n \t execute build \n \t until position == y [end]|[start] option : \n \t init inventory >= y \n \t execute jump \n \t until b < 2 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != x : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 1 \n \t execute run \n \t until inventory == 1 [end]|[start] option : \n \t init a > 2 \n \t execute jump \n \t until b < y [end]|[start] policy a := \n \t if b <= 1 : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position > 1 \n \t execute find \n \t until inventory <= 2 [end]|[start] option : \n \t init inventory >= 2 \n \t execute jump \n \t until inventory >= 2 [end]|[start] option : \n \t init b > y \n \t execute find \n \t until a < x [end]|[start] option : \n \t init a <= 2 \n \t execute jump \n \t until inventory != 2 [end]|[start] option : \n \t init position == 2 \n \t execute use \n \t until inventory [end]|[start] option : \n \t init b < 1 \n \t execute run \n \t until b <= 2 [end]|[start] policy a := \n \t if position > x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 1 \n \t execute jump \n \t until position >= y [end]|[start] option : \n \t init inventory == x \n \t execute find \n \t until inventory != y [end]|[start] policy b := \n \t if a > x : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b > x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position <= 0 \n \t execute use \n \t until b > 2 [end]|[start] policy a := \n \t if position > 0 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a != 0 \n \t execute use \n \t until a >= x [end]|[start] policy b := \n \t if position >= y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != y : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position == y \n \t execute run \n \t until position == 2 [end]|[start] policy b := \n \t if iron <= x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron != x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position == x : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until b >= 2 [end]|[start] policy a := \n \t if b != x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position > x : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 2 \n \t execute use \n \t until position >= 1 [end]|[start] policy a := \n \t if a <= y : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 0 \n \t execute run \n \t until a == 2 [end]|[start] policy b := \n \t if a < 0 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != y : \n \t execute build \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b >= 0 \n \t execute jump \n \t until b <= 0 [end]|[start] option : \n \t init position == 0 \n \t execute run \n \t until position > 0 [end]|[start] option : \n \t init a != x \n \t execute find \n \t until b > 1 [end]|[start] option : \n \t init b == 2 \n \t execute jump \n \t until position == y [end]|[start] policy b := \n \t if b > y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == x \n \t execute jump \n \t until a <= y [end]|[start] policy a := \n \t if b < y : \n \t execute run \n elif iron : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until a >= 0 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron < 2 : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > y : \n \t execute use \n [end]|[start] policy a := \n \t if b == y : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position >= x : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == 2 \n \t execute run \n \t until position != y [end]|[start] policy a := \n \t if position < 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a != 0 \n \t execute use \n \t until inventory == y [end]|[start] policy a := \n \t if position < y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a < y \n \t execute jump \n \t until a <= 2 [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a >= 0 \n \t execute run \n \t until b > 2 [end]|[start] policy a := \n \t if a > 2 : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until a <= y [end]|[start] policy a := \n \t if b <= y : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != x \n \t execute build \n \t until a >= 0 [end]|[start] option : \n \t init position != 2 \n \t execute jump \n \t until b == y [end]|[start] option : \n \t init position < y \n \t execute jump \n \t until y [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b > y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init position != 1 \n \t execute find \n \t until b > 0 [end]|[start] policy b := \n \t if a <= 2 : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init b != x \n \t execute use \n \t until inventory == 2 [end]|[start] policy b := \n \t if a != 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < y : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b > 1 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init b < 2 \n \t execute use \n \t until b >= 0 [end]|[start] policy b := \n \t if a != 0 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position == y : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a < 1 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 1 \n \t execute find \n \t until inventory == x [end]|[start] policy a := \n \t if b <= 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init position \n \t execute use \n \t until b == 0 [end]|[start] policy b := \n \t if iron : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory == 2 \n \t execute jump \n \t until a != y [end]|[start] option : \n \t init inventory < 1 \n \t execute use \n \t until b >= 0 [end]|[start] policy b := \n \t if b == y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a > x : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < y \n \t execute find \n \t until position >= 0 [end]|[start] option : \n \t init position \n \t execute jump \n \t until position < y [end]|[start] option : \n \t init inventory == 1 \n \t execute build \n \t until b < 2 [end]|[start] option : \n \t init position <= 0 \n \t execute jump \n \t until position != x [end]|[start] option : \n \t init inventory < 1 \n \t execute jump \n \t until position >= y [end]|[start] option : \n \t init inventory > y \n \t execute run \n \t until a < y [end]|[start] policy a := \n \t if iron == x : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == 2 : \n \t execute use \n [end]|[start] option : \n \t init b >= 2 \n \t execute run \n \t until inventory >= y [end]|[start] policy a := \n \t if position : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a >= x : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 2 \n \t execute build \n \t until position <= 0 [end]|[start] policy a := \n \t if iron >= 2 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init b == x \n \t execute use \n \t until a == x [end]|[start] policy a := \n \t if b == 0 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position < 0 : \n \t execute find \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if position <= y : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 2 \n \t execute jump \n \t until b != 2 [end]|[start] policy a := \n \t if position >= 0 : \n \t execute run \n elif a : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= x \n \t execute build \n \t until inventory < 0 [end]|[start] option : \n \t init position > y \n \t execute build \n \t until position >= 2 [end]|[start] policy a := \n \t if a < 1 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != y : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a != 2 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a != x : \n \t execute jump \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a != x \n \t execute jump \n \t until a <= 0 [end]|[start] policy a := \n \t if b : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 0 \n \t execute build \n \t until inventory != 2 [end]|[start] option : \n \t init b >= 1 \n \t execute build \n \t until position <= 2 [end]|[start] policy b := \n \t if position > x : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until position < x [end]|[start] policy a := \n \t if iron : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until position < y [end]|[start] policy b := \n \t if a >= x : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b < y : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 1 \n \t execute use \n \t until position < 1 [end]|[start] option : \n \t init a < 1 \n \t execute run \n \t until a == 2 [end]|[start] policy b := \n \t if iron > y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == 0 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy b := \n \t if a == 2 : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a <= x : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until inventory >= x [end]|[start] option : \n \t init b >= x \n \t execute find \n \t until inventory <= x [end]|[start] policy a := \n \t if b >= 2 : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position != y : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory != 0 \n \t execute build \n \t until position >= 0 [end]|[start] policy a := \n \t if b < x : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b < y : \n \t execute run \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init b < y \n \t execute use \n \t until inventory == x [end]|[start] policy a := \n \t if a : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a > y \n \t execute use \n \t until b == 2 [end]|[start] option : \n \t init b != 2 \n \t execute find \n \t until b < x [end]|[start] policy b := \n \t if position != y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a <= 0 \n \t execute find \n \t until b [end]|[start] policy b := \n \t if a >= y : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < 1 \n \t execute build \n \t until a > y [end]|[start] option : \n \t init inventory == x \n \t execute run \n \t until inventory == 0 [end]|[start] option : \n \t init b != 0 \n \t execute use \n \t until b < 0 [end]|[start] option : \n \t init a >= y \n \t execute run \n \t until b >= x [end]|[start] policy a := \n \t if a <= 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy b := \n \t if iron < y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == y \n \t execute run \n \t until inventory < 2 [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position > y \n \t execute use \n \t until b > 1 [end]|[start] option : \n \t init position != x \n \t execute run \n \t until inventory <= x [end]|[start] policy a := \n \t if b <= y : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position > 1 \n \t execute run \n \t until b != y [end]|[start] option : \n \t init b > 0 \n \t execute find \n \t until inventory >= x [end]|[start] option : \n \t init position > 2 \n \t execute build \n \t until y [end]|[start] policy a := \n \t if a == 2 : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 1 \n \t execute run \n \t until inventory <= 2 [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until a > 2 [end]|[start] policy b := \n \t if a == x : \n \t execute find \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position == y : \n \t execute find \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position <= y : \n \t execute jump \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 1 \n \t execute build \n \t until a == x [end]|[start] policy b := \n \t if iron <= y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a : \n \t execute find \n elif b : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position < x : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 2 : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != y \n \t execute build \n \t until position != 1 [end]|[start] policy a := \n \t if a < 0 : \n \t execute use \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b < 2 \n \t execute use \n \t until a <= 1 [end]|[start] policy b := \n \t if position < y : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == 0 : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < y \n \t execute use \n \t until b >= 1 [end]|[start] option : \n \t init a <= 1 \n \t execute jump \n \t until b > y [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until a [end]|[start] policy b := \n \t if a != 0 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b <= y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a > 0 \n \t execute find \n \t until b < x [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until a >= 1 [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until position < x [end]|[start] policy b := \n \t if iron >= x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until b != y [end]|[start] option : \n \t init inventory != y \n \t execute use \n \t until b > x [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until a < 0 [end]|[start] option : \n \t init inventory == 1 \n \t execute find \n \t until position != 2 [end]|[start] option : \n \t init b > x \n \t execute use \n \t until position < 2 [end]|[start] policy b := \n \t if iron < y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b == x : \n \t execute build \n elif a : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 1 \n \t execute find \n \t until position > x [end]|[start] option : \n \t init inventory >= y \n \t execute use \n \t until inventory > 0 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position == x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 0 : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a != y : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b == y : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == 0 \n \t execute jump \n \t until b > x [end]|[start] option : \n \t init b == y \n \t execute run \n \t until position <= x [end]|[start] option : \n \t init a < y \n \t execute run \n \t until a == 1 [end]|[start] option : \n \t init inventory < x \n \t execute jump \n \t until a [end]|[start] policy a := \n \t if a > 2 : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init position < 0 \n \t execute find \n \t until a > y [end]|[start] policy a := \n \t if position < x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a >= y \n \t execute use \n \t until inventory < 0 [end]|[start] policy a := \n \t if a >= y : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position != 1 \n \t execute run \n \t until position <= y [end]|[start] policy a := \n \t if a > x : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute jump \n \t until a >= x [end]|[start] policy a := \n \t if b > x : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron == 1 : \n \t execute use \n [end]|[start] policy b := \n \t if iron >= 1 : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= x \n \t execute use \n \t until position [end]|[start] option : \n \t init b > x \n \t execute jump \n \t until a > y [end]|[start] policy a := \n \t if position <= 1 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b == y : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory < 1 \n \t execute use \n \t until b [end]|[start] option : \n \t init inventory <= y \n \t execute run \n \t until b [end]|[start] option : \n \t init position >= x \n \t execute build \n \t until inventory != 2 [end]|[start] policy a := \n \t if iron : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a \n \t execute run \n \t until b < x [end]|[start] policy a := \n \t if a > y : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory == x \n \t execute use \n \t until inventory <= 1 [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron < y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory > 2 \n \t execute build \n \t until position >= y [end]|[start] option : \n \t init inventory != 2 \n \t execute jump \n \t until position < x [end]|[start] policy a := \n \t if iron != x : \n \t execute jump \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute jump \n elif position : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a <= y : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b <= y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= x \n \t execute run \n \t until a > x [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n [end]|[start] option : \n \t init b <= y \n \t execute find \n \t until b <= x [end]|[start] option : \n \t init b != 2 \n \t execute find \n \t until b == y [end]|[start] policy b := \n \t if iron < x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b <= y : \n \t execute jump \n elif position : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 0 \n \t execute run \n \t until position != 1 [end]|[start] policy a := \n \t if iron <= 0 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b != 0 \n \t execute run \n \t until inventory < x [end]|[start] option : \n \t init a < y \n \t execute run \n \t until position <= 1 [end]|[start] policy b := \n \t if position != y : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init y \n \t execute jump \n \t until position < y [end]|[start] option : \n \t init a == 2 \n \t execute jump \n \t until b == y [end]|[start] policy a := \n \t if b < y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= 1 \n \t execute find \n \t until inventory > 1 [end]|[start] option : \n \t init a >= y \n \t execute use \n \t until b > y [end]|[start] policy b := \n \t if a <= y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 2 \n \t execute find \n \t until inventory < x [end]|[start] option : \n \t init inventory <= y \n \t execute build \n \t until a == 1 [end]|[start] option : \n \t init position != y \n \t execute run \n \t until inventory >= 2 [end]|[start] policy b := \n \t if iron != x : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if a == y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b >= 0 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position != x \n \t execute find \n \t until b < 1 [end]|[start] policy b := \n \t if a < 1 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init position < 2 \n \t execute use \n \t until position <= 0 [end]|[start] policy a := \n \t if iron >= 1 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron > 0 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until inventory <= 2 [end]|[start] policy b := \n \t if position != x : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init position <= 0 \n \t execute build \n \t until position < y [end]|[start] option : \n \t init position < 2 \n \t execute find \n \t until b == 1 [end]|[start] policy a := \n \t if position <= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a <= y : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 1 \n \t execute jump \n \t until a != 1 [end]|[start] policy a := \n \t if a > x : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position != y \n \t execute use \n \t until position == x [end]|[start] option : \n \t init a == x \n \t execute build \n \t until a >= y [end]|[start] policy a := \n \t if a < y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a < 0 : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until inventory >= x [end]|[start] option : \n \t init b < y \n \t execute build \n \t until a <= 1 [end]|[start] policy a := \n \t if iron < 1 : \n \t execute build \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != y : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b != y \n \t execute use \n \t until position > 1 [end]|[start] policy b := \n \t if b == x : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init a == 1 \n \t execute build \n \t until position <= y [end]|[start] option : \n \t init a <= 1 \n \t execute jump \n \t until a != x [end]|[start] option : \n \t init position == 1 \n \t execute jump \n \t until position <= x [end]|[start] policy a := \n \t if b >= 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute jump \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position <= y : \n \t execute jump \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory != 1 \n \t execute build \n \t until x [end]|[start] policy a := \n \t if position < y : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b != 2 : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 0 \n \t execute find \n \t until position == x [end]|[start] policy b := \n \t if iron == x : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init a < 2 \n \t execute build \n \t until b != x [end]|[start] option : \n \t init a == y \n \t execute use \n \t until a != 0 [end]|[start] option : \n \t init inventory > 0 \n \t execute build \n \t until inventory == y [end]|[start] policy b := \n \t if a == 0 : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b != y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b >= 2 \n \t execute use \n \t until inventory == 0 [end]|[start] option : \n \t init b < 0 \n \t execute use \n \t until b == 0 [end]|[start] option : \n \t init a > 2 \n \t execute jump \n \t until position >= 1 [end]|[start] policy a := \n \t if iron <= 1 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if position > y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init a == 0 \n \t execute find \n \t until position != 1 [end]|[start] policy a := \n \t if b < 0 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a == y : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= 0 \n \t execute jump \n \t until b < 1 [end]|[start] option : \n \t init position <= y \n \t execute run \n \t until position == 2 [end]|[start] policy a := \n \t if b <= 2 : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position != 1 \n \t execute run \n \t until inventory > 0 [end]|[start] policy a := \n \t if position < y : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron <= x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory < 2 \n \t execute use \n \t until a >= x [end]|[start] policy a := \n \t if a == 2 : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < x : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < y : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron < 0 : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init position \n \t execute run \n \t until inventory <= y [end]|[start] policy b := \n \t if iron != x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute jump \n \t until a != x [end]|[start] policy b := \n \t if position > y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position < 2 : \n \t execute jump \n elif a : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < 1 \n \t execute build \n \t until a < 2 [end]|[start] option : \n \t init a != x \n \t execute build \n \t until position != y [end]|[start] option : \n \t init a <= 0 \n \t execute build \n \t until inventory != 2 [end]|[start] policy b := \n \t if a == 0 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= y \n \t execute run \n \t until a <= x [end]|[start] policy a := \n \t if a <= 0 : \n \t execute build \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b >= y \n \t execute jump \n \t until inventory != 2 [end]|[start] policy a := \n \t if position < 0 : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a < 2 : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute run \n [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until position < 0 [end]|[start] option : \n \t init position >= x \n \t execute jump \n \t until position > x [end]|[start] option : \n \t init inventory == 2 \n \t execute run \n \t until b < y [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until a > x [end]|[start] policy a := \n \t if iron == 1 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory \n \t execute jump \n \t until a == y [end]|[start] option : \n \t init position < x \n \t execute jump \n \t until b > 0 [end]|[start] option : \n \t init position != 2 \n \t execute find \n \t until position < 2 [end]|[start] policy b := \n \t if iron > x : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron > x : \n \t execute jump \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute run \n [end]|[start] option : \n \t init b < x \n \t execute jump \n \t until inventory >= 2 [end]|[start] option : \n \t init position <= 2 \n \t execute find \n \t until b < 2 [end]|[start] option : \n \t init position > y \n \t execute run \n \t until b <= 1 [end]|[start] policy a := \n \t if position == y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 1 \n \t execute use \n \t until inventory == 1 [end]|[start] option : \n \t init inventory == x \n \t execute build \n \t until a <= 0 [end]|[start] policy a := \n \t if position != 0 : \n \t execute find \n elif a : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 2 \n \t execute run \n \t until position > 2 [end]|[start] option : \n \t init b < y \n \t execute find \n \t until a == x [end]|[start] policy a := \n \t if b == x : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a != 0 : \n \t execute build \n elif iron : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != 0 : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy b := \n \t if b < x : \n \t execute run \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron == y : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 0 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if a > 2 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a > 0 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until a != 2 [end]|[start] option : \n \t init a != 1 \n \t execute jump \n \t until inventory >= x [end]|[start] option : \n \t init position >= 1 \n \t execute build \n \t until position != 1 [end]|[start] option : \n \t init position != 1 \n \t execute build \n \t until b != 0 [end]|[start] option : \n \t init position \n \t execute use \n \t until inventory <= x [end]|[start] policy a := \n \t if position < x : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init a < y \n \t execute run \n \t until b [end]|[start] option : \n \t init inventory < 1 \n \t execute run \n \t until a == x [end]|[start] policy a := \n \t if a == x : \n \t execute use \n elif a : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy b := \n \t if iron > y : \n \t execute run \n elif a : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until b == 0 [end]|[start] policy b := \n \t if a != y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a == x \n \t execute use \n \t until a >= y [end]|[start] option : \n \t init b == y \n \t execute run \n \t until position > x [end]|[start] option : \n \t init a < x \n \t execute use \n \t until position == 0 [end]|[start] option : \n \t init inventory <= 2 \n \t execute use \n \t until inventory >= 1 [end]|[start] policy b := \n \t if position >= y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until x [end]|[start] option : \n \t init position > 2 \n \t execute find \n \t until b < x [end]|[start] option : \n \t init inventory <= 1 \n \t execute run \n \t until a == 0 [end]|[start] policy a := \n \t if a : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < 2 : \n \t execute build \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a == 1 \n \t execute jump \n \t until position < x [end]|[start] policy a := \n \t if iron > y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] option : \n \t init position < 0 \n \t execute jump \n \t until a != 2 [end]|[start] policy a := \n \t if position >= y : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= x \n \t execute run \n \t until b >= x [end]|[start] option : \n \t init a < 0 \n \t execute run \n \t until a >= x [end]|[start] option : \n \t init b != 0 \n \t execute jump \n \t until inventory > x [end]|[start] policy a := \n \t if a < x : \n \t execute use \n elif iron : \n \t execute jump \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b != y : \n \t execute jump \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b > x \n \t execute use \n \t until b >= 0 [end]|[start] policy a := \n \t if position > x : \n \t execute use \n elif b : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 2 \n \t execute use \n \t until inventory >= y [end]|[start] option : \n \t init inventory <= x \n \t execute find \n \t until a <= x [end]|[start] option : \n \t init b >= x \n \t execute use \n \t until inventory > 2 [end]|[start] policy a := \n \t if position == 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == y \n \t execute jump \n \t until b == 2 [end]|[start] policy b := \n \t if iron != x : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 2 \n \t execute run \n \t until inventory == 1 [end]|[start] policy a := \n \t if b <= 0 : \n \t execute run \n elif iron : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init position >= 1 \n \t execute use \n \t until b < x [end]|[start] option : \n \t init inventory >= 0 \n \t execute run \n \t until position >= y [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until b == y [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until b >= x [end]|[start] policy a := \n \t if b > 2 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory < 0 \n \t execute jump \n \t until b <= 0 [end]|[start] policy b := \n \t if iron <= x : \n \t execute run \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init inventory == 2 \n \t execute build \n \t until a >= x [end]|[start] policy a := \n \t if position >= y : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b < x \n \t execute use \n \t until position > x [end]|[start] policy a := \n \t if b != 1 : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute jump \n [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until b >= y [end]|[start] policy a := \n \t if iron != x : \n \t execute jump \n elif iron : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init b > 1 \n \t execute run \n \t until inventory >= 2 [end]|[start] policy a := \n \t if a < 2 : \n \t execute jump \n elif b : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init a <= x \n \t execute build \n \t until position != 2 [end]|[start] policy a := \n \t if iron != y : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != y : \n \t execute jump \n elif iron : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory <= y \n \t execute build \n \t until position == 1 [end]|[start] option : \n \t init b != y \n \t execute jump \n \t until b == 0 [end]|[start] option : \n \t init a <= y \n \t execute use \n \t until inventory < x [end]|[start] option : \n \t init b == 1 \n \t execute jump \n \t until b >= 1 [end]|[start] option : \n \t init a == 1 \n \t execute run \n \t until inventory > x [end]|[start] option : \n \t init b <= 0 \n \t execute build \n \t until b < 1 [end]|[start] policy a := \n \t if b != x : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a < y : \n \t execute build \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] option : \n \t init b == y \n \t execute run \n \t until a != x [end]|[start] option : \n \t init b == 2 \n \t execute use \n \t until inventory < y [end]|[start] option : \n \t init b >= 0 \n \t execute find \n \t until position >= 0 [end]|[start] option : \n \t init inventory <= 2 \n \t execute build \n \t until a > 1 [end]|[start] option : \n \t init position < x \n \t execute use \n \t until b != x [end]|[start] policy a := \n \t if iron <= 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b >= 1 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= x : \n \t execute run \n elif iron : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy a := \n \t if b <= 0 : \n \t execute use \n elif position : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b == y \n \t execute jump \n \t until a != 0 [end]|[start] policy a := \n \t if iron != 0 : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b <= 2 \n \t execute build \n \t until b < 2 [end]|[start] option : \n \t init a <= 1 \n \t execute build \n \t until x [end]|[start] option : \n \t init b <= 1 \n \t execute jump \n \t until inventory >= x [end]|[start] policy b := \n \t if a == 1 : \n \t execute find \n elif b : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron == 1 : \n \t execute use \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > 1 \n \t execute use \n \t until b > x [end]|[start] policy a := \n \t if position >= x : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if position > y : \n \t execute use \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if iron == x : \n \t execute find \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position <= 2 : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b > x : \n \t execute build \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a > 1 \n \t execute find \n \t until b == y [end]|[start] policy a := \n \t if b != 1 : \n \t execute run \n elif position : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if a != 2 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a < 1 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron <= x : \n \t execute use \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b > 0 : \n \t execute find \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] policy a := \n \t if iron != y : \n \t execute build \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position >= 0 : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position <= y \n \t execute build \n \t until b != y [end]|[start] policy b := \n \t if b < x : \n \t execute build \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute use \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] option : \n \t init a >= x \n \t execute build \n \t until a > 2 [end]|[start] option : \n \t init inventory > 2 \n \t execute use \n \t until b < 0 [end]|[start] option : \n \t init inventory == 2 \n \t execute build \n \t until b <= 0 [end]|[start] option : \n \t init a <= 2 \n \t execute use \n \t until a >= 2 [end]|[start] policy b := \n \t if iron == x : \n \t execute run \n elif position : \n \t execute run \n else : \n \t execute use \n [end]|[start] option : \n \t init b > 1 \n \t execute run \n \t until a < 2 [end]|[start] policy a := \n \t if iron > 2 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a <= y \n \t execute find \n \t until a == 2 [end]|[start] option : \n \t init position >= 0 \n \t execute find \n \t until a == x [end]|[start] policy a := \n \t if position >= 1 : \n \t execute run \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 2 \n \t execute use \n \t until position > y [end]|[start] option : \n \t init a > 1 \n \t execute run \n \t until b < 0 [end]|[start] policy b := \n \t if a < 1 : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position == 2 \n \t execute use \n \t until a >= y [end]|[start] option : \n \t init a <= y \n \t execute run \n \t until b <= 0 [end]|[start] option : \n \t init position \n \t execute run \n \t until b < y [end]|[start] policy a := \n \t if position > 2 : \n \t execute find \n elif iron : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init position <= x \n \t execute use \n \t until a >= x [end]|[start] option : \n \t init b > 2 \n \t execute use \n \t until position == 1 [end]|[start] option : \n \t init b <= y \n \t execute use \n \t until position >= x [end]|[start] policy a := \n \t if position != x : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory != y \n \t execute build \n \t until b != 1 [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until position > 0 [end]|[start] option : \n \t init inventory <= 0 \n \t execute jump \n \t until position == 2 [end]|[start] option : \n \t init position >= 0 \n \t execute build \n \t until position <= 2 [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init position == 1 \n \t execute run \n \t until b != 2 [end]|[start] option : \n \t init a >= 1 \n \t execute find \n \t until inventory <= y [end]|[start] option : \n \t init position <= 1 \n \t execute use \n \t until a != y [end]|[start] policy a := \n \t if iron > y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init b <= y \n \t execute find \n \t until position <= 0 [end]|[start] option : \n \t init b > 2 \n \t execute find \n \t until inventory != 2 [end]|[start] option : \n \t init a != y \n \t execute find \n \t until a != y [end]|[start] policy b := \n \t if iron : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init position > x \n \t execute use \n \t until b == 2 [end]|[start] policy a := \n \t if b : \n \t execute build \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory <= 1 \n \t execute run \n \t until inventory > 0 [end]|[start] option : \n \t init position != 0 \n \t execute use \n \t until a == x [end]|[start] option : \n \t init position <= 1 \n \t execute run \n \t until inventory >= x [end]|[start] policy a := \n \t if iron != 0 : \n \t execute find \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron < y : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 0 \n \t execute find \n \t until a != x [end]|[start] policy b := \n \t if iron == y : \n \t execute find \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] policy a := \n \t if b == 1 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a < 2 \n \t execute use \n \t until position >= 1 [end]|[start] policy a := \n \t if iron == y : \n \t execute run \n elif b : \n \t execute build \n else : \n \t execute find \n [end]|[start] option : \n \t init a >= 2 \n \t execute use \n \t until b < y [end]|[start] option : \n \t init a <= 0 \n \t execute find \n \t until b <= y [end]|[start] policy b := \n \t if a < y : \n \t execute run \n elif iron : \n \t execute use \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if iron : \n \t execute find \n elif b : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if b != 2 : \n \t execute find \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position >= 1 \n \t execute use \n \t until b < 1 [end]|[start] policy b := \n \t if iron != x : \n \t execute build \n elif position : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position >= y : \n \t execute find \n elif a : \n \t execute run \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position > x : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if a != 1 : \n \t execute find \n elif a : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != 1 : \n \t execute use \n else : \n \t execute build \n [end]|[start] option : \n \t init a <= 0 \n \t execute use \n \t until b < 2 [end]|[start] option : \n \t init a <= 0 \n \t execute find \n \t until inventory == 1 [end]|[start] policy b := \n \t if b : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if a > 1 : \n \t execute build \n elif iron : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron > 1 : \n \t execute jump \n elif a : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init a < y \n \t execute use \n \t until b != 1 [end]|[start] option : \n \t init inventory <= y \n \t execute use \n \t until inventory <= 0 [end]|[start] policy a := \n \t if position <= 2 : \n \t execute use \n elif position : \n \t execute find \n else : \n \t execute jump \n [end]|[start] option : \n \t init position >= 1 \n \t execute find \n \t until inventory >= 2 [end]|[start] option : \n \t init position == 2 \n \t execute build \n \t until position > 2 [end]|[start] option : \n \t init b == y \n \t execute use \n \t until a <= y [end]|[start] policy a := \n \t if b <= 1 : \n \t execute find \n elif position : \n \t execute find \n else : \n \t execute find \n [end]|[start] policy a := \n \t if a >= 1 : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute build \n [end]|[start] policy b := \n \t if b >= y : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init a >= 0 \n \t execute jump \n \t until position < y [end]|[start] policy a := \n \t if iron == x : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute build \n [end]|[start] option : \n \t init b == 1 \n \t execute run \n \t until position < 2 [end]|[start] policy a := \n \t if a <= x : \n \t execute run \n elif iron : \n \t execute jump \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory == 2 \n \t execute find \n \t until b <= 0 [end]|[start] policy a := \n \t if position > x : \n \t execute find \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init position \n \t execute run \n \t until a == y [end]|[start] policy b := \n \t if position > y : \n \t execute use \n elif position : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute run \n [end]|[start] policy b := \n \t if iron >= y : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy a := \n \t if a <= 2 : \n \t execute use \n elif a : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init inventory >= 2 \n \t execute use \n \t until position <= 2 [end]|[start] option : \n \t init b > 1 \n \t execute run \n \t until inventory < 2 [end]|[start] option : \n \t init b != 2 \n \t execute build \n \t until inventory < 1 [end]|[start] policy b := \n \t if iron <= y : \n \t execute use \n elif iron : \n \t execute use \n else : \n \t execute use \n [end]|[start] policy a := \n \t if b < y : \n \t execute use \n elif b : \n \t execute run \n else : \n \t execute jump \n [end]|[start] option : \n \t init a == 2 \n \t execute run \n \t until b >= y [end]|[start] option : \n \t init b >= 0 \n \t execute build \n \t until position >= 1 [end]|[start] policy b := \n \t if iron <= x : \n \t execute use \n else : \n \t execute run \n [end]|[start] policy b := \n \t if b >= y : \n \t execute find \n elif position : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if position >= 2 : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position != y : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init a == y \n \t execute find \n \t until a >= 2 [end]|[start] policy a := \n \t if b < 0 : \n \t execute build \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position != x : \n \t execute build \n elif a : \n \t execute build \n else : \n \t execute run \n [end]|[start] option : \n \t init position >= 2 \n \t execute use \n \t until a != 2 [end]|[start] option : \n \t init position <= 2 \n \t execute build \n \t until b [end]|[start] option : \n \t init position >= x \n \t execute use \n \t until a > 0 [end]|[start] policy a := \n \t if b >= 1 : \n \t execute jump \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init inventory >= 1 \n \t execute find \n \t until b < 0 [end]|[start] policy a := \n \t if a > x : \n \t execute use \n elif a : \n \t execute run \n else : \n \t execute run \n [end]|[start] option : \n \t init b <= 2 \n \t execute find \n \t until inventory == 2 [end]|[start] policy b := \n \t if a != y : \n \t execute build \n elif a : \n \t execute find \n else : \n \t execute build \n [end]|[start] option : \n \t init inventory > 2 \n \t execute run \n \t until inventory >= x [end]|[start] option : \n \t init position < y \n \t execute use \n \t until a < 0 [end]|[start] option : \n \t init b <= y \n \t execute build \n \t until position < y [end]|[start] option : \n \t init a != 2 \n \t execute run \n \t until inventory != x [end]|[start] option : \n \t init position > 0 \n \t execute build \n \t until a >= 0 [end]|[start] policy a := \n \t if b >= 2 : \n \t execute run \n elif b : \n \t execute jump \n else : \n \t execute jump \n [end]|[start] option : \n \t init position < x \n \t execute use \n \t until position >= y [end]|[start] option : \n \t init inventory <= x \n \t execute jump \n \t until inventory == 1 [end]|[start] option : \n \t init position < 0 \n \t execute use \n \t until inventory == 0 [end]|[start] policy a := \n \t if iron >= x : \n \t execute build \n elif iron : \n \t execute find \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position >= y : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute find \n [end]|[start] option : \n \t init a < y \n \t execute use \n \t until b > x [end]|[start] policy a := \n \t if position != 2 : \n \t execute use \n elif iron : \n \t execute run \n else : \n \t execute find \n [end]|[start] policy a := \n \t if iron < x : \n \t execute jump \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] option : \n \t init position == y \n \t execute jump \n \t until inventory >= 1 [end]|[start] policy a := \n \t if iron : \n \t execute jump \n elif b : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init inventory > x \n \t execute jump \n \t until b <= 1 [end]|[start] option : \n \t init a < 1 \n \t execute jump \n \t until b >= 0 [end]|[start] policy b := \n \t if position != x : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute find \n [end]|[start] policy a := \n \t if position != 0 : \n \t execute jump \n elif position : \n \t execute run \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron >= 0 : \n \t execute use \n [end]|[start] policy b := \n \t if position != y : \n \t execute use \n elif position : \n \t execute build \n else : \n \t execute use \n [end]|[start] option : \n \t init b == 2 \n \t execute jump \n \t until position <= y [end]|[start] option : \n \t init a < 0 \n \t execute find \n \t until b > 2 [end]|[start] policy a := \n \t if b != y : \n \t execute run \n elif a : \n \t execute jump \n else : \n \t execute build \n [end]|[start] policy b := \n \t if position >= y : \n \t execute run \n elif b : \n \t execute use \n else : \n \t execute find \n [end]|[start] policy b := \n \t if b == y : \n \t execute run \n elif position : \n \t execute find \n else : \n \t execute run \n [end]|[start] option : \n \t init position > 0 \n \t execute use \n \t until inventory != 2 [end]|[start] policy b := \n \t if a < 1 : \n \t execute find \n elif b : \n \t execute find \n else : \n \t execute run \n [end]|[start] policy a := \n \t if iron != 0 : \n \t execute build \n elif position : \n \t execute build \n else : \n \t execute jump \n [end]|[start] policy b := \n \t if iron > 0 : \n \t execute run \n [end]|[start] policy a := \n \t if position <= 0 : \n \t execute find \n elif iron : \n \t execute build \n else : \n \t execute use \n [end]|[start] policy a := \n \t if position : \n \t execute use \n elif b : \n \t execute build \n else : \n \t execute build \n [end]|[start] policy a := \n \t if position > 2 : \n \t execute run \n elif a : \n \t execute find \n else : \n \t execute use \n [end]|[start] option : \n \t init a > x \n \t execute jump \n \t until a > y [end]
option|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|policy|policy|option|policy|option|option|policy|option|policy|option|option|policy|policy|option|policy|policy|option|option|option|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|option|policy|policy|option|option|option|policy|policy|policy|option|option|policy|option|policy|option|option|option|option|option|option|policy|policy|option|option|policy|policy|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|option|policy|option|policy|policy|policy|policy|option|policy|option|option|option|option|policy|policy|option|option|option|option|option|option|policy|option|policy|policy|option|policy|option|option|option|option|policy|option|policy|option|option|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|option|option|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|policy|option|option|option|option|option|policy|option|option|policy|option|option|option|policy|option|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|option|option|option|policy|option|policy|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|option|option|policy|policy|option|policy|option|policy|policy|option|option|option|option|option|option|option|option|policy|option|option|option|option|policy|option|policy|option|policy|option|policy|option|option|policy|policy|policy|policy|option|option|option|option|option|policy|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|policy|option|option|policy|option|policy|option|policy|policy|option|option|option|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|option|option|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|option|option|option|option|policy|policy|option|policy|option|option|policy|policy|option|option|policy|option|option|option|policy|option|option|option|policy|option|policy|option|policy|policy|option|policy|option|option|option|option|option|option|policy|policy|option|option|policy|policy|option|policy|option|option|policy|option|policy|option|policy|option|option|policy|policy|option|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|option|policy|option|option|option|policy|policy|option|option|policy|option|option|option|option|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|option|option|policy|option|policy|policy|policy|option|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|policy|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|option|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|option|option|policy|policy|option|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|option|policy|option|option|policy|policy|option|policy|option|option|policy|policy|option|option|option|policy|option|policy|option|policy|option|policy|option|policy|option|option|option|policy|policy|option|policy|policy|option|policy|option|option|policy|option|option|option|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|option|option|option|option|option|policy|option|policy|option|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|option|policy|option|option|option|policy|option|option|option|option|option|option|option|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|option|option|policy|option|policy|option|policy|policy|option|policy|option|policy|option|policy|option|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|option|policy|option|option|option|policy|policy|policy|option|policy|option|option|option|option|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|option|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|option|option|option|option|option|option|option|option|policy|option|option|option|option|option|policy|policy|policy|option|option|option|option|option|policy|option|policy|option|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|option|option|policy|policy|option|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|option|option|policy|policy|option|option|policy|policy|option|option|policy|option|option|policy|option|policy|option|policy|option|policy|policy|option|policy|policy|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|option|option|policy|option|option|policy|option|option|option|option|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|policy|option|policy|option|policy|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|option|option|policy|option|policy|option|policy|option|policy|policy|option|option|option|option|option|option|policy|option|option|option|policy|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|option|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|option|option|option|policy|option|option|option|option|policy|policy|policy|option|option|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|option|policy|policy|option|option|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|policy|option|option|policy|option|option|option|option|option|option|policy|option|option|policy|option|option|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|option|policy|option|option|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|option|option|option|option|policy|policy|policy|policy|option|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|option|policy|option|option|policy|option|policy|option|policy|policy|option|option|option|option|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|option|option|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|option|policy|option|policy|policy|option|option|policy|option|option|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|option|option|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|option|option|policy|option|option|policy|policy|option|option|option|option|option|option|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|option|option|option|option|option|option|option|policy|policy|option|policy|option|option|policy|option|policy|policy|option|policy|option|option|policy|policy|option|policy|option|option|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|option|policy|policy|option|option|option|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|option|policy|option|option|option|option|policy|option|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|policy|option|policy|option|policy|policy|option|policy|option|policy|option|policy|policy|option|option|option|option|policy|policy|policy|option|option|policy|policy|option|option|policy|option|policy|option|option|policy|option|option|option|option|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|option|option|option|option|policy|option|option|option|option|option|policy|policy|option|option|option|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|policy|option|option|option|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|option|option|policy|policy|option|policy|policy|option|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|option|option|option|option|option|option|policy|option|policy|policy|policy|policy|policy|option|option|policy|option|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|option|option|option|option|policy|option|policy|policy|option|policy|option|option|option|policy|option|policy|option|option|policy|policy|option|option|option|option|policy|option|option|option|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|option|option|option|policy|option|option|policy|option|policy|policy|policy|option|option|option|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|option|option|option|option|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|option|option|option|policy|option|policy|option|option|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|option|option|option|policy|policy|option|policy|policy|option|policy|option|option|policy|option|option|option|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|option|option|policy|policy|policy|option|option|policy|option|option|policy|option|option|option|policy|option|option|policy|option|option|policy|policy|option|policy|option|option|option|policy|option|policy|policy|option|policy|option|policy|policy|option|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|option|policy|policy|option|option|option|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|option|policy|option|option|option|policy|policy|option|option|option|option|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|option|option|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|option|option|option|policy|option|policy|option|policy|option|option|option|option|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|option|policy|policy|policy|option|policy|option|option|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|option|policy|policy|option|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|policy|option|option|option|policy|option|policy|option|policy|option|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|option|option|option|policy|option|policy|policy|option|option|policy|option|policy|option|option|option|option|option|policy|option|option|policy|policy|option|policy|option|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|option|option|policy|policy|option|option|option|option|policy|option|option|policy|option|policy|policy|option|policy|policy|option|policy|option|policy|option|policy|policy|option|option|option|option|option|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|policy|option|policy|policy|option|option|option|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|policy|option|option|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|option|option|policy|option|option|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|option|option|policy|policy|option|policy|option|option|option|option|policy|policy|option|policy|option|option|policy|policy|option|policy|option|policy|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|policy|policy|option|option|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|option|option|option|option|policy|option|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|option|policy|option|option|option|policy|policy|option|option|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|option|policy|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|policy|policy|option|option|option|option|policy|option|option|policy|option|option|option|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|option|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|option|option|option|policy|policy|policy|option|policy|option|option|option|policy|policy|policy|option|policy|policy|option|policy|policy|option|option|option|option|option|policy|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|option|option|option|option|policy|option|option|option|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|option|option|policy|option|policy|policy|policy|option|option|option|policy|policy|option|policy|option|policy|option|option|option|option|policy|option|policy|option|option|option|policy|option|policy|option|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|policy|policy|option|option|option|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|option|option|policy|option|policy|option|policy|option|policy|option|policy|policy|option|option|option|option|option|policy|policy|option|option|policy|option|policy|option|policy|policy|option|policy|option|option|option|option|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|option|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|option|option|option|policy|policy|policy|option|policy|option|policy|option|option|policy|option|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|policy|policy|policy|option|option|option|option|policy|policy|option|option|option|policy|option|option|policy|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|option|option|option|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|option|option|option|option|policy|policy|policy|policy|option|option|policy|option|option|option|option|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|option|option|policy|option|policy|option|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|option|option|policy|policy|option|policy|option|policy|option|option|policy|option|option|policy|option|policy|policy|option|option|option|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|option|policy|option|option|option|policy|option|policy|option|option|policy|option|option|policy|policy|option|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|option|option|policy|option|option|option|policy|policy|policy|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|option|policy|option|option|policy|policy|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|option|option|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|option|option|option|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|option|policy|option|option|option|option|policy|policy|option|policy|option|option|policy|policy|option|policy|option|policy|option|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|policy|option|option|option|option|policy|option|option|option|policy|policy|policy|option|option|option|policy|option|policy|option|policy|option|option|policy|option|policy|option|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|option|option|policy|option|option|policy|option|option|option|policy|policy|option|policy|option|policy|option|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|option|option|option|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|option|policy|option|option|option|option|option|option|option|option|option|policy|policy|policy|policy|option|option|option|policy|policy|option|policy|option|policy|option|option|option|option|option|option|policy|policy|policy|option|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|option|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|option|policy|option|option|policy|option|option|policy|policy|option|policy|option|policy|option|option|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|option|option|option|policy|policy|policy|option|policy|option|option|option|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|option|option|option|option|policy|policy|option|policy|policy|option|policy|option|option|policy|option|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|option|option|policy|policy|policy|option|policy|option|option|option|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|option|policy|option|option|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|option|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|option|policy|option|option|policy|policy|option|policy|option|policy|policy|option|option|option|option|option|option|policy|option|policy|option|option|policy|option|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|option|option|policy|option|option|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|option|policy|policy|option|policy|option|policy|policy|option|policy|option|option|policy|option|option|option|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|option|policy|option|policy|policy|option|option|option|policy|option|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|option|option|option|option|policy|option|option|policy|policy|option|option|policy|policy|option|policy|option|policy|option|option|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|option|option|policy|option|policy|policy|policy|option|policy|option|option|option|option|option|option|option|option|policy|policy|option|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|option|option|option|option|option|option|option|option|option|policy|option|option|option|option|policy|option|option|option|policy|policy|option|option|policy|policy|option|option|option|policy|option|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|option|option|option|option|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|policy|option|option|policy|option|policy|policy|option|policy|policy|option|policy|option|policy|option|policy|option|option|option|policy|option|policy|option|policy|policy|option|policy|policy|option|option|policy|policy|option|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|policy|option|policy|option|policy|option|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|policy|option|option|option|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|option|option|option|policy|option|option|policy|policy|policy|option|option|option|option|policy|option|option|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|policy|option|option|option|option|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|option|option|option|option|policy|option|option|policy|option|option|policy|policy|option|option|policy|option|option|option|policy|option|option|policy|policy|option|option|policy|option|policy|option|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|option|option|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|option|option|policy|policy|option|policy|option|option|option|option|option|option|option|policy|option|option|policy|option|policy|option|policy|option|option|option|option|option|option|policy|policy|option|option|policy|option|policy|policy|option|option|option|policy|option|policy|option|option|policy|option|policy|policy|policy|option|policy|policy|option|option|option|option|policy|option|policy|option|option|option|policy|option|policy|option|option|policy|option|policy|policy|policy|option|policy|option|option|option|option|option|policy|option|policy|option|policy|option|option|policy|option|option|policy|option|policy|option|policy|option|option|option|policy|policy|option|policy|option|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|option|option|option|policy|option|policy|policy|option|option|policy|option|policy|option|option|policy|option|option|policy|option|option|option|option|policy|option|option|policy|policy|option|option|option|policy|option|option|policy|policy|option|option|policy|policy|option|policy|option|option|option|policy|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|option|option|option|policy|option|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|option|policy|option|option|policy|option|option|policy|policy|option|policy|option|policy|option|option|option|policy|policy|option|policy|option|policy|policy|option|option|policy|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|option|option|option|option|option|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|option|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|policy|policy|option|option|policy|policy|option|policy|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|option|policy|option|option|option|policy|option|policy|option|option|policy|option|policy|option|option|option|policy|policy|policy|option|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|option|option|option|policy|option|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|option|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|option|policy|policy|option|option|option|option|policy|policy|option|policy|policy|option|option|option|policy|option|option|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|option|option|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|option|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|option|policy|option|option|option|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|option|option|option|option|policy|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|option|policy|option|policy|option|option|policy|option|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|policy|option|policy|policy|option|option|option|option|policy|option|policy|option|option|policy|policy|policy|option|option|option|option|policy|option|policy|option|option|option|policy|option|option|option|option|option|policy|policy|option|option|policy|option|policy|policy|option|option|option|option|option|option|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|option|policy|option|option|option|policy|option|option|option|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|option|option|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|option|policy|option|option|policy|option|policy|option|option|option|option|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|option|option|option|policy|option|policy|option|option|policy|policy|policy|option|policy|option|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|option|option|option|policy|option|option|option|option|policy|policy|option|policy|policy|option|option|option|policy|option|option|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|option|policy|option|policy|option|policy|option|option|policy|policy|option|option|policy|option|option|policy|policy|option|policy|policy|option|policy|option|policy|option|option|policy|option|policy|policy|option|policy|option|option|option|policy|option|option|option|option|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|policy|policy|option|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|policy|policy|option|option|option|option|option|policy|policy|policy|policy|option|policy|policy|option|option|policy|option|policy|option|policy|policy|option|option|option|option|option|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|option|option|option|option|policy|policy|option|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|policy|option|policy|option|option|policy|option|policy|policy|option|option|option|option|option|policy|option|option|option|policy|policy|option|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|policy|option|policy|option|policy|option|option|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|option|option|option|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|option|option|option|option|policy|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|policy|option|option|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|option|policy|policy|policy|policy|option|policy|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|option|policy|option|policy|option|policy|option|policy|option|policy|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|option|option|option|policy|option|option|option|option|policy|option|option|option|option|policy|policy|option|option|option|policy|policy|policy|option|option|option|option|policy|policy|option|policy|policy|policy|policy|policy|option|option|option|option|option|option|option|option|policy|option|option|option|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|option|policy|policy|option|policy|policy|policy|option|policy|option|option|policy|option|policy|option|option|option|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|option|policy|policy|policy|option|option|policy|option|option|policy|option|policy|option|policy|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|option|option|policy|option|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|option|option|policy|option|policy|policy|policy|option|policy|option|policy|option|policy|option|option|option|policy|option|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|option|policy|option|option|option|option|option|option|policy|option|option|policy|policy|policy|policy|option|policy|option|option|option|option|option|option|policy|policy|option|option|option|option|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|option|option|option|policy|option|option|option|option|policy|policy|policy|option|policy|option|policy|policy|option|option|option|policy|policy|policy|option|option|option|option|policy|policy|option|policy|policy|option|option|policy|policy|option|policy|policy|option|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|option|option|policy|policy|policy|option|option|policy|option|option|option|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|option|option|policy|option|policy|option|policy|option|policy|policy|option|option|option|option|option|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|option|option|option|option|option|policy|option|policy|option|policy|option|policy|option|option|policy|option|option|policy|option|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|option|policy|option|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|option|option|policy|option|policy|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|policy|option|option|policy|policy|policy|option|option|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|option|option|option|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|option|option|option|policy|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|option|option|option|policy|option|option|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|option|option|option|policy|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|option|option|option|policy|option|policy|option|option|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|option|policy|option|option|policy|option|option|option|policy|policy|option|policy|policy|policy|option|option|policy|policy|option|option|option|policy|policy|policy|option|option|option|option|policy|policy|option|option|option|option|policy|option|policy|policy|policy|policy|policy|option|option|option|policy|option|policy|option|policy|option|policy|policy|policy|option|option|option|policy|policy|option|policy|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|option|option|option|policy|policy|policy|option|option|option|option|option|option|option|policy|option|policy|policy|policy|policy|option|option|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|option|option|option|option|policy|option|option|policy|option|policy|policy|option|policy|policy|option|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|option|option|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|option|option|option|policy|policy|option|option|option|option|policy|policy|policy|option|option|option|option|option|option|policy|policy|option|policy|option|option|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|option|option|option|option|option|option|policy|policy|option|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|policy|option|policy|option|option|policy|policy|policy|option|option|policy|policy|policy|option|option|option|option|option|policy|option|option|policy|option|option|option|policy|policy|policy|option|policy|option|option|policy|option|policy|policy|option|policy|option|option|policy|option|policy|option|policy|policy|option|policy|option|option|policy|option|policy|option|option|policy|policy|option|policy|policy|option|option|policy|policy|policy|option|option|policy|option|option|policy|option|policy|option|option|option|option|option|option|policy|policy|option|policy|option|option|policy|option|policy|option|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|option|option|policy|option|option|option|option|policy|option|policy|policy|policy|option|option|policy|option|policy|option|policy|option|policy|policy|option|option|option|option|option|policy|option|policy|policy|option|option|option|option|policy|option|policy|policy|option|policy|option|policy|option|policy|option|policy|option|policy|option|option|option|option|option|option|policy|option|policy|option|policy|option|policy|policy|policy|option|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|option|policy|policy|option|policy|option|policy|policy|policy|option|policy|option|option|option|policy|option|policy|option|option|option|policy|policy|option|option|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|option|option|policy|policy|option|option|option|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|option|policy|option|policy|policy|policy|option|policy|option|option|option|option|policy|option|option|option|option|policy|option|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|policy|option|option|option|policy|policy|policy|option|option|option|policy|option|option|option|option|policy|option|option|option|option|policy|policy|option|option|policy|policy|option|option|policy|policy|option|option|option|option|policy|policy|policy|option|policy|option|option|policy|option|option|policy|option|option|option|option|policy|option|policy|option|policy|option|option|option|policy|option|policy|option|option|policy|option|policy|policy|policy|policy|option|policy|option|option|policy|option|policy|policy|policy|option|policy|option|option|option|policy|policy|option|option|policy|option|policy|option|option|option|option|option|option|policy|option|option|option|policy|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|policy|policy|option|option|policy|option|option|policy|option|policy|policy|option|option|policy|policy|option|option|option|policy|option|option|policy|policy|option|policy|option|option|option|option|policy|option|policy|option|option|option|option|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|option|policy|option|policy|policy|option|option|policy|policy|policy|option|option|option|option|option|option|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|option|policy|option|policy|policy|policy|policy|option|option|option|option|policy|policy|option|option|option|policy|policy|option|option|policy|policy|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|option|policy|option|policy|policy|option|option|policy|option|policy|option|option|policy|option|option|option|option|option|option|policy|option|policy|policy|policy|option|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|option|option|option|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|policy|option|policy|option|policy|policy|option|option|option|policy|option|policy|option|option|option|option|option|policy|policy|policy|policy|option|option|option|option|option|policy|option|policy|policy|option|option|option|option|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|option|option|option|policy|policy|option|option|option|policy|option|option|policy|option|option|policy|policy|option|policy|policy|policy|option|option|option|option|option|policy|policy|option|option|policy|option|policy|option|policy|option|policy|option|option|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|option|option|option|policy|option|option|option|policy|policy|option|policy|policy|option|option|option|option|option|option|policy|policy|option|option|policy|policy|option|policy|policy|policy|option|policy|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|option|policy|option|policy|policy|option|policy|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|option|policy|option|policy|policy|option|option|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|option|option|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|option|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|option|policy|option|option|policy|option|policy|policy|policy|option|option|option|policy|option|policy|policy|policy|option|policy|policy|option|option|option|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|option|option|option|policy|option|policy|option|option|policy|policy|option|option|policy|option|option|policy|policy|policy|policy|policy|option|option|policy|policy|option|option|option|policy|policy|policy|option|option|policy|option|policy|option|policy|option|policy|policy|option|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|policy|option|option|policy|policy|option|policy|policy|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|option|option|option|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|option|policy|policy|policy|option|policy|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|option|policy|policy|option|option|option|option|policy|policy|option|option|policy|option|policy|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|option|policy|option|policy|option|option|option|option|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|option|policy|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|option|option|option|option|option|policy|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|option|option|policy|option|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|option|policy|option|option|option|option|policy|option|policy|option|policy|option|option|policy|option|policy|option|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|policy|option|option|policy|policy|option|policy|option|option|option|policy|policy|option|option|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|option|policy|option|option|option|policy|option|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|option|policy|option|option|option|option|option|policy|policy|policy|policy|option|option|option|option|option|option|option|option|option|option|option|policy|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|option|option|policy|option|option|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|option|policy|policy|policy|policy|option|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|option|option|option|option|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|policy|option|option|policy|option|policy|option|policy|option|policy|policy|option|option|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|option|option|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|option|option|option|option|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|option|option|policy|policy|option|option|policy|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|option|option|policy|option|policy|option|policy|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|option|option|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|option|option|policy|policy|option|option|policy|option|option|option|option|option|option|policy|policy|option|option|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|option|option|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|option|option|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|policy|policy|option|option|option|option|option|option|option|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|policy|option|option|policy|policy|policy|option|option|option|option|option|option|policy|policy|policy|option|option|option|option|policy|policy|policy|policy|option|policy|option|option|option|policy|policy|option|option|policy|policy|policy|option|policy|policy|option|option|option|policy|option|policy|policy|policy|option|option|option|policy|policy|option|option|option|option|option|policy|policy|option|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|option|policy|policy|option|option|policy|policy|option|policy|option|policy|policy|option|policy|option|policy|policy|policy|option|option|option|policy|option|policy|option|option|option|policy|option|option|option|option|policy|policy|policy|option|policy|option|policy|policy|option|option|policy|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|option|option|policy|policy|option|option|option|option|option|option|option|option|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|option|option|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|option|policy|option|policy|option|option|policy|option|option|option|option|policy|policy|option|option|option|policy|policy|option|option|policy|policy|policy|option|policy|option|option|policy|option|option|policy|policy|policy|option|option|policy|policy|option|option|option|option|option|policy|option|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|policy|option|option|policy|option|option|option|policy|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|option|option|option|policy|option|option|policy|option|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|option|option|policy|option|policy|policy|policy|option|policy|option|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|option|option|option|option|option|option|policy|option|option|option|policy|policy|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|option|policy|option|option|option|option|option|option|policy|option|policy|policy|option|option|option|policy|option|policy|policy|option|policy|option|option|policy|policy|policy|policy|policy|option|option|option|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|option|option|option|option|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|option|policy|option|option|option|policy|option|option|policy|policy|policy|option|policy|policy|option|policy|option|policy|option|policy|option|option|option|option|option|policy|policy|option|policy|policy|option|policy|option|policy|policy|option|option|option|policy|policy|policy|option|policy|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|option|option|option|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|policy|option|policy|option|option|option|option|option|policy|option|policy|policy|option|option|policy|option|option|policy|policy|option|option|option|option|policy|policy|option|option|policy|option|policy|policy|option|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|policy|policy|option|option|policy|option|option|option|policy|policy|option|option|policy|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|option|policy|option|option|policy|policy|option|policy|option|option|policy|option|option|option|option|option|option|option|policy|option|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|option|option|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|option|option|policy|option|option|policy|option|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|option|option|policy|option|option|option|policy|option|policy|option|option|option|policy|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|option|policy|policy|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|policy|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|option|option|option|policy|option|option|option|option|policy|option|policy|option|option|option|option|option|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|option|option|option|option|option|option|policy|option|option|option|option|policy|policy|policy|option|option|policy|policy|option|policy|option|policy|option|option|option|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|policy|option|option|option|policy|option|option|option|option|policy|option|policy|policy|option|option|option|policy|option|option|option|option|policy|policy|policy|policy|policy|option|policy|option|option|policy|option|option|option|option|policy|policy|option|option|policy|policy|policy|option|policy|policy|option|policy|option|option|option|option|option|option|policy|option|option|option|option|option|option|option|policy|option|option|policy|policy|option|policy|option|policy|option|policy|policy|option|option|option|option|policy|option|option|option|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|option|policy|option|option|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|option|policy|option|option|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|option|policy|option|policy|option|option|option|policy|option|policy|option|policy|option|option|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|policy|option|option|option|option|policy|policy|option|option|policy|policy|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|policy|policy|option|policy|option|option|policy|option|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|policy|option|option|policy|policy|option|option|policy|policy|option|option|option|option|option|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|policy|option|option|option|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|option|option|option|option|option|policy|option|option|option|option|policy|option|policy|option|option|option|policy|option|policy|policy|option|option|option|option|option|option|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|option|policy|option|policy|option|option|option|option|policy|option|policy|policy|option|option|policy|option|option|policy|option|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|policy|option|option|policy|policy|option|policy|option|policy|policy|option|policy|option|option|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|option|option|option|policy|policy|option|option|policy|option|policy|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|policy|option|option|option|option|policy|policy|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|policy|option|policy|option|option|option|option|policy|option|policy|option|policy|policy|policy|option|option|option|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|option|option|option|option|policy|policy|option|option|policy|policy|policy|option|option|option|option|option|option|policy|option|policy|policy|policy|policy|option|option|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|option|option|option|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|option|option|policy|policy|policy|option|policy|policy|option|option|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|option|option|option|option|option|policy|policy|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|option|option|option|option|option|option|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|option|policy|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|option|policy|option|policy|policy|policy|option|policy|option|policy|option|option|policy|policy|policy|policy|policy|option|option|option|option|option|option|policy|option|policy|policy|option|option|option|policy|option|option|policy|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|option|policy|policy|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|option|option|policy|policy|policy|option|option|option|policy|policy|option|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|option|policy|option|policy|policy|option|option|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|policy|option|option|option|policy|policy|option|option|policy|option|policy|option|option|policy|option|option|policy|policy|policy|option|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|option|policy|policy|policy|option|option|option|option|policy|option|policy|policy|option|option|policy|option|policy|policy|policy|option|option|option|option|option|option|option|option|policy|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|policy|option|option|option|option|policy|policy|policy|option|policy|policy|option|policy|policy|option|option|policy|option|option|option|policy|policy|option|option|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|option|option|policy|option|option|option|option|option|option|option|option|option|policy|option|policy|policy|option|option|policy|policy|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|option|option|policy|policy|option|policy|option|policy|option|policy|option|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|option|option|option|option|option|option|policy|policy|option|option|policy|policy|option|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|policy|option|option|policy|option|policy|option|policy|option|option|option|policy|option|option|policy|policy|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|option|option|policy|policy|option|policy|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|option|option|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|option|option|option|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|policy|option|option|option|policy|option|option|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|option|option|policy|option|policy|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|option|option|option|option|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|option|policy|policy|policy|option|option|policy|option|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|option|policy|option|policy|option|option|option|policy|policy|option|option|policy|option|option|policy|option|policy|option|policy|option|option|policy|policy|option|policy|option|policy|policy|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|option|option|policy|option|option|option|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|option|policy|policy|option|option|option|policy|policy|policy|policy|option|option|option|option|option|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|option|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|option|option|policy|option|policy|option|option|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|option|option|policy|option|policy|policy|option|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|option|policy|option|policy|policy|policy|option|option|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|option|policy|policy|policy|policy|option|option|option|option|policy|option|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|option|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|option|policy|option|option|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|policy|option|option|option|policy|option|option|option|option|policy|policy|option|option|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|policy|policy|policy|policy|option|policy|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|policy|option|option|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|option|option|option|option|policy|policy|option|option|option|option|option|option|policy|option|option|option|option|option|policy|policy|option|policy|option|option|option|policy|policy|option|option|policy|policy|option|option|option|option|option|option|policy|option|policy|policy|option|option|option|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|option|option|option|option|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|option|option|policy|option|policy|option|option|policy|option|policy|option|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|option|policy|option|option|option|option|option|policy|policy|option|option|option|option|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|option|policy|option|policy|option|policy|option|option|policy|policy|policy|policy|option|option|option|option|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|option|option|policy|option|option|policy|policy|option|option|policy|option|option|option|policy|policy|option|policy|option|policy|option|option|policy|policy|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|option|option|policy|option|policy|option|option|policy|option|option|policy|policy|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|option|option|policy|option|option|option|option|option|policy|option|option|policy|option|option|option|policy|option|option|policy|option|policy|policy|option|option|option|option|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|option|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|option|option|option|policy|policy|option|policy|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|option|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|policy|policy|option|option|policy|policy|option|policy|option|option|policy|option|option|policy|option|option|option|option|option|policy|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|option|option|policy|option|policy|option|policy|policy|option|option|option|policy|option|option|option|policy|option|option|policy|option|option|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|option|policy|option|option|policy|option|policy|policy|option|policy|policy|option|option|option|option|policy|option|option|option|option|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|option|policy|option|option|option|policy|policy|option|option|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|option|option|policy|option|policy|option|option|policy|policy|option|option|option|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|option|option|policy|option|option|option|option|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|option|policy|option|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|option|option|option|option|policy|option|option|option|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|policy|policy|option|option|option|policy|option|policy|option|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|option|option|policy|policy|option|policy|option|policy|option|option|policy|policy|option|option|option|option|policy|option|policy|option|option|policy|policy|policy|policy|option|option|option|option|policy|policy|option|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|option|option|option|option|option|option|option|option|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|option|option|policy|policy|option|option|option|option|policy|policy|option|policy|option|policy|option|option|option|policy|policy|option|policy|option|policy|policy|option|policy|option|option|option|policy|policy|policy|option|option|policy|policy|option|option|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|option|option|policy|policy|policy|policy|option|option|policy|option|option|policy|policy|option|option|option|option|option|policy|option|policy|option|policy|option|policy|policy|option|option|policy|policy|option|option|option|policy|option|policy|policy|option|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|option|option|option|option|option|option|option|policy|option|policy|policy|option|policy|option|policy|option|option|policy|option|option|option|policy|policy|option|option|option|option|policy|option|option|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|policy|option|option|option|policy|policy|option|policy|option|policy|policy|policy|option|option|option|policy|option|policy|option|option|policy|policy|option|option|policy|option|policy|option|policy|option|option|policy|policy|option|option|policy|option|policy|policy|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|option|option|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|option|option|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|option|option|option|policy|policy|option|policy|policy|option|option|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|option|policy|option|option|option|policy|policy|policy|option|option|option|option|policy|option|option|policy|policy|option|policy|option|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|option|policy|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|option|option|policy|policy|option|option|option|option|policy|policy|policy|option|option|option|option|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|option|option|policy|option|option|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|policy|option|policy|option|option|policy|policy|option|policy|policy|option|option|policy|policy|option|policy|option|option|option|option|option|option|policy|option|policy|policy|option|option|option|policy|policy|option|policy|option|option|option|option|policy|option|option|policy|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|policy|option|option|policy|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|option|option|policy|policy|option|policy|policy|option|policy|policy|policy|option|option|policy|policy|option|option|option|option|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|option|option|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|option|policy|option|option|option|policy|option|option|option|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|option|option|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|policy|policy|option|option|policy|policy|option|policy|option|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|option|option|policy|policy|option|option|option|option|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|option|policy|option|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|option|option|option|option|policy|policy|policy|policy|policy|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|policy|policy|option|policy|policy|option|option|policy|option|option|option|policy|policy|option|policy|option|option|option|option|option|policy|policy|policy|option|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|option|option|option|policy|option|policy|option|policy|option|option|option|option|option|option|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|option|option|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|option|policy|policy|policy|option|policy|option|option|policy|policy|option|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|policy|option|policy|option|option|option|policy|option|option|option|option|policy|option|option|policy|policy|option|policy|option|policy|option|policy|policy|option|option|option|option|option|option|policy|policy|policy|policy|policy|option|policy|option|option|policy|option|option|policy|option|policy|policy|option|option|policy|option|option|policy|option|option|option|policy|option|option|policy|option|policy|policy|option|option|policy|policy|option|option|policy|policy|option|policy|option|policy|policy|option|option|option|policy|option|option|option|option|option|policy|option|policy|option|policy|policy|policy|option|option|option|policy|option|policy|policy|option|policy|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|option|policy|option|option|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|option|option|option|option|policy|option|policy|option|policy|policy|policy|policy|option|option|option|option|option|policy|option|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|option|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|option|policy|option|policy|option|option|policy|policy|option|policy|option|option|option|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|option|policy|policy|option|option|option|option|option|option|option|policy|option|policy|option|option|option|policy|policy|option|option|option|policy|option|policy|policy|option|policy|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|option|option|policy|option|option|policy|option|policy|option|policy|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|option|option|policy|policy|policy|option|policy|policy|option|policy|option|policy|option|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|option|option|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|option|option|option|option|policy|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|option|option|policy|option|option|option|option|policy|option|option|option|policy|option|option|policy|policy|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|option|option|policy|policy|policy|policy|option|policy|option|option|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|option|option|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|option|policy|option|option|option|policy|option|policy|option|policy|policy|option|policy|option|policy|policy|option|option|policy|option|option|policy|option|policy|policy|policy|option|policy|option|policy|option|option|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|option|option|policy|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|option|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|policy|policy|policy|option|option|option|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|option|option|option|policy|option|option|policy|option|policy|policy|option|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|option|option|option|option|policy|policy|policy|option|policy|option|policy|policy|option|option|policy|option|option|option|option|option|policy|option|option|policy|policy|policy|option|option|option|option|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|option|policy|option|policy|policy|option|policy|option|policy|policy|option|policy|option|policy|option|policy|policy|option|policy|option|policy|option|option|option|policy|policy|policy|option|option|policy|policy|option|policy|option|option|policy|option|option|policy|policy|option|policy|policy|option|option|policy|option|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|option|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|option|option|option|option|option|option|policy|policy|policy|option|option|policy|option|option|option|policy|policy|policy|option|option|option|policy|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|option|option|option|option|option|policy|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|option|option|option|option|policy|option|policy|policy|option|policy|policy|option|option|policy|option|option|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|policy|policy|policy|option|option|option|policy|option|option|policy|policy|option|option|policy|policy|policy|option|option|option|option|policy|policy|option|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|option|option|option|option|option|policy|option|option|policy|option|policy|option|policy|option|option|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|policy|option|policy|policy|policy|option|option|policy|option|option|policy|option|option|policy|policy|policy|option|option|option|option|option|policy|option|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|option|option|policy|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|policy|option|policy|option|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|option|policy|option|policy|option|option|option|policy|policy|policy|policy|option|option|option|option|policy|policy|policy|option|policy|option|option|policy|policy|option|option|policy|option|policy|policy|policy|option|option|option|policy|option|option|policy|option|option|policy|policy|option|policy|policy|option|option|option|option|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|policy|option|option|option|policy|option|option|policy|option|policy|option|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|policy|option|option|option|policy|policy|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|option|policy|option|option|option|policy|policy|policy|option|policy|option|option|option|option|policy|option|policy|option|policy|policy|option|option|policy|option|policy|option|option|option|policy|option|policy|option|option|option|policy|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|option|option|policy|option|policy|policy|policy|option|option|policy|policy|option|policy|option|option|option|option|option|option|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|policy|option|option|policy|policy|option|policy|policy|option|policy|policy|option|option|policy|option|policy|option|policy|option|option|option|option|policy|policy|policy|option|policy|policy|policy|option|option|option|option|option|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|option|policy|option|policy|option|option|policy|option|policy|policy|option|policy|option|option|option|policy|policy|policy|option|policy|policy|option|option|policy|policy|option|option|policy|option|option|policy|policy|option|policy|policy|option|policy|policy|policy|option|policy|option|policy|option|option|option|policy|option|option|option|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|option|policy|option|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|option|policy|option|option|policy|policy|option|policy|policy|option|option|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|policy|option|option|option|option|policy|option|policy|option|policy|policy|option|option|option|policy|option|policy|policy|option|policy|option|option|policy|policy|option|policy|option|policy|option|option|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|policy|option|policy|option|policy|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|option|policy|policy|policy|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|option|option|option|option|option|option|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|option|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|option|option|policy|policy|policy|option|option|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|policy|option|option|policy|option|policy|option|option|policy|policy|policy|policy|option|option|option|policy|option|policy|option|policy|option|option|policy|policy|option|option|policy|policy|policy|option|option|option|option|option|policy|policy|option|policy|option|policy|policy|option|policy|option|policy|policy|option|policy|option|policy|policy|policy|option|option|option|option|policy|option|policy|policy|policy|policy|option|option|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|option|option|policy|option|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|option|option|policy|policy|option|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|option|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|option|policy|option|policy|option|option|option|policy|option|policy|policy|policy|policy|policy|option|option|option|option|option|policy|option|policy|policy|policy|policy|option|option|policy|option|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|option|policy|policy|option|option|policy|option|option|option|option|policy|option|policy|policy|option|option|policy|option|option|policy|option|policy|option|option|policy|option|policy|policy|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|option|option|option|option|policy|option|option|policy|option|policy|policy|policy|option|option|policy|policy|policy|policy|option|policy|option|policy|option|option|option|policy|policy|option|policy|policy|option|option|option|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|option|option|policy|policy|option|policy|policy|policy|option|option|option|option|policy|option|policy|option|option|option|option|policy|policy|policy|policy|option|policy|option|option|option|option|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|option|policy|option|option|policy|policy|option|policy|option|option|policy|option|option|policy|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|policy|option|policy|policy|option|option|policy|policy|option|option|policy|option|option|option|policy|option|option|option|policy|policy|option|policy|policy|policy|option|option|policy|option|policy|option|option|policy|policy|option|policy|option|option|option|policy|policy|option|policy|option|policy|policy|policy|option|option|option|option|policy|policy|option|policy|option|option|policy|policy|option|policy|option|option|option|policy|policy|option|option|policy|option|option|policy|policy|option|policy|option|policy|policy|option|option|policy|option|policy|option|option|option|policy|policy|option|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|option|policy|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|option|policy|policy|option|option|policy|option|policy|option|policy|option|option|option|policy|option|policy|policy|option|option|option|option|policy|option|policy|option|policy|policy|policy|option|option|option|policy|option|policy|policy|option|option|option|option|option|policy|option|policy|policy|policy|option|option|option|policy|option|policy|option|option|option|policy|option|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|option|option|policy|policy|option|policy|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|policy|option|policy|option|policy|option|option|policy|option|policy|policy|policy|option|policy|policy|option|option|option|policy|policy|option|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|policy|option|policy|policy|option|option|option|policy|policy|option|option|option|policy|policy|option|option|policy|policy|policy|option|option|option|policy|option|option|policy|option|option|option|policy|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|option|policy|option|option|policy|option|policy|policy|option|option|option|option|policy|policy|option|option|policy|policy|option|policy|policy|option|option|policy|option|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|policy|option|option|option|option|option|option|policy|policy|policy|policy|option|option|option|option|option|policy|policy|option|policy|option|policy|option|policy|policy|policy|policy|option|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|option|option|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|option|option|option|policy|option|policy|option|option|policy|option|option|policy|option|option|option|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|option|option|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|option|option|option|policy|option|policy|policy|option|option|option|policy|option|option|policy|policy|option|option|option|policy|option|option|policy|option|policy|policy|policy|option|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|option|option|option|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|option|policy|policy|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|option|option|policy|policy|policy|policy|option|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|option|option|option|policy|option|option|policy|option|option|policy|policy|option|policy|policy|policy|option|option|option|option|option|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|policy|option|option|policy|option|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|option|policy|option|policy|option|option|option|option|policy|option|policy|option|option|option|policy|option|option|option|option|option|option|policy|option|policy|option|policy|policy|option|option|policy|option|policy|policy|policy|option|policy|option|option|policy|option|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|option|option|policy|option|policy|policy|policy|option|option|policy|policy|option|policy|option|policy|policy|option|option|option|policy|policy|option|policy|policy|option|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|option|option|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|option|option|policy|option|option|option|policy|policy|option|option|option|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|policy|option|option|option|option|policy|option|option|option|option|option|policy|option|policy|policy|option|policy|option|option|policy|policy|option|policy|option|policy|option|policy|policy|option|option|policy|option|policy|option|option|policy|policy|option|policy|option|policy|option|option|option|policy|policy|policy|option|policy|policy|option|option|option|policy|option|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|option|option|policy|option|option|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|option|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|option|option|option|option|option|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|option|option|option|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|option|policy|option|policy|option|policy|policy|policy|option|policy|option|option|option|option|policy|policy|policy|option|option|option|option|option|policy|option|option|policy|option|policy|policy|policy|option|option|option|policy|policy|option|policy|policy|policy|policy|option|option|option|option|policy|option|policy|option|option|option|option|option|policy|policy|option|policy|option|option|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|policy|option|option|option|option|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|policy|option|option|policy|policy|policy|policy|policy|policy|option|option|option|option|option|option|policy|option|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|option|option|option|policy|option|policy|option|policy|policy|policy|option|option|option|policy|option|policy|policy|policy|option|option|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|option|option|policy|option|policy|option|option|option|option|option|policy|option|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|option|policy|policy|option|policy|option|policy|option|option|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|policy|option|option|policy|policy|policy|option|option|option|option|policy|option|policy|option|policy|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|option|option|policy|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|option|policy|option|option|policy|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|option|policy|policy|policy|option|policy|policy|option|option|option|option|option|option|option|option|option|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|policy|option|option|policy|policy|option|policy|option|policy|option|option|policy|option|option|policy|policy|policy|option|policy|option|policy|policy|policy|option|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|option|option|option|option|policy|policy|policy|policy|policy|option|option|option|option|policy|option|policy|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|policy|policy|policy|option|option|policy|option|option|policy|policy|option|policy|policy|policy|option|policy|policy|policy|option|policy|policy|option|option|option|policy|option|policy|option|policy|option|policy|option|policy|policy|option|option|option|option|policy|option|option|policy|option|option|option|policy|option|policy|option|option|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|option|policy|option|option|policy|policy|option|option|policy|option|option|option|policy|option|policy|option|option|option|option|policy|option|policy|option|option|option|policy|option|option|policy|option|option|option|option|policy|option|policy|policy|option|option|policy|policy|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|option|option|policy|option|option|option|policy|option|policy|policy|option|option|option|option|policy|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|option|option|option|option|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|option|option|option|option|policy|option|option|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|policy|option|policy|option|policy|option|policy|option|policy|policy|policy|policy|option|option|option|option|option|policy|policy|option|option|option|policy|option|option|option|option|policy|option|option|policy|option|policy|policy|option|option|policy|option|policy|policy|policy|option|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|option|option|policy|option|option|option|policy|option|policy|option|policy|policy|option|option|policy|policy|option|option|option|policy|option|policy|option|option|policy|policy|option|option|option|policy|option|policy|policy|option|option|policy|option|option|policy|option|policy|policy|policy|policy|policy|option|option|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|option|option|option|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|option|policy|option|policy|option|policy|policy|policy|policy|policy|option|option|option|option|policy|option|option|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|option|policy|policy|option|option|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|policy|policy|policy|option|option|option|option|option|policy|option|policy|option|policy|option|option|policy|option|policy|option|option|policy|policy|option|option|option|policy|option|policy|policy|policy|policy|policy|option|option|option|policy|policy|option|policy|policy|policy|option|policy|option|policy|option|option|policy|option|policy|option|option|policy|option|policy|option|option|policy|policy|option|option|option|policy|policy|option|option|policy|option|option|option|option|option|option|policy|option|option|policy|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|option|option|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|policy|option|policy|policy|policy|option|option|option|policy|policy|option|policy|option|policy|policy|policy|option|policy|policy|policy|policy|option|policy|option|policy|option|option|policy|policy|option|option|option|option|option|option|policy|policy|option|policy|policy|option|policy|option|policy|policy|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|option|policy|option|policy|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|policy|option|policy|policy|option|option|policy|option|policy|policy|option|option|option|option|policy|policy|policy|policy|option|policy|option|option|policy|option|option|option|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|option|policy|option|policy|policy|policy|option|option|option|policy|policy|option|option|option|policy|option|option|option|option|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|policy|option|policy|option|policy|option|policy|policy|policy|option|policy|policy|policy|option|option|policy|policy|option|option|option|policy|policy|option|policy|option|policy|policy|policy|policy|option|option|policy|policy|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|option|option|policy|option|option|policy|option|option|policy|option|option|option|policy|policy|policy|policy|option|policy|option|policy|policy|option|policy|policy|option|option|policy|policy|option|policy|policy|option|option|policy|policy|option|option|policy|policy|policy|option|policy|option|option|option|policy|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|option|option|policy|policy|option|option|option|policy|policy|option|policy|policy|policy|option|option|policy|option|policy|policy|option|policy|policy|policy|policy|option|policy|policy|option|policy|policy|option|option|option|policy|option|policy|option|policy|policy|option|option|option|option|policy|option|option|option|policy|policy|policy|policy|option|option|option|policy|option|option|policy|policy|option|option|policy|policy|policy|policy|policy|policy|policy|policy|policy|option|option|option|option|option|policy|option|option|policy|policy|option|policy|option|option|option|option|policy|policy|option|option|option|policy|policy|option|policy|option|policy|option|option|option|policy|policy|option|policy|option|option|option|policy|option|policy|option|policy|option|option|option|option|policy|option|policy|option|policy|option|policy|option|policy|option|policy|option|policy|policy|option|option|option|option|option|option|policy|policy|policy|option|option|option|option|option|policy|policy|policy|policy|option|policy|option|option|option|policy|policy|option|policy|policy|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|policy|option|policy|policy|option|option|option|option|policy|option|policy|option|option|policy|option|option|policy|option|option|option|policy|option|option|option|policy|option|option|option|option|policy|option|option|option|policy|option|option|option|policy|option|policy|option|option|option|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|option|option|policy|policy|policy|option|option|policy|option|option|option|policy|policy|policy|option|policy|option|policy|option|policy|option|policy|policy|policy|policy|option|option|option|policy|policy|option|option|policy|policy|policy|policy|option|policy|policy|option|option|option|policy|option|policy|option|policy|option|option|option|option|option|policy|option|option|option|policy|policy|option|policy|policy|option|policy|option|option|policy|policy|policy|policy|option|option|policy|policy|policy|option|policy|policy|policy|policy|policy|policy|option
